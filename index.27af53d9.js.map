{"mappings":"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,mDACA,yDACA,+DACA,sEACAjT,IAAI60F,IAENoB,GAAeT,GAAKQ,ICZTE,GAAS,IAAIz2F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAjT,IAAI60F,IAENsB,GAAeX,GAAKU,ICZTE,GAAS,IAAI32F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAjT,IAAI60F,IAENwB,GAAeb,GAAKY,ICZTE,GAAS,IAAI72F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAjT,IAAI60F,IAEN0B,GAAef,GAAKc,ICZTE,GAAS,IAAI/2F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAjT,IAAI60F,IAEN4B,GAAejB,GAAKgB,ICZTE,GAAS,IAAIj3F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAjT,IAAI60F,IAEN8B,GAAenB,GAAKkB,ICZTE,GAAS,IAAIn3F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAjT,IAAI60F,IAENgC,GAAerB,GAAKoB,ICVTE,GAAS,IAAIr3F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAjT,IAAI60F,IAENkC,GAAevB,GAAKsB,ICVTE,GAAS,IAAIv3F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAjT,IAAI60F,IAENoC,GAAezB,GAAKwB,ICVTE,GAAS,IAAIz3F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAjT,IAAI60F,IAENsC,GAAe3B,GAAK0B,ICVTE,GAAS,IAAI33F,MAAM,GAAGwT,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAjT,IAAI60F,IAENwC,GAAe7B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","sources":["src/assets/data/regulations.json","node_modules/d3-array/src/ascending.js","node_modules/d3-array/src/bisector.js","node_modules/d3-array/src/number.js","node_modules/d3-array/src/bisect.js","node_modules/d3-array/src/count.js","node_modules/d3-array/src/cross.js","node_modules/d3-array/src/cumsum.js","node_modules/d3-array/src/descending.js","node_modules/d3-array/src/variance.js","node_modules/d3-array/src/deviation.js","node_modules/d3-array/src/extent.js","node_modules/d3-array/src/fsum.js","node_modules/internmap/src/index.js","node_modules/d3-array/src/identity.js","node_modules/d3-array/src/group.js","node_modules/d3-array/src/permute.js","node_modules/d3-array/src/sort.js","node_modules/d3-array/src/groupSort.js","node_modules/d3-array/src/array.js","node_modules/d3-array/src/constant.js","node_modules/d3-array/src/ticks.js","node_modules/d3-array/src/nice.js","node_modules/d3-array/src/threshold/sturges.js","node_modules/d3-array/src/bin.js","node_modules/d3-array/src/max.js","node_modules/d3-array/src/min.js","node_modules/d3-array/src/quickselect.js","node_modules/d3-array/src/quantile.js","node_modules/d3-array/src/threshold/freedmanDiaconis.js","node_modules/d3-array/src/threshold/scott.js","node_modules/d3-array/src/maxIndex.js","node_modules/d3-array/src/mean.js","node_modules/d3-array/src/median.js","node_modules/d3-array/src/merge.js","node_modules/d3-array/src/minIndex.js","node_modules/d3-array/src/mode.js","node_modules/d3-array/src/pairs.js","node_modules/d3-array/src/range.js","node_modules/d3-array/src/rank.js","node_modules/d3-array/src/least.js","node_modules/d3-array/src/leastIndex.js","node_modules/d3-array/src/greatest.js","node_modules/d3-array/src/greatestIndex.js","node_modules/d3-array/src/scan.js","node_modules/d3-array/src/shuffle.js","node_modules/d3-array/src/sum.js","node_modules/d3-array/src/transpose.js","node_modules/d3-array/src/zip.js","node_modules/d3-array/src/every.js","node_modules/d3-array/src/some.js","node_modules/d3-array/src/filter.js","node_modules/d3-array/src/map.js","node_modules/d3-array/src/reduce.js","node_modules/d3-array/src/reverse.js","node_modules/d3-array/src/difference.js","node_modules/d3-array/src/disjoint.js","node_modules/d3-array/src/intersection.js","node_modules/d3-array/src/superset.js","node_modules/d3-array/src/subset.js","node_modules/d3-array/src/union.js","node_modules/d3-axis/src/identity.js","node_modules/d3-axis/src/axis.js","node_modules/d3-dispatch/src/dispatch.js","node_modules/d3-selection/src/namespaces.js","node_modules/d3-selection/src/namespace.js","node_modules/d3-selection/src/creator.js","node_modules/d3-selection/src/selector.js","node_modules/d3-selection/src/array.js","node_modules/d3-selection/src/selectorAll.js","node_modules/d3-selection/src/matcher.js","node_modules/d3-selection/src/selection/selectChild.js","node_modules/d3-selection/src/selection/selectChildren.js","node_modules/d3-selection/src/selection/sparse.js","node_modules/d3-selection/src/selection/enter.js","node_modules/d3-selection/src/constant.js","node_modules/d3-selection/src/selection/data.js","node_modules/d3-selection/src/selection/sort.js","node_modules/d3-selection/src/selection/attr.js","node_modules/d3-selection/src/window.js","node_modules/d3-selection/src/selection/style.js","node_modules/d3-selection/src/selection/property.js","node_modules/d3-selection/src/selection/classed.js","node_modules/d3-selection/src/selection/text.js","node_modules/d3-selection/src/selection/html.js","node_modules/d3-selection/src/selection/raise.js","node_modules/d3-selection/src/selection/lower.js","node_modules/d3-selection/src/selection/insert.js","node_modules/d3-selection/src/selection/remove.js","node_modules/d3-selection/src/selection/clone.js","node_modules/d3-selection/src/selection/on.js","node_modules/d3-selection/src/selection/dispatch.js","node_modules/d3-selection/src/selection/index.js","node_modules/d3-selection/src/selection/select.js","node_modules/d3-selection/src/selection/selectAll.js","node_modules/d3-selection/src/selection/filter.js","node_modules/d3-selection/src/selection/exit.js","node_modules/d3-selection/src/selection/join.js","node_modules/d3-selection/src/selection/merge.js","node_modules/d3-selection/src/selection/order.js","node_modules/d3-selection/src/selection/call.js","node_modules/d3-selection/src/selection/nodes.js","node_modules/d3-selection/src/selection/node.js","node_modules/d3-selection/src/selection/size.js","node_modules/d3-selection/src/selection/empty.js","node_modules/d3-selection/src/selection/each.js","node_modules/d3-selection/src/selection/append.js","node_modules/d3-selection/src/selection/datum.js","node_modules/d3-selection/src/selection/iterator.js","node_modules/d3-selection/src/select.js","node_modules/d3-selection/src/create.js","node_modules/d3-selection/src/local.js","node_modules/d3-selection/src/sourceEvent.js","node_modules/d3-selection/src/pointer.js","node_modules/d3-selection/src/pointers.js","node_modules/d3-selection/src/selectAll.js","node_modules/d3-drag/src/noevent.js","node_modules/d3-drag/src/nodrag.js","node_modules/d3-drag/src/constant.js","node_modules/d3-drag/src/event.js","node_modules/d3-drag/src/drag.js","node_modules/d3-color/src/define.js","node_modules/d3-color/src/color.js","node_modules/d3-color/src/math.js","node_modules/d3-color/src/lab.js","node_modules/d3-color/src/cubehelix.js","node_modules/d3-interpolate/src/basis.js","node_modules/d3-interpolate/src/basisClosed.js","node_modules/d3-interpolate/src/constant.js","node_modules/d3-interpolate/src/color.js","node_modules/d3-interpolate/src/rgb.js","node_modules/d3-interpolate/src/numberArray.js","node_modules/d3-interpolate/src/array.js","node_modules/d3-interpolate/src/date.js","node_modules/d3-interpolate/src/number.js","node_modules/d3-interpolate/src/object.js","node_modules/d3-interpolate/src/string.js","node_modules/d3-interpolate/src/value.js","node_modules/d3-interpolate/src/discrete.js","node_modules/d3-interpolate/src/hue.js","node_modules/d3-interpolate/src/round.js","node_modules/d3-interpolate/src/transform/decompose.js","node_modules/d3-interpolate/src/transform/parse.js","node_modules/d3-interpolate/src/transform/index.js","node_modules/d3-interpolate/src/zoom.js","node_modules/d3-interpolate/src/hsl.js","node_modules/d3-interpolate/src/lab.js","node_modules/d3-interpolate/src/hcl.js","node_modules/d3-interpolate/src/cubehelix.js","node_modules/d3-interpolate/src/piecewise.js","node_modules/d3-interpolate/src/quantize.js","node_modules/d3-timer/src/timer.js","node_modules/d3-timer/src/timeout.js","node_modules/d3-timer/src/interval.js","node_modules/d3-transition/src/transition/schedule.js","node_modules/d3-transition/src/interrupt.js","node_modules/d3-transition/src/transition/tween.js","node_modules/d3-transition/src/transition/interpolate.js","node_modules/d3-transition/src/transition/attr.js","node_modules/d3-transition/src/transition/attrTween.js","node_modules/d3-transition/src/transition/delay.js","node_modules/d3-transition/src/transition/duration.js","node_modules/d3-transition/src/transition/ease.js","node_modules/d3-transition/src/transition/on.js","node_modules/d3-transition/src/transition/selection.js","node_modules/d3-transition/src/transition/style.js","node_modules/d3-transition/src/transition/styleTween.js","node_modules/d3-transition/src/transition/textTween.js","node_modules/d3-transition/src/transition/index.js","node_modules/d3-transition/src/transition/select.js","node_modules/d3-transition/src/transition/selectAll.js","node_modules/d3-transition/src/transition/filter.js","node_modules/d3-transition/src/transition/merge.js","node_modules/d3-transition/src/transition/transition.js","node_modules/d3-transition/src/transition/text.js","node_modules/d3-transition/src/transition/remove.js","node_modules/d3-transition/src/transition/easeVarying.js","node_modules/d3-transition/src/transition/end.js","node_modules/d3-ease/src/linear.js","node_modules/d3-ease/src/quad.js","node_modules/d3-ease/src/cubic.js","node_modules/d3-ease/src/poly.js","node_modules/d3-ease/src/sin.js","node_modules/d3-ease/src/math.js","node_modules/d3-ease/src/exp.js","node_modules/d3-ease/src/circle.js","node_modules/d3-ease/src/bounce.js","node_modules/d3-ease/src/back.js","node_modules/d3-ease/src/elastic.js","node_modules/d3-transition/src/selection/transition.js","node_modules/d3-transition/src/selection/index.js","node_modules/d3-transition/src/selection/interrupt.js","node_modules/d3-transition/src/active.js","node_modules/d3-brush/src/constant.js","node_modules/d3-brush/src/event.js","node_modules/d3-brush/src/noevent.js","node_modules/d3-brush/src/brush.js","node_modules/d3-chord/src/math.js","node_modules/d3-chord/src/chord.js","node_modules/d3-path/src/path.js","node_modules/d3-chord/src/array.js","node_modules/d3-chord/src/constant.js","node_modules/d3-chord/src/ribbon.js","node_modules/d3-contour/src/array.js","node_modules/d3-contour/src/ascending.js","node_modules/d3-contour/src/constant.js","node_modules/d3-contour/src/contains.js","node_modules/d3-contour/src/noop.js","node_modules/d3-contour/src/contours.js","node_modules/d3-contour/src/area.js","node_modules/d3-contour/src/blur.js","node_modules/d3-contour/src/density.js","node_modules/robust-predicates/esm/util.js","node_modules/robust-predicates/esm/orient2d.js","node_modules/robust-predicates/esm/orient3d.js","node_modules/robust-predicates/esm/incircle.js","node_modules/robust-predicates/esm/insphere.js","node_modules/delaunator/index.js","node_modules/d3-delaunay/src/path.js","node_modules/d3-delaunay/src/polygon.js","node_modules/d3-delaunay/src/voronoi.js","node_modules/d3-delaunay/src/delaunay.js","node_modules/d3-dsv/src/dsv.js","node_modules/d3-dsv/src/csv.js","node_modules/d3-dsv/src/tsv.js","node_modules/d3-dsv/src/autoType.js","node_modules/d3-fetch/src/blob.js","node_modules/d3-fetch/src/buffer.js","node_modules/d3-fetch/src/text.js","node_modules/d3-fetch/src/dsv.js","node_modules/d3-fetch/src/image.js","node_modules/d3-fetch/src/json.js","node_modules/d3-fetch/src/xml.js","node_modules/d3-force/src/center.js","node_modules/d3-quadtree/src/add.js","node_modules/d3-quadtree/src/quad.js","node_modules/d3-quadtree/src/x.js","node_modules/d3-quadtree/src/y.js","node_modules/d3-quadtree/src/quadtree.js","node_modules/d3-force/src/constant.js","node_modules/d3-force/src/jiggle.js","node_modules/d3-force/src/collide.js","node_modules/d3-force/src/link.js","node_modules/d3-quadtree/src/cover.js","node_modules/d3-quadtree/src/data.js","node_modules/d3-quadtree/src/extent.js","node_modules/d3-quadtree/src/find.js","node_modules/d3-quadtree/src/remove.js","node_modules/d3-quadtree/src/root.js","node_modules/d3-quadtree/src/size.js","node_modules/d3-quadtree/src/visit.js","node_modules/d3-quadtree/src/visitAfter.js","node_modules/d3-force/src/simulation.js","node_modules/d3-force/src/lcg.js","node_modules/d3-force/src/manyBody.js","node_modules/d3-force/src/radial.js","node_modules/d3-force/src/x.js","node_modules/d3-force/src/y.js","node_modules/d3-format/src/formatDecimal.js","node_modules/d3-format/src/exponent.js","node_modules/d3-format/src/formatSpecifier.js","node_modules/d3-format/src/formatPrefixAuto.js","node_modules/d3-format/src/formatRounded.js","node_modules/d3-format/src/formatTypes.js","node_modules/d3-format/src/identity.js","node_modules/d3-format/src/locale.js","node_modules/d3-format/src/defaultLocale.js","node_modules/d3-format/src/formatGroup.js","node_modules/d3-format/src/formatNumerals.js","node_modules/d3-format/src/formatTrim.js","node_modules/d3-format/src/precisionFixed.js","node_modules/d3-format/src/precisionPrefix.js","node_modules/d3-format/src/precisionRound.js","node_modules/d3-geo/src/math.js","node_modules/d3-geo/src/noop.js","node_modules/d3-geo/src/stream.js","node_modules/d3-geo/src/area.js","node_modules/d3-geo/src/bounds.js","node_modules/d3-geo/src/cartesian.js","node_modules/d3-geo/src/centroid.js","node_modules/d3-geo/src/constant.js","node_modules/d3-geo/src/compose.js","node_modules/d3-geo/src/rotation.js","node_modules/d3-geo/src/circle.js","node_modules/d3-geo/src/clip/buffer.js","node_modules/d3-geo/src/pointEqual.js","node_modules/d3-geo/src/clip/rejoin.js","node_modules/d3-geo/src/polygonContains.js","node_modules/d3-geo/src/clip/index.js","node_modules/d3-geo/src/clip/antimeridian.js","node_modules/d3-geo/src/clip/circle.js","node_modules/d3-geo/src/clip/rectangle.js","node_modules/d3-geo/src/length.js","node_modules/d3-geo/src/clip/line.js","node_modules/d3-geo/src/clip/extent.js","node_modules/d3-geo/src/distance.js","node_modules/d3-geo/src/contains.js","node_modules/d3-geo/src/graticule.js","node_modules/d3-geo/src/interpolate.js","node_modules/d3-geo/src/identity.js","node_modules/d3-geo/src/path/area.js","node_modules/d3-geo/src/path/bounds.js","node_modules/d3-geo/src/path/centroid.js","node_modules/d3-geo/src/path/context.js","node_modules/d3-geo/src/path/measure.js","node_modules/d3-geo/src/path/string.js","node_modules/d3-geo/src/path/index.js","node_modules/d3-geo/src/transform.js","node_modules/d3-geo/src/projection/fit.js","node_modules/d3-geo/src/projection/resample.js","node_modules/d3-geo/src/projection/index.js","node_modules/d3-geo/src/projection/conic.js","node_modules/d3-geo/src/projection/conicEqualArea.js","node_modules/d3-geo/src/projection/cylindricalEqualArea.js","node_modules/d3-geo/src/projection/albers.js","node_modules/d3-geo/src/projection/albersUsa.js","node_modules/d3-geo/src/projection/azimuthal.js","node_modules/d3-geo/src/projection/azimuthalEqualArea.js","node_modules/d3-geo/src/projection/azimuthalEquidistant.js","node_modules/d3-geo/src/projection/mercator.js","node_modules/d3-geo/src/projection/conicConformal.js","node_modules/d3-geo/src/projection/equirectangular.js","node_modules/d3-geo/src/projection/conicEquidistant.js","node_modules/d3-geo/src/projection/equalEarth.js","node_modules/d3-geo/src/projection/gnomonic.js","node_modules/d3-geo/src/projection/identity.js","node_modules/d3-geo/src/projection/naturalEarth1.js","node_modules/d3-geo/src/projection/orthographic.js","node_modules/d3-geo/src/projection/stereographic.js","node_modules/d3-geo/src/projection/transverseMercator.js","node_modules/d3-hierarchy/src/cluster.js","node_modules/d3-hierarchy/src/hierarchy/count.js","node_modules/d3-hierarchy/src/hierarchy/index.js","node_modules/d3-hierarchy/src/accessors.js","node_modules/d3-hierarchy/src/constant.js","node_modules/d3-hierarchy/src/hierarchy/each.js","node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","node_modules/d3-hierarchy/src/hierarchy/find.js","node_modules/d3-hierarchy/src/hierarchy/sum.js","node_modules/d3-hierarchy/src/hierarchy/sort.js","node_modules/d3-hierarchy/src/hierarchy/path.js","node_modules/d3-hierarchy/src/hierarchy/ancestors.js","node_modules/d3-hierarchy/src/hierarchy/descendants.js","node_modules/d3-hierarchy/src/hierarchy/leaves.js","node_modules/d3-hierarchy/src/hierarchy/links.js","node_modules/d3-hierarchy/src/hierarchy/iterator.js","node_modules/d3-hierarchy/src/lcg.js","node_modules/d3-hierarchy/src/pack/enclose.js","node_modules/d3-hierarchy/src/array.js","node_modules/d3-hierarchy/src/pack/siblings.js","node_modules/d3-hierarchy/src/pack/index.js","node_modules/d3-hierarchy/src/treemap/round.js","node_modules/d3-hierarchy/src/treemap/dice.js","node_modules/d3-hierarchy/src/partition.js","node_modules/d3-hierarchy/src/stratify.js","node_modules/d3-hierarchy/src/tree.js","node_modules/d3-hierarchy/src/treemap/slice.js","node_modules/d3-hierarchy/src/treemap/squarify.js","node_modules/d3-hierarchy/src/treemap/index.js","node_modules/d3-hierarchy/src/treemap/binary.js","node_modules/d3-hierarchy/src/treemap/sliceDice.js","node_modules/d3-hierarchy/src/treemap/resquarify.js","node_modules/d3-polygon/src/area.js","node_modules/d3-polygon/src/centroid.js","node_modules/d3-polygon/src/hull.js","node_modules/d3-polygon/src/cross.js","node_modules/d3-polygon/src/contains.js","node_modules/d3-polygon/src/length.js","node_modules/d3-random/src/defaultSource.js","node_modules/d3-random/src/uniform.js","node_modules/d3-random/src/int.js","node_modules/d3-random/src/normal.js","node_modules/d3-random/src/logNormal.js","node_modules/d3-random/src/irwinHall.js","node_modules/d3-random/src/bates.js","node_modules/d3-random/src/exponential.js","node_modules/d3-random/src/pareto.js","node_modules/d3-random/src/bernoulli.js","node_modules/d3-random/src/geometric.js","node_modules/d3-random/src/gamma.js","node_modules/d3-random/src/beta.js","node_modules/d3-random/src/binomial.js","node_modules/d3-random/src/weibull.js","node_modules/d3-random/src/cauchy.js","node_modules/d3-random/src/logistic.js","node_modules/d3-random/src/poisson.js","node_modules/d3-random/src/lcg.js","node_modules/d3-scale/src/init.js","node_modules/d3-scale/src/ordinal.js","node_modules/d3-scale/src/band.js","node_modules/d3-scale/src/number.js","node_modules/d3-scale/src/continuous.js","node_modules/d3-scale/src/constant.js","node_modules/d3-scale/src/tickFormat.js","node_modules/d3-scale/src/linear.js","node_modules/d3-scale/src/identity.js","node_modules/d3-scale/src/nice.js","node_modules/d3-scale/src/log.js","node_modules/d3-scale/src/symlog.js","node_modules/d3-scale/src/pow.js","node_modules/d3-scale/src/radial.js","node_modules/d3-scale/src/quantile.js","node_modules/d3-scale/src/quantize.js","node_modules/d3-scale/src/threshold.js","node_modules/d3-time/src/interval.js","node_modules/d3-time/src/millisecond.js","node_modules/d3-time/src/second.js","node_modules/d3-time/src/duration.js","node_modules/d3-time/src/minute.js","node_modules/d3-time/src/hour.js","node_modules/d3-time/src/day.js","node_modules/d3-time/src/week.js","node_modules/d3-time/src/month.js","node_modules/d3-time/src/year.js","node_modules/d3-time/src/utcMinute.js","node_modules/d3-time/src/utcHour.js","node_modules/d3-time/src/utcDay.js","node_modules/d3-time/src/utcWeek.js","node_modules/d3-time/src/utcMonth.js","node_modules/d3-time/src/utcYear.js","node_modules/d3-time/src/ticks.js","node_modules/d3-time-format/src/locale.js","node_modules/d3-time-format/src/defaultLocale.js","node_modules/d3-time-format/src/isoFormat.js","node_modules/d3-time-format/src/isoParse.js","node_modules/d3-scale/src/time.js","node_modules/d3-scale/src/utcTime.js","node_modules/d3-scale/src/sequential.js","node_modules/d3-scale/src/sequentialQuantile.js","node_modules/d3-scale/src/diverging.js","node_modules/d3-scale-chromatic/src/colors.js","node_modules/d3-scale-chromatic/src/categorical/category10.js","node_modules/d3-scale-chromatic/src/categorical/Accent.js","node_modules/d3-scale-chromatic/src/categorical/Dark2.js","node_modules/d3-scale-chromatic/src/categorical/Paired.js","node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","node_modules/d3-scale-chromatic/src/categorical/Set1.js","node_modules/d3-scale-chromatic/src/categorical/Set2.js","node_modules/d3-scale-chromatic/src/categorical/Set3.js","node_modules/d3-scale-chromatic/src/categorical/Tableau10.js","node_modules/d3-scale-chromatic/src/ramp.js","node_modules/d3-scale-chromatic/src/diverging/BrBG.js","node_modules/d3-scale-chromatic/src/diverging/PRGn.js","node_modules/d3-scale-chromatic/src/diverging/PiYG.js","node_modules/d3-scale-chromatic/src/diverging/PuOr.js","node_modules/d3-scale-chromatic/src/diverging/RdBu.js","node_modules/d3-scale-chromatic/src/diverging/RdGy.js","node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","node_modules/d3-scale-chromatic/src/diverging/Spectral.js","node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js","node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","node_modules/d3-shape/src/constant.js","node_modules/d3-shape/src/math.js","node_modules/d3-shape/src/arc.js","node_modules/d3-shape/src/array.js","node_modules/d3-shape/src/curve/linear.js","node_modules/d3-shape/src/point.js","node_modules/d3-shape/src/line.js","node_modules/d3-shape/src/area.js","node_modules/d3-shape/src/descending.js","node_modules/d3-shape/src/identity.js","node_modules/d3-shape/src/pie.js","node_modules/d3-shape/src/curve/radial.js","node_modules/d3-shape/src/lineRadial.js","node_modules/d3-shape/src/areaRadial.js","node_modules/d3-shape/src/pointRadial.js","node_modules/d3-shape/src/curve/bump.js","node_modules/d3-shape/src/link.js","node_modules/d3-shape/src/symbol/asterisk.js","node_modules/d3-shape/src/symbol/circle.js","node_modules/d3-shape/src/symbol/cross.js","node_modules/d3-shape/src/symbol/diamond.js","node_modules/d3-shape/src/symbol/diamond2.js","node_modules/d3-shape/src/symbol/plus.js","node_modules/d3-shape/src/symbol/square.js","node_modules/d3-shape/src/symbol/square2.js","node_modules/d3-shape/src/symbol/star.js","node_modules/d3-shape/src/symbol/triangle.js","node_modules/d3-shape/src/symbol/triangle2.js","node_modules/d3-shape/src/symbol/wye.js","node_modules/d3-shape/src/symbol/x.js","node_modules/d3-shape/src/symbol.js","node_modules/d3-shape/src/noop.js","node_modules/d3-shape/src/curve/basis.js","node_modules/d3-shape/src/curve/basisClosed.js","node_modules/d3-shape/src/curve/basisOpen.js","node_modules/d3-shape/src/curve/bundle.js","node_modules/d3-shape/src/curve/cardinal.js","node_modules/d3-shape/src/curve/cardinalClosed.js","node_modules/d3-shape/src/curve/cardinalOpen.js","node_modules/d3-shape/src/curve/catmullRom.js","node_modules/d3-shape/src/curve/catmullRomClosed.js","node_modules/d3-shape/src/curve/catmullRomOpen.js","node_modules/d3-shape/src/curve/linearClosed.js","node_modules/d3-shape/src/curve/monotone.js","node_modules/d3-shape/src/curve/natural.js","node_modules/d3-shape/src/curve/step.js","node_modules/d3-shape/src/offset/none.js","node_modules/d3-shape/src/order/none.js","node_modules/d3-shape/src/stack.js","node_modules/d3-shape/src/offset/expand.js","node_modules/d3-shape/src/offset/diverging.js","node_modules/d3-shape/src/offset/silhouette.js","node_modules/d3-shape/src/offset/wiggle.js","node_modules/d3-shape/src/order/appearance.js","node_modules/d3-shape/src/order/ascending.js","node_modules/d3-shape/src/order/descending.js","node_modules/d3-shape/src/order/insideOut.js","node_modules/d3-shape/src/order/reverse.js","node_modules/d3-zoom/src/constant.js","node_modules/d3-zoom/src/event.js","node_modules/d3-zoom/src/transform.js","node_modules/d3-zoom/src/noevent.js","node_modules/d3-zoom/src/zoom.js","src/scripts/preprocess.ts","src/scripts/utils.ts","node_modules/d3-collection/src/map.js","node_modules/d3-collection/src/set.js","node_modules/d3-tip/node_modules/d3-selection/src/selector.js","node_modules/d3-tip/node_modules/d3-selection/src/selectorAll.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/sparse.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/enter.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/data.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/sort.js","node_modules/d3-tip/node_modules/d3-selection/src/namespaces.js","node_modules/d3-tip/node_modules/d3-selection/src/namespace.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/attr.js","node_modules/d3-tip/node_modules/d3-selection/src/window.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/style.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/property.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/classed.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/text.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/html.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/raise.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/lower.js","node_modules/d3-tip/node_modules/d3-selection/src/creator.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/insert.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/remove.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/clone.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/on.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/dispatch.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/index.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/select.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/selectAll.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/filter.js","node_modules/d3-tip/node_modules/d3-selection/src/matcher.js","node_modules/d3-tip/node_modules/d3-selection/src/constant.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/exit.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/join.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/merge.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/order.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/call.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/nodes.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/node.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/size.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/empty.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/each.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/append.js","node_modules/d3-tip/node_modules/d3-selection/src/selection/datum.js","node_modules/d3-tip/node_modules/d3-selection/src/select.js","node_modules/d3-tip/index.js","src/scripts/viz.ts","src/assets/data/parsed_quali.json","src/scripts/scroll-event.ts","src/scripts/visibility-manager.ts","src/assets/data/parsed_races.json","src/scripts/onboarding-manager.ts","src/scripts/content-manager.ts","src/index.ts"],"sourcesContent":["{\r\n    \"1994\": [\r\n        {\r\n            \"description\": \"Toute assistance électronique bannie (TC, launch control, ABS, suspension active). Limites variées sur les tailles des ailes arrières et avant. Mise en place d'une limitation de vitesse dans les stands\",\r\n            \"type\": \"electronique\"\r\n        }\r\n    ],\r\n    \"1995\": [\r\n        {\r\n            \"description\": \"Limitation des moteurs à 3.0L atmosphériques, pour ralentir les voitures\",\r\n            \"type\": \"moteur\"\r\n        }\r\n    ],\r\n    \"1999\": [\r\n        {\r\n            \"description\": \"Réduction de la largeur des voitures (2m -> 1.8m). Bannissement des ailes flexibles.\",\r\n            \"type\": \"aero\"\r\n        }\r\n    ],\r\n    \"2002\": [\r\n        {\r\n            \"description\": \"TC de nouveau autorisé, launch control aussi\",\r\n            \"type\": \"electronique\"\r\n        }\r\n    ],\r\n    \"2004\": [\r\n        {\r\n            \"description\": \"Poids minimum 600kg. Moteurs doivent durer minimum 2 weekends, 10 places de pénalité en cas de changement\",\r\n            \"type\": \"moteur\"\r\n        }\r\n    ],\r\n    \"2006\": [\r\n        {\r\n            \"description\": \"Moteurs limités à 2.4L et introduction de V8 pour limiter la puissance (mais les teams étaient autorisées à utiliser un V10 pendant un moment si elles n'avaient pas de V8 prêt). Obligation moteur en V 90°\",\r\n            \"type\": \"moteur\"\r\n        }\r\n    ],\r\n    \"2007\": [\r\n        {\r\n            \"description\": \"Limite à 19000 rpm. Spécifications sur le moteur gelées pour limiter les coûts de développement\",\r\n            \"type\": \"moteur\"\r\n        }\r\n    ],\r\n    \"2009\": [\r\n        {\r\n            \"description\": \"Limite à 18000 rpm. Banissement de presque tous les éléments aérodynamiques autres que l'aile avant et arrière\",\r\n            \"type\": \"moteur\"\r\n        }\r\n    ],\r\n    \"2010\": [\r\n        {\r\n            \"description\": \"Restriction des coûts drastique. Introduction du DRS\",\r\n            \"type\": \"cout\"\r\n        }\r\n    ],\r\n    \"2014\": [\r\n        {\r\n            \"description\": \"Changement total des moteurs : on passe à 1.6L compressés, boite 8, hybride. Moteurs doivent durer minimum 4000km\",\r\n            \"type\": \"moteur\"\r\n        }\r\n    ],\r\n    \"2017\": [\r\n        {\r\n            \"description\": \"Ré augmentation de la largeur des voitures de 1.8m à 2m\",\r\n            \"type\": \"aero\"\r\n        }\r\n    ]\r\n}","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function bisector(f) {\n  let delta = f;\n  let compare1 = f;\n  let compare2 = f;\n\n  if (f.length !== 2) {\n    delta = (d, x) => f(d) - x;\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n","function length(array) {\n  return array.length | 0;\n}\n\nfunction empty(length) {\n  return !(length > 0);\n}\n\nfunction arrayify(values) {\n  return typeof values !== \"object\" || \"length\" in values ? values : Array.from(values);\n}\n\nfunction reducer(reduce) {\n  return values => reduce(...values);\n}\n\nexport default function cross(...values) {\n  const reduce = typeof values[values.length - 1] === \"function\" && reducer(values.pop());\n  values = values.map(arrayify);\n  const lengths = values.map(length);\n  const j = values.length - 1;\n  const index = new Array(j + 1).fill(0);\n  const product = [];\n  if (j < 0 || lengths.some(empty)) return product;\n  while (true) {\n    product.push(index.map((j, i) => values[i][j]));\n    let i = j;\n    while (++index[i] === lengths[i]) {\n      if (i === 0) return reduce ? product.map(reduce) : product;\n      index[i--] = 0;\n    }\n  }\n}\n","export default function cumsum(values, valueof) {\n  var sum = 0, index = 0;\n  return Float64Array.from(values, valueof === undefined\n    ? v => (sum += +v || 0)\n    : v => (sum += +valueof(v, index++, values) || 0));\n}","export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n","export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n","import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n","export class InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nexport class InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(key);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n","export default function identity(x) {\n  return x;\n}\n","import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nfunction flatten(groups, keys) {\n  for (let i = 1, n = keys.length; i < n; ++i) {\n    groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));\n  }\n  return groups;\n}\n\nexport function flatGroup(values, ...keys) {\n  return flatten(groups(values, ...keys), keys);\n}\n\nexport function flatRollup(values, reduce, ...keys) {\n  return flatten(rollups(values, reduce, ...keys), keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n","export default function permute(source, keys) {\n  return Array.from(keys, key => source[key]);\n}\n","import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n","import ascending from \"./ascending.js\";\nimport group, {rollup} from \"./group.js\";\nimport sort from \"./sort.js\";\n\nexport default function groupSort(values, reduce, key) {\n  return (reduce.length !== 2\n    ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)))\n    : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))))\n    .map(([key]) => key);\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function constant(x) {\n  return () => x;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","import {tickIncrement} from \"./ticks.js\";\n\nexport default function nice(start, stop, count) {\n  let prestep;\n  while (true) {\n    const step = tickIncrement(start, stop, count);\n    if (step === prestep || step === 0 || !isFinite(step)) {\n      return [start, stop];\n    } else if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n    }\n    prestep = step;\n  }\n}\n","import count from \"../count.js\";\n\nexport default function thresholdSturges(values) {\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\n}\n","import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import {ascendingDefined, compareDefined} from \"./sort.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare) {\n  compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import count from \"../count.js\";\nimport quantile from \"../quantile.js\";\n\nexport default function thresholdFreedmanDiaconis(values, min, max) {\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));\n}\n","import count from \"../count.js\";\nimport deviation from \"../deviation.js\";\n\nexport default function thresholdScott(values, min, max) {\n  return Math.ceil((max - min) * Math.cbrt(count(values)) / (3.49 * deviation(values)));\n}\n","export default function maxIndex(values, valueof) {\n  let max;\n  let maxIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  }\n  return maxIndex;\n}\n","export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n","import quantile from \"./quantile.js\";\n\nexport default function median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n","export default function minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n","import {InternMap} from \"internmap\";\n\nexport default function mode(values, valueof) {\n  const counts = new InternMap();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  }\n  let modeValue;\n  let modeCount = 0;\n  for (const [value, count] of counts) {\n    if (count > modeCount) {\n      modeCount = count;\n      modeValue = value;\n    }\n  }\n  return modeValue;\n}\n","export default function pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import ascending from \"./ascending.js\";\nimport {ascendingDefined, compareDefined} from \"./sort.js\";\n\nexport default function rank(values, valueof = ascending) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  let V = Array.from(values);\n  const R = new Float64Array(V.length);\n  if (valueof.length !== 2) V = V.map(valueof), valueof = ascending;\n  const compareIndex = (i, j) => valueof(V[i], V[j]);\n  let k, r;\n  Uint32Array\n    .from(V, (_, i) => i)\n    .sort(valueof === ascending ? (i, j) => ascendingDefined(V[i], V[j]) : compareDefined(compareIndex))\n    .forEach((j, i) => {\n      const c = compareIndex(j, k === undefined ? j : k);\n      if (c >= 0) {\n        if (k === undefined || c > 0) k = j, r = i;\n        R[j] = r;\n      } else {\n        R[j] = NaN;\n      }\n    });\n  return R;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function least(values, compare = ascending) {\n  let min;\n  let defined = false;\n  if (compare.length === 1) {\n    let minValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, minValue) < 0\n          : ascending(value, value) === 0) {\n        min = element;\n        minValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, min) < 0\n          : compare(value, value) === 0) {\n        min = value;\n        defined = true;\n      }\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\nimport minIndex from \"./minIndex.js\";\n\nexport default function leastIndex(values, compare = ascending) {\n  if (compare.length === 1) return minIndex(values, compare);\n  let minValue;\n  let min = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (min < 0\n        ? compare(value, value) === 0\n        : compare(value, minValue) < 0) {\n      minValue = value;\n      min = index;\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n","import ascending from \"./ascending.js\";\nimport maxIndex from \"./maxIndex.js\";\n\nexport default function greatestIndex(values, compare = ascending) {\n  if (compare.length === 1) return maxIndex(values, compare);\n  let maxValue;\n  let max = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (max < 0\n        ? compare(value, value) === 0\n        : compare(value, maxValue) > 0) {\n      maxValue = value;\n      max = index;\n    }\n  }\n  return max;\n}\n","import leastIndex from \"./leastIndex.js\";\n\nexport default function scan(values, compare) {\n  const index = leastIndex(values, compare);\n  return index < 0 ? undefined : index;\n}\n","export default shuffler(Math.random);\n\nexport function shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n    while (m) {\n      const i = random() * m-- | 0, t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n    return array;\n  };\n}\n","export default function sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n","import min from \"./min.js\";\n\nexport default function transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function every(values, test) {\n  if (typeof test !== \"function\") throw new TypeError(\"test is not a function\");\n  let index = -1;\n  for (const value of values) {\n    if (!test(value, ++index, values)) {\n      return false;\n    }\n  }\n  return true;\n}\n","export default function some(values, test) {\n  if (typeof test !== \"function\") throw new TypeError(\"test is not a function\");\n  let index = -1;\n  for (const value of values) {\n    if (test(value, ++index, values)) {\n      return true;\n    }\n  }\n  return false;\n}\n","export default function filter(values, test) {\n  if (typeof test !== \"function\") throw new TypeError(\"test is not a function\");\n  const array = [];\n  let index = -1;\n  for (const value of values) {\n    if (test(value, ++index, values)) {\n      array.push(value);\n    }\n  }\n  return array;\n}\n","export default function map(values, mapper) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  if (typeof mapper !== \"function\") throw new TypeError(\"mapper is not a function\");\n  return Array.from(values, (value, index) => mapper(value, index, values));\n}\n","export default function reduce(values, reducer, value) {\n  if (typeof reducer !== \"function\") throw new TypeError(\"reducer is not a function\");\n  const iterator = values[Symbol.iterator]();\n  let done, next, index = -1;\n  if (arguments.length < 3) {\n    ({done, value} = iterator.next());\n    if (done) return;\n    ++index;\n  }\n  while (({done, value: next} = iterator.next()), !done) {\n    value = reducer(value, next, ++index, values);\n  }\n  return value;\n}\n","export default function reverse(values) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  return Array.from(values).reverse();\n}\n","import {InternSet} from \"internmap\";\n\nexport default function difference(values, ...others) {\n  values = new InternSet(values);\n  for (const other of others) {\n    for (const value of other) {\n      values.delete(value);\n    }\n  }\n  return values;\n}\n","import {InternSet} from \"internmap\";\n\nexport default function disjoint(values, other) {\n  const iterator = other[Symbol.iterator](), set = new InternSet();\n  for (const v of values) {\n    if (set.has(v)) return false;\n    let value, done;\n    while (({value, done} = iterator.next())) {\n      if (done) break;\n      if (Object.is(v, value)) return false;\n      set.add(value);\n    }\n  }\n  return true;\n}\n","import {InternSet} from \"internmap\";\n\nexport default function intersection(values, ...others) {\n  values = new InternSet(values);\n  others = others.map(set);\n  out: for (const value of values) {\n    for (const other of others) {\n      if (!other.has(value)) {\n        values.delete(value);\n        continue out;\n      }\n    }\n  }\n  return values;\n}\n\nfunction set(values) {\n  return values instanceof InternSet ? values : new InternSet(values);\n}\n","export default function superset(values, other) {\n  const iterator = values[Symbol.iterator](), set = new Set();\n  for (const o of other) {\n    const io = intern(o);\n    if (set.has(io)) continue;\n    let value, done;\n    while (({value, done} = iterator.next())) {\n      if (done) return false;\n      const ivalue = intern(value);\n      set.add(ivalue);\n      if (Object.is(io, ivalue)) break;\n    }\n  }\n  return true;\n}\n\nfunction intern(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n","import superset from \"./superset.js\";\n\nexport default function subset(values, other) {\n  return superset(other, values);\n}\n","import {InternSet} from \"internmap\";\n\nexport default function union(...others) {\n  const set = new InternSet();\n  for (const other of others) {\n    for (const o of other) {\n      set.add(o);\n    }\n  }\n  return set;\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity.js\";\n\nvar top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return \"translate(\" + x + \",0)\";\n}\n\nfunction translateY(y) {\n  return \"translate(0,\" + y + \")\";\n}\n\nfunction number(scale) {\n  return d => +scale(d);\n}\n\nfunction center(scale, offset) {\n  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;\n  if (scale.round()) offset = Math.round(offset);\n  return d => +scale(d) + offset;\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      offset = typeof window !== \"undefined\" && window.devicePixelRatio > 1 ? 0 : 0.5,\n      k = orient === top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? \"x\" : \"y\",\n      transform = orient === top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + offset,\n        range1 = +range[range.length - 1] + offset,\n        position = (scale.bandwidth ? center : number)(scale.copy(), offset),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(\".domain\").data([null]),\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n        line = tick.select(\"line\"),\n        text = tick.select(\"text\");\n\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\n        .attr(\"class\", \"domain\")\n        .attr(\"stroke\", \"currentColor\"));\n\n    tick = tick.merge(tickEnter);\n\n    line = line.merge(tickEnter.append(\"line\")\n        .attr(\"stroke\", \"currentColor\")\n        .attr(x + \"2\", k * tickSizeInner));\n\n    text = text.merge(tickEnter.append(\"text\")\n        .attr(\"fill\", \"currentColor\")\n        .attr(x, k * spacing)\n        .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n\n      tickExit = tickExit.transition(context)\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute(\"transform\"); });\n\n      tickEnter\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });\n    }\n\n    tickExit.remove();\n\n    path\n        .attr(\"d\", orient === left || orient === right\n            ? (tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H\" + offset + \"V\" + range1 + \"H\" + k * tickSizeOuter : \"M\" + offset + \",\" + range0 + \"V\" + range1)\n            : (tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V\" + offset + \"H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",\" + offset + \"H\" + range1));\n\n    tick\n        .attr(\"opacity\", 1)\n        .attr(\"transform\", function(d) { return transform(position(d) + offset); });\n\n    line\n        .attr(x + \"2\", k * tickSizeInner);\n\n    text\n        .attr(x, k * spacing)\n        .text(format);\n\n    selection.filter(entering)\n        .attr(\"fill\", \"none\")\n        .attr(\"font-size\", 10)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n    selection\n        .each(function() { this.__axis = position; });\n  }\n\n  axis.scale = function(_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function() {\n    return tickArguments = Array.from(arguments), axis;\n  };\n\n  axis.tickArguments = function(_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function(_) {\n    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function(_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function(_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function(_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function(_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function(_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  axis.offset = function(_) {\n    return arguments.length ? (offset = +_, axis) : offset;\n  };\n\n  return axis;\n}\n\nexport function axisTop(scale) {\n  return axis(top, scale);\n}\n\nexport function axisRight(scale) {\n  return axis(right, scale);\n}\n\nexport function axisBottom(scale) {\n  return axis(bottom, scale);\n}\n\nexport function axisLeft(scale) {\n  return axis(left, scale);\n}\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces.js\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n","import namespace from \"./namespace.js\";\nimport {xhtml} from \"./namespaces.js\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","// Given something array like (or null), returns something that is strictly an\n// array. This is used to ensure that array-like objects passed to d3.selectAll\n// or selection.selectAll are converted into proper arrays when creating a\n// selection; we don’t ever want to create a selection backed by a live\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\n// static NodeList as a group, since it safely derived from querySelectorAll.\nexport default function array(x) {\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nexport function childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n","import {childMatcher} from \"../matcher.js\";\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\nexport default function(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","import {childMatcher} from \"../matcher.js\";\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return Array.from(this.children);\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\nexport default function(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === \"object\" && \"length\" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import namespace from \"../namespace.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window.js\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import creator from \"../creator.js\";\nimport selector from \"../selector.js\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","function contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, options) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n","import defaultView from \"../window.js\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","import selection_select from \"./select.js\";\nimport selection_selectAll from \"./selectAll.js\";\nimport selection_selectChild from \"./selectChild.js\";\nimport selection_selectChildren from \"./selectChildren.js\";\nimport selection_filter from \"./filter.js\";\nimport selection_data from \"./data.js\";\nimport selection_enter from \"./enter.js\";\nimport selection_exit from \"./exit.js\";\nimport selection_join from \"./join.js\";\nimport selection_merge from \"./merge.js\";\nimport selection_order from \"./order.js\";\nimport selection_sort from \"./sort.js\";\nimport selection_call from \"./call.js\";\nimport selection_nodes from \"./nodes.js\";\nimport selection_node from \"./node.js\";\nimport selection_size from \"./size.js\";\nimport selection_empty from \"./empty.js\";\nimport selection_each from \"./each.js\";\nimport selection_attr from \"./attr.js\";\nimport selection_style from \"./style.js\";\nimport selection_property from \"./property.js\";\nimport selection_classed from \"./classed.js\";\nimport selection_text from \"./text.js\";\nimport selection_html from \"./html.js\";\nimport selection_raise from \"./raise.js\";\nimport selection_lower from \"./lower.js\";\nimport selection_append from \"./append.js\";\nimport selection_insert from \"./insert.js\";\nimport selection_remove from \"./remove.js\";\nimport selection_clone from \"./clone.js\";\nimport selection_datum from \"./datum.js\";\nimport selection_on from \"./on.js\";\nimport selection_dispatch from \"./dispatch.js\";\nimport selection_iterator from \"./iterator.js\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  selectChild: selection_selectChild,\n  selectChildren: selection_selectChildren,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  selection: selection_selection,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: selection_iterator\n};\n\nexport default selection;\n","import {Selection} from \"./index.js\";\nimport selector from \"../selector.js\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index.js\";\nimport array from \"../array.js\";\nimport selectorAll from \"../selectorAll.js\";\n\nfunction arrayAll(select) {\n  return function() {\n    return array(select.apply(this, arguments));\n  };\n}\n\nexport default function(select) {\n  if (typeof select === \"function\") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","import {Selection} from \"./index.js\";\nimport matcher from \"../matcher.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  if (typeof onenter === \"function\") {\n    enter = onenter(enter);\n    if (enter) enter = enter.selection();\n  } else {\n    enter = enter.append(onenter + \"\");\n  }\n  if (onupdate != null) {\n    update = onupdate(update);\n    if (update) update = update.selection();\n  }\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(context) {\n  var selection = context.selection ? context.selection() : context;\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","import creator from \"../creator.js\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n","import {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","import creator from \"./creator.js\";\nimport select from \"./select.js\";\n\nexport default function(name) {\n  return select(creator(name).call(document.documentElement));\n}\n","var nextId = 0;\n\nexport default function local() {\n  return new Local;\n}\n\nfunction Local() {\n  this._ = \"@\" + (++nextId).toString(36);\n}\n\nLocal.prototype = local.prototype = {\n  constructor: Local,\n  get: function(node) {\n    var id = this._;\n    while (!(id in node)) if (!(node = node.parentNode)) return;\n    return node[id];\n  },\n  set: function(node, value) {\n    return node[this._] = value;\n  },\n  remove: function(node) {\n    return this._ in node && delete node[this._];\n  },\n  toString: function() {\n    return this._;\n  }\n};\n","export default function(event) {\n  let sourceEvent;\n  while (sourceEvent = event.sourceEvent) event = sourceEvent;\n  return event;\n}\n","import sourceEvent from \"./sourceEvent.js\";\n\nexport default function(event, node) {\n  event = sourceEvent(event);\n  if (node === undefined) node = event.currentTarget;\n  if (node) {\n    var svg = node.ownerSVGElement || node;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    if (node.getBoundingClientRect) {\n      var rect = node.getBoundingClientRect();\n      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n    }\n  }\n  return [event.pageX, event.pageY];\n}\n","import pointer from \"./pointer.js\";\nimport sourceEvent from \"./sourceEvent.js\";\n\nexport default function(events, node) {\n  if (events.target) { // i.e., instanceof Event, not TouchList or iterable\n    events = sourceEvent(events);\n    if (node === undefined) node = events.currentTarget;\n    events = events.touches || [events];\n  }\n  return Array.from(events, event => pointer(event, node));\n}\n","import array from \"./array.js\";\nimport {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n      : new Selection([array(selector)], root);\n}\n","// These are typically used in conjunction with noevent to ensure that we can\n// preventDefault on the event.\nexport const nonpassive = {passive: false};\nexport const nonpassivecapture = {capture: true, passive: false};\n\nexport function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {select} from \"d3-selection\";\nimport noevent, {nonpassivecapture} from \"./noevent.js\";\n\nexport default function(view) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", noevent, nonpassivecapture);\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", noevent, nonpassivecapture);\n  } else {\n    root.__noselect = root.style.MozUserSelect;\n    root.style.MozUserSelect = \"none\";\n  }\n}\n\nexport function yesdrag(view, noclick) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", null);\n  if (noclick) {\n    selection.on(\"click.drag\", noevent, nonpassivecapture);\n    setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n  }\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", null);\n  } else {\n    root.style.MozUserSelect = root.__noselect;\n    delete root.__noselect;\n  }\n}\n","export default x => () => x;\n","export default function DragEvent(type, {\n  sourceEvent,\n  subject,\n  target,\n  identifier,\n  active,\n  x, y, dx, dy,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    subject: {value: subject, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    identifier: {value: identifier, enumerable: true, configurable: true},\n    active: {value: active, enumerable: true, configurable: true},\n    x: {value: x, enumerable: true, configurable: true},\n    y: {value: y, enumerable: true, configurable: true},\n    dx: {value: dx, enumerable: true, configurable: true},\n    dy: {value: dy, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n\nDragEvent.prototype.on = function() {\n  var value = this._.on.apply(this._, arguments);\n  return value === this._ ? this : value;\n};\n","import {dispatch} from \"d3-dispatch\";\nimport {select, pointer} from \"d3-selection\";\nimport nodrag, {yesdrag} from \"./nodrag.js\";\nimport noevent, {nonpassive, nonpassivecapture, nopropagation} from \"./noevent.js\";\nimport constant from \"./constant.js\";\nimport DragEvent from \"./event.js\";\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultContainer() {\n  return this.parentNode;\n}\n\nfunction defaultSubject(event, d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = defaultTouchable,\n      gestures = {},\n      listeners = dispatch(\"start\", \"drag\", \"end\"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n\n  function drag(selection) {\n    selection\n        .on(\"mousedown.drag\", mousedowned)\n      .filter(touchable)\n        .on(\"touchstart.drag\", touchstarted)\n        .on(\"touchmove.drag\", touchmoved, nonpassive)\n        .on(\"touchend.drag touchcancel.drag\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  function mousedowned(event, d) {\n    if (touchending || !filter.call(this, event, d)) return;\n    var gesture = beforestart(this, container.call(this, event, d), event, d, \"mouse\");\n    if (!gesture) return;\n    select(event.view)\n      .on(\"mousemove.drag\", mousemoved, nonpassivecapture)\n      .on(\"mouseup.drag\", mouseupped, nonpassivecapture);\n    nodrag(event.view);\n    nopropagation(event);\n    mousemoving = false;\n    mousedownx = event.clientX;\n    mousedowny = event.clientY;\n    gesture(\"start\", event);\n  }\n\n  function mousemoved(event) {\n    noevent(event);\n    if (!mousemoving) {\n      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;\n      mousemoving = dx * dx + dy * dy > clickDistance2;\n    }\n    gestures.mouse(\"drag\", event);\n  }\n\n  function mouseupped(event) {\n    select(event.view).on(\"mousemove.drag mouseup.drag\", null);\n    yesdrag(event.view, mousemoving);\n    noevent(event);\n    gestures.mouse(\"end\", event);\n  }\n\n  function touchstarted(event, d) {\n    if (!filter.call(this, event, d)) return;\n    var touches = event.changedTouches,\n        c = container.call(this, event, d),\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {\n        nopropagation(event);\n        gesture(\"start\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchmoved(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        noevent(event);\n        gesture(\"drag\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchended(event) {\n    var touches = event.changedTouches,\n        n = touches.length, i, gesture;\n\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        nopropagation(event);\n        gesture(\"end\", event, touches[i]);\n      }\n    }\n  }\n\n  function beforestart(that, container, event, d, identifier, touch) {\n    var dispatch = listeners.copy(),\n        p = pointer(touch || event, container), dx, dy,\n        s;\n\n    if ((s = subject.call(that, new DragEvent(\"beforestart\", {\n        sourceEvent: event,\n        target: drag,\n        identifier,\n        active,\n        x: p[0],\n        y: p[1],\n        dx: 0,\n        dy: 0,\n        dispatch\n      }), d)) == null) return;\n\n    dx = s.x - p[0] || 0;\n    dy = s.y - p[1] || 0;\n\n    return function gesture(type, event, touch) {\n      var p0 = p, n;\n      switch (type) {\n        case \"start\": gestures[identifier] = gesture, n = active++; break;\n        case \"end\": delete gestures[identifier], --active; // falls through\n        case \"drag\": p = pointer(touch || event, container), n = active; break;\n      }\n      dispatch.call(\n        type,\n        that,\n        new DragEvent(type, {\n          sourceEvent: event,\n          subject: s,\n          target: drag,\n          identifier,\n          active: n,\n          x: p[0] + dx,\n          y: p[1] + dy,\n          dx: p[0] - p0[0],\n          dy: p[1] - p0[1],\n          dispatch\n        }),\n        d\n      );\n    };\n  }\n\n  drag.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), drag) : filter;\n  };\n\n  drag.container = function(_) {\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : constant(_), drag) : container;\n  };\n\n  drag.subject = function(_) {\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant(_), drag) : subject;\n  };\n\n  drag.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), drag) : touchable;\n  };\n\n  drag.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? drag : value;\n  };\n\n  drag.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n  };\n\n  return drag;\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export const radians = Math.PI / 180;\nexport const degrees = 180 / Math.PI;\n","import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\n// https://observablehq.com/@mbostock/lab-and-rgb\nconst K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) return hcl2lab(o);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n  if (r === g && g === b) x = z = y; else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nexport function gray(l, opacity) {\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\n}\n\nexport default function lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nexport function Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * degrees;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nexport function lch(l, c, h, opacity) {\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nfunction hcl2lab(o) {\n  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n  var h = o.h * radians;\n  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb() {\n    return hcl2lab(this).rgb();\n  }\n}));\n","import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default x => () => x;\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","export default function(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n","import {hue} from \"./color.js\";\n\nexport default function(a, b) {\n  var i = hue(+a, +b);\n  return function(t) {\n    var x = i(t);\n    return x - 360 * Math.floor(x / 360);\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","var epsilon2 = 1e-12;\n\nfunction cosh(x) {\n  return ((x = Math.exp(x)) + 1 / x) / 2;\n}\n\nfunction sinh(x) {\n  return ((x = Math.exp(x)) - 1 / x) / 2;\n}\n\nfunction tanh(x) {\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n}\n\nexport default (function zoomRho(rho, rho2, rho4) {\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function zoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000 * rho / Math.SQRT2;\n\n    return i;\n  }\n\n  zoom.rho = function(_) {\n    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;\n    return zoomRho(_1, _2, _4);\n  };\n\n  return zoom;\n})(Math.SQRT2, 2, 4);\n","import {hsl as colorHsl} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction hsl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n        s = color(start.s, end.s),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.s = s(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hsl(hue);\nexport var hslLong = hsl(color);\n","import {lab as colorLab} from \"d3-color\";\nimport color from \"./color.js\";\n\nexport default function lab(start, end) {\n  var l = color((start = colorLab(start)).l, (end = colorLab(end)).l),\n      a = color(start.a, end.a),\n      b = color(start.b, end.b),\n      opacity = color(start.opacity, end.opacity);\n  return function(t) {\n    start.l = l(t);\n    start.a = a(t);\n    start.b = b(t);\n    start.opacity = opacity(t);\n    return start + \"\";\n  };\n}\n","import {hcl as colorHcl} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction hcl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n        c = color(start.c, end.c),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.c = c(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hcl(hue);\nexport var hclLong = hcl(color);\n","import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n","import {default as value} from \"./value.js\";\n\nexport default function piecewise(interpolate, values) {\n  if (values === undefined) values = interpolate, interpolate = value;\n  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\n  while (i < n) I[i] = interpolate(v, v = values[++i]);\n  return function(t) {\n    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n    return I[i](t - i);\n  };\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","import {Timer} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n","import {Timer, now} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer, total = delay;\n  if (delay == null) return t.restart(callback, delay, time), t;\n  t._restart = t.restart;\n  t.restart = function(callback, delay, time) {\n    delay = +delay, time = time == null ? now() : +time;\n    t._restart(function tick(elapsed) {\n      elapsed += total;\n      t._restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n  }\n  t.restart(callback, delay, time);\n  return t;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n","import {STARTING, ENDING, ENDED} from \"./transition/schedule.js\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n","import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n","import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n","import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n","import {get, init} from \"./schedule.js\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n","import {get, set, init} from \"./schedule.js\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n","import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n","import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule.js\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n","function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n","function textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(value) {\n  var key = \"text\";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, textTween(value));\n}\n","import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr.js\";\nimport transition_attrTween from \"./attrTween.js\";\nimport transition_delay from \"./delay.js\";\nimport transition_duration from \"./duration.js\";\nimport transition_ease from \"./ease.js\";\nimport transition_easeVarying from \"./easeVarying.js\";\nimport transition_filter from \"./filter.js\";\nimport transition_merge from \"./merge.js\";\nimport transition_on from \"./on.js\";\nimport transition_remove from \"./remove.js\";\nimport transition_select from \"./select.js\";\nimport transition_selectAll from \"./selectAll.js\";\nimport transition_selection from \"./selection.js\";\nimport transition_style from \"./style.js\";\nimport transition_styleTween from \"./styleTween.js\";\nimport transition_text from \"./text.js\";\nimport transition_textTween from \"./textTween.js\";\nimport transition_transition from \"./transition.js\";\nimport transition_tween from \"./tween.js\";\nimport transition_end from \"./end.js\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  selectChild: selection_prototype.selectChild,\n  selectChildren: selection_prototype.selectChildren,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  easeVarying: transition_easeVarying,\n  end: transition_end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n","import {selector} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n","import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n","import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n","import {Transition} from \"./index.js\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n","import {Transition, newId} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n","import {tweenValue} from \"./tween.js\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n","function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n","import {set} from \"./schedule.js\";\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== \"function\") throw new Error;\n    set(this, id).ease = v;\n  };\n}\n\nexport default function(value) {\n  if (typeof value !== \"function\") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n","import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n","export const linear = t => +t;\n","export function quadIn(t) {\n  return t * t;\n}\n\nexport function quadOut(t) {\n  return t * (2 - t);\n}\n\nexport function quadInOut(t) {\n  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n}\n","export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n","var exponent = 3;\n\nexport var polyIn = (function custom(e) {\n  e = +e;\n\n  function polyIn(t) {\n    return Math.pow(t, e);\n  }\n\n  polyIn.exponent = custom;\n\n  return polyIn;\n})(exponent);\n\nexport var polyOut = (function custom(e) {\n  e = +e;\n\n  function polyOut(t) {\n    return 1 - Math.pow(1 - t, e);\n  }\n\n  polyOut.exponent = custom;\n\n  return polyOut;\n})(exponent);\n\nexport var polyInOut = (function custom(e) {\n  e = +e;\n\n  function polyInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n  }\n\n  polyInOut.exponent = custom;\n\n  return polyInOut;\n})(exponent);\n","var pi = Math.PI,\n    halfPi = pi / 2;\n\nexport function sinIn(t) {\n  return (+t === 1) ? 1 : 1 - Math.cos(t * halfPi);\n}\n\nexport function sinOut(t) {\n  return Math.sin(t * halfPi);\n}\n\nexport function sinInOut(t) {\n  return (1 - Math.cos(pi * t)) / 2;\n}\n","// tpmt is two power minus ten times t scaled to [0,1]\nexport function tpmt(x) {\n  return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;\n}\n","import {tpmt} from \"./math.js\";\n\nexport function expIn(t) {\n  return tpmt(1 - +t);\n}\n\nexport function expOut(t) {\n  return 1 - tpmt(t);\n}\n\nexport function expInOut(t) {\n  return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;\n}\n","export function circleIn(t) {\n  return 1 - Math.sqrt(1 - t * t);\n}\n\nexport function circleOut(t) {\n  return Math.sqrt(1 - --t * t);\n}\n\nexport function circleInOut(t) {\n  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n}\n","var b1 = 4 / 11,\n    b2 = 6 / 11,\n    b3 = 8 / 11,\n    b4 = 3 / 4,\n    b5 = 9 / 11,\n    b6 = 10 / 11,\n    b7 = 15 / 16,\n    b8 = 21 / 22,\n    b9 = 63 / 64,\n    b0 = 1 / b1 / b1;\n\nexport function bounceIn(t) {\n  return 1 - bounceOut(1 - t);\n}\n\nexport function bounceOut(t) {\n  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n}\n\nexport function bounceInOut(t) {\n  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n}\n","var overshoot = 1.70158;\n\nexport var backIn = (function custom(s) {\n  s = +s;\n\n  function backIn(t) {\n    return (t = +t) * t * (s * (t - 1) + t);\n  }\n\n  backIn.overshoot = custom;\n\n  return backIn;\n})(overshoot);\n\nexport var backOut = (function custom(s) {\n  s = +s;\n\n  function backOut(t) {\n    return --t * t * ((t + 1) * s + t) + 1;\n  }\n\n  backOut.overshoot = custom;\n\n  return backOut;\n})(overshoot);\n\nexport var backInOut = (function custom(s) {\n  s = +s;\n\n  function backInOut(t) {\n    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n  }\n\n  backInOut.overshoot = custom;\n\n  return backInOut;\n})(overshoot);\n","import {tpmt} from \"./math.js\";\n\nvar tau = 2 * Math.PI,\n    amplitude = 1,\n    period = 0.3;\n\nexport var elasticIn = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticIn(t) {\n    return a * tpmt(-(--t)) * Math.sin((s - t) / p);\n  }\n\n  elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n  elasticIn.period = function(p) { return custom(a, p); };\n\n  return elasticIn;\n})(amplitude, period);\n\nexport var elasticOut = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticOut(t) {\n    return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);\n  }\n\n  elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n  elasticOut.period = function(p) { return custom(a, p); };\n\n  return elasticOut;\n})(amplitude, period);\n\nexport var elasticInOut = (function custom(a, p) {\n  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n  function elasticInOut(t) {\n    return ((t = t * 2 - 1) < 0\n        ? a * tpmt(-t) * Math.sin((s - t) / p)\n        : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;\n  }\n\n  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n  elasticInOut.period = function(p) { return custom(a, p); };\n\n  return elasticInOut;\n})(amplitude, period);\n","import {Transition, newId} from \"../transition/index.js\";\nimport schedule from \"../transition/schedule.js\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n","import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt.js\";\nimport selection_transition from \"./transition.js\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n","import interrupt from \"../interrupt.js\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n","import {Transition} from \"./transition/index.js\";\nimport {SCHEDULED} from \"./transition/schedule.js\";\n\nvar root = [null];\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      i;\n\n  if (schedules) {\n    name = name == null ? null : name + \"\";\n    for (i in schedules) {\n      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n        return new Transition([[node]], root, name, +i);\n      }\n    }\n  }\n\n  return null;\n}\n","export default x => () => x;\n","export default function BrushEvent(type, {\n  sourceEvent,\n  target,\n  selection,\n  mode,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    selection: {value: selection, enumerable: true, configurable: true},\n    mode: {value: mode, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n","export function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {pointer, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport BrushEvent from \"./event.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: \"x\",\n  handles: [\"w\", \"e\"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .on(\"mousedown.brush\", started)\n      .filter(touchable)\n        .on(\"touchstart.brush\", started)\n        .on(\"touchmove.brush\", touchmoved)\n        .on(\"touchend.brush touchcancel.brush\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  brush.move = function(group, selection, event) {\n    if (group.tween) {\n      group\n          .on(\"start.brush\", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on(\"interrupt.brush end.brush\", function(event) { emitter(this, arguments).end(event); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start(event).brush(event).end(event);\n          });\n    }\n  };\n\n  brush.clear = function(group, event) {\n    brush.move(group, null, event);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit(\"start\", event, mode);\n      else this.emit(\"brush\", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit(\"brush\", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (type === \"overlay\") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move(event);\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n      if (keys) view\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move(event);\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n","export var abs = Math.abs;\nexport var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;\nexport var epsilon = 1e-12;\n","import {max, tau} from \"./math.js\";\n\nfunction range(i, j) {\n  return Array.from({length: j - i}, (_, k) => i + k);\n}\n\nfunction compareValue(compare) {\n  return function(a, b) {\n    return compare(\n      a.source.value + a.target.value,\n      b.source.value + b.target.value\n    );\n  };\n}\n\nexport default function() {\n  return chord(false, false);\n}\n\nexport function chordTranspose() {\n  return chord(false, true);\n}\n\nexport function chordDirected() {\n  return chord(true, false);\n}\n\nfunction chord(directed, transpose) {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = new Array(n),\n        groupIndex = range(0, n),\n        chords = new Array(n * n),\n        groups = new Array(n),\n        k = 0, dx;\n\n    matrix = Float64Array.from({length: n * n}, transpose\n        ? (_, i) => matrix[i % n][i / n | 0]\n        : (_, i) => matrix[i / n | 0][i % n]);\n\n    // Compute the scaling factor from value to angle in [0, 2pi].\n    for (let i = 0; i < n; ++i) {\n      let x = 0;\n      for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i];\n      k += groupSums[i] = x;\n    }\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n;\n\n    // Compute the angles for each group and constituent chord.\n    {\n      let x = 0;\n      if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));\n      for (const i of groupIndex) {\n        const x0 = x;\n        if (directed) {\n          const subgroupIndex = range(~n + 1, n).filter(j => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);\n          if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));\n          for (const j of subgroupIndex) {\n            if (j < 0) {\n              const chord = chords[~j * n + i] || (chords[~j * n + i] = {source: null, target: null});\n              chord.target = {index: i, startAngle: x, endAngle: x += matrix[~j * n + i] * k, value: matrix[~j * n + i]};\n            } else {\n              const chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});\n              chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};\n            }\n          }\n          groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};\n        } else {\n          const subgroupIndex = range(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i]);\n          if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));\n          for (const j of subgroupIndex) {\n            let chord;\n            if (i < j) {\n              chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});\n              chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};\n            } else {\n              chord = chords[j * n + i] || (chords[j * n + i] = {source: null, target: null});\n              chord.target = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};\n              if (i === j) chord.source = chord.target;\n            }\n            if (chord.source && chord.target && chord.source.value < chord.target.value) {\n              const source = chord.source;\n              chord.source = chord.target;\n              chord.target = source;\n            }\n          }\n          groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};\n        }\n        x += dx;\n      }\n    }\n\n    // Remove empty chords.\n    chords = Object.values(chords);\n    chords.groups = groups;\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function(_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function(_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function(_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function(_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}\n","const pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export var slice = Array.prototype.slice;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {path} from \"d3-path\";\nimport {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport {abs, cos, epsilon, halfPi, sin} from \"./math.js\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction defaultPadAngle() {\n  return 0;\n}\n\nfunction defaultArrowheadRadius() {\n  return 10;\n}\n\nfunction ribbon(headRadius) {\n  var source = defaultSource,\n      target = defaultTarget,\n      sourceRadius = defaultRadius,\n      targetRadius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      padAngle = defaultPadAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        s = source.apply(this, arguments),\n        t = target.apply(this, arguments),\n        ap = padAngle.apply(this, arguments) / 2,\n        argv = slice.call(arguments),\n        sr = +sourceRadius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        tr = +targetRadius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n\n    if (!context) context = buffer = path();\n\n    if (ap > epsilon) {\n      if (abs(sa1 - sa0) > ap * 2 + epsilon) sa1 > sa0 ? (sa0 += ap, sa1 -= ap) : (sa0 -= ap, sa1 += ap);\n      else sa0 = sa1 = (sa0 + sa1) / 2;\n      if (abs(ta1 - ta0) > ap * 2 + epsilon) ta1 > ta0 ? (ta0 += ap, ta1 -= ap) : (ta0 -= ap, ta1 += ap);\n      else ta0 = ta1 = (ta0 + ta1) / 2;\n    }\n\n    context.moveTo(sr * cos(sa0), sr * sin(sa0));\n    context.arc(0, 0, sr, sa0, sa1);\n    if (sa0 !== ta0 || sa1 !== ta1) {\n      if (headRadius) {\n        var hr = +headRadius.apply(this, arguments), tr2 = tr - hr, ta2 = (ta0 + ta1) / 2;\n        context.quadraticCurveTo(0, 0, tr2 * cos(ta0), tr2 * sin(ta0));\n        context.lineTo(tr * cos(ta2), tr * sin(ta2));\n        context.lineTo(tr2 * cos(ta1), tr2 * sin(ta1));\n      } else {\n        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n        context.arc(0, 0, tr, ta0, ta1);\n      }\n    }\n    context.quadraticCurveTo(0, 0, sr * cos(sa0), sr * sin(sa0));\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  if (headRadius) ribbon.headRadius = function(_) {\n    return arguments.length ? (headRadius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : headRadius;\n  };\n\n  ribbon.radius = function(_) {\n    return arguments.length ? (sourceRadius = targetRadius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : sourceRadius;\n  };\n\n  ribbon.sourceRadius = function(_) {\n    return arguments.length ? (sourceRadius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : sourceRadius;\n  };\n\n  ribbon.targetRadius = function(_) {\n    return arguments.length ? (targetRadius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : targetRadius;\n  };\n\n  ribbon.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : padAngle;\n  };\n\n  ribbon.source = function(_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function(_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\n  };\n\n  return ribbon;\n}\n\nexport default function() {\n  return ribbon();\n}\n\nexport function ribbonArrow() {\n  return ribbon(defaultArrowheadRadius);\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\n","export default function(a, b) {\n  return a - b;\n}\n","export default x => () => x;\n","export default function(ring, hole) {\n  var i = -1, n = hole.length, c;\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n  return 0;\n}\n\nfunction ringContains(ring, point) {\n  var x = point[0], y = point[1], contains = -1;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n    if (segmentContains(pi, pj, point)) return 0;\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n  }\n  return contains;\n}\n\nfunction segmentContains(a, b, c) {\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\n\nfunction collinear(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction within(p, q, r) {\n  return p <= q && q <= r || r <= q && q <= p;\n}\n","export default function() {}\n","import {extent, thresholdSturges, ticks, tickStep} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport ascending from \"./ascending.js\";\nimport area from \"./area.js\";\nimport constant from \"./constant.js\";\nimport contains from \"./contains.js\";\nimport noop from \"./noop.js\";\n\nvar cases = [\n  [],\n  [[[1.0, 1.5], [0.5, 1.0]]],\n  [[[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [0.5, 1.0]]],\n  [[[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 0.5], [1.0, 1.5]]],\n  [[[1.0, 0.5], [0.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 0.5]]],\n  [[[1.0, 1.5], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.5, 1.0]]],\n  [[[1.0, 1.5], [1.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 1.5]]],\n  []\n];\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      threshold = thresholdSturges,\n      smooth = smoothLinear;\n\n  function contours(values) {\n    var tz = threshold(values);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      const e = extent(values), ts = tickStep(e[0], e[1], tz);\n      tz = ticks(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);\n    } else {\n      tz = tz.slice().sort(ascending);\n    }\n\n    return tz.map(value => contour(values, value));\n  }\n\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n  function contour(values, value) {\n    var polygons = [],\n        holes = [];\n\n    isorings(values, value, function(ring) {\n      smooth(ring, values, value);\n      if (area(ring) > 0) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\n          polygon.push(hole);\n          return;\n        }\n      }\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      value: value,\n      coordinates: polygons\n    };\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = new Array,\n        fragmentByEnd = new Array,\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = values[0] >= value;\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = values[x + 1] >= value;\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = values[y * dx + dx] >= value;\n      t2 = values[y * dx] >= value;\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(function(point) {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v0,\n          v1 = values[yt * dx + xt];\n      if (x > 0 && x < dx && xt === x) {\n        v0 = values[yt * dx + xt - 1];\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n      }\n      if (y > 0 && y < dy && yt === y) {\n        v0 = values[(yt - 1) * dx + xt];\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n      }\n    });\n  }\n\n  contours.contour = contour;\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n","export default function(ring) {\n  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area;\n}\n","// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurX(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var j = 0; j < m; ++j) {\n    for (var i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source.data[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source.data[i - w + j * n];\n        }\n        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurY(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source.data[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source.data[i + (j - w) * n];\n        }\n        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n","import {max, range, tickStep} from \"d3-array\";\nimport {slice} from \"./array.js\";\nimport {blurX, blurY} from \"./blur.js\";\nimport constant from \"./constant.js\";\nimport contours from \"./contours.js\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m),\n        pow2k = Math.pow(2, -k);\n\n    data.forEach(function(d, i, data) {\n      var xi = (x(d, i, data) + o) * pow2k,\n          yi = (y(d, i, data) + o) * pow2k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        var x0 = Math.floor(xi),\n            y0 = Math.floor(yi),\n            xt = xi - x0 - 0.5,\n            yt = yi - y0 - 0.5;\n        values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;\n        values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;\n        values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;\n        values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours()\n        .thresholds(tz)\n        .size([n, m])\n      (values0)\n        .map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n","export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    if (detleft === 0 || detright === 0 || (detleft > 0) !== (detright > 0)) return det;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, scale} from './util.js';\n\nconst o3derrboundA = (7 + 56 * epsilon) * epsilon;\nconst o3derrboundB = (3 + 28 * epsilon) * epsilon;\nconst o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst at_b = vec(4);\nconst at_c = vec(4);\nconst bt_c = vec(4);\nconst bt_a = vec(4);\nconst ct_a = vec(4);\nconst ct_b = vec(4);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abt = vec(8);\nconst u = vec(4);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _16 = vec(8);\nconst _12 = vec(12);\n\nlet fin = vec(192);\nlet fin2 = vec(192);\n\nfunction finadd(finlen, alen, a) {\n    finlen = sum(finlen, fin, alen, a, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction tailinit(xtail, ytail, ax, ay, bx, by, a, b) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;\n    if (xtail === 0) {\n        if (ytail === 0) {\n            a[0] = 0;\n            b[0] = 0;\n            return 1;\n        } else {\n            negate = -ytail;\n            s1 = negate * ax;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        }\n    } else {\n        if (ytail === 0) {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            negate = -xtail;\n            s1 = negate * by;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        } else {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = ytail * ax;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            a[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            a[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            a[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            a[3] = u3;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = xtail * by;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            b[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            b[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            b[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            b[3] = u3;\n            return 4;\n        }\n    }\n}\n\nfunction tailadd(finlen, a, b, k, z) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;\n    s1 = a * b;\n    c = splitter * a;\n    ahi = c - (c - a);\n    alo = a - ahi;\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    c = splitter * k;\n    bhi = c - (c - k);\n    blo = k - bhi;\n    _i = s0 * k;\n    c = splitter * s0;\n    ahi = c - (c - s0);\n    alo = s0 - ahi;\n    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n    _j = s1 * k;\n    c = splitter * s1;\n    ahi = c - (c - s1);\n    alo = s1 - ahi;\n    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n    _k = _i + _0;\n    bvirt = _k - _i;\n    u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n    u3 = _j + _k;\n    u[2] = _k - (u3 - _j);\n    u[3] = u3;\n    finlen = finadd(finlen, 4, u);\n    if (z !== 0) {\n        c = splitter * z;\n        bhi = c - (c - z);\n        blo = z - bhi;\n        _i = s0 * z;\n        c = splitter * s0;\n        ahi = c - (c - s0);\n        alo = s0 - ahi;\n        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n        _j = s1 * z;\n        c = splitter * s1;\n        ahi = c - (c - s1);\n        alo = s1 - ahi;\n        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n        _k = _i + _0;\n        bvirt = _k - _i;\n        u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n        u3 = _j + _k;\n        u[2] = _k - (u3 - _j);\n        u[3] = u3;\n        finlen = finadd(finlen, 4, u);\n    }\n    return finlen;\n}\n\nfunction orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail;\n    let adytail, bdytail, cdytail;\n    let adztail, bdztail, cdztail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            scale(4, bc, adz, _8), _8,\n            scale(4, ca, bdz, _8b), _8b, _16), _16,\n        scale(4, ab, cdz, _8), _8, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = o3derrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    bvirt = az - adz;\n    adztail = az - (adz + bvirt) + (bvirt - dz);\n    bvirt = bz - bdz;\n    bdztail = bz - (bdz + bvirt) + (bvirt - dz);\n    bvirt = cz - cdz;\n    cdztail = cz - (cdz + bvirt) + (bvirt - dz);\n\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 &&\n        adytail === 0 && bdytail === 0 && cdytail === 0 &&\n        adztail === 0 && bdztail === 0 && cdztail === 0) {\n        return det;\n    }\n\n    errbound = o3derrboundC * permanent + resulterrbound * Math.abs(det);\n    det +=\n        adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) +\n        bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) +\n        cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);\n    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);\n    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);\n\n    const bctlen = sum(bt_len, bt_c, ct_len, ct_b, bct);\n    finlen = finadd(finlen, scale(bctlen, bct, adz, _16), _16);\n\n    const catlen = sum(ct_len, ct_a, at_len, at_c, cat);\n    finlen = finadd(finlen, scale(catlen, cat, bdz, _16), _16);\n\n    const abtlen = sum(at_len, at_b, bt_len, bt_a, abt);\n    finlen = finadd(finlen, scale(abtlen, abt, cdz, _16), _16);\n\n    if (adztail !== 0) {\n        finlen = finadd(finlen, scale(4, bc, adztail, _12), _12);\n        finlen = finadd(finlen, scale(bctlen, bct, adztail, _16), _16);\n    }\n    if (bdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ca, bdztail, _12), _12);\n        finlen = finadd(finlen, scale(catlen, cat, bdztail, _16), _16);\n    }\n    if (cdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ab, cdztail, _12), _12);\n        finlen = finadd(finlen, scale(abtlen, abt, cdztail, _16), _16);\n    }\n\n    if (adxtail !== 0) {\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);\n        }\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);\n        }\n    }\n    if (bdxtail !== 0) {\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);\n        }\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);\n        }\n    }\n    if (cdxtail !== 0) {\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);\n        }\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n\n    const det =\n        adz * (bdxcdy - cdxbdy) +\n        bdz * (cdxady - adxcdy) +\n        cdz * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\n\n    const errbound = o3derrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n\n    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);\n}\n\nexport function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    return adx * (bdy * cdz - bdz * cdy) +\n        bdx * (cdy * adz - cdz * ady) +\n        cdx * (ady * bdz - adz * bdy);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale} from './util.js';\n\nconst iccerrboundA = (10 + 96 * epsilon) * epsilon;\nconst iccerrboundB = (4 + 48 * epsilon) * epsilon;\nconst iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst aa = vec(4);\nconst bb = vec(4);\nconst cc = vec(4);\nconst u = vec(4);\nconst v = vec(4);\nconst axtbc = vec(8);\nconst aytbc = vec(8);\nconst bxtca = vec(8);\nconst bytca = vec(8);\nconst cxtab = vec(8);\nconst cytab = vec(8);\nconst abt = vec(8);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abtt = vec(4);\nconst bctt = vec(4);\nconst catt = vec(4);\n\nconst _8 = vec(8);\nconst _16 = vec(16);\nconst _16b = vec(16);\nconst _16c = vec(16);\nconst _32 = vec(32);\nconst _32b = vec(32);\nconst _48 = vec(48);\nconst _64 = vec(64);\n\nlet fin = vec(1152);\nlet fin2 = vec(1152);\n\nfunction finadd(finlen, a, alen) {\n    finlen = sum(finlen, fin, a, alen, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;\n    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;\n    let abtlen, bctlen, catlen;\n    let abttlen, bcttlen, cattlen;\n    let n1, n0;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            sum(\n                scale(scale(4, bc, adx, _8), _8, adx, _16), _16,\n                scale(scale(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32,\n            sum(\n                scale(scale(4, ca, bdx, _8), _8, bdx, _16), _16,\n                scale(scale(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64,\n        sum(\n            scale(scale(4, ab, cdx, _8), _8, cdx, _16), _16,\n            scale(scale(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = iccerrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) {\n        return det;\n    }\n\n    errbound = iccerrboundC * permanent + resulterrbound * Math.abs(det);\n    det += ((adx * adx + ady * ady) * ((bdx * cdytail + cdy * bdxtail) - (bdy * cdxtail + cdx * bdytail)) +\n        2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx)) +\n        ((bdx * bdx + bdy * bdy) * ((cdx * adytail + ady * cdxtail) - (cdy * adxtail + adx * cdytail)) +\n        2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) +\n        ((cdx * cdx + cdy * cdy) * ((adx * bdytail + bdy * adxtail) - (ady * bdxtail + bdx * adytail)) +\n        2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n        s1 = adx * adx;\n        c = splitter * adx;\n        ahi = c - (c - adx);\n        alo = adx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = ady * ady;\n        c = splitter * ady;\n        ahi = c - (c - ady);\n        alo = ady - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        aa[3] = u3;\n    }\n    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n        s1 = bdx * bdx;\n        c = splitter * bdx;\n        ahi = c - (c - bdx);\n        alo = bdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = bdy * bdy;\n        c = splitter * bdy;\n        ahi = c - (c - bdy);\n        alo = bdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        bb[3] = u3;\n    }\n    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n        s1 = cdx * cdx;\n        c = splitter * cdx;\n        ahi = c - (c - cdx);\n        alo = cdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = cdy * cdy;\n        c = splitter * cdy;\n        ahi = c - (c - cdy);\n        alo = cdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        cc[3] = u3;\n    }\n\n    if (adxtail !== 0) {\n        axtbclen = scale(4, bc, adxtail, axtbc);\n        finlen = finadd(finlen, sum_three(\n            scale(axtbclen, axtbc, 2 * adx, _16), _16,\n            scale(scale(4, cc, adxtail, _8), _8, bdy, _16b), _16b,\n            scale(scale(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);\n    }\n    if (adytail !== 0) {\n        aytbclen = scale(4, bc, adytail, aytbc);\n        finlen = finadd(finlen, sum_three(\n            scale(aytbclen, aytbc, 2 * ady, _16), _16,\n            scale(scale(4, bb, adytail, _8), _8, cdx, _16b), _16b,\n            scale(scale(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);\n    }\n    if (bdxtail !== 0) {\n        bxtcalen = scale(4, ca, bdxtail, bxtca);\n        finlen = finadd(finlen, sum_three(\n            scale(bxtcalen, bxtca, 2 * bdx, _16), _16,\n            scale(scale(4, aa, bdxtail, _8), _8, cdy, _16b), _16b,\n            scale(scale(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);\n    }\n    if (bdytail !== 0) {\n        bytcalen = scale(4, ca, bdytail, bytca);\n        finlen = finadd(finlen, sum_three(\n            scale(bytcalen, bytca, 2 * bdy, _16), _16,\n            scale(scale(4, cc, bdytail, _8), _8, adx, _16b), _16b,\n            scale(scale(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);\n    }\n    if (cdxtail !== 0) {\n        cxtablen = scale(4, ab, cdxtail, cxtab);\n        finlen = finadd(finlen, sum_three(\n            scale(cxtablen, cxtab, 2 * cdx, _16), _16,\n            scale(scale(4, bb, cdxtail, _8), _8, ady, _16b), _16b,\n            scale(scale(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);\n    }\n    if (cdytail !== 0) {\n        cytablen = scale(4, ab, cdytail, cytab);\n        finlen = finadd(finlen, sum_three(\n            scale(cytablen, cytab, 2 * cdy, _16), _16,\n            scale(scale(4, aa, cdytail, _8), _8, bdx, _16b), _16b,\n            scale(scale(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);\n    }\n\n    if (adxtail !== 0 || adytail !== 0) {\n        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n            s1 = bdxtail * cdy;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdy;\n            bhi = c - (c - cdy);\n            blo = cdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * cdytail;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            s1 = cdxtail * -bdy;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * -bdy;\n            bhi = c - (c - -bdy);\n            blo = -bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * -bdytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * -bdytail;\n            bhi = c - (c - -bdytail);\n            blo = -bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            bctlen = sum(4, u, 4, v, bct);\n            s1 = bdxtail * cdytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdxtail * bdytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            bctt[3] = u3;\n            bcttlen = 4;\n        } else {\n            bct[0] = 0;\n            bctlen = 1;\n            bctt[0] = 0;\n            bcttlen = 1;\n        }\n        if (adxtail !== 0) {\n            const len = scale(bctlen, bct, adxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(axtbclen, axtbc, adxtail, _16), _16,\n                scale(len, _16c, 2 * adx, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * adx, _16), _16,\n                scale(len2, _8, adxtail, _16b), _16b,\n                scale(len, _16c, adxtail, _32), _32, _32b, _64), _64);\n\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, adxtail, _8), _8, bdytail, _16), _16);\n            }\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, -adxtail, _8), _8, cdytail, _16), _16);\n            }\n        }\n        if (adytail !== 0) {\n            const len = scale(bctlen, bct, adytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(aytbclen, aytbc, adytail, _16), _16,\n                scale(len, _16c, 2 * ady, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * ady, _16), _16,\n                scale(len2, _8, adytail, _16b), _16b,\n                scale(len, _16c, adytail, _32), _32, _32b, _64), _64);\n        }\n    }\n    if (bdxtail !== 0 || bdytail !== 0) {\n        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n            s1 = cdxtail * ady;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * ady;\n            bhi = c - (c - ady);\n            blo = ady - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * adytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -cdy;\n            n0 = -cdytail;\n            s1 = adxtail * n1;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * n0;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            catlen = sum(4, u, 4, v, cat);\n            s1 = cdxtail * adytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adxtail * cdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            catt[3] = u3;\n            cattlen = 4;\n        } else {\n            cat[0] = 0;\n            catlen = 1;\n            catt[0] = 0;\n            cattlen = 1;\n        }\n        if (bdxtail !== 0) {\n            const len = scale(catlen, cat, bdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bxtcalen, bxtca, bdxtail, _16), _16,\n                scale(len, _16c, 2 * bdx, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdx, _16), _16,\n                scale(len2, _8, bdxtail, _16b), _16b,\n                scale(len, _16c, bdxtail, _32), _32, _32b, _64), _64);\n\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, bdxtail, _8), _8, cdytail, _16), _16);\n            }\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, -bdxtail, _8), _8, adytail, _16), _16);\n            }\n        }\n        if (bdytail !== 0) {\n            const len = scale(catlen, cat, bdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bytcalen, bytca, bdytail, _16), _16,\n                scale(len, _16c, 2 * bdy, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdy, _16), _16,\n                scale(len2, _8, bdytail, _16b), _16b,\n                scale(len, _16c, bdytail, _32), _32,  _32b, _64), _64);\n        }\n    }\n    if (cdxtail !== 0 || cdytail !== 0) {\n        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n            s1 = adxtail * bdy;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdy;\n            bhi = c - (c - bdy);\n            blo = bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * bdytail;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -ady;\n            n0 = -adytail;\n            s1 = bdxtail * n1;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * n0;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            abtlen = sum(4, u, 4, v, abt);\n            s1 = adxtail * bdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdxtail * adytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            abtt[3] = u3;\n            abttlen = 4;\n        } else {\n            abt[0] = 0;\n            abtlen = 1;\n            abtt[0] = 0;\n            abttlen = 1;\n        }\n        if (cdxtail !== 0) {\n            const len = scale(abtlen, abt, cdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cxtablen, cxtab, cdxtail, _16), _16,\n                scale(len, _16c, 2 * cdx, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdx, _16), _16,\n                scale(len2, _8, cdxtail, _16b), _16b,\n                scale(len, _16c, cdxtail, _32), _32, _32b, _64), _64);\n\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, cdxtail, _8), _8, adytail, _16), _16);\n            }\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);\n            }\n        }\n        if (cdytail !== 0) {\n            const len = scale(abtlen, abt, cdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cytablen, cytab, cdytail, _16), _16,\n                scale(len, _16c, 2 * cdy, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdy, _16), _16,\n                scale(len2, _8, cdytail, _16b), _16b,\n                scale(len, _16c, cdytail, _32), _32, _32b, _64), _64);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function incircle(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n    const alift = adx * adx + ady * ady;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n    const blift = bdx * bdx + bdy * bdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n    const clift = cdx * cdx + cdy * cdy;\n\n    const det =\n        alift * (bdxcdy - cdxbdy) +\n        blift * (cdxady - adxcdy) +\n        clift * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * blift +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;\n\n    const errbound = iccerrboundA * permanent;\n\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);\n}\n\nexport function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const ady = ay - dy;\n    const bdx = bx - dx;\n    const bdy = by - dy;\n    const cdx = cx - dx;\n    const cdy = cy - dy;\n\n    const abdet = adx * bdy - bdx * ady;\n    const bcdet = bdx * cdy - cdx * bdy;\n    const cadet = cdx * ady - adx * cdy;\n    const alift = adx * adx + ady * ady;\n    const blift = bdx * bdx + bdy * bdy;\n    const clift = cdx * cdx + cdy * cdy;\n\n    return alift * bcdet + blift * cadet + clift * abdet;\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale, negate} from './util.js';\n\nconst isperrboundA = (16 + 224 * epsilon) * epsilon;\nconst isperrboundB = (5 + 72 * epsilon) * epsilon;\nconst isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;\n\nconst ab = vec(4);\nconst bc = vec(4);\nconst cd = vec(4);\nconst de = vec(4);\nconst ea = vec(4);\nconst ac = vec(4);\nconst bd = vec(4);\nconst ce = vec(4);\nconst da = vec(4);\nconst eb = vec(4);\n\nconst abc = vec(24);\nconst bcd = vec(24);\nconst cde = vec(24);\nconst dea = vec(24);\nconst eab = vec(24);\nconst abd = vec(24);\nconst bce = vec(24);\nconst cda = vec(24);\nconst deb = vec(24);\nconst eac = vec(24);\n\nconst adet = vec(1152);\nconst bdet = vec(1152);\nconst cdet = vec(1152);\nconst ddet = vec(1152);\nconst edet = vec(1152);\nconst abdet = vec(2304);\nconst cddet = vec(2304);\nconst cdedet = vec(3456);\nconst deter = vec(5760);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _8c = vec(8);\nconst _16 = vec(16);\nconst _24 = vec(24);\nconst _48 = vec(48);\nconst _48b = vec(48);\nconst _96 = vec(96);\nconst _192 = vec(192);\nconst _384x = vec(384);\nconst _384y = vec(384);\nconst _384z = vec(384);\nconst _768 = vec(768);\n\nfunction sum_three_scale(a, b, c, az, bz, cz, out) {\n    return sum_three(\n        scale(4, a, az, _8), _8,\n        scale(4, b, bz, _8b), _8b,\n        scale(4, c, cz, _8c), _8c, _16, out);\n}\n\nfunction liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {\n    const len = sum(\n        sum(alen, a, blen, b, _48), _48,\n        negate(sum(clen, c, dlen, d, _48b), _48b), _48b, _96);\n\n    return sum_three(\n        scale(scale(len, _96, x, _192), _192, x, _384x), _384x,\n        scale(scale(len, _96, y, _192), _192, y, _384y), _384y,\n        scale(scale(len, _96, z, _192), _192, z, _384z), _384z, _768, out);\n}\n\nfunction insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    s1 = ax * by;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ay;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n    s1 = bx * cy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * by;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cx * dy;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * cy;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    cd[3] = u3;\n    s1 = dx * ey;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * dy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    de[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    de[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    de[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    de[3] = u3;\n    s1 = ex * ay;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * ey;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ea[3] = u3;\n    s1 = ax * cy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * ay;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ac[3] = u3;\n    s1 = bx * dy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * by;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bd[3] = u3;\n    s1 = cx * ey;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * cy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ce[3] = u3;\n    s1 = dx * ay;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * dy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    da[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    da[3] = u3;\n    s1 = ex * by;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ey;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    eb[3] = u3;\n\n    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);\n    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);\n    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);\n    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);\n    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);\n    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);\n    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);\n    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);\n    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);\n    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);\n\n    const deterlen = sum_three(\n        liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet,\n        liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet,\n        sum_three(\n            liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet,\n            liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet,\n            liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);\n\n    return deter[deterlen - 1];\n}\n\nconst xdet = vec(96);\nconst ydet = vec(96);\nconst zdet = vec(96);\nconst fin = vec(1152);\n\nfunction liftadapt(a, b, c, az, bz, cz, x, y, z, out) {\n    const len = sum_three_scale(a, b, c, az, bz, cz, _24);\n    return sum_three(\n        scale(scale(len, _24, x, _48), _48, x, xdet), xdet,\n        scale(scale(len, _24, y, _48), _48, y, ydet), ydet,\n        scale(scale(len, _24, z, _48), _48, z, zdet), zdet, _192, out);\n}\n\nfunction insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {\n    let ab3, bc3, cd3, da3, ac3, bd3;\n\n    let aextail, bextail, cextail, dextail;\n    let aeytail, beytail, ceytail, deytail;\n    let aeztail, beztail, ceztail, deztail;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;\n\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    s1 = aex * bey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bex * aey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ab3 = _j + _i;\n    bvirt = ab3 - _j;\n    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);\n    ab[3] = ab3;\n    s1 = bex * cey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * bey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bc3 = _j + _i;\n    bvirt = bc3 - _j;\n    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);\n    bc[3] = bc3;\n    s1 = cex * dey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * cey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    cd3 = _j + _i;\n    bvirt = cd3 - _j;\n    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);\n    cd[3] = cd3;\n    s1 = dex * aey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = aex * dey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    da3 = _j + _i;\n    bvirt = da3 - _j;\n    da[2] = _j - (da3 - bvirt) + (_i - bvirt);\n    da[3] = da3;\n    s1 = aex * cey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * aey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ac3 = _j + _i;\n    bvirt = ac3 - _j;\n    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);\n    ac[3] = ac3;\n    s1 = bex * dey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * bey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bd3 = _j + _i;\n    bvirt = bd3 - _j;\n    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);\n    bd[3] = bd3;\n\n    const finlen = sum(\n        sum(\n            negate(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet,\n            liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet,\n        sum(\n            negate(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet,\n            liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = isperrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - aex;\n    aextail = ax - (aex + bvirt) + (bvirt - ex);\n    bvirt = ay - aey;\n    aeytail = ay - (aey + bvirt) + (bvirt - ey);\n    bvirt = az - aez;\n    aeztail = az - (aez + bvirt) + (bvirt - ez);\n    bvirt = bx - bex;\n    bextail = bx - (bex + bvirt) + (bvirt - ex);\n    bvirt = by - bey;\n    beytail = by - (bey + bvirt) + (bvirt - ey);\n    bvirt = bz - bez;\n    beztail = bz - (bez + bvirt) + (bvirt - ez);\n    bvirt = cx - cex;\n    cextail = cx - (cex + bvirt) + (bvirt - ex);\n    bvirt = cy - cey;\n    ceytail = cy - (cey + bvirt) + (bvirt - ey);\n    bvirt = cz - cez;\n    ceztail = cz - (cez + bvirt) + (bvirt - ez);\n    bvirt = dx - dex;\n    dextail = dx - (dex + bvirt) + (bvirt - ex);\n    bvirt = dy - dey;\n    deytail = dy - (dey + bvirt) + (bvirt - ey);\n    bvirt = dz - dez;\n    deztail = dz - (dez + bvirt) + (bvirt - ez);\n    if (aextail === 0 && aeytail === 0 && aeztail === 0 &&\n        bextail === 0 && beytail === 0 && beztail === 0 &&\n        cextail === 0 && ceytail === 0 && ceztail === 0 &&\n        dextail === 0 && deytail === 0 && deztail === 0) {\n        return det;\n    }\n\n    errbound = isperrboundC * permanent + resulterrbound * Math.abs(det);\n\n    const abeps = (aex * beytail + bey * aextail) - (aey * bextail + bex * aeytail);\n    const bceps = (bex * ceytail + cey * bextail) - (bey * cextail + cex * beytail);\n    const cdeps = (cex * deytail + dey * cextail) - (cey * dextail + dex * ceytail);\n    const daeps = (dex * aeytail + aey * dextail) - (dey * aextail + aex * deytail);\n    const aceps = (aex * ceytail + cey * aextail) - (aey * cextail + cex * aeytail);\n    const bdeps = (bex * deytail + dey * bextail) - (bey * dextail + dex * beytail);\n    det +=\n        (((bex * bex + bey * bey + bez * bez) * ((cez * daeps + dez * aceps + aez * cdeps) +\n        (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) *\n        ((aez * bceps - bez * aceps + cez * abeps) + (aeztail * bc3 - beztail * ac3 + ceztail * ab3))) -\n        ((aex * aex + aey * aey + aez * aez) * ((bez * cdeps - cez * bdeps + dez * bceps) +\n        (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) *\n        ((dez * abeps + aez * bdeps + bez * daeps) + (deztail * ab3 + aeztail * bd3 + beztail * da3)))) +\n        2 * (((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) +\n        (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3)) -\n        ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) +\n        (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);\n}\n\nexport function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    const aexbey = aex * bey;\n    const bexaey = bex * aey;\n    const ab = aexbey - bexaey;\n    const bexcey = bex * cey;\n    const cexbey = cex * bey;\n    const bc = bexcey - cexbey;\n    const cexdey = cex * dey;\n    const dexcey = dex * cey;\n    const cd = cexdey - dexcey;\n    const dexaey = dex * aey;\n    const aexdey = aex * dey;\n    const da = dexaey - aexdey;\n    const aexcey = aex * cey;\n    const cexaey = cex * aey;\n    const ac = aexcey - cexaey;\n    const bexdey = bex * dey;\n    const dexbey = dex * bey;\n    const bd = bexdey - dexbey;\n\n    const abc = aez * bc - bez * ac + cez * ab;\n    const bcd = bez * cd - cez * bd + dez * bc;\n    const cda = cez * da + dez * ac + aez * cd;\n    const dab = dez * ab + aez * bd + bez * da;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    const det = (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\n\n    const aezplus = Math.abs(aez);\n    const bezplus = Math.abs(bez);\n    const cezplus = Math.abs(cez);\n    const dezplus = Math.abs(dez);\n    const aexbeyplus = Math.abs(aexbey);\n    const bexaeyplus = Math.abs(bexaey);\n    const bexceyplus = Math.abs(bexcey);\n    const cexbeyplus = Math.abs(cexbey);\n    const cexdeyplus = Math.abs(cexdey);\n    const dexceyplus = Math.abs(dexcey);\n    const dexaeyplus = Math.abs(dexaey);\n    const aexdeyplus = Math.abs(aexdey);\n    const aexceyplus = Math.abs(aexcey);\n    const cexaeyplus = Math.abs(cexaey);\n    const bexdeyplus = Math.abs(bexdey);\n    const dexbeyplus = Math.abs(dexbey);\n    const permanent =\n        ((cexdeyplus + dexceyplus) * bezplus + (dexbeyplus + bexdeyplus) * cezplus + (bexceyplus + cexbeyplus) * dezplus) * alift +\n        ((dexaeyplus + aexdeyplus) * cezplus + (aexceyplus + cexaeyplus) * dezplus + (cexdeyplus + dexceyplus) * aezplus) * blift +\n        ((aexbeyplus + bexaeyplus) * dezplus + (bexdeyplus + dexbeyplus) * aezplus + (dexaeyplus + aexdeyplus) * bezplus) * clift +\n        ((bexceyplus + cexbeyplus) * aezplus + (cexaeyplus + aexceyplus) * bezplus + (aexbeyplus + bexaeyplus) * cezplus) * dlift;\n\n    const errbound = isperrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);\n}\n\nexport function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {\n    const aex = pax - pex;\n    const bex = pbx - pex;\n    const cex = pcx - pex;\n    const dex = pdx - pex;\n    const aey = pay - pey;\n    const bey = pby - pey;\n    const cey = pcy - pey;\n    const dey = pdy - pey;\n    const aez = paz - pez;\n    const bez = pbz - pez;\n    const cez = pcz - pez;\n    const dez = pdz - pez;\n\n    const ab = aex * bey - bex * aey;\n    const bc = bex * cey - cex * bey;\n    const cd = cex * dey - dex * cey;\n    const da = dex * aey - aex * dey;\n    const ac = aex * cey - cex * aey;\n    const bd = bex * dey - dex * bey;\n\n    const abc = aez * bc - bez * ac + cez * ab;\n    const bcd = bez * cd - cez * bd + dez * bc;\n    const cda = cez * da + dez * ac + aez * cd;\n    const dab = dez * ab + aez * bd + bez * da;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    return (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\n}\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (Math.abs(ab) < 1e-9) {\n        // degenerate case (collinear diagram)\n        // almost equal points (degenerate triangle)\n        // the circumcenter is at the infinity, in a\n        // direction that is:\n        // 1. orthogonal to the halfedge.\n        let a = 1e9;\n        // 2. points away from the center; since the list of triangles starts\n        // in the center, the first point of the first triangle\n        // will be our reference\n        const r = triangles[0] * 2;\n        a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","import dsv from \"./dsv.js\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatBody = tsv.formatBody;\nexport var tsvFormatRows = tsv.formatRows;\nexport var tsvFormatRow = tsv.formatRow;\nexport var tsvFormatValue = tsv.formatValue;\n","export default function autoType(object) {\n  for (var key in object) {\n    var value = object[key].trim(), number, m;\n    if (!value) value = null;\n    else if (value === \"true\") value = true;\n    else if (value === \"false\") value = false;\n    else if (value === \"NaN\") value = NaN;\n    else if (!isNaN(number = +value)) value = number;\n    else if (m = value.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)) {\n      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, \"/\").replace(/T/, \" \");\n      value = new Date(value);\n    }\n    else continue;\n    object[key] = value;\n  }\n  return object;\n}\n\n// https://github.com/d3/d3-dsv/issues/45\nconst fixtz = new Date(\"2019-01-01T00:00\").getHours() || new Date(\"2019-07-01T00:00\").getHours();","function responseBlob(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.blob();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseBlob);\n}\n","function responseArrayBuffer(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.arrayBuffer();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseArrayBuffer);\n}\n","function responseText(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.text();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseText);\n}\n","import {csvParse, dsvFormat, tsvParse} from \"d3-dsv\";\nimport text from \"./text.js\";\n\nfunction dsvParse(parse) {\n  return function(input, init, row) {\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\n    return text(input, init).then(function(response) {\n      return parse(response, row);\n    });\n  };\n}\n\nexport default function dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function(response) {\n    return format.parse(response, row);\n  });\n}\n\nexport var csv = dsvParse(csvParse);\nexport var tsv = dsvParse(tsvParse);\n","export default function(input, init) {\n  return new Promise(function(resolve, reject) {\n    var image = new Image;\n    for (var key in init) image[key] = init[key];\n    image.onerror = reject;\n    image.onload = function() { resolve(image); };\n    image.src = input;\n  });\n}\n","function responseJson(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  if (response.status === 204 || response.status === 205) return;\n  return response.json();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseJson);\n}\n","import text from \"./text.js\";\n\nfunction parser(type) {\n  return (input, init) => text(input, init)\n    .then(text => (new DOMParser).parseFromString(text, type));\n}\n\nexport default parser(\"application/xml\");\n\nexport var html = parser(\"text/html\");\n\nexport var svg = parser(\"image/svg+xml\");\n","export default function(x, y) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n","export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(radius, x, y) {\n  var nodes,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = node.y - y || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      node.vy += dy * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _, initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {Adder} from \"d3-array\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum,\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum = new Adder();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import {Adder} from \"d3-array\";\nimport {asin, atan2, cos, degrees, epsilon, epsilon2, hypot, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = hypot(cx, cy, cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2.add(v * cx);\n  Y2.add(v * cy);\n  Z2.add(v * cz);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 = 0;\n  X2 = new Adder();\n  Y2 = new Adder();\n  Z2 = new Adder();\n  stream(object, centroidStream);\n\n  var x = +X2,\n      y = +Y2,\n      z = +Z2,\n      m = hypot(x, y, z);\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = hypot(x, y, z);\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / m) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n","import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","import {Adder} from \"d3-array\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar lengthSum,\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum = new Adder();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import clipRectangle from \"./rectangle.js\";\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import length from \"./length.js\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains.js\";\nimport {default as distance} from \"./distance.js\";\nimport {epsilon2, radians} from \"./math.js\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ao, bo, ab;\n  for (var i = 0, n = coordinates.length; i < n; i++) {\n    bo = distance(coordinates[i], point);\n    if (bo === 0) return true;\n    if (i > 0) {\n      ab = distance(coordinates[i], coordinates[i - 1]);\n      if (\n        ab > 0 &&\n        ao <= ab &&\n        bo <= ab &&\n        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab\n      )\n        return true;\n    }\n    ao = bo;\n  }\n  return false;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math.js\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","export default x => x;\n","import {Adder} from \"d3-array\";\nimport {abs} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar areaSum = new Adder(),\n    areaRingSum = new Adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum = new Adder();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum = new Adder();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {sqrt} from \"../math.js\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import {Adder} from \"d3-array\";\nimport {sqrt} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar lengthSum = new Adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum = new Adder();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity.js\";\nimport stream from \"../stream.js\";\nimport pathArea from \"./area.js\";\nimport pathBounds from \"./bounds.js\";\nimport pathCentroid from \"./centroid.js\";\nimport PathContext from \"./context.js\";\nimport pathMeasure from \"./measure.js\";\nimport PathString from \"./string.js\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math.js\";\nimport rotation from \"../rotation.js\";\nimport projection from \"./index.js\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pi, pow, sign, sin, sqrt, tan} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {mercatorRaw} from \"./mercator.js\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy),\n      l = atan2(x, abs(fy)) * sign(fy);\n    if (fy * n < 0)\n      l -= pi * sign(x) * sign(fy);\n    return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {equirectangularRaw} from \"./equirectangular.js\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y,\n        l = atan2(x, abs(gy)) * sign(gy);\n    if (gy * n < 0)\n      l -= pi * sign(x) * sign(gy);\n    return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n","import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import clipRectangle from \"../clip/rectangle.js\";\nimport identity from \"../identity.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport {cos, degrees, radians, sin} from \"../math.js\";\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect\n      alpha = 0, ca, sa, // angle\n      x0 = null, y0, x1, y1, // clip extent\n      kx = 1, ky = 1,\n      transform = transformer({\n        point: function(x, y) {\n          var p = projection([x, y])\n          this.stream.point(p[0], p[1]);\n        }\n      }),\n      postclip = identity,\n      cache,\n      cacheStream;\n\n  function reset() {\n    kx = k * sx;\n    ky = k * sy;\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  function projection (p) {\n    var x = p[0] * kx, y = p[1] * ky;\n    if (alpha) {\n      var t = y * ca - x * sa;\n      x = x * ca + y * sa;\n      y = t;\n    }    \n    return [x + tx, y + ty];\n  }\n  projection.invert = function(p) {\n    var x = p[0] - tx, y = p[1] - ty;\n    if (alpha) {\n      var t = y * ca + x * sa;\n      x = x * ca - y * sa;\n      y = t;\n    }\n    return [x / kx, y / ky];\n  };\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n  };\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, reset()) : k;\n  };\n  projection.translate = function(_) {\n    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];\n  }\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;\n  };\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;\n  };\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;\n  };\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  return projection;\n}\n","import projection from \"./index.js\";\nimport {abs, epsilon} from \"../math.js\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math.js\";\nimport {mercatorProjection} from \"./mercator.js\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","function defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_find from \"./find.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\nimport node_iterator from \"./iterator.js\";\n\nexport default function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n","export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n","export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\n  while (node = nodes.pop()) {\n    next.push(node);\n    if (children = node.children) {\n      for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  while (node = next.pop()) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n","export default function(callback, that) {\n  var node = this, nodes = [node], children, i, index = -1;\n  while (node = nodes.pop()) {\n    callback.call(that, node, ++index, this);\n    if (children = node.children) {\n      for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  return this;\n}\n","export default function(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    if (callback.call(that, node, ++index, this)) {\n      return node;\n    }\n  }\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export default function*() {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      yield node;\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    }\n  } while (next.length);\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import {shuffle} from \"../array.js\";\nimport lcg from \"../lcg.js\";\n\nexport default function(circles) {\n  return packEncloseRandom(circles, lcg());\n}\n\nexport function packEncloseRandom(circles, random) {\n  var i = 0, n = (circles = shuffle(Array.from(circles), random)).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(Math.abs(A) > 1e-6 ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n","export default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n\nexport function shuffle(array, random) {\n  let m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n","import array from \"../array.js\";\nimport lcg from \"../lcg.js\";\nimport {packEncloseRandom} from \"./enclose.js\";\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nexport function packSiblingsRandom(circles, random) {\n  if (!(n = (circles = array(circles)).length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = packEncloseRandom(a, random);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nexport default function(circles) {\n  packSiblingsRandom(circles, lcg());\n  return circles;\n}\n","import {optional} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\nimport lcg from \"../lcg.js\";\nimport {packSiblingsRandom} from \"./siblings.js\";\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nexport default function() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    const random = lcg();\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildrenRandom(padding, 0.5, random))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildrenRandom(constantZero, 1, random))\n          .eachAfter(packChildrenRandom(padding, root.r / Math.min(dx, dy), random))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildrenRandom(padding, k, random) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packSiblingsRandom(children, random);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n","export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n","import roundNode from \"./treemap/round.js\";\nimport treemapDice from \"./treemap/dice.js\";\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n","import {optional} from \"./accessors.js\";\nimport {Node, computeHeight} from \"./hierarchy/index.js\";\n\nvar preroot = {depth: -1},\n    ambiguous = {},\n    imputed = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nexport default function() {\n  var id = defaultId,\n      parentId = defaultParentId,\n      path;\n\n  function stratify(data) {\n    var nodes = Array.from(data),\n        currentId = id,\n        currentParentId = parentId,\n        n,\n        d,\n        i,\n        root,\n        parent,\n        node,\n        nodeId,\n        nodeKey,\n        nodeByKey = new Map;\n\n    if (path != null) {\n      const I = nodes.map((d, i) => normalize(path(d, i, data)));\n      const P = I.map(parentof);\n      const S = new Set(I).add(\"\");\n      for (const i of P) {\n        if (!S.has(i)) {\n          S.add(i);\n          I.push(i);\n          P.push(parentof(i));\n          nodes.push(imputed);\n        }\n      }\n      currentId = (_, i) => I[i];\n      currentParentId = (_, i) => P[i];\n    }\n\n    for (i = 0, n = nodes.length; i < n; ++i) {\n      d = nodes[i], node = nodes[i] = new Node(d);\n      if ((nodeId = currentId(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = node.id = nodeId;\n        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n      }\n      if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += \"\")) {\n        node.parent = nodeId;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (nodeId = node.parent) {\n        parent = nodeByKey.get(nodeId);\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      } else {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n\n    // When imputing internal nodes, only introduce roots if needed.\n    // Then replace the imputed marker data with null.\n    if (path != null) {\n      while (root.data === imputed && root.children.length === 1) {\n        root = root.children[0], --n;\n      }\n      for (let i = nodes.length - 1; i >= 0; --i) {\n        node = nodes[i];\n        if (node.data !== imputed) break;\n        node.data = null;\n      }\n    }\n\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = optional(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = optional(x), stratify) : parentId;\n  };\n\n  stratify.path = function(x) {\n    return arguments.length ? (path = optional(x), stratify) : path;\n  };\n\n  return stratify;\n}\n\n// To normalize a path, we coerce to a string, strip the trailing slash if any\n// (as long as the trailing slash is not immediately preceded by another slash),\n// and add leading slash if missing.\nfunction normalize(path) {\n  path = `${path}`;\n  let i = path.length;\n  if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);\n  return path[0] === \"/\" ? path : `/${path}`;\n}\n\n// Walk backwards to find the first slash that is not the leading slash, e.g.:\n// \"/foo/bar\" ⇥ \"/foo\", \"/foo\" ⇥ \"/\", \"/\" ↦ \"\". (The root is special-cased\n// because the id of the root must be a truthy value.)\nfunction parentof(path) {\n  let i = path.length;\n  if (i < 2) return \"\";\n  while (--i > 1) if (slash(path, i)) break;\n  return path.slice(0, i);\n}\n\n// Slashes can be escaped; to determine whether a slash is a path delimiter, we\n// count the number of preceding backslashes escaping the forward slash: an odd\n// number indicates an escaped forward slash.\nfunction slash(path, i) {\n  if (path[i] === \"/\") {\n    let k = 0;\n    while (i > 0 && path[--i] === \"\\\\\") ++k;\n    if ((k & 1) === 0) return true;\n  }\n  return false;\n}\n","import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n","import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\n\nexport default function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport {phi, squarifyRatio} from \"./squarify.js\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);\n        else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n}\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      x = 0,\n      y = 0,\n      a,\n      b = polygon[n - 1],\n      c,\n      k = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    k += c = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * c;\n    y += (a[1] + b[1]) * c;\n  }\n\n  return k *= 3, [x / k, y / k];\n}\n","import cross from \"./cross.js\";\n\nfunction lexicographicOrder(a, b) {\n  return a[0] - b[0] || a[1] - b[1];\n}\n\n// Computes the upper convex hull per the monotone chain algorithm.\n// Assumes points.length >= 3, is sorted by x, unique in y.\n// Returns an array of indices into points in left-to-right order.\nfunction computeUpperHullIndexes(points) {\n  const n = points.length,\n      indexes = [0, 1];\n  let size = 2, i;\n\n  for (i = 2; i < n; ++i) {\n    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n    indexes[size++] = i;\n  }\n\n  return indexes.slice(0, size); // remove popped points\n}\n\nexport default function(points) {\n  if ((n = points.length) < 3) return null;\n\n  var i,\n      n,\n      sortedPoints = new Array(n),\n      flippedPoints = new Array(n);\n\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n  sortedPoints.sort(lexicographicOrder);\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n  // Construct the hull polygon, removing possible duplicate endpoints.\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n      hull = [];\n\n  // Add upper hull in right-to-l order.\n  // Then add lower hull in left-to-right order.\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n  return hull;\n}\n","// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nexport default function(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n","export default function(polygon, point) {\n  var n = polygon.length,\n      p = polygon[n - 1],\n      x = point[0], y = point[1],\n      x0 = p[0], y0 = p[1],\n      x1, y1,\n      inside = false;\n\n  for (var i = 0; i < n; ++i) {\n    p = polygon[i], x1 = p[0], y1 = p[1];\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n    x0 = x1, y0 = y1;\n  }\n\n  return inside;\n}\n","export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      b = polygon[n - 1],\n      xa,\n      ya,\n      xb = b[0],\n      yb = b[1],\n      perimeter = 0;\n\n  while (++i < n) {\n    xa = xb;\n    ya = yb;\n    b = polygon[i];\n    xb = b[0];\n    yb = b[1];\n    xa -= xb;\n    ya -= yb;\n    perimeter += Math.hypot(xa, ya);\n  }\n\n  return perimeter;\n}\n","export default Math.random;\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomUniform(source) {\n  function randomUniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return source() * max + min;\n    };\n  }\n\n  randomUniform.source = sourceRandomUniform;\n\n  return randomUniform;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomInt(source) {\n  function randomInt(min, max) {\n    if (arguments.length < 2) max = min, min = 0;\n    min = Math.floor(min);\n    max = Math.floor(max) - min;\n    return function() {\n      return Math.floor(source() * max + min);\n    };\n  }\n\n  randomInt.source = sourceRandomInt;\n\n  return randomInt;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomNormal(source) {\n  function randomNormal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = source() * 2 - 1;\n        y = source() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  randomNormal.source = sourceRandomNormal;\n\n  return randomNormal;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\nimport normal from \"./normal.js\";\n\nexport default (function sourceRandomLogNormal(source) {\n  var N = normal.source(source);\n\n  function randomLogNormal() {\n    var randomNormal = N.apply(this, arguments);\n    return function() {\n      return Math.exp(randomNormal());\n    };\n  }\n\n  randomLogNormal.source = sourceRandomLogNormal;\n\n  return randomLogNormal;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomIrwinHall(source) {\n  function randomIrwinHall(n) {\n    if ((n = +n) <= 0) return () => 0;\n    return function() {\n      for (var sum = 0, i = n; i > 1; --i) sum += source();\n      return sum + i * source();\n    };\n  }\n\n  randomIrwinHall.source = sourceRandomIrwinHall;\n\n  return randomIrwinHall;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\nimport irwinHall from \"./irwinHall.js\";\n\nexport default (function sourceRandomBates(source) {\n  var I = irwinHall.source(source);\n\n  function randomBates(n) {\n    // use limiting distribution at n === 0\n    if ((n = +n) === 0) return source;\n    var randomIrwinHall = I(n);\n    return function() {\n      return randomIrwinHall() / n;\n    };\n  }\n\n  randomBates.source = sourceRandomBates;\n\n  return randomBates;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomExponential(source) {\n  function randomExponential(lambda) {\n    return function() {\n      return -Math.log1p(-source()) / lambda;\n    };\n  }\n\n  randomExponential.source = sourceRandomExponential;\n\n  return randomExponential;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomPareto(source) {\n  function randomPareto(alpha) {\n    if ((alpha = +alpha) < 0) throw new RangeError(\"invalid alpha\");\n    alpha = 1 / -alpha;\n    return function() {\n      return Math.pow(1 - source(), alpha);\n    };\n  }\n\n  randomPareto.source = sourceRandomPareto;\n\n  return randomPareto;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomBernoulli(source) {\n  function randomBernoulli(p) {\n    if ((p = +p) < 0 || p > 1) throw new RangeError(\"invalid p\");\n    return function() {\n      return Math.floor(source() + p);\n    };\n  }\n\n  randomBernoulli.source = sourceRandomBernoulli;\n\n  return randomBernoulli;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomGeometric(source) {\n  function randomGeometric(p) {\n    if ((p = +p) < 0 || p > 1) throw new RangeError(\"invalid p\");\n    if (p === 0) return () => Infinity;\n    if (p === 1) return () => 1;\n    p = Math.log1p(-p);\n    return function() {\n      return 1 + Math.floor(Math.log1p(-source()) / p);\n    };\n  }\n\n  randomGeometric.source = sourceRandomGeometric;\n\n  return randomGeometric;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\nimport normal from \"./normal.js\";\n\nexport default (function sourceRandomGamma(source) {\n  var randomNormal = normal.source(source)();\n\n  function randomGamma(k, theta) {\n    if ((k = +k) < 0) throw new RangeError(\"invalid k\");\n    // degenerate distribution if k === 0\n    if (k === 0) return () => 0;\n    theta = theta == null ? 1 : +theta;\n    // exponential distribution if k === 1\n    if (k === 1) return () => -Math.log1p(-source()) * theta;\n\n    var d = (k < 1 ? k + 1 : k) - 1 / 3,\n        c = 1 / (3 * Math.sqrt(d)),\n        multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1;\n    return function() {\n      do {\n        do {\n          var x = randomNormal(),\n              v = 1 + c * x;\n        } while (v <= 0);\n        v *= v * v;\n        var u = 1 - source();\n      } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));\n      return d * v * multiplier() * theta;\n    };\n  }\n\n  randomGamma.source = sourceRandomGamma;\n\n  return randomGamma;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\nimport gamma from \"./gamma.js\";\n\nexport default (function sourceRandomBeta(source) {\n  var G = gamma.source(source);\n\n  function randomBeta(alpha, beta) {\n    var X = G(alpha),\n        Y = G(beta);\n    return function() {\n      var x = X();\n      return x === 0 ? 0 : x / (x + Y());\n    };\n  }\n\n  randomBeta.source = sourceRandomBeta;\n\n  return randomBeta;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\nimport beta from \"./beta.js\";\nimport geometric from \"./geometric.js\";\n\nexport default (function sourceRandomBinomial(source) {\n  var G = geometric.source(source),\n      B = beta.source(source);\n\n  function randomBinomial(n, p) {\n    n = +n;\n    if ((p = +p) >= 1) return () => n;\n    if (p <= 0) return () => 0;\n    return function() {\n      var acc = 0, nn = n, pp = p;\n      while (nn * pp > 16 && nn * (1 - pp) > 16) {\n        var i = Math.floor((nn + 1) * pp),\n            y = B(i, nn - i + 1)();\n        if (y <= pp) {\n          acc += i;\n          nn -= i;\n          pp = (pp - y) / (1 - y);\n        } else {\n          nn = i - 1;\n          pp /= y;\n        }\n      }\n      var sign = pp < 0.5,\n          pFinal = sign ? pp : 1 - pp,\n          g = G(pFinal);\n      for (var s = g(), k = 0; s <= nn; ++k) s += g();\n      return acc + (sign ? k : nn - k);\n    };\n  }\n\n  randomBinomial.source = sourceRandomBinomial;\n\n  return randomBinomial;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomWeibull(source) {\n  function randomWeibull(k, a, b) {\n    var outerFunc;\n    if ((k = +k) === 0) {\n      outerFunc = x => -Math.log(x);\n    } else {\n      k = 1 / k;\n      outerFunc = x => Math.pow(x, k);\n    }\n    a = a == null ? 0 : +a;\n    b = b == null ? 1 : +b;\n    return function() {\n      return a + b * outerFunc(-Math.log1p(-source()));\n    };\n  }\n\n  randomWeibull.source = sourceRandomWeibull;\n\n  return randomWeibull;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomCauchy(source) {\n  function randomCauchy(a, b) {\n    a = a == null ? 0 : +a;\n    b = b == null ? 1 : +b;\n    return function() {\n      return a + b * Math.tan(Math.PI * source());\n    };\n  }\n\n  randomCauchy.source = sourceRandomCauchy;\n\n  return randomCauchy;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomLogistic(source) {\n  function randomLogistic(a, b) {\n    a = a == null ? 0 : +a;\n    b = b == null ? 1 : +b;\n    return function() {\n      var u = source();\n      return a + b * Math.log(u / (1 - u));\n    };\n  }\n\n  randomLogistic.source = sourceRandomLogistic;\n\n  return randomLogistic;\n})(defaultSource);\n","import defaultSource from \"./defaultSource.js\";\nimport binomial from \"./binomial.js\";\nimport gamma from \"./gamma.js\";\n\nexport default (function sourceRandomPoisson(source) {\n  var G = gamma.source(source),\n      B = binomial.source(source);\n\n  function randomPoisson(lambda) {\n    return function() {\n      var acc = 0, l = lambda;\n      while (l > 16) {\n        var n = Math.floor(0.875 * l),\n            t = G(n)();\n        if (t > l) return acc + B(n - 1, l / t)();\n        acc += n;\n        l -= t;\n      }\n      for (var s = -Math.log1p(-source()), k = 0; s <= l; ++k) s -= Math.log1p(-source());\n      return acc + k;\n    };\n  }\n\n  randomPoisson.source = sourceRandomPoisson;\n\n  return randomPoisson;\n})(defaultSource);\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst mul = 0x19660D;\nconst inc = 0x3C6EF35F;\nconst eps = 1 / 0x100000000;\n\nexport default function lcg(seed = Math.random()) {\n  let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;\n  return () => (state = mul * state + inc | 0, eps * (state >>> 0));\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","import {InternMap} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init.js\";\nimport ordinal from \"./ordinal.js\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {linearish} from \"./linear.js\";\nimport number from \"./number.js\";\n\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? Array.from(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n","export default function nice(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","import {ticks} from \"d3-array\";\nimport {format, formatSpecifier} from \"d3-format\";\nimport nice from \"./nice.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : x => Math.pow(base, x);\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), x => Math.log(x) / base);\n}\n\nfunction reflect(f) {\n  return (x, k) => -f(-x, k);\n}\n\nexport function loggish(transform) {\n  const scale = transform(transformLog, transformExp);\n  const domain = scale.domain;\n  let base = 10;\n  let logs;\n  let pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = count => {\n    const d = domain();\n    let u = d[0];\n    let v = d[d.length - 1];\n    const r = v < u;\n\n    if (r) ([u, v] = [v, u]);\n\n    let i = logs(u);\n    let j = logs(v);\n    let k;\n    let t;\n    const n = count == null ? 10 : +count;\n    let z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1; k < base; ++k) {\n          t = i < 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1; k >= 1; --k) {\n          t = i > 0 ? k / pows(-i) : k * pows(i);\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = ticks(u, v, n);\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = (count, specifier) => {\n    if (count == null) count = 10;\n    if (specifier == null) specifier = base === 10 ? \"s\" : \",\";\n    if (typeof specifier !== \"function\") {\n      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;\n      specifier = format(specifier);\n    }\n    if (count === Infinity) return specifier;\n    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return d => {\n      let i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = () => {\n    return domain(nice(domain(), {\n      floor: x => pows(Math.floor(logs(x))),\n      ceil: x => pows(Math.ceil(logs(x)))\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  const scale = loggish(transformer()).domain([1, 10]);\n  scale.copy = () => copy(scale, log()).base(scale.base());\n  initRange.apply(scale, arguments);\n  return scale;\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nexport function symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nexport default function symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {linearish} from \"./linear.js\";\nimport {copy, identity, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nexport function powish(transform) {\n  var scale = transform(identity, identity),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity, identity)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nexport default function pow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nexport function sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n","import continuous from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport {linearish} from \"./linear.js\";\nimport number from \"./number.js\";\n\nfunction square(x) {\n  return Math.sign(x) * x * x;\n}\n\nfunction unsquare(x) {\n  return Math.sign(x) * Math.sqrt(Math.abs(x));\n}\n\nexport default function radial() {\n  var squared = continuous(),\n      range = [0, 1],\n      round = false,\n      unknown;\n\n  function scale(x) {\n    var y = unsquare(squared(x));\n    return isNaN(y) ? unknown : round ? Math.round(y) : y;\n  }\n\n  scale.invert = function(y) {\n    return squared.invert(square(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (squared.domain(_), scale) : squared.domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (squared.range((range = Array.from(_, number)).map(square)), scale) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return scale.range(_).round(true);\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, scale) : round;\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return radial(squared.domain(), range)\n        .round(round)\n        .clamp(squared.clamp())\n        .unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {ascending, bisect, quantileSorted as threshold} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {linearish} from \"./linear.js\";\nimport {initRange} from \"./init.js\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = function(date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n","import interval from \"./interval.js\";\n\nvar millisecond = interval(function() {\n  // noop\n}, function(date, step) {\n  date.setTime(+date + step);\n}, function(start, end) {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = function(k) {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return interval(function(date) {\n    date.setTime(Math.floor(date / k) * k);\n  }, function(date, step) {\n    date.setTime(+date + step * k);\n  }, function(start, end) {\n    return (end - start) / k;\n  });\n};\n\nexport default millisecond;\nexport var milliseconds = millisecond.range;\n","import interval from \"./interval.js\";\nimport {durationSecond} from \"./duration.js\";\n\nvar second = interval(function(date) {\n  date.setTime(date - date.getMilliseconds());\n}, function(date, step) {\n  date.setTime(+date + step * durationSecond);\n}, function(start, end) {\n  return (end - start) / durationSecond;\n}, function(date) {\n  return date.getUTCSeconds();\n});\n\nexport default second;\nexport var seconds = second.range;\n","export const durationSecond = 1000;\nexport const durationMinute = durationSecond * 60;\nexport const durationHour = durationMinute * 60;\nexport const durationDay = durationHour * 24;\nexport const durationWeek = durationDay * 7;\nexport const durationMonth = durationDay * 30;\nexport const durationYear = durationDay * 365;\n","import interval from \"./interval.js\";\nimport {durationMinute, durationSecond} from \"./duration.js\";\n\nvar minute = interval(function(date) {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getMinutes();\n});\n\nexport default minute;\nexport var minutes = minute.range;\n","import interval from \"./interval.js\";\nimport {durationHour, durationMinute, durationSecond} from \"./duration.js\";\n\nvar hour = interval(function(date) {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getHours();\n});\n\nexport default hour;\nexport var hours = hour.range;\n","import interval from \"./interval.js\";\nimport {durationDay, durationMinute} from \"./duration.js\";\n\nvar day = interval(\n  date => date.setHours(0, 0, 0, 0),\n  (date, step) => date.setDate(date.getDate() + step),\n  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,\n  date => date.getDate() - 1\n);\n\nexport default day;\nexport var days = day.range;\n","import interval from \"./interval.js\";\nimport {durationMinute, durationWeek} from \"./duration.js\";\n\nfunction weekday(i) {\n  return interval(function(date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\n\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;\n","import interval from \"./interval.js\";\n\nvar month = interval(function(date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function(start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function(date) {\n  return date.getMonth();\n});\n\nexport default month;\nexport var months = month.range;\n","import interval from \"./interval.js\";\n\nvar year = interval(function(date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function(start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function(date) {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\nyear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;\n","import interval from \"./interval.js\";\nimport {durationMinute} from \"./duration.js\";\n\nvar utcMinute = interval(function(date) {\n  date.setUTCSeconds(0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getUTCMinutes();\n});\n\nexport default utcMinute;\nexport var utcMinutes = utcMinute.range;\n","import interval from \"./interval.js\";\nimport {durationHour} from \"./duration.js\";\n\nvar utcHour = interval(function(date) {\n  date.setUTCMinutes(0, 0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getUTCHours();\n});\n\nexport default utcHour;\nexport var utcHours = utcHour.range;\n","import interval from \"./interval.js\";\nimport {durationDay} from \"./duration.js\";\n\nvar utcDay = interval(function(date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function(start, end) {\n  return (end - start) / durationDay;\n}, function(date) {\n  return date.getUTCDate() - 1;\n});\n\nexport default utcDay;\nexport var utcDays = utcDay.range;\n","import interval from \"./interval.js\";\nimport {durationWeek} from \"./duration.js\";\n\nfunction utcWeekday(i) {\n  return interval(function(date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function(start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport var utcSunday = utcWeekday(0);\nexport var utcMonday = utcWeekday(1);\nexport var utcTuesday = utcWeekday(2);\nexport var utcWednesday = utcWeekday(3);\nexport var utcThursday = utcWeekday(4);\nexport var utcFriday = utcWeekday(5);\nexport var utcSaturday = utcWeekday(6);\n\nexport var utcSundays = utcSunday.range;\nexport var utcMondays = utcMonday.range;\nexport var utcTuesdays = utcTuesday.range;\nexport var utcWednesdays = utcWednesday.range;\nexport var utcThursdays = utcThursday.range;\nexport var utcFridays = utcFriday.range;\nexport var utcSaturdays = utcSaturday.range;\n","import interval from \"./interval.js\";\n\nvar utcMonth = interval(function(date) {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, function(start, end) {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, function(date) {\n  return date.getUTCMonth();\n});\n\nexport default utcMonth;\nexport var utcMonths = utcMonth.range;\n","import interval from \"./interval.js\";\n\nvar utcYear = interval(function(date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function(start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function(date) {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport default utcYear;\nexport var utcYears = utcYear.range;\n","import {bisector, tickStep} from \"d3-array\";\nimport {durationDay, durationHour, durationMinute, durationMonth, durationSecond, durationWeek, durationYear} from \"./duration.js\";\nimport millisecond from \"./millisecond.js\";\nimport second from \"./second.js\";\nimport minute from \"./minute.js\";\nimport hour from \"./hour.js\";\nimport day from \"./day.js\";\nimport {sunday as week} from \"./week.js\";\nimport month from \"./month.js\";\nimport year from \"./year.js\";\nimport utcMinute from \"./utcMinute.js\";\nimport utcHour from \"./utcHour.js\";\nimport utcDay from \"./utcDay.js\";\nimport {utcSunday as utcWeek} from \"./utcWeek.js\";\nimport utcMonth from \"./utcMonth.js\";\nimport utcYear from \"./utcYear.js\";\n\nfunction ticker(year, month, week, day, hour, minute) {\n\n  const tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function ticks(start, stop, count) {\n    const reverse = stop < start;\n    if (reverse) [start, stop] = [stop, start];\n    const interval = count && typeof count.range === \"function\" ? count : tickInterval(start, stop, count);\n    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop\n    return reverse ? ticks.reverse() : ticks;\n  }\n\n  function tickInterval(start, stop, count) {\n    const target = Math.abs(stop - start) / count;\n    const i = bisector(([,, step]) => step).right(tickIntervals, target);\n    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));\n    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));\n    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n    return t.every(step);\n  }\n\n  return [ticks, tickInterval];\n}\n\nconst [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute);\nconst [timeTicks, timeTickInterval] = ticker(year, month, week, day, hour, minute);\n\nexport {utcTicks, utcTickInterval, timeTicks, timeTickInterval};\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newDate(y, m, d) {\n  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"g\": formatYearISO,\n    \"G\": formatFullYearISO,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"q\": formatQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"g\": formatUTCYearISO,\n    \"G\": formatUTCFullYearISO,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"q\": formatUTCQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"g\": parseYear,\n    \"G\": parseFullYear,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"q\": parseQuarter,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, Z) {\n    return function(string) {\n      var d = newDate(1900, undefined, 1),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n      if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\n\n      // If this is utcParse, never use the local timezone.\n      if (Z && !(\"Z\" in d)) d.Z = 0;\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // If the month was not specified, inherit from the quarter.\n      if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return localDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatQuarter(d) {\n    return 1 + ~~(d.getMonth() / 3);\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  function formatUTCQuarter(d) {\n    return 1 + ~~(d.getUTCMonth() / 3);\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", false);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier += \"\", true);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  return new Map(names.map((name, i) => [name.toLowerCase(), i]));\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseQuarter(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.s = +n[0], i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction dISO(d) {\n  var day = d.getDay();\n  return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  d = dISO(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatYearISO(d, p) {\n  d = dISO(d);\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatFullYearISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction UTCdISO(d) {\n  var day = d.getUTCDay();\n  return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  d = UTCdISO(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCYearISO(d, p) {\n  d = UTCdISO(d);\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCFullYearISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","import {utcFormat} from \"./defaultLocale.js\";\n\nexport var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString\n    ? formatIsoNative\n    : utcFormat(isoSpecifier);\n\nexport default formatIso;\n","import {isoSpecifier} from \"./isoFormat.js\";\nimport {utcParse} from \"./defaultLocale.js\";\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n    ? parseIsoNative\n    : utcParse(isoSpecifier);\n\nexport default parseIso;\n","import {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeTicks, timeTickInterval} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport nice from \"./nice.js\";\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {\n  var scale = continuous(),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval) {\n    var d = domain();\n    if (!interval || typeof interval.range !== \"function\") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);\n    return interval ? domain(nice(d, interval)) : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));\n  };\n\n  return scale;\n}\n\nexport default function time() {\n  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n","import {utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcTicks, utcTickInterval} from \"d3-time\";\nimport {utcFormat} from \"d3-time-format\";\nimport {calendar} from \"./time.js\";\nimport {initRange} from \"./init.js\";\n\nexport default function utcTime() {\n  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n}\n","import {interpolate, interpolateRound} from \"d3-interpolate\";\nimport {identity} from \"./continuous.js\";\nimport {initInterpolator} from \"./init.js\";\nimport {linearish} from \"./linear.js\";\nimport {loggish} from \"./log.js\";\nimport {symlogish} from \"./symlog.js\";\nimport {powish} from \"./pow.js\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1;\n      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];\n    };\n  }\n\n  scale.range = range(interpolate);\n\n  scale.rangeRound = range(interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport default function sequential() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialLog() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n","import {ascending, bisect, quantile} from \"d3-array\";\nimport {identity} from \"./continuous.js\";\nimport {initInterpolator} from \"./init.js\";\n\nexport default function sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (x != null && !isNaN(x = +x)) return interpolator((bisect(domain, x, 1) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.range = function() {\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n  };\n\n  scale.quantiles = function(n) {\n    return Array.from({length: n + 1}, (_, i) => quantile(domain, i / n));\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n","import {interpolate, interpolateRound, piecewise} from \"d3-interpolate\";\nimport {identity} from \"./continuous.js\";\nimport {initInterpolator} from \"./init.js\";\nimport {linearish} from \"./linear.js\";\nimport {loggish} from \"./log.js\";\nimport {copy} from \"./sequential.js\";\nimport {symlogish} from \"./symlog.js\";\nimport {powish} from \"./pow.js\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      s = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  function range(interpolate) {\n    return function(_) {\n      var r0, r1, r2;\n      return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];\n    };\n  }\n\n  scale.range = range(interpolate);\n\n  scale.rangeRound = range(interpolateRound);\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;\n    return scale;\n  };\n}\n\nexport default function diverging() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingLog() {\n  var scale = loggish(transformer()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n","export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors.js\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\");\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default scheme => interpolateRgbBasis(scheme[scheme.length - 1]);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))\n      + \")\";\n}\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar c = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n}\n","import {rgb} from \"d3-color\";\n\nvar c = rgb(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\nexport default function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n}\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n      + \")\";\n}\n","import colors from \"../colors.js\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","export const abs = Math.abs;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sin = Math.sin;\nexport const sqrt = Math.sqrt;\n\nexport const epsilon = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\n          var ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","export var slice = Array.prototype.slice;\n\nexport default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // falls through\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import {path} from \"d3-path\";\nimport array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x, y) {\n  var defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  x = typeof x === \"function\" ? x : (x === undefined) ? pointX : constant(x);\n  y = typeof y === \"function\" ? y : (y === undefined) ? pointY : constant(y);\n\n  function line(data) {\n    var i,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","import {path} from \"d3-path\";\nimport array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x0, y0, y1) {\n  var x1 = null,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  x0 = typeof x0 === \"function\" ? x0 : (x0 === undefined) ? pointX : constant(+x0);\n  y0 = typeof y0 === \"function\" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);\n  y1 = typeof y1 === \"function\" ? y1 : (y1 === undefined) ? pointY : constant(+y1);\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function(d) {\n  return d;\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport descending from \"./descending.js\";\nimport identity from \"./identity.js\";\nimport {tau} from \"./math.js\";\n\nexport default function() {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = (data = array(data)).length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    }\n\n    // Optionally sort the arcs by previously-computed values or by data.\n    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n    // Compute the arcs! They are stored in the original data's order.\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function(_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function(_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}\n","import curveLinear from \"./linear.js\";\n\nexport var curveRadialLinear = curveRadial(curveLinear);\n\nfunction Radial(curve) {\n  this._curve = curve;\n}\n\nRadial.prototype = {\n  areaStart: function() {\n    this._curve.areaStart();\n  },\n  areaEnd: function() {\n    this._curve.areaEnd();\n  },\n  lineStart: function() {\n    this._curve.lineStart();\n  },\n  lineEnd: function() {\n    this._curve.lineEnd();\n  },\n  point: function(a, r) {\n    this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n  }\n};\n\nexport default function curveRadial(curve) {\n\n  function radial(context) {\n    return new Radial(curve(context));\n  }\n\n  radial._curve = curve;\n\n  return radial;\n}\n","import curveRadial, {curveRadialLinear} from \"./curve/radial.js\";\nimport line from \"./line.js\";\n\nexport function lineRadial(l) {\n  var c = l.curve;\n\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n\n  l.curve = function(_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return l;\n}\n\nexport default function() {\n  return lineRadial(line().curve(curveRadialLinear));\n}\n","import curveRadial, {curveRadialLinear} from \"./curve/radial.js\";\nimport area from \"./area.js\";\nimport {lineRadial} from \"./lineRadial.js\";\n\nexport default function() {\n  var a = area().curve(curveRadialLinear),\n      c = a.curve,\n      x0 = a.lineX0,\n      x1 = a.lineX1,\n      y0 = a.lineY0,\n      y1 = a.lineY1;\n\n  a.angle = a.x, delete a.x;\n  a.startAngle = a.x0, delete a.x0;\n  a.endAngle = a.x1, delete a.x1;\n  a.radius = a.y, delete a.y;\n  a.innerRadius = a.y0, delete a.y0;\n  a.outerRadius = a.y1, delete a.y1;\n  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;\n  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;\n  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;\n  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;\n\n  a.curve = function(_) {\n    return arguments.length ? c(curveRadial(_)) : c()._curve;\n  };\n\n  return a;\n}\n","export default function(x, y) {\n  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n}\n","import pointRadial from \"../pointRadial.js\";\n\nclass Bump {\n  constructor(context, x) {\n    this._context = context;\n    this._x = x;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n  point(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: {\n        this._point = 1;\n        if (this._line) this._context.lineTo(x, y);\n        else this._context.moveTo(x, y);\n        break;\n      }\n      case 1: this._point = 2; // falls through\n      default: {\n        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);\n        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n        break;\n      }\n    }\n    this._x0 = x, this._y0 = y;\n  }\n}\n\nclass BumpRadial {\n  constructor(context) {\n    this._context = context;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {}\n  point(x, y) {\n    x = +x, y = +y;\n    if (this._point++ === 0) {\n      this._x0 = x, this._y0 = y;\n    } else {\n      const p0 = pointRadial(this._x0, this._y0);\n      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n      const p2 = pointRadial(x, this._y0);\n      const p3 = pointRadial(x, y);\n      this._context.moveTo(...p0);\n      this._context.bezierCurveTo(...p1, ...p2, ...p3);\n    }\n  }\n}\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\n\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\n\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}\n","import {path} from \"d3-path\";\nimport {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport {bumpX, bumpY, bumpRadial} from \"./curve/bump.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nfunction linkSource(d) {\n  return d.source;\n}\n\nfunction linkTarget(d) {\n  return d.target;\n}\n\nexport function link(curve) {\n  let source = linkSource;\n  let target = linkTarget;\n  let x = pointX;\n  let y = pointY;\n  let context = null;\n  let output = null;\n\n  function link() {\n    let buffer;\n    const argv = slice.call(arguments);\n    const s = source.apply(this, argv);\n    const t = target.apply(this, argv);\n    if (context == null) output = curve(buffer = path());\n    output.lineStart();\n    argv[0] = s, output.point(+x.apply(this, argv), +y.apply(this, argv));\n    argv[0] = t, output.point(+x.apply(this, argv), +y.apply(this, argv));\n    output.lineEnd();\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  link.source = function(_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n\n  link.target = function(_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n\n  link.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), link) : x;\n  };\n\n  link.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), link) : y;\n  };\n\n  link.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;\n  };\n\n  return link;\n}\n\nexport function linkHorizontal() {\n  return link(bumpX);\n}\n\nexport function linkVertical() {\n  return link(bumpY);\n}\n\nexport function linkRadial() {\n  const l = link(bumpRadial);\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n  return l;\n}\n","import {min, sqrt} from \"../math.js\";\n\nconst sqrt3 = sqrt(3);\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size + min(size / 28, 0.75)) * 0.59436;\n    const t = r / 2;\n    const u = t * sqrt3;\n    context.moveTo(0, r);\n    context.lineTo(0, -r);\n    context.moveTo(-u, -t);\n    context.lineTo(u, t);\n    context.moveTo(-u, t);\n    context.lineTo(u, -t);\n  }\n};\n","import {pi, sqrt, tau} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / pi);\n    context.moveTo(r, 0);\n    context.arc(0, 0, r, 0, tau);\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / 5) / 2;\n    context.moveTo(-3 * r, -r);\n    context.lineTo(-r, -r);\n    context.lineTo(-r, -3 * r);\n    context.lineTo(r, -3 * r);\n    context.lineTo(r, -r);\n    context.lineTo(3 * r, -r);\n    context.lineTo(3 * r, r);\n    context.lineTo(r, r);\n    context.lineTo(r, 3 * r);\n    context.lineTo(-r, 3 * r);\n    context.lineTo(-r, r);\n    context.lineTo(-3 * r, r);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst tan30 = sqrt(1 / 3);\nconst tan30_2 = tan30 * 2;\n\nexport default {\n  draw(context, size) {\n    const y = sqrt(size / tan30_2);\n    const x = y * tan30;\n    context.moveTo(0, -y);\n    context.lineTo(x, 0);\n    context.lineTo(0, y);\n    context.lineTo(-x, 0);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size) * 0.62625;\n    context.moveTo(0, -r);\n    context.lineTo(r, 0);\n    context.lineTo(0, r);\n    context.lineTo(-r, 0);\n    context.closePath();\n  }\n};\n","import {min, sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size - min(size / 7, 2)) * 0.87559;\n    context.moveTo(-r, 0);\n    context.lineTo(r, 0);\n    context.moveTo(0, r);\n    context.lineTo(0, -r);\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const w = sqrt(size);\n    const x = -w / 2;\n    context.rect(x, x, w, w);\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size) * 0.4431;\n    context.moveTo(r, r);\n    context.lineTo(r, -r);\n    context.lineTo(-r, -r);\n    context.lineTo(-r, r);\n    context.closePath();\n  }\n};\n","import {sin, cos, sqrt, pi, tau} from \"../math.js\";\n\nconst ka = 0.89081309152928522810;\nconst kr = sin(pi / 10) / sin(7 * pi / 10);\nconst kx = sin(tau / 10) * kr;\nconst ky = -cos(tau / 10) * kr;\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size * ka);\n    const x = kx * r;\n    const y = ky * r;\n    context.moveTo(0, -r);\n    context.lineTo(x, y);\n    for (let i = 1; i < 5; ++i) {\n      const a = tau * i / 5;\n      const c = cos(a);\n      const s = sin(a);\n      context.lineTo(s * r, -c * r);\n      context.lineTo(c * x - s * y, s * x + c * y);\n    }\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst sqrt3 = sqrt(3);\n\nexport default {\n  draw(context, size) {\n    const y = -sqrt(size / (sqrt3 * 3));\n    context.moveTo(0, y * 2);\n    context.lineTo(-sqrt3 * y, -y);\n    context.lineTo(sqrt3 * y, -y);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst sqrt3 = sqrt(3);\n\nexport default {\n  draw(context, size) {\n    const s = sqrt(size) * 0.6824;\n    const t = s  / 2;\n    const u = (s * sqrt3) / 2; // cos(Math.PI / 6)\n    context.moveTo(0, -s);\n    context.lineTo(u, t);\n    context.lineTo(-u, t);\n    context.closePath();\n  }\n};\n","import {sqrt} from \"../math.js\";\n\nconst c = -0.5;\nconst s = sqrt(3) / 2;\nconst k = 1 / sqrt(12);\nconst a = (k / 2 + 1) * 3;\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size / a);\n    const x0 = r / 2, y0 = r * k;\n    const x1 = x0, y1 = r * k + r;\n    const x2 = -x1, y2 = y1;\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n    context.closePath();\n  }\n};\n","import {min, sqrt} from \"../math.js\";\n\nexport default {\n  draw(context, size) {\n    const r = sqrt(size - min(size / 6, 1.7)) * 0.6189;\n    context.moveTo(-r, -r);\n    context.lineTo(r, r);\n    context.moveTo(-r, r);\n    context.lineTo(r, -r);\n  }\n};\n","import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport asterisk from \"./symbol/asterisk.js\";\nimport circle from \"./symbol/circle.js\";\nimport cross from \"./symbol/cross.js\";\nimport diamond from \"./symbol/diamond.js\";\nimport diamond2 from \"./symbol/diamond2.js\";\nimport plus from \"./symbol/plus.js\";\nimport square from \"./symbol/square.js\";\nimport square2 from \"./symbol/square2.js\";\nimport star from \"./symbol/star.js\";\nimport triangle from \"./symbol/triangle.js\";\nimport triangle2 from \"./symbol/triangle2.js\";\nimport wye from \"./symbol/wye.js\";\nimport x from \"./symbol/x.js\";\n\n// These symbols are designed to be filled.\nexport const symbolsFill = [\n  circle,\n  cross,\n  diamond,\n  square,\n  star,\n  triangle,\n  wye\n];\n\n// These symbols are designed to be stroked (with a width of 1.5px and round caps).\nexport const symbolsStroke = [\n  circle,\n  plus,\n  x,\n  triangle2,\n  asterisk,\n  square2,\n  diamond2\n];\n\nexport default function Symbol(type, size) {\n  let context = null;\n\n  type = typeof type === \"function\" ? type : constant(type || circle);\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\n\n  function symbol() {\n    let buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  symbol.type = function(_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n\n  symbol.size = function(_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n\n  symbol.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n\n  return symbol;\n}\n","export default function() {}\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    (2 * that._x0 + that._x1) / 3,\n    (2 * that._y0 + that._y1) / 3,\n    (that._x0 + 2 * that._x1) / 3,\n    (that._y0 + 2 * that._y1) / 3,\n    (that._x0 + 4 * that._x1 + x) / 6,\n    (that._y0 + 4 * that._y1 + y) / 6\n  );\n}\n\nexport function Basis(context) {\n  this._context = context;\n}\n\nBasis.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 3: point(this, this._x1, this._y1); // falls through\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new Basis(context);\n}\n","import noop from \"../noop.js\";\nimport {point} from \"./basis.js\";\n\nfunction BasisClosed(context) {\n  this._context = context;\n}\n\nBasisClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x2, this._y2);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x2, this._y2);\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisClosed(context);\n}\n","import {point} from \"./basis.js\";\n\nfunction BasisOpen(context) {\n  this._context = context;\n}\n\nBasisOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n      case 3: this._point = 4; // falls through\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n  }\n};\n\nexport default function(context) {\n  return new BasisOpen(context);\n}\n","import {Basis} from \"./basis.js\";\n\nfunction Bundle(context, beta) {\n  this._basis = new Basis(context);\n  this._beta = beta;\n}\n\nBundle.prototype = {\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n    this._basis.lineStart();\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        j = x.length - 1;\n\n    if (j > 0) {\n      var x0 = x[0],\n          y0 = y[0],\n          dx = x[j] - x0,\n          dy = y[j] - y0,\n          i = -1,\n          t;\n\n      while (++i <= j) {\n        t = i / j;\n        this._basis.point(\n          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n        );\n      }\n    }\n\n    this._x = this._y = null;\n    this._basis.lineEnd();\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\nexport default (function custom(beta) {\n\n  function bundle(context) {\n    return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n  }\n\n  bundle.beta = function(beta) {\n    return custom(+beta);\n  };\n\n  return bundle;\n})(0.85);\n","export function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nexport function Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // falls through\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import noop from \"../noop.js\";\nimport {point} from \"./cardinal.js\";\n\nexport function CardinalClosed(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalClosed(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {point} from \"./cardinal.js\";\n\nexport function CardinalOpen(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // falls through\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalOpen(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import {epsilon} from \"../math.js\";\nimport {Cardinal} from \"./cardinal.js\";\n\nexport function point(that, x, y) {\n  var x1 = that._x1,\n      y1 = that._y1,\n      x2 = that._x2,\n      y2 = that._y2;\n\n  if (that._l01_a > epsilon) {\n    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n        n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n  }\n\n  if (that._l23_a > epsilon) {\n    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n        m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n  }\n\n  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n}\n\nfunction CatmullRom(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRom.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: this.point(this._x2, this._y2); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; // falls through\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalClosed} from \"./cardinalClosed.js\";\nimport noop from \"../noop.js\";\nimport {point} from \"./catmullRom.js\";\n\nfunction CatmullRomClosed(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import {CardinalOpen} from \"./cardinalOpen.js\";\nimport {point} from \"./catmullRom.js\";\n\nfunction CatmullRomOpen(context, alpha) {\n  this._context = context;\n  this._alpha = alpha;\n}\n\nCatmullRomOpen.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._l01_a = this._l12_a = this._l23_a =\n    this._l01_2a = this._l12_2a = this._l23_2a =\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n\n    if (this._point) {\n      var x23 = this._x2 - x,\n          y23 = this._y2 - y;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n    }\n\n    switch (this._point) {\n      case 0: this._point = 1; break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n      case 3: this._point = 4; // falls through\n      default: point(this, x, y); break;\n    }\n\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(alpha) {\n\n  function catmullRom(context) {\n    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n  }\n\n  catmullRom.alpha = function(alpha) {\n    return custom(+alpha);\n  };\n\n  return catmullRom;\n})(0.5);\n","import noop from \"../noop.js\";\n\nfunction LinearClosed(context) {\n  this._context = context;\n}\n\nLinearClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._point) this._context.closePath();\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    if (this._point) this._context.lineTo(x, y);\n    else this._point = 1, this._context.moveTo(x, y);\n  }\n};\n\nexport default function(context) {\n  return new LinearClosed(context);\n}\n","function sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n// Calculate a one-sided slope.\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 =\n    this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    var t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\n  closePath: function() { this._context.closePath(); },\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n};\n\nexport function monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nexport function monotoneY(context) {\n  return new MonotoneY(context);\n}\n","function Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  a[n - 1] = r[n - 1] / b[n - 1];\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n  return [a, b];\n}\n\nexport default function(context) {\n  return new Natural(context);\n}\n","function Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // falls through\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\nexport default function(context) {\n  return new Step(context, 0.5);\n}\n\nexport function stepBefore(context) {\n  return new Step(context, 0);\n}\n\nexport function stepAfter(context) {\n  return new Step(context, 1);\n}\n","export default function(series, order) {\n  if (!((n = series.length) > 1)) return;\n  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n    s0 = s1, s1 = series[order[i]];\n    for (j = 0; j < m; ++j) {\n      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n    }\n  }\n}\n","export default function(series) {\n  var n = series.length, o = new Array(n);\n  while (--n >= 0) o[n] = n;\n  return o;\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nfunction stackSeries(key) {\n  const series = [];\n  series.key = key;\n  return series;\n}\n\nexport default function() {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var sz = Array.from(keys.apply(this, arguments), stackSeries),\n        i, n = sz.length, j = -1,\n        oz;\n\n    for (const d of data) {\n      for (i = 0, ++j; i < n; ++i) {\n        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;\n      }\n    }\n\n    for (i = 0, oz = array(order(sz)); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function(_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(Array.from(_)), stack) : keys;\n  };\n\n  stack.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function(_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(Array.from(_)), stack) : order;\n  };\n\n  stack.offset = function(_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}\n","import none from \"./none.js\";\n\nexport default function(series, order) {\n  if (!((n = series.length) > 0)) return;\n  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n  }\n  none(series, order);\n}\n","export default function(series, order) {\n  if (!((n = series.length) > 0)) return;\n  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\n    for (yp = yn = 0, i = 0; i < n; ++i) {\n      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {\n        d[0] = yp, d[1] = yp += dy;\n      } else if (dy < 0) {\n        d[1] = yn, d[0] = yn += dy;\n      } else {\n        d[0] = 0, d[1] = dy;\n      }\n    }\n  }\n}\n","import none from \"./none.js\";\n\nexport default function(series, order) {\n  if (!((n = series.length) > 0)) return;\n  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n    s0[j][1] += s0[j][0] = -y / 2;\n  }\n  none(series, order);\n}\n","import none from \"./none.js\";\n\nexport default function(series, order) {\n  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n      var si = series[order[i]],\n          sij0 = si[j][1] || 0,\n          sij1 = si[j - 1][1] || 0,\n          s3 = (sij0 - sij1) / 2;\n      for (var k = 0; k < i; ++k) {\n        var sk = series[order[k]],\n            skj0 = sk[j][1] || 0,\n            skj1 = sk[j - 1][1] || 0;\n        s3 += skj0 - skj1;\n      }\n      s1 += sij0, s2 += s3 * sij0;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    if (s1) y -= s2 / s1;\n  }\n  s0[j - 1][1] += s0[j - 1][0] = y;\n  none(series, order);\n}\n","import none from \"./none.js\";\n\nexport default function(series) {\n  var peaks = series.map(peak);\n  return none(series).sort(function(a, b) { return peaks[a] - peaks[b]; });\n}\n\nfunction peak(series) {\n  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;\n  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;\n  return j;\n}\n","import none from \"./none.js\";\n\nexport default function(series) {\n  var sums = series.map(sum);\n  return none(series).sort(function(a, b) { return sums[a] - sums[b]; });\n}\n\nexport function sum(series) {\n  var s = 0, i = -1, n = series.length, v;\n  while (++i < n) if (v = +series[i][1]) s += v;\n  return s;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function(series) {\n  return ascending(series).reverse();\n}\n","import appearance from \"./appearance.js\";\nimport {sum} from \"./ascending.js\";\n\nexport default function(series) {\n  var n = series.length,\n      i,\n      j,\n      sums = series.map(sum),\n      order = appearance(series),\n      top = 0,\n      bottom = 0,\n      tops = [],\n      bottoms = [];\n\n  for (i = 0; i < n; ++i) {\n    j = order[i];\n    if (top < bottom) {\n      top += sums[j];\n      tops.push(j);\n    } else {\n      bottom += sums[j];\n      bottoms.push(j);\n    }\n  }\n\n  return bottoms.reverse().concat(tops);\n}\n","import none from \"./none.js\";\n\nexport default function(series) {\n  return none(series).reverse();\n}\n","export default x => () => x;\n","export default function ZoomEvent(type, {\n  sourceEvent,\n  target,\n  transform,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    transform: {value: transform, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n","export function Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\nTransform.prototype = {\n  constructor: Transform,\n  scale: function(k) {\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n  }\n};\n\nexport var identity = new Transform(1, 0, 0);\n\ntransform.prototype = Transform.prototype;\n\nexport default function transform(node) {\n  while (!node.__zoom) if (!(node = node.parentNode)) return identity;\n  return node.__zoom;\n}\n","export function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolateZoom} from \"d3-interpolate\";\nimport {select, pointer} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport ZoomEvent from \"./event.js\";\nimport {Transform, identity} from \"./transform.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\n// Ignore right-click, since that should open the context menu.\n// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event\nfunction defaultFilter(event) {\n  return (!event.ctrlKey || event.type === 'wheel') && !event.button;\n}\n\nfunction defaultExtent() {\n  var e = this;\n  if (e instanceof SVGElement) {\n    e = e.ownerSVGElement || e;\n    if (e.hasAttribute(\"viewBox\")) {\n      e = e.viewBox.baseVal;\n      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\n    }\n    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\n  }\n  return [[0, 0], [e.clientWidth, e.clientHeight]];\n}\n\nfunction defaultTransform() {\n  return this.__zoom || identity;\n}\n\nfunction defaultWheelDelta(event) {\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\nfunction defaultConstrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      extent = defaultExtent,\n      constrain = defaultConstrain,\n      wheelDelta = defaultWheelDelta,\n      touchable = defaultTouchable,\n      scaleExtent = [0, Infinity],\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\n      duration = 250,\n      interpolate = interpolateZoom,\n      listeners = dispatch(\"start\", \"zoom\", \"end\"),\n      touchstarting,\n      touchfirst,\n      touchending,\n      touchDelay = 500,\n      wheelDelay = 150,\n      clickDistance2 = 0,\n      tapDistance = 10;\n\n  function zoom(selection) {\n    selection\n        .property(\"__zoom\", defaultTransform)\n        .on(\"wheel.zoom\", wheeled, {passive: false})\n        .on(\"mousedown.zoom\", mousedowned)\n        .on(\"dblclick.zoom\", dblclicked)\n      .filter(touchable)\n        .on(\"touchstart.zoom\", touchstarted)\n        .on(\"touchmove.zoom\", touchmoved)\n        .on(\"touchend.zoom touchcancel.zoom\", touchended)\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  zoom.transform = function(collection, transform, point, event) {\n    var selection = collection.selection ? collection.selection() : collection;\n    selection.property(\"__zoom\", defaultTransform);\n    if (collection !== selection) {\n      schedule(collection, transform, point, event);\n    } else {\n      selection.interrupt().each(function() {\n        gesture(this, arguments)\n          .event(event)\n          .start()\n          .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n          .end();\n      });\n    }\n  };\n\n  zoom.scaleBy = function(selection, k, p, event) {\n    zoom.scaleTo(selection, function() {\n      var k0 = this.__zoom.k,\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n      return k0 * k1;\n    }, p, event);\n  };\n\n  zoom.scaleTo = function(selection, k, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t0 = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p,\n          p1 = t0.invert(p0),\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\n    }, p, event);\n  };\n\n  zoom.translateBy = function(selection, x, y, event) {\n    zoom.transform(selection, function() {\n      return constrain(this.__zoom.translate(\n        typeof x === \"function\" ? x.apply(this, arguments) : x,\n        typeof y === \"function\" ? y.apply(this, arguments) : y\n      ), extent.apply(this, arguments), translateExtent);\n    }, null, event);\n  };\n\n  zoom.translateTo = function(selection, x, y, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p;\n      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(\n        typeof x === \"function\" ? -x.apply(this, arguments) : -x,\n        typeof y === \"function\" ? -y.apply(this, arguments) : -y\n      ), e, translateExtent);\n    }, p, event);\n  };\n\n  function scale(transform, k) {\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n  }\n\n  function translate(transform, p0, p1) {\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n  }\n\n  function centroid(extent) {\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n  }\n\n  function schedule(transition, transform, point, event) {\n    transition\n        .on(\"start.zoom\", function() { gesture(this, arguments).event(event).start(); })\n        .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).event(event).end(); })\n        .tween(\"zoom\", function() {\n          var that = this,\n              args = arguments,\n              g = gesture(that, args).event(event),\n              e = extent.apply(that, args),\n              p = point == null ? centroid(e) : typeof point === \"function\" ? point.apply(that, args) : point,\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n              a = that.__zoom,\n              b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n          return function(t) {\n            if (t === 1) t = b; // Avoid rounding error on end.\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n            g.zoom(null, t);\n          };\n        });\n  }\n\n  function gesture(that, args, clean) {\n    return (!clean && that.__zooming) || new Gesture(that, args);\n  }\n\n  function Gesture(that, args) {\n    this.that = that;\n    this.args = args;\n    this.active = 0;\n    this.sourceEvent = null;\n    this.extent = extent.apply(that, args);\n    this.taps = 0;\n  }\n\n  Gesture.prototype = {\n    event: function(event) {\n      if (event) this.sourceEvent = event;\n      return this;\n    },\n    start: function() {\n      if (++this.active === 1) {\n        this.that.__zooming = this;\n        this.emit(\"start\");\n      }\n      return this;\n    },\n    zoom: function(key, transform) {\n      if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\n      if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n      if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n      this.that.__zoom = transform;\n      this.emit(\"zoom\");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) {\n        delete this.that.__zooming;\n        this.emit(\"end\");\n      }\n      return this;\n    },\n    emit: function(type) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new ZoomEvent(type, {\n          sourceEvent: this.sourceEvent,\n          target: zoom,\n          type,\n          transform: this.that.__zoom,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function wheeled(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var g = gesture(this, args).event(event),\n        t = this.__zoom,\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\n        p = pointer(event);\n\n    // If the mouse is in the same location as before, reuse it.\n    // If there were recent wheel events, reset the wheel idle timeout.\n    if (g.wheel) {\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n        g.mouse[1] = t.invert(g.mouse[0] = p);\n      }\n      clearTimeout(g.wheel);\n    }\n\n    // If this wheel event won’t trigger a transform change, ignore it.\n    else if (t.k === k) return;\n\n    // Otherwise, capture the mouse point and location at the start.\n    else {\n      g.mouse = [p, t.invert(p)];\n      interrupt(this);\n      g.start();\n    }\n\n    noevent(event);\n    g.wheel = setTimeout(wheelidled, wheelDelay);\n    g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\n\n    function wheelidled() {\n      g.wheel = null;\n      g.end();\n    }\n  }\n\n  function mousedowned(event, ...args) {\n    if (touchending || !filter.apply(this, arguments)) return;\n    var currentTarget = event.currentTarget,\n        g = gesture(this, args, true).event(event),\n        v = select(event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n        p = pointer(event, currentTarget),\n        x0 = event.clientX,\n        y0 = event.clientY;\n\n    dragDisable(event.view);\n    nopropagation(event);\n    g.mouse = [p, this.__zoom.invert(p)];\n    interrupt(this);\n    g.start();\n\n    function mousemoved(event) {\n      noevent(event);\n      if (!g.moved) {\n        var dx = event.clientX - x0, dy = event.clientY - y0;\n        g.moved = dx * dx + dy * dy > clickDistance2;\n      }\n      g.event(event)\n       .zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));\n    }\n\n    function mouseupped(event) {\n      v.on(\"mousemove.zoom mouseup.zoom\", null);\n      dragEnable(event.view, g.moved);\n      noevent(event);\n      g.event(event).end();\n    }\n  }\n\n  function dblclicked(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var t0 = this.__zoom,\n        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),\n        p1 = t0.invert(p0),\n        k1 = t0.k * (event.shiftKey ? 0.5 : 2),\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);\n\n    noevent(event);\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);\n    else select(this).call(zoom.transform, t1, p0, event);\n  }\n\n  function touchstarted(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var touches = event.touches,\n        n = touches.length,\n        g = gesture(this, args, event.changedTouches.length === n).event(event),\n        started, i, t, p;\n\n    nopropagation(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      p = [p, this.__zoom.invert(p), t.identifier];\n      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\n      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\n    }\n\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\n\n    if (started) {\n      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n      interrupt(this);\n      g.start();\n    }\n  }\n\n  function touchmoved(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t, p, l;\n\n    noevent(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n    }\n    t = g.that.__zoom;\n    if (g.touch1) {\n      var p0 = g.touch0[0], l0 = g.touch0[1],\n          p1 = g.touch1[0], l1 = g.touch1[1],\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n      t = scale(t, Math.sqrt(dp / dl));\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n    }\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n    else return;\n\n    g.zoom(\"touch\", constrain(translate(t, p, l), g.extent, translateExtent));\n  }\n\n  function touchended(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t;\n\n    nopropagation(event);\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\n    for (i = 0; i < n; ++i) {\n      t = touches[i];\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n    }\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\n    else {\n      g.end();\n      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\n      if (g.taps === 2) {\n        t = pointer(t, this);\n        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {\n          var p = select(this).on(\"dblclick.zoom\");\n          if (p) p.apply(this, arguments);\n        }\n      }\n    }\n  }\n\n  zoom.wheelDelta = function(_) {\n    return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : constant(+_), zoom) : wheelDelta;\n  };\n\n  zoom.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), zoom) : filter;\n  };\n\n  zoom.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), zoom) : touchable;\n  };\n\n  zoom.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n  };\n\n  zoom.scaleExtent = function(_) {\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\n  };\n\n  zoom.translateExtent = function(_) {\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\n  };\n\n  zoom.constrain = function(_) {\n    return arguments.length ? (constrain = _, zoom) : constrain;\n  };\n\n  zoom.duration = function(_) {\n    return arguments.length ? (duration = +_, zoom) : duration;\n  };\n\n  zoom.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\n  };\n\n  zoom.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? zoom : value;\n  };\n\n  zoom.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\n  };\n\n  zoom.tapDistance = function(_) {\n    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;\n  };\n\n  return zoom;\n}\n","import regulations from \"../assets/data/regulations.json\";\r\nimport * as d3 from 'd3';\r\nimport { Races } from './types'\r\n\r\n/**\r\n * Extract all the results available for a specific GP through all years.\r\n * @param data Raw data from either parsed_quali.json or parsed_races.json\r\n * @param gpName Name of the grand prix to extract\r\n * @returns raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}\r\n */\r\nexport function extractGP (data: Races, gpName: string) {\r\n    let all_years = Object.entries(data).map(q => {\r\n        if (q[1]) {\r\n            return {year: q[0], results: Object.entries(q[1]).filter(y => y[0] === gpName).map(o => o[1])[0]}\r\n        } else {\r\n            return {year: q[0], results: null}\r\n        }\r\n    })\r\n    return all_years\r\n}\r\n\r\nexport function extractConstructor(data, constructorName: string) {\r\n    const constructorRecord = []\r\n    for (const d of data) {\r\n        let constructorResult = null\r\n        if (!!d.results) {\r\n            constructorResult = d.results.find((result) => result[\"constructor\"].toLowerCase() === constructorName.toLowerCase())\r\n            if (constructorResult && constructorResult.fastest < 300) {\r\n                constructorRecord.push(constructorResult.fastest)\r\n                continue\r\n            }\r\n        }\r\n        constructorRecord.push(null)\r\n    }\r\n    return constructorRecord\r\n}\r\n\r\nexport function extractRegulation(year: string) {\r\n    return Object.entries(regulations).find(q => q[0] === year)\r\n}\r\n\r\n/**\r\n * Extracts all the best times every year. If the best time is above 300s (5min), return null\r\n * @param data raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}\r\n * @returns array of time, each item is the best time for a year in the current GP\r\n */\r\n export function extractBestTimes(data) {\r\n    return d3.map(data, ({results}) => {\r\n        if (results) {\r\n            const minTime: string = d3.min(results.map(({fastest}) => fastest))\r\n            return +minTime > 300 ? null : minTime\r\n        }\r\n        return null\r\n    });\r\n}\r\n\r\n/**\r\n * Extracts all the worst times every year. If the worst time is above 300s (5min), return null\r\n * @param data raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}\r\n * @returns array of time, each item is the worst time for a year in the current GP\r\n */\r\nexport function extractWorstTimes(data) {\r\n    return d3.map(data, ({results}) => {\r\n        if (results) {\r\n            const maxTime: string = d3.max(results.map(({fastest}) => fastest))\r\n            return +maxTime > 300 ? null : maxTime\r\n        }\r\n        return null\r\n    });\r\n}\r\n\r\n/**\r\n * Builds the X vector. If no results (y value) is available, replace the date with a null\r\n * @param data raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}\r\n * @returns array of dates\r\n */\r\nexport function extractDates(data) {\r\n    // const allYears = Object.entries(data).map(([key, val]) => +val['year'])\r\n    // return d3.range(d3.min(allYears), d3.max(allYears)).map(d => new Date(d + '-01-01'))\r\n    return d3.range(1994, 2021).map(d => new Date(d + '-01-01'))\r\n}\r\n\r\n/**\r\n * Returns the years of each regulation.\r\n * @returns array of dates\r\n */\r\n export function extractRegulationDates(): Date[] {\r\n    return Object.keys(regulations).map(element => new Date(element + '-01-01'))\r\n}\r\n\r\n\r\nexport function getIndexOfYear(year: any) {\r\n    return Object.keys(regulations).indexOf(year)\r\n}\r\n\r\n","export enum GP {\r\n    ABU = 'Abu Dhabi Grand Prix',\r\n    ARGENTINE = 'Argentine Grand Prix',\r\n    AUSTRALIAN = 'Australian Grand Prix',\r\n    AUSTRIAN = 'Austrian Grand Prix',\r\n    AZERBAIJAN = 'Azerbaijan Grand Prix',\r\n    BAHRAIN = 'Bahrain Grand Prix',\r\n    BELGIAN = 'Belgian Grand Prix',\r\n    BRAZILIAN = 'Brazilian Grand Prix',\r\n    BRITISH = 'British Grand Prix',\r\n    CANADIAN = 'Canadian Grand Prix',\r\n    CHINESE = 'Chinese Grand Prix',\r\n    DUTCH = 'Dutch Grand Prix',\r\n    EIFEL = 'Eifel Grand Prix',\r\n    EMILIA = 'Emilia Romagna Grand Prix',\r\n    EUROPEAN = 'European Grand Prix',\r\n    FRENCH = 'French Grand Prix',\r\n    GERMAN = 'German Grand Prix',\r\n    HUNGARIAN = 'Hungarian Grand Prix',\r\n    INDIAN = 'Indian Grand Prix',\r\n    ITALIAN = 'Italian Grand Prix',\r\n    JAPANESE = 'Japanese Grand Prix',\r\n    KOREAN = 'Korean Grand Prix',\r\n    MALAYSIAN = 'Malaysian Grand Prix',\r\n    MEXICAN = 'Mexican Grand Prix\"',\r\n    MEXICO = 'Mexico City Grand Prix\"',\r\n    MONACO = 'Monaco Grand Prix',\r\n    PACIFIC = 'Pacific Grand Prix',\r\n    PORTUGUESE = 'Portuguese Grand Prix',\r\n    QATAR = 'Qatar Grand Prix',\r\n    RUSSIAN = 'Russian Grand Prix',\r\n    SAKHIR = 'Sakhir Grand Prix',\r\n    SAN = 'San Marino Grand Prix',\r\n    SAO_PAULO = 'Sao Paulo Grand Prix',\r\n    SAUDI = 'Saudi Arabian Grand Prix',\r\n    SINGAPORE = 'Singapore Grand Prix',\r\n    SPANISH = 'Spanish Grand Prix',\r\n    STYRIAN = 'Styrian Grand Prix',\r\n    TURKISH = 'Turkish Grand Prix',\r\n    TUSCAN = 'Tuscan Grand Prix',\r\n    UNITED = 'United States Grand Prix',\r\n}\r\n\r\nexport enum CONSTRUCTOR {\r\n    ALFA_ROMEO = 'Alfa Romeo',\r\n    ALPHATAURI = 'AlphaTauri',\r\n    ALPINE_F1_TEAM = 'Alpine F1 Team',\r\n    ARROWS = 'Arrows',\r\n    ASTON_MARTIN = 'Aston Martin',\r\n    BAR = 'BAR',\r\n    BENETTON = 'Benetton',\r\n    BMW_SAUBER = 'BMW Sauber',\r\n    BRAWN = 'Brawn',\r\n    CATERHAM = 'Caterham',\r\n    FERRARI = 'Ferrari',\r\n    FOOTWORK = 'Footwork',\r\n    FORCE_INDIA = 'Force India',\r\n    FORTI = 'Forti',\r\n    HAAS_F1_TEAM = 'Haas F1 Team',\r\n    HONDA = 'Honda',\r\n    HRT = 'HRT',\r\n    JAGUAR = 'Jaguar',\r\n    JORDAN = 'Jordan',\r\n    LARROUSSE = 'Larrousse',\r\n    LIGIER = 'Ligier',\r\n    LOTUS_F1 = 'Lotus F1',\r\n    LOTUS = 'Lotus',\r\n    MANOR_MARUSSIA = 'Manor Marussia',\r\n    MARUSSIA = 'Marussia',\r\n    MCLAREN = 'McLaren',\r\n    MERCEDES = 'Mercedes',\r\n    MF1 = 'MF1',\r\n    MINARDI = 'Minardi',\r\n    PACIFIC = 'Pacific',\r\n    PROST = 'Prost',\r\n    RACING_POINT = 'Racing Point',\r\n    RED_BULL = 'Red Bull',\r\n    RENAULT = 'Renault',\r\n    SAUBER = 'Sauber',\r\n    SIMTEK = 'Simtek',\r\n    SPYKER_MF1 = 'Spyker MF1',\r\n    SPYKER = 'Spyker',\r\n    STEWART = 'Stewart',\r\n    SUPER_AGURI = 'Super Aguri',\r\n    TEAM_LOTUS = 'Team Lotus',\r\n    TORO_ROSSO = 'Toro Rosso',\r\n    TOYOTA = 'Toyota',\r\n    TYRRELL = 'Tyrrell',\r\n    VIRGIN = 'Virgin',\r\n    WILLIAMS = 'Williams'\r\n}\r\n\r\nexport const MOST_FREQ_CONSTRUCTORS: string[] = [\r\n    CONSTRUCTOR.WILLIAMS,\r\n    CONSTRUCTOR.FERRARI,\r\n    CONSTRUCTOR.MCLAREN,\r\n    CONSTRUCTOR.RED_BULL,\r\n    CONSTRUCTOR.SAUBER,\r\n    CONSTRUCTOR.TORO_ROSSO,\r\n    CONSTRUCTOR.RENAULT,\r\n    CONSTRUCTOR.MERCEDES,\r\n]\r\n\r\nexport enum SCROLLYOPTION {\r\n    ANNEES_2010,\r\n    TURBOHYBRID,\r\n    FERRARI_VS_WILLIAMS,\r\n    ANNEES_2000\r\n}\r\n\r\nexport const FIXED_CLASSES_OPACITY = ['xaxis', 'yaxis', 'regulations', 'scrolly-rect', 'main-title']\r\n\r\n// all the plotted times are between these bounds\r\nexport const Y_MINMAX = [60, 150]\r\n\r\nexport function addSelectOptionsGps(select: HTMLElement, selected: string): void {\r\n    for (let gp in GP) {\r\n        const option = document.createElement('option')\r\n        option.innerHTML = GP[gp]\r\n        option.value = GP[gp]\r\n        if (GP[gp] === selected) {\r\n            option.selected = true\r\n        }\r\n        select.appendChild(option)\r\n    }\r\n}\r\n\r\nexport function getConstructorColor(constructor: string): string {\r\n    switch (constructor) {\r\n        case CONSTRUCTOR.FERRARI:\r\n            return 'red'\r\n        case CONSTRUCTOR.MCLAREN:\r\n            return 'orange'\r\n        case CONSTRUCTOR.RED_BULL:\r\n            return 'blue'\r\n        case CONSTRUCTOR.ALFA_ROMEO:\r\n            return 'pink'\r\n        case CONSTRUCTOR.SAUBER:\r\n            return 'hotpink'\r\n        case CONSTRUCTOR.TORO_ROSSO:\r\n            return 'tan'\r\n        case CONSTRUCTOR.RENAULT:\r\n            return 'grey'\r\n        case CONSTRUCTOR.MERCEDES:\r\n            return 'darkcyan'\r\n        case CONSTRUCTOR.WILLIAMS:\r\n            return 'green'\r\n        case 'min':\r\n            return 'purple'\r\n        case 'max':\r\n            return 'black'\r\n        default:\r\n            return 'grey'\r\n    }\r\n}\r\n\r\nexport function addSelectOptionsConstructors(select: any, selected: string[]) {\r\n    const selectOptions = MOST_FREQ_CONSTRUCTORS\r\n    selectOptions.push(...['min', 'max'])\r\n    selectOptions.forEach((c) => {\r\n        const option = document.createElement('input')\r\n        const label = document.createElement('label')\r\n        const text = document.createElement('span')\r\n        label.appendChild(option)\r\n        label.appendChild(text)\r\n        label.setAttribute('class', 'constructor-option')\r\n        label.classList.add('check')\r\n        option.type = \"checkbox\"\r\n        text.classList.add('noselect')\r\n        text.style.color = getConstructorColor(c)\r\n        text.style.border = '2px solid '+getConstructorColor(c)\r\n        if (c === 'max') {\r\n            text.style.backgroundColor = getConstructorColor(c)\r\n            text.style.color = '#fff'\r\n            text.innerHTML = 'Pire temps'\r\n        } else if (c === 'min') {\r\n            label.style.paddingLeft = '40px'\r\n            text.style.backgroundColor = getConstructorColor(c)\r\n            text.style.color = '#fff'\r\n            text.innerHTML = 'Meilleur temps'\r\n            option.setAttribute('style', 'margin-left: 50px')\r\n        } else {\r\n            text.innerHTML = c\r\n        }\r\n        option.addEventListener('change', function() {\r\n            if (this.checked) {\r\n                text.style.backgroundColor = getConstructorColor(c)\r\n                text.style.color = '#fff'\r\n            } else {\r\n                text.style.color = getConstructorColor(c)\r\n                text.style.backgroundColor = ''\r\n\r\n            }\r\n          });\r\n        option.value = c\r\n        option.setAttribute('class', 'constructor-option')\r\n        option.setAttribute('id', 'constructor-option-'+c)\r\n        if (selected.includes(c)) {\r\n            text.style.backgroundColor = getConstructorColor(c)\r\n            text.style.color = '#fff'\r\n            option.checked = true\r\n        }\r\n        label.classList.add('select-constructor')\r\n        select.appendChild(label)\r\n    })\r\n}\r\n\r\n\r\nexport function isInputElem(elem: Element): elem is HTMLInputElement {\r\n    return elem.tagName === 'INPUT';\r\n}\r\n\r\n// adapted from https://stackoverflow.com/questions/21294302/converting-milliseconds-to-minutes-and-seconds-with-javascript\r\nexport function getHumanReadableTime(duration) {\r\n    let milliseconds = parseInt(`${duration % 1000}`)\r\n    let seconds = parseInt(`${duration / 1000 % 60}`)\r\n    let minutes = parseInt(`${duration / (1000 * 60) % 60}`)\r\n    let hours = parseInt(`${duration / (1000 * 60 * 60) % 24}`);\r\n\r\n    hours = (hours < 10) ? 0 + hours : hours;\r\n    minutes = (minutes < 10) ? 0 + minutes : minutes;\r\n    seconds = (seconds < 10) ? 0 + seconds : seconds;\r\n\r\n    return minutes + \":\" + seconds + \".\" + milliseconds;\r\n}\r\n","export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function(key) {\n    return (prefix + key) in this;\n  },\n  get: function(key) {\n    return this[prefix + key];\n  },\n  set: function(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function() {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function() {\n    var keys = [];\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n    return entries;\n  },\n  size: function() {\n    var size = 0;\n    for (var property in this) if (property[0] === prefix) ++size;\n    return size;\n  },\n  empty: function() {\n    for (var property in this) if (property[0] === prefix) return false;\n    return true;\n  },\n  each: function(f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map;\n\n  // Copy constructor.\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n  // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n    var i = -1,\n        n = object.length,\n        o;\n\n    if (f == null) while (++i < n) map.set(i, object[i]);\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\n  }\n\n  // Convert object to map.\n  else if (object) for (var key in object) map.set(key, object[key]);\n\n  return map;\n}\n\nexport default map;\n","import {default as map, prefix} from \"./map\";\n\nfunction Set() {}\n\nvar proto = map.prototype;\n\nSet.prototype = set.prototype = {\n  constructor: Set,\n  has: proto.has,\n  add: function(value) {\n    value += \"\";\n    this[prefix + value] = value;\n    return this;\n  },\n  remove: proto.remove,\n  clear: proto.clear,\n  values: proto.keys,\n  size: proto.size,\n  empty: proto.empty,\n  each: proto.each\n};\n\nfunction set(object, f) {\n  var set = new Set;\n\n  // Copy constructor.\n  if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n  // Otherwise, assume it’s an array.\n  else if (object) {\n    var i = -1, n = object.length;\n    if (f == null) while (++i < n) set.add(object[i]);\n    else while (++i < n) set.add(f(object[i], i, object));\n  }\n\n  return set;\n}\n\nexport default set;\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","import {Selection} from \"./index\";\nimport {EnterNode} from \"./enter\";\nimport constant from \"../constant\";\n\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n      if (keyValue in nodeByKeyValue) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue[keyValue] = node;\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\n    if (node = nodeByKeyValue[keyValue]) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue[keyValue] = null;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nexport default function(value, key) {\n  if (!value) {\n    data = new Array(this.size()), j = -1;\n    this.each(function(d) { data[++j] = d; });\n    return data;\n  }\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n","import {Selection} from \"./index\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n}\n","import namespace from \"../namespace\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import namespace from \"./namespace\";\nimport {xhtml} from \"./namespaces\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","import creator from \"../creator\";\nimport selector from \"../selector\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","var filterEvents = {};\n\nexport var event = null;\n\nif (typeof document !== \"undefined\") {\n  var element = document.documentElement;\n  if (!(\"onmouseenter\" in element)) {\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n  }\n}\n\nfunction filterContextListener(listener, index, group) {\n  listener = contextListener(listener, index, group);\n  return function(event) {\n    var related = event.relatedTarget;\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n      listener.call(this, event);\n    }\n  };\n}\n\nfunction contextListener(listener, index, group) {\n  return function(event1) {\n    var event0 = event; // Events can be reentrant (e.g., focus).\n    event = event1;\n    try {\n      listener.call(this, this.__data__, index, group);\n    } finally {\n      event = event0;\n    }\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, capture) {\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n  return function(d, i, group) {\n    var on = this.__on, o, listener = wrap(value, i, group);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, capture);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, capture) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  if (capture == null) capture = false;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n  return this;\n}\n\nexport function customEvent(event1, listener, that, args) {\n  var event0 = event;\n  event1.sourceEvent = event;\n  event = event1;\n  try {\n    return listener.apply(that, args);\n  } finally {\n    event = event0;\n  }\n}\n","import defaultView from \"../window\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","import selection_select from \"./select\";\nimport selection_selectAll from \"./selectAll\";\nimport selection_filter from \"./filter\";\nimport selection_data from \"./data\";\nimport selection_enter from \"./enter\";\nimport selection_exit from \"./exit\";\nimport selection_join from \"./join\";\nimport selection_merge from \"./merge\";\nimport selection_order from \"./order\";\nimport selection_sort from \"./sort\";\nimport selection_call from \"./call\";\nimport selection_nodes from \"./nodes\";\nimport selection_node from \"./node\";\nimport selection_size from \"./size\";\nimport selection_empty from \"./empty\";\nimport selection_each from \"./each\";\nimport selection_attr from \"./attr\";\nimport selection_style from \"./style\";\nimport selection_property from \"./property\";\nimport selection_classed from \"./classed\";\nimport selection_text from \"./text\";\nimport selection_html from \"./html\";\nimport selection_raise from \"./raise\";\nimport selection_lower from \"./lower\";\nimport selection_append from \"./append\";\nimport selection_insert from \"./insert\";\nimport selection_remove from \"./remove\";\nimport selection_clone from \"./clone\";\nimport selection_datum from \"./datum\";\nimport selection_on from \"./on\";\nimport selection_dispatch from \"./dispatch\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch\n};\n\nexport default selection;\n","import {Selection} from \"./index\";\nimport selector from \"../selector\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index\";\nimport selectorAll from \"../selectorAll\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","import {Selection} from \"./index\";\nimport matcher from \"../matcher\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n  if (onupdate != null) update = onupdate(update);\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","import {Selection} from \"./index\";\n\nexport default function(selection) {\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  var nodes = new Array(this.size()), i = -1;\n  this.each(function() { nodes[++i] = this; });\n  return nodes;\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  var size = 0;\n  this.each(function() { ++size; });\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","import creator from \"../creator\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","import {Selection, root} from \"./selection/index\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","/**\n * d3.tip\n * Copyright (c) 2013-2017 Justin Palmer\n *\n * Tooltips for d3.js SVG visualizations\n */\n// eslint-disable-next-line no-extra-semi\nimport { map } from 'd3-collection'\nimport { selection, select } from 'd3-selection'\n// Public - constructs a new tooltip\n//\n// Returns a tip\nexport default function() {\n  var direction   = d3TipDirection,\n      offset      = d3TipOffset,\n      html        = d3TipHTML,\n      rootElement = document.body,\n      node        = initNode(),\n      svg         = null,\n      point       = null,\n      target      = null\n\n  function tip(vis) {\n    svg = getSVGNode(vis)\n    if (!svg) return\n    point = svg.createSVGPoint()\n    rootElement.appendChild(node)\n  }\n\n  // Public - show the tooltip on the screen\n  //\n  // Returns a tip\n  tip.show = function() {\n    var args = Array.prototype.slice.call(arguments)\n    if (args[args.length - 1] instanceof SVGElement) target = args.pop()\n\n    var content = html.apply(this, args),\n        poffset = offset.apply(this, args),\n        dir     = direction.apply(this, args),\n        nodel   = getNodeEl(),\n        i       = directions.length,\n        coords,\n        scrollTop  = document.documentElement.scrollTop ||\n      rootElement.scrollTop,\n        scrollLeft = document.documentElement.scrollLeft ||\n      rootElement.scrollLeft\n\n    nodel.html(content)\n      .style('opacity', 1).style('pointer-events', 'all')\n\n    while (i--) nodel.classed(directions[i], false)\n    coords = directionCallbacks.get(dir).apply(this)\n    nodel.classed(dir, true)\n      .style('top', (coords.top + poffset[0]) + scrollTop + 'px')\n      .style('left', (coords.left + poffset[1]) + scrollLeft + 'px')\n\n    return tip\n  }\n\n  // Public - hide the tooltip\n  //\n  // Returns a tip\n  tip.hide = function() {\n    var nodel = getNodeEl()\n    nodel.style('opacity', 0).style('pointer-events', 'none')\n    return tip\n  }\n\n  // Public: Proxy attr calls to the d3 tip container.\n  // Sets or gets attribute value.\n  //\n  // n - name of the attribute\n  // v - value of the attribute\n  //\n  // Returns tip or attribute value\n  // eslint-disable-next-line no-unused-vars\n  tip.attr = function(n, v) {\n    if (arguments.length < 2 && typeof n === 'string') {\n      return getNodeEl().attr(n)\n    }\n\n    var args =  Array.prototype.slice.call(arguments)\n    selection.prototype.attr.apply(getNodeEl(), args)\n    return tip\n  }\n\n  // Public: Proxy style calls to the d3 tip container.\n  // Sets or gets a style value.\n  //\n  // n - name of the property\n  // v - value of the property\n  //\n  // Returns tip or style property value\n  // eslint-disable-next-line no-unused-vars\n  tip.style = function(n, v) {\n    if (arguments.length < 2 && typeof n === 'string') {\n      return getNodeEl().style(n)\n    }\n\n    var args = Array.prototype.slice.call(arguments)\n    selection.prototype.style.apply(getNodeEl(), args)\n    return tip\n  }\n\n  // Public: Set or get the direction of the tooltip\n  //\n  // v - One of n(north), s(south), e(east), or w(west), nw(northwest),\n  //     sw(southwest), ne(northeast) or se(southeast)\n  //\n  // Returns tip or direction\n  tip.direction = function(v) {\n    if (!arguments.length) return direction\n    direction = v == null ? v : functor(v)\n\n    return tip\n  }\n\n  // Public: Sets or gets the offset of the tip\n  //\n  // v - Array of [x, y] offset\n  //\n  // Returns offset or\n  tip.offset = function(v) {\n    if (!arguments.length) return offset\n    offset = v == null ? v : functor(v)\n\n    return tip\n  }\n\n  // Public: sets or gets the html value of the tooltip\n  //\n  // v - String value of the tip\n  //\n  // Returns html value or tip\n  tip.html = function(v) {\n    if (!arguments.length) return html\n    html = v == null ? v : functor(v)\n\n    return tip\n  }\n\n  // Public: sets or gets the root element anchor of the tooltip\n  //\n  // v - root element of the tooltip\n  //\n  // Returns root node of tip\n  tip.rootElement = function(v) {\n    if (!arguments.length) return rootElement\n    rootElement = v == null ? v : functor(v)\n\n    return tip\n  }\n\n  // Public: destroys the tooltip and removes it from the DOM\n  //\n  // Returns a tip\n  tip.destroy = function() {\n    if (node) {\n      getNodeEl().remove()\n      node = null\n    }\n    return tip\n  }\n\n  function d3TipDirection() { return 'n' }\n  function d3TipOffset() { return [0, 0] }\n  function d3TipHTML() { return ' ' }\n\n  var directionCallbacks = map({\n        n:  directionNorth,\n        s:  directionSouth,\n        e:  directionEast,\n        w:  directionWest,\n        nw: directionNorthWest,\n        ne: directionNorthEast,\n        sw: directionSouthWest,\n        se: directionSouthEast\n      }),\n      directions = directionCallbacks.keys()\n\n  function directionNorth() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.n.y - node.offsetHeight,\n      left: bbox.n.x - node.offsetWidth / 2\n    }\n  }\n\n  function directionSouth() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.s.y,\n      left: bbox.s.x - node.offsetWidth / 2\n    }\n  }\n\n  function directionEast() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.e.y - node.offsetHeight / 2,\n      left: bbox.e.x\n    }\n  }\n\n  function directionWest() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.w.y - node.offsetHeight / 2,\n      left: bbox.w.x - node.offsetWidth\n    }\n  }\n\n  function directionNorthWest() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.nw.y - node.offsetHeight,\n      left: bbox.nw.x - node.offsetWidth\n    }\n  }\n\n  function directionNorthEast() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.ne.y - node.offsetHeight,\n      left: bbox.ne.x\n    }\n  }\n\n  function directionSouthWest() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.sw.y,\n      left: bbox.sw.x - node.offsetWidth\n    }\n  }\n\n  function directionSouthEast() {\n    var bbox = getScreenBBox(this)\n    return {\n      top:  bbox.se.y,\n      left: bbox.se.x\n    }\n  }\n\n  function initNode() {\n    var div = select(document.createElement('div'))\n    div\n      .style('position', 'absolute')\n      .style('top', 0)\n      .style('opacity', 0)\n      .style('pointer-events', 'none')\n      .style('box-sizing', 'border-box')\n\n    return div.node()\n  }\n\n  function getSVGNode(element) {\n    var svgNode = element.node()\n    if (!svgNode) return null\n    if (svgNode.tagName.toLowerCase() === 'svg') return svgNode\n    return svgNode.ownerSVGElement\n  }\n\n  function getNodeEl() {\n    if (node == null) {\n      node = initNode()\n      // re-add node to DOM\n      rootElement.appendChild(node)\n    }\n    return select(node)\n  }\n\n  // Private - gets the screen coordinates of a shape\n  //\n  // Given a shape on the screen, will return an SVGPoint for the directions\n  // n(north), s(south), e(east), w(west), ne(northeast), se(southeast),\n  // nw(northwest), sw(southwest).\n  //\n  //    +-+-+\n  //    |   |\n  //    +   +\n  //    |   |\n  //    +-+-+\n  //\n  // Returns an Object {n, s, e, w, nw, sw, ne, se}\n  function getScreenBBox(targetShape) {\n    var targetel   = target || targetShape\n\n    while (targetel.getScreenCTM == null && targetel.parentNode != null) {\n      targetel = targetel.parentNode\n    }\n\n    var bbox       = {},\n        matrix     = targetel.getScreenCTM(),\n        tbbox      = targetel.getBBox(),\n        width      = tbbox.width,\n        height     = tbbox.height,\n        x          = tbbox.x,\n        y          = tbbox.y\n\n    point.x = x\n    point.y = y\n    bbox.nw = point.matrixTransform(matrix)\n    point.x += width\n    bbox.ne = point.matrixTransform(matrix)\n    point.y += height\n    bbox.se = point.matrixTransform(matrix)\n    point.x -= width\n    bbox.sw = point.matrixTransform(matrix)\n    point.y -= height / 2\n    bbox.w = point.matrixTransform(matrix)\n    point.x += width\n    bbox.e = point.matrixTransform(matrix)\n    point.x -= width / 2\n    point.y -= height / 2\n    bbox.n = point.matrixTransform(matrix)\n    point.y += height\n    bbox.s = point.matrixTransform(matrix)\n\n    return bbox\n  }\n\n  // Private - replace D3JS 3.X d3.functor() function\n  function functor(v) {\n    return typeof v === 'function' ? v : function() {\n      return v\n    }\n  }\n\n  return tip\n}\n","import * as preprocess from './preprocess'\r\nimport * as utils from './utils'\r\nimport * as types from './types'\r\nimport * as d3 from 'd3'\r\nimport d3Tip from 'd3-tip'\r\n\r\n/**\r\n * Build a d3 X Scale from the x values to draw the linechart\r\n * @param X array of dates\r\n * @param width witdh of the plot\r\n * @returns X scale for the linechart\r\n */\r\nexport function getXScale(X: Date[], width: number): any {\r\n    const xDomain = d3.extent(X)\r\n    return d3.scaleTime()\r\n        .domain(xDomain)\r\n        .range([0, width])\r\n}\r\n\r\n/**\r\n * Build a d3 Y Scale from the y values to draw the linechart\r\n * @param Y array laptimes (can contain null)\r\n * @param height witdh of the plot\r\n * @returns Y scale for the linechart\r\n */\r\nfunction getYScale(Y: number[], height: number): any {\r\n    return d3.scaleLinear()\r\n        .domain(utils.Y_MINMAX)\r\n        .range([height, 0])\r\n}\r\n\r\n/**\r\n * Build an svg to draw a linechart in\r\n * @param svgId id of the created svg\r\n * @param width svg width\r\n * @param height svg height\r\n * @param margin svg margins\r\n * @returns built svg\r\n */\r\nfunction buildSvg(svgId: string, width: number, height: number, margin: types.Margins) {\r\n    d3.select(svgId).selectAll(\"*\").remove();\r\n    return d3.select<SVGElement, any>(svgId)\r\n        .append(\"svg\")\r\n        .attr('width', '90%')\r\n        .attr('height', '90%')\r\n        .attr(\"viewBox\", '0 0 '+(width + margin.left + margin.right)+ ' ' + (height + margin.bottom + margin.top))\r\n        .attr('id', (svgId + '-svg').replace('#', ''))\r\n        .append(\"g\")\r\n        .attr('class', 'main-g')\r\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n}\r\n\r\n/**\r\n * Get the driver and constructor name for a hovered point\r\n * @param d hovered point data\r\n * @param keyword min for mintime, max for maxtime, otherwise it should be the constructor's name\r\n * @returns tooltip content\r\n */\r\nfunction getHoverContent(d: types.Race, keyword: string): string {\r\n    if (!d.results) {\r\n        return ''\r\n    }\r\n    let constructor = ''\r\n    let pilot = ''\r\n    let time = ''\r\n    if (keyword === 'max') {\r\n        const maxIndex = d3.maxIndex(d.results, (yearResults: any) => yearResults.fastest)\r\n        constructor = 'Worst time - ' + d.results[maxIndex].constructor\r\n        pilot = d.results[maxIndex].driver\r\n        time = utils.getHumanReadableTime(d.results[maxIndex].fastest * 1000)\r\n    } else if (keyword === 'min') {\r\n        const minIndex = d3.minIndex(d.results, (yearResults: any) => yearResults.fastest)\r\n        constructor = 'Best time - ' + d.results[minIndex].constructor\r\n        pilot = d.results[minIndex].driver\r\n        time = utils.getHumanReadableTime(d.results[minIndex].fastest * 1000)\r\n    } else {\r\n        const point = d.results.find((result) => result[\"constructor\"].toLowerCase() === keyword.toLowerCase())\r\n        constructor = keyword\r\n        pilot = point.driver\r\n        time = utils.getHumanReadableTime(point.fastest * 1000)\r\n    }\r\n    return `<p style=\"font-weight: bold\">${constructor}</p><p>Driver: <i>${pilot}</i></p><p>Time: <i>${time}</i></p>`\r\n}\r\n\r\n/**\r\n * Make all unhovered lines and points have an opacity of 0.5\r\n * @param node hovered node that called this function. We don't touch the opacity of it.\r\n * @returns\r\n */\r\nfunction addLineAndDotTransparency(node: SVGElement): void {\r\n    const hoveredClass = node.parentElement.getAttribute('class')\r\n    for (let i = 1; i < 5; i++) {\r\n        d3.select('#graph-' + i + '-svg')\r\n            .select('g.main-g')\r\n            .selectChildren()\r\n            .nodes()\r\n            .filter((element: SVGElement) =>\r\n                ![...utils.FIXED_CLASSES_OPACITY, hoveredClass].includes(element.getAttribute('class')))\r\n            .forEach((el: SVGElement) => el.setAttribute('style', 'opacity: 0.3'))\r\n    }\r\n}\r\n\r\n/**\r\n * Make all lines and dots opaque\r\n * @returns void\r\n */\r\nfunction removeLineAndDotTransparency(): void {\r\n    for (let i = 1; i < 5; i++) {\r\n        d3.select('#graph-' + i + '-svg')\r\n            .select('g.main-g')\r\n            .selectChildren()\r\n            .nodes()\r\n            .filter((element: SVGElement) =>\r\n                !utils.FIXED_CLASSES_OPACITY.includes(element.getAttribute('class')))\r\n            .forEach((el: SVGElement) => el.setAttribute('style', 'opacity: 1'))\r\n    }\r\n}\r\n\r\n/**\r\n * Build an SVG containing a graph\r\n * @param rawData raw data\r\n * @param gpName Name of the grand prix in data, usually '<country> Grand Prix'\r\n * @param divId id of the div that will contain the chart\r\n * @param width width of the chart\r\n * @param height height of the chart\r\n * @param margin margins\r\n * @param constructors list of constructors to plot\r\n * @param scrollyMode boolean, true if the user is still in the scrolly, false otherwise\r\n * @param scrollyOpt SCROLLYOPTION : an enum that defines the scrolly step we are in\r\n */\r\nexport function makeLineChart(rawData,\r\n    gpName: string,\r\n    divId: string,\r\n    width: number,\r\n    height: number,\r\n    margin: types.Margins,\r\n    constructors: utils.CONSTRUCTOR[],\r\n    scrollyOpt: utils.SCROLLYOPTION = null,\r\n    scrollyMode: boolean): void {\r\n    const data = preprocess.extractGP(rawData, gpName)\r\n    let svg = buildSvg(divId, width, height, margin)\r\n    draw(data, svg, width, height, gpName, constructors, scrollyOpt, scrollyMode)\r\n    drawLegend(constructors, scrollyMode)\r\n}\r\n\r\n/**\r\n * Draws the actual graph. Will draw all the available constructors in the constructors argument.\r\n * @param data data to draw\r\n * @param svg svg to draw in\r\n * @param width svg width\r\n * @param height svg height\r\n * @param mainTitle line chart title\r\n * @param constructors list of constructors to plot\r\n * @param scrollyMode boolean, true if the user is still in the scrolly, false otherwise\r\n * @param scrollyOpt SCROLLYOPTION : an enum that defines the scrolly step we are in\r\n */\r\nfunction draw(data,\r\n    svg,\r\n    width: number,\r\n    height: number,\r\n    mainTitle: string,\r\n    constructors: string[],\r\n    scrollyOpt: utils.SCROLLYOPTION = null,\r\n    scrollyMode: boolean): void {\r\n    const X = preprocess.extractDates(data)\r\n    console.log(mainTitle,width,height)\r\n    const regulationDates: Date[] = preprocess.extractRegulationDates()\r\n\r\n    const YMin = preprocess.extractBestTimes(data)\r\n    const YMax = preprocess.extractWorstTimes(data)\r\n\r\n    let toPlot = []\r\n\r\n    if (scrollyMode) {\r\n        toPlot = [\r\n            { data: YMin, name: 'min', color: 'purple' },\r\n            { data: YMax, name: 'max', color: 'black' }\r\n        ]\r\n    } else {\r\n        if (constructors.includes('min')) {\r\n            toPlot.push({ data: YMin, name: 'min', color: 'purple' })\r\n        }\r\n        if (constructors.includes('max')) {\r\n            toPlot.push({ data: YMax, name: 'max', color: 'black' })\r\n        }\r\n    }\r\n\r\n    for (const constructor of constructors) {\r\n        toPlot.push({\r\n            data: preprocess.extractConstructor(data, constructor),\r\n            name: constructor,\r\n            color: utils.getConstructorColor(constructor)\r\n        })\r\n    }\r\n\r\n    /* define the scales */\r\n    const allY = []\r\n    for (const Y of toPlot) {\r\n        allY.push(...Y.data)\r\n    }\r\n    const xScale = getXScale(X as any, width)\r\n    const yScale = getYScale(allY, height)\r\n\r\n    /* bind the data */\r\n    svg.datum(data)\r\n\r\n    /* draw x and y axis + their labels */\r\n    svg.append(\"g\")\r\n        .attr(\"class\", \"xaxis\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(xScale))\r\n        .call(g => g.append(\"text\")\r\n            .attr(\"x\", width + 5)\r\n            .attr(\"y\", 5)\r\n            .attr(\"fill\", \"currentColor\")\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text('Year'));\r\n    svg.append(\"g\")\r\n        .attr(\"class\", \"yaxis\")\r\n        .call(d3.axisLeft(yScale))\r\n        .call(g => g.append(\"text\")\r\n            .attr(\"x\", -25)\r\n            .attr(\"y\", -10)\r\n            .attr(\"fill\", \"currentColor\")\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text('Lap Time (s)'));\r\n\r\n    /* draw the regulations red bars */\r\n    const regulationPaths = svg.append('g')\r\n        .attr('class', 'regulations')\r\n        .selectAll('path')\r\n        .data(regulationDates.map((d) => { return [{ x: d, y: utils.Y_MINMAX[0] }, { x: d, y: utils.Y_MINMAX[1] }] }))\r\n        .enter()\r\n        .append('path')\r\n        .attr(\"class\", \"regulationline\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\"opacity\", 0.3)\r\n        .attr(\"stroke\", \"red\")\r\n        .attr(\"d\", (d) => {\r\n            return d3.line()\r\n                .x((d: any) => xScale(d.x))\r\n                .y((d: any) => yScale(d.y))(d)\r\n        })\r\n\r\n    if (!scrollyMode) {\r\n        /* add the regulations red bars events if we are in the dashboard mode */\r\n        regulationPaths.on(\"click\", function (_, d) {\r\n            const year = (d[0].x.getFullYear() + 1).toString()\r\n            const index = preprocess.getIndexOfYear(year)\r\n            const regDiv: d3.Selection<HTMLElement, any, HTMLElement, any> = d3.select('#regulation-div')\r\n            if (regDiv.attr('class') === 'regulation-visible') {\r\n                const isThereAFocusedEvent = d3.select('#graph-' + 1)\r\n                    .select('g .regulations')\r\n                    .selectAll('path')\r\n                    .filter((_, i) => i === index)\r\n                    .attr('opacity') === '0.7'\r\n\r\n                for (let i = 1; i < 5; i++) {\r\n                    d3.select('#graph-' + i)\r\n                        .select('g .regulations')\r\n                        .selectAll('path')\r\n                        .attr('opacity', 0.3)\r\n                }\r\n                if (isThereAFocusedEvent) {\r\n                    return\r\n                }\r\n            }\r\n            for (let i = 1; i < 5; i++) {\r\n                d3.select('#graph-' + i)\r\n                    .select('g .regulations')\r\n                    .selectAll('path')\r\n                    .attr('opacity', 0.3)\r\n            }\r\n            regDiv.attr('class', 'regulation-visible')\r\n            for (let i = 1; i < 5; i++) {\r\n                d3.select('#graph-' + i)\r\n                    .select('g .regulations')\r\n                    .selectAll('path')\r\n                    .filter((_, i) => i === index)\r\n                    .attr('opacity', 0.7)\r\n            }\r\n        })\r\n            .on(\"mouseover\", function (_, d) {\r\n                const year = (d[0].x.getFullYear() + 1).toString()\r\n                const regDiv: d3.Selection<HTMLElement, any, HTMLElement, any> = d3.select('#regulation-div')\r\n                const description = preprocess.extractRegulation(year)[1][0].description\r\n                if (regDiv.attr('class') === 'regulation-invisible') {\r\n                    regDiv.attr('class', 'regulation-visible')\r\n                    regDiv.node().innerHTML = `<p>${description}</p>`\r\n                }\r\n                d3.select(this).style(\"cursor\", \"pointer\")\r\n                    .attr('stroke-width', 4)\r\n            })\r\n            .on(\"mouseout\", function (_, d) {\r\n                const year = (d[0].x.getFullYear() + 1).toString()\r\n                const index = preprocess.getIndexOfYear(year)\r\n                const isPathFocused = d3.select('#graph-' + 1)\r\n                    .select('g .regulations')\r\n                    .selectAll('path')\r\n                    .filter((_, i) => i === index)\r\n                    .attr('opacity') === '0.7'\r\n                if (!isPathFocused) {\r\n                    d3.select('#regulation-div').attr('class', 'regulation-invisible')\r\n                }\r\n                d3.select(this).style(\"cursor\", \"default\")\r\n                    .attr('stroke-width', 2)\r\n            })\r\n    } else {\r\n        /* draw the scrolly step we are in if there is one, and add the title */\r\n        switch (scrollyOpt) {\r\n            case utils.SCROLLYOPTION.ANNEES_2000: {\r\n                drawRectangle(2000, 2010, xScale, yScale, svg)\r\n                break\r\n            }\r\n            case utils.SCROLLYOPTION.FERRARI_VS_WILLIAMS: {\r\n                drawRectangle(1994, 2000, xScale, yScale, svg)\r\n                break\r\n            }\r\n            case utils.SCROLLYOPTION.ANNEES_2010: {\r\n                drawRectangle(2009, 2014, xScale, yScale, svg)\r\n                break\r\n            }\r\n            case utils.SCROLLYOPTION.TURBOHYBRID: {\r\n                drawRectangle(2014, 2021, xScale, yScale, svg)\r\n                break\r\n            }\r\n            default:\r\n                break\r\n        }\r\n        svg.append('g')\r\n            .attr('class', 'main-title')\r\n            .append('text')\r\n            .attr('x', width / 2)\r\n            .attr('y', -10)\r\n            .attr('text-anchor', 'middle')\r\n            .text(mainTitle)\r\n    }\r\n\r\n    /* remove all existing d3 tips for this graph */\r\n    const svgId = svg.node().parentElement.getAttribute('id')\r\n    d3.selectAll('div.tip-' + svgId)\r\n        .nodes()\r\n        .forEach((node: HTMLElement) => node.remove())\r\n    \r\n    /* draw all the possible constructors */\r\n    for (let idx = 0; idx < toPlot.length; idx++) {\r\n        const Y = toPlot[idx]\r\n        const Ydata = Y.data\r\n        const isPlottingMinOrMax = scrollyMode ? false : [\"min\", \"max\"].includes(Y.name)\r\n\r\n        const svgToPlot = svg.append('g')\r\n            .attr('class', Y.name.replace(' ', ''))\r\n\r\n        /* configure the line object and the tooltip */\r\n        let line = d3.line()\r\n            .defined(function (_, i) { return !!Ydata[i]; })\r\n            .x(function (_, i) { return xScale(X[i]); })\r\n            .y(function (_, i) { return yScale(Ydata[i]); })\r\n\r\n        const tipCircles = d3Tip()\r\n            .attr('class', 'd3-tip tip-' + svgId)\r\n            .html(function (d) {\r\n                return getHoverContent(d, Y.name)\r\n            })\r\n        svg.call(tipCircles)\r\n\r\n        if (!isPlottingMinOrMax) {\r\n            svgToPlot.append(\"path\")\r\n                .attr(\"class\", \"line\")\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"stroke\", Y.color)\r\n                .attr(\"d\", i => {\r\n                    return line(i)\r\n                })\r\n                .on('mouseover', function () { addLineAndDotTransparency(this as SVGElement) })\r\n                .on('mouseout', function () { removeLineAndDotTransparency() })\r\n        }\r\n\r\n        /* draw the circles and add the hover events */\r\n        svgToPlot.selectAll(\".dot\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"class\", \"dot\")\r\n            .attr(\"cx\", line.x())\r\n            .attr(\"cy\", line.y())\r\n            .attr('fill', isPlottingMinOrMax ? 'white' : Y.color)\r\n            .attr('stroke', Y.color)\r\n            .attr('stroke-width', 1)\r\n            .attr(\"r\", (_, i) => {\r\n                if (Ydata[i]) {\r\n                    return isPlottingMinOrMax ? 4 : 3\r\n                }\r\n                return 0\r\n            })\r\n            .on('mouseover', function (_, d) {\r\n                tipCircles.show(d, this)\r\n                addLineAndDotTransparency(this as SVGElement)\r\n            })\r\n            .on('mouseout', function (_, d) {\r\n                tipCircles.hide(d, this)\r\n                removeLineAndDotTransparency()\r\n            })\r\n    }\r\n}\r\n\r\n/**\r\n * Draws the legend. The legends is updated every time the user selects/deselects a constructor\r\n * @param constructors list of constructors to plot\r\n * @param scrollyMode boolean, true if the user is still in the scrolly, false otherwise\r\n */\r\nexport function drawLegend(constructors: utils.CONSTRUCTOR[], scrollyMode: boolean): void {\r\n    const data = scrollyMode ? ['min', 'max'] : []\r\n    data.push(...constructors)\r\n    const legend = d3.select('#legend')\r\n    legend.selectAll('g.legendItem').remove()\r\n    const group = legend.selectAll('g.legendItem')\r\n        .data(data)\r\n        .enter()\r\n        .append('g')\r\n        .attr('class', 'legendItem')\r\n\r\n    group.append(\"circle\")\r\n        .attr(\"cx\", (_, i) => i * 130 + 10)\r\n        .attr(\"cy\", 10)\r\n        .attr(\"r\", 6)\r\n        .style(\"fill\", (d) => utils.getConstructorColor(d as any))\r\n\r\n    group.append(\"text\")\r\n        .attr(\"x\", (_, i) => i * 130 + 20)\r\n        .attr(\"y\", 14)\r\n        .text(d => {\r\n            if (d === 'min') {\r\n                return 'Meilleur temps'\r\n            } else if (d === 'max') {\r\n                return 'Pire temps'\r\n            }\r\n            return d\r\n        })\r\n        .style(\"font-size\", \"15px\")\r\n        .attr(\"alignment-baseline\", \"middle\")\r\n}\r\n\r\n/**\r\n * Draws a green rectangle to enhance a particular period of the svg node.\r\n * @param yearStart lower left bound of the rectangle\r\n * @param yearStop lower right bound of the rectangle\r\n * @param xScale xScale\r\n * @param yScale yScale\r\n * @param svg svg node\r\n */\r\nfunction drawRectangle(yearStart: number, yearStop: number, xScale: d3.ScaleTime<number, number>, yScale: d3.ScaleLinear<number, number>, svg: any) {\r\n    const rect = {\r\n        x: xScale(new Date(yearStart + '-01-01')),\r\n        y: 0,\r\n        width: xScale(new Date(yearStop + '-01-01')) - xScale(new Date(yearStart + '-01-01')),\r\n        height: yScale(utils.Y_MINMAX[0]),\r\n    }\r\n    svg.append('rect')\r\n        .attr('class', 'scrolly-rect')\r\n        .attr('x', rect.x)\r\n        .attr('y', rect.y)\r\n        .attr('height', rect.height)\r\n        .attr('width', rect.width)\r\n        .attr('fill', 'green')\r\n        .attr('opacity', 0.1)\r\n}\r\n","{\r\n    \"2008\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.714,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 86.869,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.14,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 88.527,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.413,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.914,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 85.842,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 86.173,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.188,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.207,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 88.208,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.748,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.613,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 96.711,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 96.727,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.408,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.562,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 95.208,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.648,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.67,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.24,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 97.087,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 93.096,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.123,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.292,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 92.528,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.943,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 92.508,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.79,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.371,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.915,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.501,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 94.14,\r\n                \"driver\": \"Anthony Davidson\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.813,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.904,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 82.065,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.096,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.81,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.23,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 81.049,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.117,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.724,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 82.516,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 83.318,\r\n                \"driver\": \"Anthony Davidson\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.617,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.808,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 88.39,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.417,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 87.568,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 87.806,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.012,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 87.219,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 87.412,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.807,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.787,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.839,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 76.171,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.479,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.852,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.907,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.839,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 76.101,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.806,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 77.225,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.886,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 78.498,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.735,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 78.393,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.062,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 80.848,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 77.523,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 78.031,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 78.916,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 79.108,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.449,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.693,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.77,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.92,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.786,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 77.233,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.816,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.235,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 76.306,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.971,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.049,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.174,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.706,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 79.788,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 82.029,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.531,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.274,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.112,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 81.512,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.786,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.666,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.859,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.508,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.189,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.581,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 77.014,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.858,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.633,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 75.701,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.657,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.899,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.191,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 81.045,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.326,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.698,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.502,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.144,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 80.332,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.748,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.67,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 98.989,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 99.199,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 99.392,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 100.142,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 98.499,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.428,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.435,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 98.515,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 98.88,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 99.268,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 107.338,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 107.678,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 108.315,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.965,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 107.018,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 108.951,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 106.949,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.429,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 108.153,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 108.226,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.555,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.631,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.284,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.653,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.522,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 99.152,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.63,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 96.697,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.698,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 96.51,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 104.801,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.465,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 105.779,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 106.244,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 105.038,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.611,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 105.133,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 105.212,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 104.971,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 107.94,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.404,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.644,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 78.274,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 78.835,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 79.026,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 79.638,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 78.187,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.594,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 78.882,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 79.163,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.303,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.645,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.722,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.731,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 95.814,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.685,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 95.937,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 96.079,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.21,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.73,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.368,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 72.737,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.83,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 72.137,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.082,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 72.3,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.289,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 72.81,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.8,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 73.426,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ]\r\n    },\r\n    \"2007\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.072,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.493,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 86.556,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.964,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.934,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 88.404,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 86.909,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.914,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 87.264,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.305,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 89.339,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.043,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.31,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 96.543,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.829,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 96.902,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.766,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.63,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 95.945,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 96.088,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.145,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 98.279,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.652,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.935,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 93.404,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.935,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.106,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 93.294,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.915,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 93.082,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 93.624,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 94.024,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 95.28,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.421,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.451,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 82.253,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 82.324,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 82.568,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.749,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.968,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 82.097,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 82.115,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.508,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 83.811,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.726,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.967,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.285,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.439,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.319,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 76.832,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 77.498,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.703,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.988,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 78.25,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 78.418,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.707,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 76.266,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.411,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.913,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.919,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 77.229,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 77.634,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 76.743,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.76,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 77.116,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 78.536,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.331,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.703,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 72.847,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.308,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 72.92,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.873,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 72.998,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.06,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 73.259,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.484,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 74.122,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.034,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.084,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.493,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.674,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.534,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.241,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 75.584,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.806,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.049,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 76.244,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 77.826,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.997,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.099,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 80.401,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.516,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.721,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.235,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.35,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 80.364,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.515,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 81.448,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 82.019,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.45,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.741,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 91.84,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.476,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.01,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 92.501,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.978,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 92.221,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 92.451,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.038,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 94.5,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.674,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 80.259,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.41,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.632,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.714,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.779,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.718,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 81.127,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.993,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 81.737,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 82.737,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.329,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.373,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 87.722,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 88.491,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.39,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 88.74,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 88.002,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.013,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.798,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 89.861,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 88.188,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.997,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.549,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 83.174,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.325,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.209,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 83.787,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 83.176,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.166,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 83.274,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.351,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 84.699,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 105.994,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 106.091,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.334,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 106.996,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 106.8,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 106.618,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.603,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 106.955,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 107.115,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 107.98,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 108.044,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.368,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.516,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 86.505,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 86.913,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.247,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.948,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.033,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 86.253,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.728,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 87.564,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 88.628,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.908,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.044,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.619,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 96.959,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 98.455,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 97.251,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.862,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.991,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 97.247,\r\n                \"driver\": \"Anthony Davidson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.456,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 98.668,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.931,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.082,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.928,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 73.081,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 73.195,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.477,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 72.932,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 72.968,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.058,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 74.098,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker\",\r\n                \"fastest\": 75.217,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ]\r\n    },\r\n    \"2006\": {\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.431,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 91.549,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.702,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.164,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.62,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.85,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 92.456,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 93.066,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.416,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 95.724,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 97.411,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.84,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 93.986,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.626,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.668,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.916,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.614,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 94.586,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 94.752,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.297,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 97.426,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 99.011,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 85.229,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 85.635,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.822,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 86.327,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.937,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 87.579,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.718,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.023,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 87.219,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 90.226,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 92.279,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.795,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 82.988,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.709,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 83.772,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.021,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.966,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 83.887,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 84.101,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.52,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 86.82,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 87.609,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.816,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.028,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 90.754,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.933,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 90.944,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 91.422,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.194,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 91.227,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 91.728,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 92.936,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 95.239,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.648,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.97,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 75.885,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.885,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.801,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.847,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.502,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.928,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.661,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 77.702,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 78.92,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.962,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.082,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.14,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 74.982,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 74.398,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.747,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 74.969,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.052,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 75.598,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 77.276,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Felipe Massa\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.253,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.397,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.574,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 80.943,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.073,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 81.329,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.442,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.567,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.699,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 82.207,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 86.158,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.942,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.386,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.888,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.986,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.012,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 76.608,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.832,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.833,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.116,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 77.121,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 79.088,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.832,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.92,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 72.109,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 72.479,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 72.795,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.15,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.292,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 72.792,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 72.854,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.925,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 73.496,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.493,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.785,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.036,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.281,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.129,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.433,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 76.294,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 77.027,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 77.063,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 77.105,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 78.637,\r\n                \"driver\": \"Franck Montagny\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.07,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.205,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 74.862,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.894,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.15,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.141,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.094,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 75.329,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.399,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 77.093,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 77.185,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.599,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.886,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 80.085,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.266,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.759,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.924,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 80.623,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.89,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 83.146,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.068,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 82.967,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.907,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 87.321,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 87.569,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 87.785,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 87.79,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.866,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.386,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.852,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"MF1\",\r\n                \"fastest\": 88.639,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 89.158,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 90.607,\r\n                \"driver\": \"Sakon Yamamoto\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.484,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.486,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 81.653,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 82.011,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.175,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.924,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.203,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.589,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.043,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker MF1\",\r\n                \"fastest\": 83.116,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 84.289,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 104.36,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 105.503,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.754,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 105.775,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 106.053,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 105.968,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 105.851,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.413,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 108.894,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker MF1\",\r\n                \"fastest\": 109.542,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 110.326,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.599,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 89.989,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 90.371,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 90.992,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 91.094,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.276,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.827,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 91.943,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker MF1\",\r\n                \"fastest\": 93.709,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.252,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 93.666,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.313,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 71.299,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 71.328,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.567,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Honda\",\r\n                \"fastest\": 71.619,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 71.882,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 71.65,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.591,\r\n                \"driver\": \"Robert Doornbos\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 72.856,\r\n                \"driver\": \"Scott Speed\"\r\n            },\r\n            {\r\n                \"constructor\": \"Spyker MF1\",\r\n                \"fastest\": 73.138,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Super Aguri\",\r\n                \"fastest\": 73.269,\r\n                \"driver\": \"Takuma Sato\"\r\n            }\r\n        ]\r\n    },\r\n    \"2005\": {\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.081,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.197,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 90.7,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.056,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.249,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.205,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.553,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 92.594,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 95.047,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 95.954,\r\n                \"driver\": \"Patrick Friesacher\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 75.217,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.475,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.561,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.669,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.116,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.201,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.89,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.081,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.214,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.664,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 70.625,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 70.694,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 71.277,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.29,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.369,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 71.527,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 71.555,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.132,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 73.462,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 73.632,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.412,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 74.521,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.559,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.572,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 74.655,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.566,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.885,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.434,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 77.857,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 77.96,\r\n                \"driver\": \"Patrick Friesacher\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 79.905,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.932,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 80.207,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.459,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.906,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.352,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.997,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.108,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.583,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.576,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.32,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 74.759,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.904,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.006,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.07,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.532,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.635,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.009,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 77.519,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.599,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.882,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.779,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.839,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.141,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 81.302,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.937,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.086,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.565,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.443,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 85.057,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.797,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 87.039,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 87.501,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.929,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.419,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.963,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.369,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 90.063,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 90.71,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 92.186,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.878,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.319,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 81.369,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.64,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.721,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.304,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.356,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.56,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 84.666,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.904,\r\n                \"driver\": \"Robert Doornbos\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 106.391,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.497,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 106.596,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 107.476,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.867,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 107.978,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 108.071,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 108.508,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 109.779,\r\n                \"driver\": \"Robert Doornbos\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 111.498,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.988,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.145,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 72.696,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.889,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.976,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 73.041,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 73.151,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 73.387,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.538,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 74.763,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 106.106,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 106.141,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.276,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 106.464,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.233,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.44,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 108.248,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 108.718,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 110.843,\r\n                \"driver\": \"Christijan Albers\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 122.309,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.08,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.488,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 94.801,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.301,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.428,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 95.723,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.739,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.898,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 96.707,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 99.105,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 88.289,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 89.159,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.279,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 89.862,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.892,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 90.616,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.32,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.341,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 92.735,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 97.499,\r\n                \"driver\": \"Patrick Friesacher\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.09,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 95.253,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.7,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.644,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.865,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 96.216,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.34,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.733,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 99.85,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 101.918,\r\n                \"driver\": \"Patrick Friesacher\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.054,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.12,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 92.319,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.67,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.723,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.648,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 93.391,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.269,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 96.004,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 96.413,\r\n                \"driver\": \"Patrick Friesacher\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.994,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.552,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 83.641,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.069,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 84.026,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.337,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.351,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.351,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 88.976,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.921,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.602,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.038,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.88,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 77.047,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.746,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 78.373,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.361,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 80.711,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 81.578,\r\n                \"driver\": \"Christijan Albers\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.858,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.281,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.072,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 77.401,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 78.538,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.55,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.902,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 82.236,\r\n                \"driver\": \"Patrick Friesacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.67,\r\n                \"driver\": \"Tiago Monteiro\"\r\n            }\r\n        ]\r\n    },\r\n    \"2004\": {\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.089,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.62,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.645,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 80.715,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.877,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.52,\r\n                \"driver\": \"Ricardo Zonta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 81.602,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.239,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.301,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.808,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.408,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.998,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 84.998,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 85.699,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 85.805,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.297,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.065,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 87.823,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 88.178,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 90.681,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.074,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 93.715,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.054,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.164,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 94.221,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.413,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 94.917,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.039,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 96.569,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 98.577,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.139,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.581,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 90.827,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 90.971,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 91.686,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.719,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.731,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 92.332,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 93.506,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 94.584,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 79.753,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.011,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.212,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.895,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 80.921,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.087,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.091,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.532,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.352,\r\n                \"driver\": \"Giorgio Pantano\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 86.899,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.022,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.639,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 75.809,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.144,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.313,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 76.514,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.636,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.444,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 77.802,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 79.817,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.985,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.345,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 74.396,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.516,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.592,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.352,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 75.725,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 75.859,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 76.488,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.06,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 88.351,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 88.986,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.135,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.137,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 89.354,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 89.697,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 91.431,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 91.604,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.982,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 94.398,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.275,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 72.341,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.023,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 73.355,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.595,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 74.532,\r\n                \"driver\": \"Christian Klien\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 74.674,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 74.851,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 75.321,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 77.064,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.223,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 70.601,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 71.062,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 71.137,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 71.167,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.185,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 71.286,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.47,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 73.147,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 74.01,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.698,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 73.971,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.987,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 73.995,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.172,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 74.553,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 74.798,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.177,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 76.807,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 77.913,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.233,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.305,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 78.58,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 78.715,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.378,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 80.004,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.202,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.335,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.458,\r\n                \"driver\": \"Giorgio Pantano\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 83.437,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 73.306,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.668,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 73.674,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.69,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.874,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 74.368,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 74.802,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.395,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 76.192,\r\n                \"driver\": \"Giorgio Pantano\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.055,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.146,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 79.693,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 79.996,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.17,\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.324,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.57,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 80.73,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.068,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.18,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.329,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 116.232,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 116.304,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 117.99,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 118.04,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 118.729,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 119.552,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 119.681,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 120.237,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 122.645,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 122.651,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.012,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.178,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 94.295,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.759,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.891,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.917,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 94.975,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 95.286,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 96.507,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 100.24,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.542,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.032,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 94.571,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 94.897,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 95.213,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.136,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.156,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.274,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 101.953,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 108.069,\r\n                \"driver\": \"Gianmaria Bruni\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.646,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 70.85,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 70.892,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 70.922,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 71.092,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.454,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 71.483,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 71.665,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 72.829,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 73.55,\r\n                \"driver\": \"Zsolt Baumgartner\"\r\n            }\r\n        ]\r\n    },\r\n    \"2003\": {\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 97.044,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.393,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.454,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.766,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.974,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 98.073,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 98.094,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 98.416,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 98.516,\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 100.417,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.173,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.101,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.274,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 88.288,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 88.42,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 88.928,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.105,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 89.344,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 89.367,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Justin Wilson\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 73.807,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.818,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 73.851,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.953,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.124,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 74.191,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 74.504,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 74.631,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 74.839,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 76.542,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.327,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.341,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 83.015,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.148,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 83.16,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.169,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 83.46,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.7,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 84.317,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.826,\r\n                \"driver\": \"Justin Wilson\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.762,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 78.233,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 78.704,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 78.811,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.006,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.128,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.427,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 79.615,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 80.215,\r\n                \"driver\": \"Ralph Firman\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 82.104,\r\n                \"driver\": \"Justin Wilson\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 69.15,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 69.189,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 69.391,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 69.725,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 69.89,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 69.935,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 70.045,\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 70.105,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 70.402,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 74.508,\r\n                \"driver\": \"Justin Wilson\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.259,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.295,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.5,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.644,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 76.237,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.744,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 76.755,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 76.967,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.176,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.706,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.529,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.047,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.048,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 76.182,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.598,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.939,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.024,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 77.347,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.014,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.036,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.523,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.555,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.619,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.976,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 92.35,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 93.066,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 93.395,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 93.553,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.0,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 96.318,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.019,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.48,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.533,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.967,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 76.308,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.345,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 76.99,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.445,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.431,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.709,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.209,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.381,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.695,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.727,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 82.081,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 82.591,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 82.634,\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.187,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.574,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.468,\r\n                \"driver\": \"Justin Wilson\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.167,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.488,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.679,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.874,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.034,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 76.775,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 76.831,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 77.09,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.169,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 79.023,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.688,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.944,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 82.027,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.18,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.742,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 83.369,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.621,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.726,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 83.847,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 86.423,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.963,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.014,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.466,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.944,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 82.301,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 82.488,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 82.754,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.992,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.216,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.078,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 71.67,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.794,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 71.92,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 71.948,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 72.087,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 72.695,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 73.083,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 73.269,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 73.798,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 75.36,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.713,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.412,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 92.419,\r\n                \"driver\": \"Cristiano da Matta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.044,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 93.106,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.137,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 93.474,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.632,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 94.771,\r\n                \"driver\": \"Ralph Firman\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 94.975,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ]\r\n    },\r\n    \"2002\": {\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.266,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.497,\r\n                \"driver\": \"Juan Pablo Montoya\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.468,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.199,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 97.245,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 97.536,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 97.694,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 97.919,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 98.039,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 98.374,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 99.454,\r\n                \"driver\": \"Mark Webber\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.317,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.088,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.444,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 93.09,\r\n                \"driver\": \"Takuma Sato\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 93.349,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.429,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.553,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 93.742,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 93.915,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 95.958,\r\n                \"driver\": \"Mark Webber\"\r\n            }\r\n        ]\r\n    },\r\n    \"2001\": {\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.708,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 71.986,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.309,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.434,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 72.605,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 72.805,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 73.122,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 73.189,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 73.281,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 73.991,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 74.129,\r\n                \"driver\": \"Enrique Bernoldi\"\r\n            }\r\n        ]\r\n    },\r\n    \"2000\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.556,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.075,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 91.359,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 91.514,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 91.968,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 91.992,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.018,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.22,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 92.323,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 93.024,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 93.261,\r\n                \"driver\": \"Marc Gen\\u00e9\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.714,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.805,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.871,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 85.892,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 85.929,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 86.124,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.238,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 86.281,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 86.349,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 86.824,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 88.161,\r\n                \"driver\": \"Gast\\u00f3n Mazzacane\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.703,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 85.706,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.741,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.733,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 86.793,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 86.818,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 87.025,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 87.253,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.301,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 87.559,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 88.253,\r\n                \"driver\": \"Marc Gen\\u00e9\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.825,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.834,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.628,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jaguar\",\r\n                \"fastest\": 96.899,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 97.243,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 97.267,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 97.348,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 97.652,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 98.141,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.49,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 99.972,\r\n                \"driver\": \"Marc Gen\\u00e9\"\r\n            }\r\n        ]\r\n    },\r\n    \"1999\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.462,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.781,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 92.148,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 92.276,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 92.54,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.691,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 92.888,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 92.971,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.374,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 94.182,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 95.316,\r\n                \"driver\": \"Luca Badoer\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.568,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 77.305,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.578,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 77.81,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 77.884,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.506,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 78.636,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.716,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.016,\r\n                \"driver\": \"St\\u00e9phane Sarrazin\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 80.075,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.362,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.538,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"BAR\",\r\n                \"fastest\": 87.313,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 87.409,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 87.613,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.77,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 88.205,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.253,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 88.75,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 89.293,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 90.035,\r\n                \"driver\": \"Marc Gen\\u00e9\"\r\n            }\r\n        ]\r\n    },\r\n    \"1998\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.01,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.767,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.919,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.384,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 91.733,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 92.392,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 93.291,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 93.383,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 93.739,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 93.927,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 94.646,\r\n                \"driver\": \"Esteban Tuero\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.092,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.109,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.25,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 78.261,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.735,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 78.753,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 79.344,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.375,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 80.203,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.39,\r\n                \"driver\": \"Shinji Nakano\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 80.481,\r\n                \"driver\": \"Mika Salo\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.852,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.251,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 86.827,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.876,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 87.198,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.839,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 88.811,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 89.249,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 89.32,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 89.617,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 90.054,\r\n                \"driver\": \"Shinji Nakano\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.271,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.72,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.102,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 84.542,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.081,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 85.654,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 86.376,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 86.808,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 86.948,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 87.061,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 88.051,\r\n                \"driver\": \"Esteban Tuero\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 89.598,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 90.317,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.517,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.551,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 91.005,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 91.028,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.515,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 91.917,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 92.081,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 93.399,\r\n                \"driver\": \"Esteban Tuero\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 94.09,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.838,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 102.365,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 102.994,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 103.27,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 103.341,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 103.663,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 104.776,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 104.844,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 104.961,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 105.276,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 106.713,\r\n                \"driver\": \"Shinji Nakano\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 108.682,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 109.728,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 110.027,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 110.204,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 110.462,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 111.189,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 112.572,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 112.67,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 113.037,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 113.237,\r\n                \"driver\": \"Toranosuke Takagi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 115.084,\r\n                \"driver\": \"Shinji Nakano\"\r\n            }\r\n        ]\r\n    },\r\n    \"1997\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 89.369,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.472,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.531,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.287,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 92.593,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 92.842,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 93.075,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 93.13,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 93.798,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 94.229,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 94.806,\r\n                \"driver\": \"Damon Hill\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.004,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.594,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 76.644,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.692,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 76.756,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 76.912,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 77.09,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 77.259,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.409,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.336,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 78.885,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.473,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 85.491,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.773,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 85.942,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 86.218,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.564,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.799,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 87.076,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 87.281,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 88.094,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 88.16,\r\n                \"driver\": \"Jarno Trulli\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.303,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.955,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 84.075,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 84.081,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.723,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.812,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 85.371,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 85.579,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 85.743,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 86.852,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 86.96,\r\n                \"driver\": \"Jarno Trulli\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.216,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.235,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.665,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.779,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.105,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 79.263,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 79.295,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 79.626,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 79.674,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 79.694,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.349,\r\n                \"driver\": \"Jarno Trulli\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.525,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.521,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 77.717,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.313,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.385,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.494,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 79.157,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 80.079,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 80.089,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 80.255,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.452,\r\n                \"driver\": \"Jarno Trulli\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.095,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.108,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 78.388,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.466,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.75,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 78.899,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 79.034,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.622,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 80.102,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 80.129,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.37,\r\n                \"driver\": \"Jarno Trulli\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.548,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.749,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 74.755,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 74.957,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 74.986,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.27,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 75.876,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.018,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 76.536,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 76.941,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 77.563,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.598,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.797,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.977,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.277,\r\n                \"driver\": \"Ralf Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 82.344,\r\n                \"driver\": \"Alexander Wurz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.368,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 83.271,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 83.366,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 84.067,\r\n                \"driver\": \"Jan Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 84.478,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.553,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 101.873,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 101.896,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 102.034,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.181,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 102.421,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Prost\",\r\n                \"fastest\": 103.226,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Stewart\",\r\n                \"fastest\": 103.272,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Arrows\",\r\n                \"fastest\": 103.361,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 103.66,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 105.372,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 105.942,\r\n                \"driver\": \"Tarso Marques\"\r\n            }\r\n        ]\r\n    },\r\n    \"1996\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.371,\r\n                \"driver\": \"Jacques Villeneuve\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.889,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.054,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 94.257,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 94.474,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.494,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 94.832,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 95.33,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 95.338,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 95.898,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.111,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 79.092,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.474,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 79.484,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.607,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.799,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 80.0,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 80.157,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 80.426,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 81.491,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 83.174,\r\n                \"driver\": \"Luca Badoer\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.346,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.598,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 91.038,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 91.404,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 91.615,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.801,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.13,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 92.177,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 92.407,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 92.502,\r\n                \"driver\": \"Tarso Marques\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 94.83,\r\n                \"driver\": \"Luca Badoer\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.941,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.149,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 80.711,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 80.818,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.888,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.113,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 81.367,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 81.458,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 81.509,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 82.921,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.89,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.105,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.688,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 88.009,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 88.423,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 88.632,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.785,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 89.472,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 89.539,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 90.471,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 92.037,\r\n                \"driver\": \"Luca Badoer\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.356,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.866,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 80.918,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.46,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 81.504,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.929,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 82.235,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 82.327,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 82.358,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 82.684,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 85.059,\r\n                \"driver\": \"Luca Badoer\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.65,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.587,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 82.061,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.379,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 82.685,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.027,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.07,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 83.224,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 83.371,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.274,\r\n                \"driver\": \"Pedro Lamy\"\r\n            }\r\n        ]\r\n    },\r\n    \"1995\": {\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.081,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 80.382,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.906,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.399,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 81.749,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 81.914,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 82.325,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 82.468,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.872,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.383,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 85.127,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 86.269,\r\n                \"driver\": \"Roberto Moreno\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 87.323,\r\n                \"driver\": \"Jos Verstappen\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 113.241,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 114.272,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 114.381,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 114.529,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 114.637,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 114.757,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 115.583,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 117.092,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 117.167,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 117.231,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 118.824,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 121.763,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 124.481,\r\n                \"driver\": \"Roberto Moreno\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 87.274,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.282,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.459,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.343,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 88.516,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 89.582,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 90.76,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 91.035,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.358,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 92.156,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 92.445,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 93.892,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 96.065,\r\n                \"driver\": \"Roberto Moreno\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 81.452,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.052,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.332,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.352,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.833,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 84.727,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.802,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 84.971,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 85.053,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 85.827,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 86.619,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 88.094,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 88.963,\r\n                \"driver\": \"Roberto Moreno\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.952,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 82.742,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.22,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.857,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 84.447,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 84.857,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 85.447,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.661,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 85.808,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.969,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 88.337,\r\n                \"driver\": \"Domenico Schiattarella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 89.039,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 89.244,\r\n                \"driver\": \"Pedro Diniz\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 87.661,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.039,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 88.189,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.91,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 89.021,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 89.809,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 90.017,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 90.159,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 90.657,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 91.445,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 92.841,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 94.0,\r\n                \"driver\": \"Roberto Moreno\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.225,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 77.512,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.761,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.81,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 79.047,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.238,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.309,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 80.796,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 81.076,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 81.323,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 83.466,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 84.184,\r\n                \"driver\": \"Pedro Diniz\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.124,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 88.397,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.657,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 90.083,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.14,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 90.946,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.602,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 92.087,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 92.259,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 94.154,\r\n                \"driver\": \"Massimiliano Papis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 96.023,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 96.076,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 104.385,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 104.465,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 105.553,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 105.765,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.849,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 106.801,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 107.372,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 107.507,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 108.093,\r\n                \"driver\": \"Massimiliano Papis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 109.302,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 112.961,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 113.492,\r\n                \"driver\": \"Andrea Montermini\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.982,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 77.558,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.059,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.363,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 79.499,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 79.748,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.413,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 80.543,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 81.624,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 82.081,\r\n                \"driver\": \"Taki Inoue\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 84.351,\r\n                \"driver\": \"Roberto Moreno\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 84.371,\r\n                \"driver\": \"Andrea Montermini\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 114.392,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 115.435,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 116.085,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 116.254,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 117.001,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 118.021,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 118.148,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 118.224,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 119.256,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 120.99,\r\n                \"driver\": \"Taki Inoue\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 122.405,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 123.817,\r\n                \"driver\": \"Roberto Moreno\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.462,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 85.026,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.353,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 85.919,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.92,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.541,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 87.067,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 88.87,\r\n                \"driver\": \"Massimiliano Papis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 89.028,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 89.559,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 90.721,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 90.834,\r\n                \"driver\": \"Roberto Moreno\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.537,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 81.301,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.97,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.226,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 82.538,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 82.588,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.914,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 83.936,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.657,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 84.883,\r\n                \"driver\": \"Taki Inoue\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 86.172,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 87.292,\r\n                \"driver\": \"Pedro Diniz\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.738,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 79.15,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.821,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 80.488,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.749,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.866,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 81.541,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 83.058,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 83.328,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 83.689,\r\n                \"driver\": \"Massimiliano Papis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 84.696,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 85.157,\r\n                \"driver\": \"Pedro Diniz\"\r\n            }\r\n        ],\r\n        \"Pacific Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.013,\r\n                \"driver\": \"David Coulthard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 74.284,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.919,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 75.354,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.561,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 75.621,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.652,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 76.596,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 77.014,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 78.114,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 79.579,\r\n                \"driver\": \"Pedro Diniz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 80.093,\r\n                \"driver\": \"Andrea Montermini\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 98.023,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 98.888,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.954,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 99.032,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 99.621,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.01,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 100.838,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 101.355,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 102.059,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 103.102,\r\n                \"driver\": \"Pedro Lamy\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 106.097,\r\n                \"driver\": \"Andrea Montermini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 106.654,\r\n                \"driver\": \"Pedro Diniz\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Mika Salo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Luca Badoer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Forti\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Roberto Moreno\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Andrea Montermini\"\r\n            }\r\n        ]\r\n    },\r\n    \"1994\": {\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.962,\r\n                \"driver\": \"Ayrton Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 76.29,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.385,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.806,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 77.866,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.122,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 78.194,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 78.321,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 78.414,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.659,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 79.304,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 79.483,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 80.729,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 81.186,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"Pacific Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 70.218,\r\n                \"driver\": \"Ayrton Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 70.44,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 71.683,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.744,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 72.409,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 72.444,\r\n                \"driver\": \"Christian Fittipaldi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.686,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 72.751,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 73.016,\r\n                \"driver\": \"Michele Alboreto\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 73.111,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 73.613,\r\n                \"driver\": \"\\u00c9ric Bernard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 74.424,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 74.748,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.548,\r\n                \"driver\": \"Ayrton Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 81.885,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.113,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.119,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.14,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 83.322,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 83.663,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.078,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 84.678,\r\n                \"driver\": \"\\u00c9ric Bernard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 84.852,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 85.114,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 85.234,\r\n                \"driver\": \"Andrea de Cesaris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 86.817,\r\n                \"driver\": \"David Brabham\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 87.143,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 81.908,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.559,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.66,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.594,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.7,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 83.969,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.254,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 84.996,\r\n                \"driver\": \"Michele Alboreto\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 85.018,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 85.05,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 85.577,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 86.397,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 88.151,\r\n                \"driver\": \"David Brabham\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 88.873,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 86.178,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.277,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.094,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 87.554,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.616,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 87.827,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.977,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 87.989,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 88.847,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 88.889,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 88.95,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 89.039,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 91.632,\r\n                \"driver\": \"David Brabham\"\r\n            },\r\n            {\r\n                \"constructor\": \"Pacific\",\r\n                \"fastest\": 92.838,\r\n                \"driver\": \"Bertrand Gachot\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.282,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 76.707,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.954,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 77.441,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.768,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.83,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 78.044,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 78.192,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.248,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 78.568,\r\n                \"driver\": \"Christian Fittipaldi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 78.715,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 78.811,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 79.771,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.96,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 84.963,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.98,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.268,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 86.271,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 86.414,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.284,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 87.522,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 87.785,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 87.886,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 88.225,\r\n                \"driver\": \"Alessandro Zanardi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 88.519,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 90.69,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 103.582,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 104.026,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 104.268,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 104.718,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.487,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 105.893,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 105.911,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 106.185,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 106.63,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 106.817,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 107.402,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 108.229,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 108.87,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 78.258,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.824,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.219,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 80.232,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.629,\r\n                \"driver\": \"Martin Brundle\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 80.698,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.858,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 80.929,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 81.837,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 81.873,\r\n                \"driver\": \"Christian Fittipaldi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 82.487,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 82.513,\r\n                \"driver\": \"Alessandro Zanardi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 82.614,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 141.163,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 141.494,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 141.681,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 142.202,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 142.441,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 142.634,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 143.326,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 144.048,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 145.114,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 146.044,\r\n                \"driver\": \"\\u00c9ric Bernard\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 146.901,\r\n                \"driver\": \"Philippe Alliot\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 147.155,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 147.212,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.844,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.158,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 84.374,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 85.455,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.528,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.54,\r\n                \"driver\": \"Andrea de Cesaris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 85.568,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 85.618,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 85.889,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 86.002,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 86.056,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 87.846,\r\n                \"driver\": \"Yannick Dalmas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 88.353,\r\n                \"driver\": \"Jean-Marc Gounon\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.608,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.766,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.251,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 81.59,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 81.796,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.921,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 82.0,\r\n                \"driver\": \"Jos Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 82.132,\r\n                \"driver\": \"Christian Fittipaldi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 82.672,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 83.243,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 83.408,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 84.192,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 84.514,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 82.762,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.892,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.431,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 83.455,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.677,\r\n                \"driver\": \"Gerhard Berger\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 84.04,\r\n                \"driver\": \"Johnny Herbert\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 84.079,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.122,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 84.738,\r\n                \"driver\": \"Ukyo Katayama\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 85.294,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 85.557,\r\n                \"driver\": \"Alessandro Zanardi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 86.272,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 87.201,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 97.209,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.696,\r\n                \"driver\": \"Damon Hill\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.742,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 97.88,\r\n                \"driver\": \"Eddie Irvine\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.907,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.998,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 99.03,\r\n                \"driver\": \"Gianni Morbidelli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 99.266,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 99.548,\r\n                \"driver\": \"Pierluigi Martini\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 99.721,\r\n                \"driver\": \"Alessandro Zanardi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 100.042,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 100.978,\r\n                \"driver\": \"\\u00c9rik Comas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 101.659,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.179,\r\n                \"driver\": \"Nigel Mansell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Benetton\",\r\n                \"fastest\": 76.197,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.992,\r\n                \"driver\": \"Mika H\\u00e4kkinen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Jordan\",\r\n                \"fastest\": 77.537,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.801,\r\n                \"driver\": \"Jean Alesi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.962,\r\n                \"driver\": \"Heinz-Harald Frentzen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ligier\",\r\n                \"fastest\": 78.072,\r\n                \"driver\": \"Olivier Panis\"\r\n            },\r\n            {\r\n                \"constructor\": \"Tyrrell\",\r\n                \"fastest\": 78.237,\r\n                \"driver\": \"Mark Blundell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Team Lotus\",\r\n                \"fastest\": 78.331,\r\n                \"driver\": \"Alessandro Zanardi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Minardi\",\r\n                \"fastest\": 78.755,\r\n                \"driver\": \"Michele Alboreto\"\r\n            },\r\n            {\r\n                \"constructor\": \"Footwork\",\r\n                \"fastest\": 79.061,\r\n                \"driver\": \"Christian Fittipaldi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Larrousse\",\r\n                \"fastest\": 80.145,\r\n                \"driver\": \"Hideki Noda\"\r\n            },\r\n            {\r\n                \"constructor\": \"Simtek\",\r\n                \"fastest\": 80.442,\r\n                \"driver\": \"David Brabham\"\r\n            }\r\n        ]\r\n    },\r\n    \"2009\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 86.202,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.83,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 85.504,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.607,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 86.975,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.033,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 85.605,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.726,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.503,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 86.677,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 95.181,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 95.273,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.518,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.788,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 94.769,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.642,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.708,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.905,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.431,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 95.908,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.184,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.381,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 96.493,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 96.066,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.193,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.033,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.032,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.906,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 95.975,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.669,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 93.431,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.015,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 94.044,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.242,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.941,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.818,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.348,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 93.487,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.722,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.753,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 80.527,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.66,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.934,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.247,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.604,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.531,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 80.676,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.805,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.067,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.742,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 74.902,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.927,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.271,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.455,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.516,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.837,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.833,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.146,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 76.264,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 76.548,\r\n                \"driver\": \"Jarno Trulli\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.316,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 88.421,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 87.795,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 88.815,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 88.582,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.629,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 87.521,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.207,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 88.391,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.708,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.509,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 79.856,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.091,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.216,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 78.927,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 79.392,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 79.308,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.353,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 79.802,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 79.898,\r\n                \"driver\": \"S\\u00e9bastien Bourdais\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.23,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 92.357,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.616,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.402,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.574,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.803,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 92.19,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 102.5,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 92.423,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.251,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.389,\r\n                \"driver\": \"Nelson Piquet Jr.\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.607,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.839,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.89,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.823,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 81.222,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.002,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 81.082,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 81.738,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.807,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 99.489,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 99.563,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.789,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 100.144,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 99.795,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 99.04,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 98.826,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.846,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 98.991,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 99.514,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 105.119,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 106.395,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 106.5,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 105.251,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 106.633,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 106.761,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.307,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.122,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 105.136,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 105.951,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.066,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.261,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.901,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 85.015,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.728,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.18,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 83.611,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 83.866,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.074,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.22,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 107.891,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 108.204,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.013,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 107.141,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 108.544,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 107.413,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 109.307,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 107.177,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 107.369,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 108.231,\r\n                \"driver\": \"Adrian Sutil\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.16,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 91.55,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.223,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.087,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 92.66,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 92.341,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.704,\r\n                \"driver\": \"Giancarlo Fisichella\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 91.103,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.482,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.638,\r\n                \"driver\": \"Fernando Alonso\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 79.576,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.668,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 79.912,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 80.097,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.168,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.25,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.326,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 80.631,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.422,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.052,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 100.948,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.615,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Brawn\",\r\n                \"fastest\": 101.786,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toyota\",\r\n                \"fastest\": 100.777,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"BMW Sauber\",\r\n                \"fastest\": 101.992,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.148,\r\n                \"driver\": \"Kazuki Nakajima\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 101.689,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 100.726,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 101.667,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 101.701,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ]\r\n    },\r\n    \"2010\": {\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 114.101,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 114.242,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 115.217,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 115.241,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 115.885,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 115.623,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 115.33,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 116.237,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 116.265,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 119.728,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 119.852,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 123.204,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.919,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.111,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.675,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.884,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.217,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 85.372,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 85.743,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 85.638,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.747,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 88.797,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 89.592,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 90.526,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 109.327,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 110.673,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 110.914,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 111.001,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 108.76,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 108.771,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 109.207,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 112.27,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 112.52,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 112.211,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 113.044,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 116.299,\r\n                \"driver\": \"Karun Chandhok\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.558,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.913,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 94.923,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.979,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.364,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 95.963,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.748,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.047,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.422,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 99.278,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 99.399,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 100.469,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.995,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.829,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.937,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 81.294,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.353,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.984,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.985,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.131,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.191,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 84.674,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 85.475,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 86.75,\r\n                \"driver\": \"Karun Chandhok\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.826,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.12,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.283,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.432,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.544,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.901,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.17,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.413,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.692,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 77.094,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 77.377,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 78.509,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.295,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.433,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 86.857,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 87.039,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.082,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.879,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.525,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.273,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 88.392,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 90.237,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 90.744,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 91.266,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.105,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.373,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.435,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.648,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.715,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.071,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.434,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.928,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.384,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 78.237,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 78.941,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 79.484,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.587,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.969,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 98.075,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.137,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.428,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.586,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 98.627,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.851,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 99.264,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 100.658,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 102.086,\r\n                \"driver\": \"Lucas di Grassi\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 102.6,\r\n                \"driver\": \"Karun Chandhok\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 89.615,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.426,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.556,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 90.625,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.04,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.175,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.274,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.399,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.012,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 94.405,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 94.775,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 96.576,\r\n                \"driver\": \"Karun Chandhok\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.791,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 73.793,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.427,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.079,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.109,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.026,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.084,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.467,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.588,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 77.583,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 78.343,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 78.592,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 78.773,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.987,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.499,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 81.082,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.229,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.411,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.331,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.517,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.897,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 84.05,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 84.12,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 86.391,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 105.778,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.863,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.1,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 106.314,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.602,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 106.659,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 107.874,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 108.267,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 110.98,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 112.049,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 122.284,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 123.612,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.962,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.084,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.433,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 83.027,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.037,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.039,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 83.199,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.659,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.681,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 85.54,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 85.934,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 86.847,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 105.39,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 105.457,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.571,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.236,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 106.443,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.593,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.884,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 107.666,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 108.899,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 110.271,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 110.915,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 112.946,\r\n                \"driver\": \"Christian Klien\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.785,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.169,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.231,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.352,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.494,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.535,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.187,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.659,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.071,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 95.346,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 96.265,\r\n                \"driver\": \"Lucas di Grassi\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 97.27,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.585,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.766,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.062,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.535,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.824,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.998,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.643,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.783,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.853,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 100.521,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 100.748,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 102.444,\r\n                \"driver\": \"Sakon Yamamoto\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.47,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.519,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.747,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.989,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.552,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.925,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.385,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 79.581,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 80.357,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 82.13,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 82.25,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 83.083,\r\n                \"driver\": \"Christian Klien\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.394,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 99.425,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 99.792,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 100.203,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.516,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 100.78,\r\n                \"driver\": \"Robert Kubica\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.783,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 100.914,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 101.738,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 103.516,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 104.095,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 105.085,\r\n                \"driver\": \"Bruno Senna\"\r\n            }\r\n        ]\r\n    },\r\n    \"2011\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.529,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.307,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.974,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 85.247,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.421,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.626,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.103,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 86.739,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.27,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 89.254,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 89.858,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 92.978,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.87,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.974,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.802,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.124,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.809,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.82,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.16,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.37,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.496,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 98.645,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 100.648,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 101.549,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.706,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.421,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 94.67,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.119,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.158,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 95.874,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.149,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.053,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.465,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 97.894,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 99.119,\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 100.212,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.049,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.574,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.595,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.851,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.296,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.764,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.027,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.244,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 87.255,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 88.78,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 90.445,\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 90.692,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.981,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.961,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.964,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 82.471,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.599,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.952,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.231,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.367,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 85.403,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 86.126,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 87.315,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 87.809,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.556,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.997,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.483,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.682,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.826,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.482,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.815,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.118,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.3,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 77.343,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 77.914,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 7200.0,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.014,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 73.199,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.565,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.814,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.062,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 74.752,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.043,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.285,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.334,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 76.745,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 78.424,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 78.537,\r\n                \"driver\": \"Timo Glock\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.975,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.38,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.454,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 98.231,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.781,\r\n                \"driver\": \"Nick Heidfeld\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 99.034,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 99.489,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 99.525,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 99.711,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 101.664,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 102.553,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 103.584,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.399,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.516,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.898,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.929,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.933,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.128,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.209,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.734,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 94.821,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.245,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 96.203,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 97.484,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.079,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.134,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.442,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.263,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.01,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.187,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.635,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.176,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.546,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 95.599,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 96.4,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 97.011,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.815,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.978,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.35,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 81.098,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.445,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.157,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 82.284,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.684,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.979,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 84.362,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 86.294,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 86.323,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 108.298,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 108.73,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 110.256,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 110.552,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 110.773,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 111.121,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 111.374,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 127.349,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 127.758,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 128.354,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 129.566,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 131.616,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 104.381,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.804,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 104.874,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 106.013,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 107.093,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.616,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 108.082,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 108.634,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 108.662,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 110.948,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 112.154,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 112.404,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.466,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.475,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.804,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.38,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.116,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.245,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.463,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.079,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.227,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 95.454,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 96.439,\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 97.846,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.82,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.042,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.831,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 97.754,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.124,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.219,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.315,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.775,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 99.189,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 100.522,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 102.091,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 103.758,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            }\r\n        ],\r\n        \"Indian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 84.178,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.474,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.519,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.451,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 86.14,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.161,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.319,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.537,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.562,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 88.565,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 90.216,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 90.866,\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 98.481,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.622,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 99.058,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 99.773,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 100.414,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.874,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 100.919,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 101.009,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.76,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 102.979,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 104.515,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 104.641,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 71.918,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.283,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.591,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.05,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 73.298,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.761,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.801,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.804,\r\n                \"driver\": \"Jaime Alguersuari\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 74.129,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 75.068,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 76.631,\r\n                \"driver\": \"Vitantonio Liuzzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 77.019,\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.275,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.725,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.841,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.53,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 83.777,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.163,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.648,\r\n                \"driver\": \"Rubens Barrichello\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.845,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.932,\r\n                \"driver\": \"S\\u00e9bastien Buemi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus\",\r\n                \"fastest\": 86.647,\r\n                \"driver\": \"Jarno Trulli\"\r\n            },\r\n            {\r\n                \"constructor\": \"Virgin\",\r\n                \"fastest\": 87.591,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 88.054,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            }\r\n        ]\r\n    },\r\n    \"2012\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.922,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 85.302,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.336,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.651,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.908,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 86.451,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.319,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.494,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.59,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 88.679,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 90.923,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 93.495,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.219,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.391,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.461,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 96.461,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.566,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.698,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.589,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.877,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.883,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 99.306,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 100.903,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 102.914,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.121,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.626,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.784,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 95.898,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.031,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.255,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.283,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.317,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.956,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 98.463,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 99.282,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 100.411,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.422,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.52,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.821,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.912,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 93.008,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.394,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.403,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.51,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.017,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 95.823,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 97.683,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 97.883,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.707,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.285,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.302,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 82.424,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.533,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.904,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.884,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 83.125,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.265,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 85.277,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 86.582,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 87.555,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.301,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.381,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.583,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 74.639,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.948,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.245,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.421,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.508,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.878,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 76.538,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 77.947,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 78.096,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.784,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.087,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.151,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.411,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 74.645,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 74.705,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 74.688,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.078,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.17,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 76.263,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 77.492,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 77.901,\r\n                \"driver\": \"Timo Glock\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 98.086,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.41,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.475,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 98.505,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 98.623,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.741,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.752,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 98.707,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 100.295,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 100.203,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 102.171,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 102.675,\r\n                \"driver\": \"Charles Pic\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 111.746,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 111.793,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 112.02,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 113.29,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 113.539,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 108.044,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 114.382,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 117.071,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 117.132,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 109.027,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 111.618,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 112.742,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 100.212,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.026,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 101.551,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 103.501,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 100.752,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.113,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 100.574,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.741,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 99.933,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 77.62,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 79.22,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 79.912,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.953,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 81.366,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.416,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.844,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.939,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.813,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 81.895,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.895,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.38,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 83.576,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 85.244,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 85.916,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 107.573,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.871,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.893,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 108.205,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 108.313,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 108.392,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 108.855,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 109.081,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 109.354,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 111.739,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 112.336,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 113.03,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.01,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.247,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.304,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.54,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 84.802,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 84.855,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.901,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.82,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 85.312,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 86.382,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 87.039,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 87.441,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 106.362,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.804,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 106.905,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 107.216,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 107.241,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 107.788,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 107.823,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 108.505,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 108.774,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 110.846,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 111.37,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 112.372,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.839,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.29,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.7,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 91.898,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.114,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.272,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.469,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.512,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.954,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 94.657,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 95.213,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 95.385,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.242,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.469,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.534,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 97.625,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.266,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 98.361,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.46,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.725,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 99.084,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 100.207,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 101.317,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 102.881,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Indian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.283,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.544,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.773,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 86.136,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.36,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.331,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.976,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 86.241,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.777,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 88.756,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 89.613,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 90.592,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 100.63,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 100.978,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.226,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 101.26,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 101.582,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 101.603,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 102.019,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 102.084,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 102.765,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 104.956,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 105.089,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 105.766,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.657,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.766,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 96.587,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.794,\r\n                \"driver\": \"Michael Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.937,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.141,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.604,\r\n                \"driver\": \"Bruno Senna\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.879,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.206,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 100.056,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 100.809,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 102.011,\r\n                \"driver\": \"Pedro de la Rosa\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.458,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.581,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.987,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.174,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 73.206,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 73.298,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.489,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 74.234,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 74.574,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 77.073,\r\n                \"driver\": \"Vitaly Petrov\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 77.508,\r\n                \"driver\": \"Timo Glock\"\r\n            },\r\n            {\r\n                \"constructor\": \"HRT\",\r\n                \"fastest\": 79.576,\r\n                \"driver\": \"Narain Karthikeyan\"\r\n            }\r\n        ]\r\n    },\r\n    \"2013\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.407,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 88.087,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 88.49,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 88.738,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 89.305,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.357,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.067,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.778,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 100.29,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 108.147,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 109.519,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 109.674,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 110.587,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 111.699,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 97.636,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 113.175,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 104.509,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.125,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.157,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.867,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 98.434,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 99.314,\r\n                \"driver\": \"Charles Pic\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 94.484,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 94.761,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.788,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.998,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.314,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.343,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.261,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.287,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.139,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 98.78,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 99.614,\r\n                \"driver\": \"Charles Pic\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.33,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.584,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.667,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.235,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 93.327,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.702,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.974,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.976,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.105,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 95.283,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 96.178,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 80.718,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.054,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 81.177,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.218,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.069,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 82.233,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.127,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 82.389,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.26,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 84.661,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 84.713,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.876,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.98,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 74.822,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.824,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.138,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.383,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.703,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.331,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.077,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 79.408,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 87.303,\r\n                \"driver\": \"Max Chilton\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.425,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.512,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.897,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.504,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.543,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.908,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 85.716,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 89.435,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.761,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 85.626,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 86.508,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 89.607,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.211,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 90.736,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.757,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 90.955,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.979,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.649,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.211,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.359,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 93.866,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 94.108,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 89.398,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 89.501,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 89.892,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.528,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.126,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.269,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 90.231,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 90.697,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.693,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 92.937,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 93.063,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.388,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.426,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 79.595,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.791,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.641,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.777,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 80.569,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 80.58,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.133,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 83.007,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 83.787,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 121.012,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 121.2,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 109.103,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 109.304,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 123.081,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 123.482,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 109.088,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 112.036,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 112.563,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 123.072,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 123.3,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.755,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.065,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.132,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.192,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.209,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.502,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 84.61,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.932,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.011,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 86.406,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 87.085,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 102.841,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 102.932,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 103.058,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 103.89,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.282,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 104.439,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 104.245,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 105.185,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 105.388,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 108.111,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 108.83,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.202,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 97.42,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 97.531,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 98.038,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.237,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.362,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.417,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.431,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 99.47,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 100.864,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 101.169,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.915,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.253,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 91.365,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.378,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.644,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.827,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.992,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.013,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.485,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 94.32,\r\n                \"driver\": \"Max Chilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 94.556,\r\n                \"driver\": \"Charles Pic\"\r\n            }\r\n        ],\r\n        \"Indian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 84.119,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.871,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.201,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 85.248,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.334,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.153,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 85.519,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 85.711,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.134,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 86.97,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 87.105,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.957,\r\n                \"driver\": \"Mark Webber\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.419,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 100.542,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.576,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 101.015,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.068,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 101.111,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 101.133,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.395,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 103.252,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 103.398,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.338,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 97.155,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.296,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 97.345,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.376,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.452,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.836,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.131,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.139,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 100.491,\r\n                \"driver\": \"Giedo van der Garde\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 100.528,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.479,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 87.102,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.539,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 87.456,\r\n                \"driver\": \"Heikki Kovalainen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.052,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.455,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.798,\r\n                \"driver\": \"Paul di Resta\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.367,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.269,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 87.843,\r\n                \"driver\": \"Charles Pic\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 88.366,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ]\r\n    },\r\n    \"2014\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 104.231,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 104.548,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.437,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 104.494,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 105.864,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 106.03,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 108.079,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.117,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 95.157,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 94.293,\r\n                \"driver\": \"Max Chilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 96.993,\r\n                \"driver\": \"Romain Grosjean\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 119.431,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 119.486,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 120.175,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 121.712,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 122.213,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 122.351,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 122.131,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 122.46,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 122.074,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 122.702,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 123.595,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 93.185,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.051,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.247,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 94.346,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 94.368,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.387,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.145,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.891,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 95.908,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 97.085,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 97.31,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 113.86,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 114.455,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 115.637,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 116.147,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 116.366,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 116.773,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 117.079,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 116.963,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 117.393,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 119.26,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 119.326,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.232,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.285,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.632,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 86.96,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.104,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.335,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.685,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.039,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.28,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 89.586,\r\n                \"driver\": \"Max Chilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 90.312,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.989,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.384,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.686,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 77.54,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.555,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 77.846,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.082,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 78.196,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.741,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 79.332,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 80.133,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.874,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.548,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.55,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.814,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.162,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.182,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.3,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 76.687,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.314,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 78.348,\r\n                \"driver\": \"Max Chilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 79.278,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 68.759,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 68.944,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 69.285,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 69.466,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 69.515,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 69.619,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 69.624,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 69.939,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 70.825,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 71.412,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 71.673,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.766,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.386,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.2,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.329,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 100.707,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 98.496,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 98.709,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.912,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 105.318,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 105.935,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 109.421,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.54,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 76.759,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.214,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 77.273,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.649,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 77.965,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 78.014,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.787,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 78.983,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 79.676,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 80.408,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.715,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.201,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.354,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.909,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.294,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.706,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.775,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.136,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 85.337,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 87.419,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 87.139,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 125.591,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 127.717,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 127.786,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 128.049,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 128.679,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 129.377,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 130.084,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 130.238,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 131.087,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 132.47,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 133.469,\r\n                \"driver\": \"Andr\\u00e9 Lotterer\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.109,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.697,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.314,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.43,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.436,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 85.944,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.07,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.588,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 87.52,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 87.671,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 87.738,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 105.681,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 105.854,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 105.907,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 106.0,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 106.25,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 106.989,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 107.308,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.333,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 107.812,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 109.44,\r\n                \"driver\": \"Jules Bianchi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 110.405,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.506,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.128,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.74,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.075,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.242,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 94.984,\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 95.089,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.364,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 95.917,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 96.813,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 96.943,\r\n                \"driver\": \"Jules Bianchi\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 98.513,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.92,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 99.121,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 99.277,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.635,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 99.709,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 100.058,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.536,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 101.397,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 102.648,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 103.649,\r\n                \"driver\": \"Max Chilton\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.067,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.906,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.244,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.61,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.655,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.81,\r\n                \"driver\": \"Adrian Sutil\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 98.467,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.554,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.699,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 70.023,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 70.247,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 70.93,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 70.938,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.977,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 71.591,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 71.976,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 71.423,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 72.037,\r\n                \"driver\": \"Romain Grosjean\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 102.819,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 102.768,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 102.239,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 101.908,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.964,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.236,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.025,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.48,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Caterham\",\r\n                \"fastest\": 104.54,\r\n                \"driver\": \"Kamui Kobayashi\"\r\n            }\r\n        ]\r\n    },\r\n    \"2015\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 86.327,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.718,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.757,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.329,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.51,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 88.56,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.8,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 89.208,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.422,\r\n                \"driver\": \"Jenson Button\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 109.834,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.173,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 111.541,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 103.701,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 112.473,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 102.198,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 101.308,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 103.023,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.636,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 106.677,\r\n                \"driver\": \"Roberto Merhi\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.782,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.687,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.954,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.54,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 97.905,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.067,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.393,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 99.216,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 99.276,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 102.091,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.571,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.982,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.381,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.832,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 94.45,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 94.462,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 94.484,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.737,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.039,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 98.713,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.681,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.458,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.694,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.136,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.629,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 87.375,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 87.76,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 88.005,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 88.365,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 91.2,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.098,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.849,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.041,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.808,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.931,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 76.946,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.093,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.278,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.101,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 80.655,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.393,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.014,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.102,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 75.194,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.614,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.079,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.042,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.262,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.276,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 79.133,\r\n                \"driver\": \"Roberto Merhi\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 68.455,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 68.81,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 69.192,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 69.278,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 69.612,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 69.694,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 69.713,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 69.92,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 70.736,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 74.071,\r\n                \"driver\": \"Roberto Merhi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.248,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.085,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.379,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.636,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.649,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.673,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 94.43,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.868,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.959,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 97.364,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.02,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.739,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.774,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.222,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.679,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 84.181,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 83.826,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 84.563,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.843,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 87.416,\r\n                \"driver\": \"Roberto Merhi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 107.197,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 108.537,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 108.561,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 108.599,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 108.639,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 108.825,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 109.771,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 109.586,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 110.978,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 112.948,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 83.397,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.631,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.94,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.626,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 84.525,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.898,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 85.618,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.633,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.058,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 87.731,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 103.885,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 104.428,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 105.3,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 105.676,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 105.798,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 106.413,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 106.305,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 106.328,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 106.965,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 111.021,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.584,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.024,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.245,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.497,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 93.967,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 94.174,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 94.453,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.785,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.673,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 98.783,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 97.113,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.912,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.965,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.659,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 98.787,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.924,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.214,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 99.323,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 99.763,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 103.693,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 116.824,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 117.969,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 118.596,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 119.21,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 119.999,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 120.199,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 120.265,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 120.595,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 122.212,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 124.176,\r\n                \"driver\": \"Alexander Rossi\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.48,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.85,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.398,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 80.448,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.71,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 80.716,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 81.038,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.544,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.779,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 84.136,\r\n                \"driver\": \"Alexander Rossi\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 71.282,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.804,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.085,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 72.265,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.322,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 72.739,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.989,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 73.385,\r\n                \"driver\": \"Pastor Maldonado\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.425,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Marussia\",\r\n                \"fastest\": 76.151,\r\n                \"driver\": \"Alexander Rossi\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.237,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 101.051,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 101.184,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.444,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.656,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 102.521,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 102.668,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Lotus F1\",\r\n                \"fastest\": 102.585,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 103.614,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 106.297,\r\n                \"driver\": \"Will Stevens\"\r\n            }\r\n        ]\r\n    },\r\n    \"2016\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 83.837,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 84.675,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 85.434,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.458,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.589,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 85.753,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.125,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 87.601,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.435,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 88.322,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 89.627,\r\n                \"driver\": \"Rio Haryanto\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 89.493,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.012,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.854,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.153,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.62,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 91.756,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 91.772,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.934,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 92.806,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.84,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.181,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.402,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.917,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.972,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.296,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.865,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 96.881,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.826,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 98.77,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 100.742,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.673,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 100.264,\r\n                \"driver\": \"Rio Haryanto\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.417,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.123,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 96.536,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 97.125,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.212,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.583,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.701,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 98.055,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.914,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 99.018,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 99.399,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.0,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.68,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.113,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 83.522,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.643,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 83.782,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.981,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 84.48,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 84.625,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 85.202,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 85.745,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.622,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.791,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.552,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 74.726,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 74.749,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.352,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.273,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 75.293,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.058,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.299,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 77.295,\r\n                \"driver\": \"Rio Haryanto\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 72.812,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.99,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 73.166,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.67,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 73.952,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.338,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 74.457,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 74.571,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.459,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 75.599,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.635,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 102.758,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 103.515,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 103.966,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 103.966,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 104.483,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 104.717,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 104.755,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.27,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 106.048,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 105.665,\r\n                \"driver\": \"Rio Haryanto\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.348,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 67.922,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 67.657,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 69.781,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 68.154,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 69.98,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 70.44,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 67.578,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 67.7,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 67.618,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 67.941,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 68.418,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 89.287,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.313,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.881,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.557,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 91.989,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.875,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.343,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 92.05,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.905,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 93.098,\r\n                \"driver\": \"Rio Haryanto\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.544,\r\n                \"driver\": \"Felipe Nasr\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.965,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.28,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.874,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.131,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.211,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.823,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.182,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 84.941,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.063,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 103.965,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 107.343,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.363,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.726,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.142,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 75.51,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.53,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 75.883,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.909,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 75.989,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.665,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 76.717,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 77.123,\r\n                \"driver\": \"Felipe Nasr\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 106.744,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 106.893,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 106.91,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 107.407,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.612,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 108.114,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 108.316,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 108.485,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 109.038,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 109.05,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 108.949,\r\n                \"driver\": \"Felipe Nasr\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 81.135,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.972,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.388,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.389,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 82.814,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 83.092,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.273,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 83.315,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 83.496,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 83.956,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 84.23,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 102.584,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 103.115,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 103.54,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 104.197,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 104.479,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.553,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 104.74,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 105.593,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 106.86,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 106.825,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 107.667,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.85,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.42,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.584,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 94.319,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.518,\r\n                \"driver\": \"Jenson Button\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.577,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 95.001,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.277,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.369,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 95.816,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 96.451,\r\n                \"driver\": \"Esteban Ocon\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 90.647,\r\n                \"driver\": \"Nico Rosberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.949,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 91.178,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.961,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 91.961,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.315,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.623,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.689,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.807,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.222,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 93.353,\r\n                \"driver\": \"Esteban Ocon\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 94.999,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.509,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.131,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.628,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.116,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.326,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.417,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 97.773,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 97.935,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.583,\r\n                \"driver\": \"Felipe Nasr\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 98.548,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 78.704,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.054,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 79.33,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.376,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.551,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.378,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.282,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.131,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.536,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 81.785,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 81.401,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 70.736,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.404,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 71.485,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 71.937,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 72.104,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.266,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.42,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 72.726,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.258,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 73.427,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 73.623,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 98.755,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.589,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 99.604,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 100.501,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.106,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.084,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 101.48,\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 101.82,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Manor Marussia\",\r\n                \"fastest\": 101.995,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 102.003,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 102.247,\r\n                \"driver\": \"Felipe Nasr\"\r\n            }\r\n        ]\r\n    },\r\n    \"2017\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.188,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.456,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.485,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 84.074,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.443,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.487,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 85.081,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 85.091,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.425,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 86.419,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.678,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.864,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.033,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.507,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.58,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.706,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.719,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 94.164,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 94.372,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.963,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 88.769,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.247,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 89.545,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.842,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.074,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 90.763,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.923,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.414,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.684,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.054,\r\n                \"driver\": \"Fernando Alonso\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.194,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 93.289,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 94.905,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.11,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 95.285,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 95.337,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.948,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 96.017,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.66,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 97.332,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.149,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.2,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.706,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.048,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.07,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.232,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 81.329,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.371,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.397,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.803,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.178,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 72.223,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.496,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.162,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 73.329,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 73.349,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.249,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.628,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.893,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 75.159,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 71.459,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.789,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.403,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.858,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 73.018,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 73.271,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.69,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.693,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 73.839,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 74.495,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.593,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 101.693,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.879,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 102.111,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 102.753,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 103.186,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 103.796,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 104.267,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 104.603,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.334,\r\n                \"driver\": \"Fernando Alonso\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 64.251,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 64.293,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 64.896,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 65.48,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 65.605,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 65.726,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 65.597,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 65.602,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 66.534,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 66.857,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 86.6,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.147,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.13,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 88.856,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 88.902,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.418,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 89.549,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.355,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.482,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 102.593,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.276,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.53,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.797,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 77.468,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.549,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 78.538,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 78.495,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 78.771,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.102,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.839,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 102.553,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.795,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 103.38,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 104.685,\r\n                \"driver\": \"Jolyon Palmer\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 105.244,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 105.09,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 105.133,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 105.439,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 105.823,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 107.214,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.554,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.702,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 97.032,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.582,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 97.987,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.202,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.059,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.245,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 100.489,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 101.732,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 99.491,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 99.814,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.126,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 101.013,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.179,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 102.056,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 102.246,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 103.756,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 104.014,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 105.059,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 90.076,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.121,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.541,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 91.478,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.582,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 91.607,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.034,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.402,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 93.308,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.483,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 87.319,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.791,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.306,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 89.111,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 89.48,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.778,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.879,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 89.972,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.413,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.597,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 93.108,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.347,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.577,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 94.647,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.852,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.007,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.155,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 95.529,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 95.87,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.842,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.488,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.574,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.934,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 77.437,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 77.466,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.099,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 78.683,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.71,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 79.176,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 79.443,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 68.322,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 68.36,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 68.925,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 69.598,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 69.617,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 69.703,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 69.841,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 69.879,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 70.625,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 70.678,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.231,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.777,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.959,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.282,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 98.374,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.55,\r\n                \"driver\": \"Felipe Massa\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.636,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 99.298,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 99.724,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 99.93,\r\n                \"driver\": \"Pascal Wehrlein\"\r\n            }\r\n        ]\r\n    },\r\n    \"2018\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 81.164,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.828,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.879,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 83.187,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 83.532,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.692,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 84.005,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.23,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 84.532,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 84.556,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.958,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 88.124,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.398,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 89.329,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 89.358,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.57,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 89.874,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.212,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 91.063,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.414,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.095,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.625,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 91.796,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.532,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.758,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 92.855,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.232,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.795,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 94.062,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.454,\r\n                \"driver\": \"Charles Leclerc\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 101.498,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 101.677,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.911,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 102.523,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 103.066,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 103.585,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.019,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 104.074,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 104.759,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 104.496,\r\n                \"driver\": \"Pierre Gasly\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.173,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.305,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.816,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 77.676,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.721,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 77.79,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 78.463,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 78.696,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.91,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.695,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 70.81,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.039,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 71.232,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.11,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 72.13,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 72.061,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 72.221,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 72.521,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.714,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 72.728,\r\n                \"driver\": \"Romain Grosjean\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.764,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 70.857,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 70.937,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.973,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 72.084,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 72.635,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.856,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.59,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.661,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 72.606,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 90.029,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.4,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 90.705,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.115,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 92.635,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 91.472,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 92.075,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 92.46,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.976,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.636,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 63.13,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 63.464,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 63.84,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 63.892,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 64.725,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 64.845,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 64.874,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 64.979,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 65.058,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 65.286,\r\n                \"driver\": \"Lance Stroll\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.892,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.936,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.602,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 87.244,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 87.879,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 87.928,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 87.901,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.139,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.343,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 89.252,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 71.212,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 71.416,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 71.822,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 72.2,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 72.56,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 72.717,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 72.774,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 73.657,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.702,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.749,\r\n                \"driver\": \"Pierre Gasly\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.186,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.506,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.591,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.442,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 99.858,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 78.782,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 78.817,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.56,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 79.142,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.658,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 102.191,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 118.905,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 121.851,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 122.122,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 122.769,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 103.844,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 104.062,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 104.145,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.917,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 104.998,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.119,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.294,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.615,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 80.936,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 81.041,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 81.099,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 81.35,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.627,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.085,\r\n                \"driver\": \"Stoffel Vandoorne\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 81.889,\r\n                \"driver\": \"Charles Leclerc\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.015,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.334,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.628,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 97.985,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 98.32,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.588,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 98.641,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 98.747,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 99.691,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 101.263,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.387,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.943,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 93.181,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 93.413,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 93.419,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.048,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 94.383,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.626,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.504,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.612,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 87.76,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 89.057,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.521,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 89.761,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.023,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 90.126,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 89.864,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 90.361,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.372,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 90.573,\r\n                \"driver\": \"Fernando Alonso\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.237,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.298,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 93.494,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 94.145,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 94.215,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 94.25,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 94.42,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 94.85,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.294,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.362,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.759,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.894,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.97,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.827,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 76.189,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 76.844,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.828,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 76.911,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.871,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.689,\r\n                \"driver\": \"Lance Stroll\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 67.281,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 67.374,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 67.778,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 68.296,\r\n                \"driver\": \"Marcus Ericsson\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 68.517,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 69.029,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 68.741,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 68.834,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 69.441,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 69.402,\r\n                \"driver\": \"Fernando Alonso\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 94.794,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.125,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.401,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 96.192,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Sauber\",\r\n                \"fastest\": 96.237,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Force India\",\r\n                \"fastest\": 96.54,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.542,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.743,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.994,\r\n                \"driver\": \"Brendon Hartley\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.635,\r\n                \"driver\": \"Sergey Sirotkin\"\r\n            }\r\n        ]\r\n    },\r\n    \"2019\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 80.486,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.19,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.32,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 81.826,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.304,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 82.314,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 82.781,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 82.562,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 82.636,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.36,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.866,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 88.19,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.752,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 88.757,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.813,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 89.022,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.488,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 89.513,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 89.756,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.759,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.547,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.848,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.089,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.958,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 93.15,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.236,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 93.299,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 93.419,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.523,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.253,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 100.495,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 100.797,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.069,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 101.593,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 101.681,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.886,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 102.424,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 102.477,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 102.699,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 105.062,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.406,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.272,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.357,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 76.911,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 77.445,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 78.106,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.338,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 77.788,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 77.886,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.072,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 70.166,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 70.641,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.947,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 71.109,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.218,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 71.271,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 71.417,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 72.115,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 72.233,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.477,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.24,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 70.446,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 71.071,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 71.079,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 71.863,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 71.786,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 71.921,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 72.136,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 72.197,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 73.617,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 88.319,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 88.965,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 89.409,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.418,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.918,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 90.533,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 90.461,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 90.738,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 91.44,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.789,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 63.003,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 63.262,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 63.439,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 64.072,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 64.099,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 64.166,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 64.516,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 64.665,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 64.789,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 65.904,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.093,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.172,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.276,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.182,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.224,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 86.345,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 86.519,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 86.662,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 86.762,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.789,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 71.767,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 72.113,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 72.538,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 72.789,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 72.897,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 73.065,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 72.799,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 72.344,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 73.135,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 74.721,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.572,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.59,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.043,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 75.8,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 76.013,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 76.041,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.565,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.687,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.031,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 77.109,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.519,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 103.282,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 103.69,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 104.257,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 104.557,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 104.706,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 104.797,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 104.847,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 106.435,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 107.548,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.307,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.346,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 79.839,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.455,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.021,\r\n                \"driver\": \"Alexander Albon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 80.498,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 80.515,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 80.615,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 80.63,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.8,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.217,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 96.408,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 96.813,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 97.818,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 98.264,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 98.52,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 98.697,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 98.699,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 99.65,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 100.867,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 91.628,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.03,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.31,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.222,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.289,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 93.517,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.95,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 93.958,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 94.037,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.356,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 87.064,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 87.293,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.851,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.304,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 88.836,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 89.341,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 89.254,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 89.345,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 89.822,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.364,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.758,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 75.024,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.262,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.014,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 76.469,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 76.687,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.885,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 76.967,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 78.436,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.823,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 92.029,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 92.041,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.096,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.847,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 93.488,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 93.601,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 93.979,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 94.1,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 94.226,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.372,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 67.508,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 67.631,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 67.699,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 68.837,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 68.854,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 68.919,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 68.868,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 68.903,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 69.035,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 70.126,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 94.779,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.139,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 95.219,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 96.436,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.456,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 97.055,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Toro Rosso\",\r\n                \"fastest\": 97.089,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 97.254,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 98.114,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.717,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ]\r\n    },\r\n    \"2020\": {\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 62.939,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 63.477,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 63.626,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 63.868,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 63.923,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 64.239,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 64.305,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 64.691,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 65.167,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 65.175,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"Styrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.273,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 80.489,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 80.671,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 80.922,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 79.717,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.628,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.636,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 79.645,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 80.211,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 81.14,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.447,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 74.377,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.774,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.849,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.966,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 75.508,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 75.661,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.698,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 76.152,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 76.506,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 84.303,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.325,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 85.427,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 85.782,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 85.839,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.009,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 86.501,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.092,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 87.158,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 87.164,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"70th Anniversary Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.154,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 86.082,\r\n                \"driver\": \"Nico H\\u00fclkenberg\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.176,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.297,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 86.534,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.614,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.778,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 87.254,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.455,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 88.433,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.584,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.292,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 76.482,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.044,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.087,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 77.136,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 77.198,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 77.386,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 77.908,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.099,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 101.252,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.778,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 102.061,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 102.438,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 102.532,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 102.73,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.996,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 103.468,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 103.743,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 103.838,\r\n                \"driver\": \"Romain Grosjean\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 78.887,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.695,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 79.72,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.795,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 79.864,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 80.169,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.273,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 80.926,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 81.139,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.587,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Tuscan Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.144,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.509,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.27,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 76.311,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 76.297,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.64,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 76.854,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 76.854,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 77.254,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.232,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 91.304,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 91.867,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 92.317,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 92.364,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 92.55,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 93.0,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.239,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 93.583,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 94.592,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 94.594,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"Eifel Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 85.269,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 85.562,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.035,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 86.223,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.458,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 86.704,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 86.776,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 86.936,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 87.125,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 87.564,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 77.223,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 77.481,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 77.728,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.52,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.904,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.09,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.652,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.788,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 78.201,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 78.364,\r\n                \"driver\": \"Romain Grosjean\"\r\n            }\r\n        ],\r\n        \"Emilia Romagna Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 73.609,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.176,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 74.502,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 74.52,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.616,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.814,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 75.061,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.323,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 75.918,\r\n                \"driver\": \"Romain Grosjean\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 75.953,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 107.765,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 108.055,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 111.595,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 112.56,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 112.745,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 114.945,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 115.169,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 118.556,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 128.007,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 130.017,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 87.264,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.678,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 88.322,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 88.417,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 88.448,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.542,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.149,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 90.182,\r\n                \"driver\": \"Nicholas Latifi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 89.491,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 90.111,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            }\r\n        ],\r\n        \"Sakhir Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 53.377,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 53.433,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 53.613,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 53.79,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 53.906,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 53.957,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 54.01,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 54.377,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 54.705,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 54.796,\r\n                \"driver\": \"Nicholas Latifi\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 95.246,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 95.271,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 95.497,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 95.963,\r\n                \"driver\": \"Daniil Kvyat\"\r\n            },\r\n            {\r\n                \"constructor\": \"Racing Point\",\r\n                \"fastest\": 96.034,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 96.065,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Renault\",\r\n                \"fastest\": 96.359,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 97.555,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 97.863,\r\n                \"driver\": \"Kevin Magnussen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 98.045,\r\n                \"driver\": \"George Russell\"\r\n            }\r\n        ]\r\n    },\r\n    \"2021\": {\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 88.997,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 89.385,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 89.678,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 89.809,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 89.927,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 90.249,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 90.601,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 90.708,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 91.936,\r\n                \"driver\": \"Nicholas Latifi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 92.449,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Emilia Romagna Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 74.411,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 74.446,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 74.74,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 74.79,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 74.826,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 75.21,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 75.138,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 75.261,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 75.974,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 76.279,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 78.348,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 78.746,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 79.039,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 79.042,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.116,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 79.463,\r\n                \"driver\": \"Yuki Tsunoda\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 79.659,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.109,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 79.216,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 80.452,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 76.741,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.777,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 77.51,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 77.58,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 77.622,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 77.974,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 77.982,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 78.356,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 79.154,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 79.117,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 70.346,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 70.576,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 70.601,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 70.62,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 70.9,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 71.419,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 71.642,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 71.486,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 71.83,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 72.958,\r\n                \"driver\": \"Nikita Mazepin\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 101.218,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 101.45,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 101.563,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 101.565,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.747,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 102.273,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 102.224,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 102.587,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 102.758,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 104.158,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 89.99,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 90.248,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 90.84,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 90.868,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 91.252,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 91.34,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 91.767,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 91.813,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 92.065,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 92.942,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Styrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 63.841,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 64.035,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 64.12,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 64.236,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 64.472,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 64.574,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 64.708,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 64.671,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 64.913,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 66.041,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 63.72,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 63.768,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 64.014,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 64.107,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 64.57,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 64.591,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 64.559,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 64.856,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 65.009,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 65.427,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 86.134,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 86.209,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 86.828,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 86.897,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 86.971,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 87.179,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 87.245,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 87.273,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 87.617,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 88.738,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.419,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 75.84,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 76.483,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.489,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.496,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 76.653,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 76.75,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 77.564,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 77.944,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 78.922,\r\n                \"driver\": \"Nikita Mazepin\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 119.765,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 118.056,\r\n                \"driver\": \"Nicholas Latifi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 120.099,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 116.025,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 118.231,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 121.164,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 118.205,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 117.721,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 122.306,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 123.973,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Dutch Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 68.885,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 68.923,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 69.478,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 69.527,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 69.59,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 69.933,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 70.166,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 70.332,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 70.367,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 71.387,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 79.555,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 79.966,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 79.989,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 80.26,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 80.462,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 80.808,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 80.913,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 81.069,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 81.392,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 82.248,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 101.993,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 102.51,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 102.983,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 104.05,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 104.204,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 104.956,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 105.337,\r\n                \"driver\": \"Sergio P\\u00e9rez\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 106.641,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 109.586,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 109.83,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.868,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 83.196,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 83.265,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 83.326,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 83.477,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 83.954,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 84.305,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 85.007,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 85.2,\r\n                \"driver\": \"Mick Schumacher\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 86.43,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 92.91,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 93.119,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 93.606,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 93.808,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 94.118,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 95.377,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 95.5,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 95.794,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 95.746,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 96.499,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Mexico City Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 75.875,\r\n                \"driver\": \"Valtteri Bottas\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 76.225,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 76.456,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 76.761,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 76.763,\r\n                \"driver\": \"Daniel Ricciardo\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 77.746,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 77.958,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 78.172,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 78.405,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 78.858,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Sao Paulo Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 67.934,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 68.372,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 68.777,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 68.826,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 68.98,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 69.113,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 69.399,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 69.503,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 69.897,\r\n                \"driver\": \"Nicholas Latifi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 70.329,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Qatar Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 80.827,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 81.282,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 81.64,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 81.67,\r\n                \"driver\": \"Fernando Alonso\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 81.731,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 81.84,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 82.46,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 82.756,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 83.156,\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 83.407,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Saudi Arabian Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 87.511,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 87.653,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 88.054,\r\n                \"driver\": \"Charles Leclerc\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 88.125,\r\n                \"driver\": \"Pierre Gasly\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 88.18,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 88.647,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 88.754,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 89.054,\r\n                \"driver\": \"George Russell\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 89.198,\r\n                \"driver\": \"Sebastian Vettel\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 89.464,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"constructor\": \"Red Bull\",\r\n                \"fastest\": 82.109,\r\n                \"driver\": \"Max Verstappen\"\r\n            },\r\n            {\r\n                \"constructor\": \"Mercedes\",\r\n                \"fastest\": 82.48,\r\n                \"driver\": \"Lewis Hamilton\"\r\n            },\r\n            {\r\n                \"constructor\": \"McLaren\",\r\n                \"fastest\": 82.931,\r\n                \"driver\": \"Lando Norris\"\r\n            },\r\n            {\r\n                \"constructor\": \"Ferrari\",\r\n                \"fastest\": 82.992,\r\n                \"driver\": \"Carlos Sainz\"\r\n            },\r\n            {\r\n                \"constructor\": \"AlphaTauri\",\r\n                \"fastest\": 83.22,\r\n                \"driver\": \"Yuki Tsunoda\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alpine F1 Team\",\r\n                \"fastest\": 83.389,\r\n                \"driver\": \"Esteban Ocon\"\r\n            },\r\n            {\r\n                \"constructor\": \"Aston Martin\",\r\n                \"fastest\": 84.066,\r\n                \"driver\": \"Lance Stroll\"\r\n            },\r\n            {\r\n                \"constructor\": \"Alfa Romeo\",\r\n                \"fastest\": 84.251,\r\n                \"driver\": \"Antonio Giovinazzi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Williams\",\r\n                \"fastest\": 84.338,\r\n                \"driver\": \"Nicholas Latifi\"\r\n            },\r\n            {\r\n                \"constructor\": \"Haas F1 Team\",\r\n                \"fastest\": 84.906,\r\n                \"driver\": \"Mick Schumacher\"\r\n            }\r\n        ]\r\n    }\r\n}","import { OnboardingManager } from \"./onboarding-manager\";\r\n\r\nexport enum ScrollyEvent {\r\n    Started,\r\n    Finished\r\n}\r\ntype StateCallback = (event: ScrollyEvent) => void\r\ntype ProgressCallback = ({ progress: number, forward: boolean }) => void\r\n\r\nexport class ScrollManager {\r\n    private homepage = true\r\n    private _progress = 0\r\n    private carElem: SVGImageElement | null;\r\n    private stateCallbacks: StateCallback[] = []\r\n    private progressCallbacks: ProgressCallback[] = []\r\n    private atCheckpoint = false;\r\n    private isEnabled = false;\r\n    private checkpoints = [2, 24, 60, 76];\r\n\r\n    set progress(progress: number) {\r\n        if (progress > 100 || progress < 0) throw Error('Invalid progress')\r\n        // if is already finished before update, we are moving backward again\r\n        if (this.scrollyFinished) {\r\n            this.stateCallbacks.forEach(cb => cb(ScrollyEvent.Started))\r\n        }\r\n        const forward = progress > this._progress;\r\n        this._progress = progress\r\n        this.updateProgressElem();\r\n        this.progressCallbacks.forEach(cb => cb({ progress: this.progress, forward }))\r\n\r\n        // if finished after update, we are done\r\n        if (this.scrollyFinished) {\r\n            this.stateCallbacks.forEach(cb => cb(ScrollyEvent.Finished))\r\n        }\r\n    }\r\n\r\n    get progress(): number {\r\n        return this._progress\r\n    }\r\n\r\n    constructor(d3, private onboardingManager: OnboardingManager) {\r\n        this.carElem = document.querySelector('#car');\r\n        const width = document.querySelector('.progress-svg').clientWidth;\r\n        d3.select('.svg-checkpoint-marker').selectAll('circle')\r\n            .data(this.checkpoints)\r\n            .enter()\r\n            .append('circle')\r\n            .attr('fill', 'red')\r\n            .attr('r', 15)\r\n            .attr('cx', d => `${width * d / 100 + 15}`)\r\n            .attr('cy', 15);\r\n\r\n        window.addEventListener('wheel', ev => this.handleScrollEvent(ev));\r\n        this.onboardingManager.onOnboardingFinished(() => this.enable());\r\n    }\r\n\r\n    enable(): void {\r\n        this.isEnabled = true;\r\n    }\r\n\r\n    onScrollyStateChange(cb: StateCallback): void {\r\n        this.stateCallbacks.push(cb);\r\n    }\r\n\r\n    onScrollyProgress(cb: ProgressCallback): void {\r\n        this.progressCallbacks.push(cb);\r\n    }\r\n\r\n    // Call this method to simulate sticky behaviour\r\n    // Will ignore scrolling events for a second\r\n    reachedCheckpoint(): void {\r\n        this.atCheckpoint = true;\r\n        setTimeout(() => this.atCheckpoint = false, 1000)\r\n    }\r\n\r\n    private updateProgressElem(): void {\r\n        if (this.carElem == null) return\r\n\r\n        this.carElem.setAttribute('x', `${this.progress}%`)\r\n    }\r\n\r\n    private handleScrollEvent(ev: WheelEvent): void {\r\n        ev.stopImmediatePropagation()\r\n        if (this.homepage  && ev.deltaY > 0){\r\n            this.homepage = false;\r\n            let onboard = document.querySelector<HTMLElement>(`#onboarding`);\r\n\r\n            // Wait for the little animation to complete\r\n            setTimeout(() => {\r\n                this.onboardingManager.startOnboarding();\r\n            }, 1000);\r\n            onboard.classList.remove('visible');\r\n            onboard.classList.add('hidden');\r\n            return;\r\n        }\r\n        if (!this.isEnabled) return;\r\n        if (this.progress == 0 && ev.deltaY < 0) {\r\n            if (!this.homepage) {\r\n                this.homepage = true;\r\n                let onboard = document.querySelector<HTMLElement>(`#onboarding`);\r\n                onboard.classList.remove('hidden');\r\n                onboard.classList.add('visible');\r\n            }\r\n            return\r\n        }\r\n\r\n        if (this.scrollyFinished && ev.deltaY > 0) return;\r\n        if (this.atCheckpoint) return;\r\n\r\n        this.progress +=  ev.deltaY > 0 ? 2 : -2\r\n    }\r\n\r\n    get scrollyFinished(): boolean {\r\n        return this.progress == 100;\r\n    }\r\n}\r\n","export enum VisibilityTarget {\r\n    ScrollyOnly = 'scrolly-only',\r\n    DashboardOnly = 'dashboard-only',\r\n    Onboarding = 'onboarding'\r\n}\r\n\r\nexport class VisibilityManager {\r\n    // Used to keep initial css display value\r\n    private nodes: Map<HTMLElement, string> = new Map();\r\n\r\n    hide(target: VisibilityTarget): void {\r\n        document.querySelectorAll<HTMLElement>(`.${target}`).forEach(elem => {\r\n            if (!this.nodes.has(elem)) {\r\n                this.nodes.set(elem, elem.style.display);\r\n            }\r\n            elem.removeAttribute('entering')\r\n            elem.style.display = 'none';\r\n        })\r\n    }\r\n\r\n    show(target: VisibilityTarget): void {\r\n        document.querySelectorAll<HTMLElement>(`.${target}`).forEach(elem => {\r\n            const display = this.nodes.get(elem) ?? 'block'\r\n            elem.setAttribute('entering', '')\r\n            elem.style.display = display;\r\n        })\r\n    }\r\n}\r\n","{\r\n    \"2011\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 89.6,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 89.883,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 90.064,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 88.947,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 93.503,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.962,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 91.526,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 90.467,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 92.55,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 91.404,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 94.523,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 100.571,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 101.054,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 101.264,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 100.717,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 101.778,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 102.095,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 102.659,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 102.883,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 105.516,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 103.677,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 105.346,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 106.521,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 100.415,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 98.993,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 101.166,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 101.678,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 101.157,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 101.696,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 101.643,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 101.261,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 101.702,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 102.052,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 103.384,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 104.381,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 89.703,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 90.573,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 90.279,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 90.108,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 90.158,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 92.044,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 92.07,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 92.695,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 89.894,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 90.797,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 93.948,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 94.971,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.737,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 87.162,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.727,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 86.958,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 89.155,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 89.132,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 87.247,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 86.891,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 88.791,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 90.618,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 92.848,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 91.635,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 76.234,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.463,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.471,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 78.699,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 78.584,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 77.857,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 78.724,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 78.308,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 78.608,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 80.678,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 81.391,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 81.566,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 77.217,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 79.148,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.956,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.138,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 79.054,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 79.395,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.316,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 80.213,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 79.507,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.233,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 83.116,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 82.495,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 101.852,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 102.308,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 102.34,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 103.649,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 103.526,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 103.151,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 103.134,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 103.517,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 103.579,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 106.628,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 105.055,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 107.418,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.503,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.391,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.666,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 95.301,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 96.656,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 95.755,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 96.375,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 95.144,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 96.197,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 115.491,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 98.275,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 99.117,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 94.302,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.468,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 94.609,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 95.628,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 96.653,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 96.186,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 97.568,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 96.659,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 97.415,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 99.05,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 99.787,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 100.489,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 83.718,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 83.661,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 84.857,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 83.415,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 85.579,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 84.664,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 85.018,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 84.664,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 85.977,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 88.022,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 87.149,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.876,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 111.137,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 109.883,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 111.107,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 110.062,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 116.79,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 113.871,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 112.432,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 112.591,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 110.424,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 118.061,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 116.319,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 114.051,\r\n                \"constructor\": \"Lotus\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.924,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 86.557,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.187,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 87.402,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 88.054,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 88.377,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.403,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 88.202,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 89.639,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 90.783,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 86.895,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 1098.88,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 108.688,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 108.454,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 110.891,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 113.096,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 114.239,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 111.329,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 113.198,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 113.774,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 112.197,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 114.063,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 118.73,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 118.283,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 96.828,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 96.568,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 96.682,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 96.614,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 97.97,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 97.053,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 97.411,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 96.569,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 99.297,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 97.645,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 101.704,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.437,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.605,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 100.459,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 100.541,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 101.77,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 102.549,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 102.014,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 100.537,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 102.08,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 102.371,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 102.456,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 104.536,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 104.87,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Indian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 87.249,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 87.967,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.953,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.549,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 88.679,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 89.289,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 89.239,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 88.635,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 90.294,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 91.674,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 91.99,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.345,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 103.154,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 103.914,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 102.612,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 103.993,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 104.12,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 103.521,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 104.093,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 103.673,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 106.61,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 108.085,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 108.274,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 104.438,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.324,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.58,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.181,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.681,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 77.161,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 77.011,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 77.162,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 77.644,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 78.023,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 76.684,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 79.902,\r\n                \"constructor\": \"Virgin\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 79.649,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ]\r\n    },\r\n    \"2012\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 89.187,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 90.931,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 89.417,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 90.759,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 90.254,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 90.277,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 90.62,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 94.253,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 90.605,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 90.274,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 93.214,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 101.539,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 101.017,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 101.68,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 101.76,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 101.404,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 100.722,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 101.021,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 101.819,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.756,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 103.513,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 104.757,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 105.909,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 100.967,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 100.422,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 101.12,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 99.96,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 101.152,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 100.49,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 100.482,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 100.977,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 101.19,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 102.621,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 100.019,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 103.61,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 96.379,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 97.733,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 96.928,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 98.123,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 98.08,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 96.7,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 98.087,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.312,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 97.058,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 98.305,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 100.323,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 99.747,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.39,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 87.906,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 86.25,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 88.15,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 87.768,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 88.624,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 88.266,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 88.308,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 88.313,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 88.715,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 89.599,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 90.722,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 78.805,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 78.904,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.806,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 78.857,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 79.246,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 78.423,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 79.187,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 79.013,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 79.305,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 79.604,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 77.296,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 80.286,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 75.752,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 77.02,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.182,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.06,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 77.202,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.764,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 76.414,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 77.489,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 78.093,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 76.609,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 81.535,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 80.632,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 102.717,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 104.007,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 103.686,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 103.526,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 104.064,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 104.101,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 103.666,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 102.163,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 103.674,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 104.253,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 106.388,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 106.701,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 95.448,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 95.191,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 94.661,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 95.898,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 95.863,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.629,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 98.339,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 94.608,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 97.422,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 97.252,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 94.739,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 95.49,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 79.469,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 79.044,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 78.725,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 79.372,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 79.719,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 79.607,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 79.485,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 79.645,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 79.161,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 79.997,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 81.753,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 81.788,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 85.677,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 85.728,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 84.136,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.738,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 85.723,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 85.976,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 85.83,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 85.218,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 86.061,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 86.595,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 88.447,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 88.765,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 114.293,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 113.64,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 113.76,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 113.073,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 113.995,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 113.768,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 112.822,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 116.475,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 113.464,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 117.315,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 116.956,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 115.598,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.427,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.835,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 87.239,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.713,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"J\\u00e9r\\u00f4me d'Ambrosio\",\r\n                \"fastest\": 88.677,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 87.562,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 88.578,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 88.053,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.621,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 89.066,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 89.753,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 90.398,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 112.625,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 112.134,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 113.61,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 112.709,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 111.033,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 113.785,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 113.897,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 111.69,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 113.51,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 115.106,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 116.057,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 117.671,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 95.774,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 96.679,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 96.606,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 96.894,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 97.886,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 97.535,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 96.819,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 97.455,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 98.756,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 98.043,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 96.942,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 99.351,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 102.037,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 102.242,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 102.721,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 102.783,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 102.645,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 102.495,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 103.184,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 102.679,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 102.721,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 104.955,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 104.462,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 107.068,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Indian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.723,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 88.203,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.63,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 89.354,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 89.204,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 89.086,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 89.23,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 88.431,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 89.44,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 92.161,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 90.786,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 91.366,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 104.533,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 104.458,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 104.833,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 104.09,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 103.964,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.41,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 105.225,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 105.903,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 107.661,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 107.115,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 108.619,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 105.617,\r\n                \"constructor\": \"Force India\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.347,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 99.709,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 99.402,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 100.428,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 100.594,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.474,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 100.315,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 100.719,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 100.772,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 102.824,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 102.481,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 104.508,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.069,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 78.623,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 78.903,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 78.21,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 79.444,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 90.97,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 78.973,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 80.158,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 78.983,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 79.256,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 79.686,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 81.085,\r\n                \"constructor\": \"HRT\"\r\n            }\r\n        ]\r\n    },\r\n    \"2013\": {\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.446,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 99.805,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 100.755,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 99.199,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 102.791,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 100.727,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 100.492,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 101.226,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 101.373,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 102.942,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 102.423,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 89.732,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 89.56,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 89.759,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 89.274,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 90.71,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.926,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 90.652,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 89.498,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 91.415,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 90.454,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 92.261,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 99.981,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.506,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.955,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 100.138,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 98.058,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 96.808,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 100.63,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 100.101,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 98.2,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 101.537,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 101.997,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 97.588,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 96.961,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.204,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 97.07,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 97.627,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 97.743,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 98.202,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 99.579,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 98.192,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 98.756,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 99.334,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 87.591,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 87.017,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.394,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.757,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 87.251,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 86.564,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.083,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 86.217,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 87.849,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 89.362,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 88.011,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.133,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 76.577,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 77.392,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 79.34,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 78.72,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 78.292,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 79.151,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 78.685,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 80.881,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 80.494,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 79.016,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 76.182,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 76.354,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.203,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 78.004,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 77.909,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 77.694,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 77.607,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 79.056,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 77.369,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 79.38,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 78.873,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 93.531,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 93.401,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 95.33,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 94.09,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 95.384,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 95.542,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 95.146,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 95.805,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 95.818,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 97.091,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 97.978,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 94.164,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 94.156,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.767,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.468,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 95.982,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.201,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 94.244,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 95.816,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 93.972,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 97.584,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 98.383,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 84.647,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.069,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 85.26,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 85.176,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 86.143,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 86.491,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 85.597,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 86.608,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 86.74,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 87.473,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 88.16,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 110.756,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 111.582,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 110.823,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 111.383,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 112.226,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 111.849,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 112.497,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 113.995,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 112.579,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 110.967,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 114.894,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 86.69,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 86.797,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 86.716,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 85.849,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 87.294,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 87.607,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 87.418,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.948,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 86.981,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 88.62,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 89.491,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 108.574,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 109.916,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 110.509,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 111.097,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 111.74,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 112.007,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 109.656,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 110.328,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 110.708,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 110.99,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 112.898,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 101.38,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 101.936,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 102.471,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 102.608,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 102.709,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 102.947,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 103.869,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 102.973,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 104.095,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 104.375,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 104.991,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 95.516,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.587,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 94.65,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 95.877,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 96.482,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 95.549,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 97.367,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 97.423,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 95.02,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 98.713,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 97.489,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Indian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.116,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.709,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 88.816,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 88.682,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 87.679,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 88.503,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.831,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 88.419,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 88.928,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 90.171,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 92.907,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 103.893,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 104.458,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 104.301,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 105.57,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 103.434,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.435,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 105.609,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 104.351,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 104.517,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Pic\",\r\n                \"fastest\": 106.432,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 107.619,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.856,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 100.445,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 100.818,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 100.952,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 101.285,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 101.186,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 100.492,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Paul di Resta\",\r\n                \"fastest\": 101.148,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 101.32,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 103.419,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 103.933,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.436,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 76.442,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.496,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 76.528,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 77.249,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 76.79,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 76.84,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 76.246,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 76.049,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 77.281,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Giedo van der Garde\",\r\n                \"fastest\": 77.59,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ]\r\n    },\r\n    \"2014\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 92.478,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 93.066,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 92.917,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 93.21,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 92.616,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 92.634,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 97.064,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 94.766,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 95.635,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 94.202,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 92.568,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 103.066,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 104.289,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 104.165,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 105.982,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 105.373,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 104.897,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 107.782,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 106.695,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 106.224,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 107.5,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 108.249,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 97.02,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 99.272,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.785,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 99.565,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.438,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 99.269,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 100.16,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 100.698,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 99.443,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 101.825,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 101.134,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 100.402,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.473,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 102.081,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 102.379,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 102.228,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 103.067,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 102.896,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 102.701,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 102.257,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 103.323,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 102.875,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 89.236,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 90.424,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.918,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 91.068,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 89.898,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 90.756,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 90.666,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 90.269,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 90.318,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 91.767,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 93.064,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 79.361,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 79.252,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 78.479,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 80.657,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 81.083,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 80.767,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 80.314,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 81.146,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 80.911,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 80.579,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 80.979,\r\n                \"constructor\": \"Lotus F1\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 78.616,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 78.64,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 78.504,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 79.399,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 78.529,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 78.759,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 78.936,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 80.112,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 79.65,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 83.13,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 72.581,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 72.217,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 72.595,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 72.746,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 72.142,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 73.06,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 73.317,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 73.709,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 73.187,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 74.476,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 74.672,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 3698.495,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 3700.135,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 3692.106,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 3694.017,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 3667.384,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 3689.718,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 3687.269,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 3681.464,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 3679.776,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 3670.56,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 3674.941,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 79.908,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 81.494,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 80.846,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.548,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 80.752,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 80.224,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 81.876,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 82.008,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 82.305,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 82.522,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 82.866,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 85.724,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 86.85,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 86.608,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.419,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 88.883,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 90.28,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 89.12,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 88.704,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 89.128,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 89.499,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 92.888,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 113.483,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 112.512,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 113.879,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 112.953,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 110.511,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 113.612,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 113.276,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 112.413,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 115.649,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 115.9,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 115.247,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.004,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 89.245,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 88.342,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.588,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 88.942,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.107,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 88.486,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 89.856,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 89.375,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 90.28,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 90.521,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 110.417,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 112.519,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 112.115,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 112.515,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 111.639,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 111.761,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 112.007,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 113.948,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 113.213,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 113.538,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 115.416,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 111.6,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 113.45,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 112.426,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 111.915,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 111.721,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 112.814,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 113.562,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 115.372,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 114.702,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jules Bianchi\",\r\n                \"fastest\": 115.985,\r\n                \"constructor\": \"Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 114.669,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 101.36,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 100.896,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 101.964,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 102.179,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 102.022,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 102.63,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 102.685,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 103.822,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 104.03,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 103.979,\r\n                \"constructor\": \"Caterham\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Chilton\",\r\n                \"fastest\": 108.268,\r\n                \"constructor\": \"Marussia\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 101.929,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 102.505,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 104.255,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 101.474,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 101.379,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 106.226,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 103.808,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 101.689,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 103.006,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 104.496,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 107.508,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 105.599,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 104.826,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 106.739,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 107.424,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean-\\u00c9ric Vergne\",\r\n                \"fastest\": 105.686,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 105.777,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 107.897,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 107.431,\r\n                \"constructor\": \"Caterham\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 74.018,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.313,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 73.999,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 74.07,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 73.555,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 74.834,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 73.728,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 74.101,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 74.144,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ]\r\n    },\r\n    \"2015\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 90.945,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 92.872,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 91.719,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 91.426,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 91.56,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 92.797,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 91.959,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.338,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 102.062,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 103.648,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 104.514,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 103.99,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 104.822,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 103.902,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 104.579,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 104.812,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 106.056,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Roberto Merhi\",\r\n                \"fastest\": 109.04,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 102.208,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 103.018,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 102.734,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 103.134,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 103.692,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 102.652,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 103.512,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 103.245,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 103.728,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 105.414,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 97.326,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 96.311,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 98.095,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 98.725,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 97.665,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 98.338,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 98.216,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 99.607,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 98.992,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 101.759,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.27,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 89.931,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 90.374,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 91.156,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 91.945,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 91.124,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 91.162,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 91.928,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 90.888,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 93.655,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 78.599,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 78.854,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 78.063,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 79.657,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 80.483,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 78.873,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 79.49,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 79.285,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 78.944,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Roberto Merhi\",\r\n                \"fastest\": 81.715,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 77.472,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.987,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 77.553,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 77.969,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 78.238,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 78.048,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 78.856,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 78.89,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 78.616,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 80.707,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 71.235,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 71.499,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 71.613,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 72.377,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 72.349,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 72.516,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 71.785,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 71.689,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Roberto Merhi\",\r\n                \"fastest\": 74.939,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 101.204,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 96.61,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 96.975,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.233,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 97.493,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 97.91,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 98.883,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 98.697,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 98.131,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 101.919,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 86.772,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 85.149,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.864,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 84.821,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 88.074,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 87.65,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.311,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 87.13,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 89.543,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 88.004,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 112.416,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 114.796,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 113.032,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 114.093,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 114.517,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 114.779,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 113.991,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 113.276,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 113.692,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 118.15,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.672,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 87.376,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 87.525,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 88.14,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 95.106,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 88.516,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 89.285,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 87.39,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.065,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 91.098,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 110.069,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 110.041,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 110.934,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 111.342,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 111.97,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 111.167,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 110.298,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 110.175,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 111.594,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Rossi\",\r\n                \"fastest\": 115.312,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 96.145,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 97.906,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 98.241,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 98.136,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.614,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 98.237,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 99.343,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.331,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 98.366,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 101.452,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 100.573,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.071,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 100.881,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 101.772,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 101.372,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 101.52,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 103.068,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 101.507,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 104.926,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 102.258,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 100.666,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.98,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 103.01,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 101.33,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 102.66,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 103.026,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 104.407,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 108.231,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pastor Maldonado\",\r\n                \"fastest\": 102.849,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Rossi\",\r\n                \"fastest\": 108.173,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 80.521,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 81.549,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 81.585,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 82.172,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 82.391,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 82.893,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 82.716,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Rossi\",\r\n                \"fastest\": 85.005,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 81.847,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 83.006,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 74.832,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 75.046,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 75.743,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 76.313,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 75.97,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 75.972,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 75.739,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 75.789,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.321,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Rossi\",\r\n                \"fastest\": 78.617,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 104.517,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 104.55,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.892,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 106.305,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 105.746,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 106.464,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 104.796,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 106.424,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 105.859,\r\n                \"constructor\": \"Lotus F1\"\r\n            },\r\n            {\r\n                \"driver\": \"Will Stevens\",\r\n                \"fastest\": 109.61,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ]\r\n    },\r\n    \"2016\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 89.951,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 90.557,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 91.671,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 92.288,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 92.78,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 1198.834,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 91.684,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 92.955,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 92.673,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 92.711,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 92.862,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 94.482,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 97.077,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 95.678,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 95.158,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 96.095,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 95.504,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 96.121,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 95.188,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 95.448,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 95.36,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 96.73,\r\n                \"constructor\": \"Renault\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.015,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 100.418,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 99.824,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 100.399,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 101.558,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 100.593,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 100.298,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 100.582,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 102.232,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 101.489,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 99.923,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 99.094,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 100.101,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 99.743,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 102.029,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 100.347,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.179,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 102.026,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 101.832,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 102.05,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 101.907,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 101.897,\r\n                \"constructor\": \"Force India\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 88.209,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 86.948,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 87.974,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 89.081,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.801,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 89.75,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 88.974,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 88.716,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 89.715,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Rio Haryanto\",\r\n                \"fastest\": 89.402,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 78.294,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 77.939,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 78.005,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 78.446,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 78.519,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 79.17,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 79.213,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 79.131,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 89.802,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 81.342,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Rio Haryanto\",\r\n                \"fastest\": 79.868,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 76.297,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 75.599,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 76.319,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 76.938,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 77.307,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 76.559,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 77.281,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 76.578,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 78.282,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 78.224,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 77.883,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 106.485,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 106.973,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 107.028,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 106.99,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 107.604,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 108.804,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 107.563,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 107.622,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 107.708,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 110.571,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 107.583,\r\n                \"constructor\": \"Renault\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 68.411,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 70.001,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 68.876,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 70.12,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 68.77,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 69.899,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 70.138,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rio Haryanto\",\r\n                \"fastest\": 70.342,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 69.694,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 70.228,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 70.415,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 95.548,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 96.013,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 96.933,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 96.141,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 97.401,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 97.618,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 95.669,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 97.713,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 97.619,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Rio Haryanto\",\r\n                \"fastest\": 101.38,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 98.71,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 83.67,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 84.608,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 83.086,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 84.958,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 84.669,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 85.273,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 85.021,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 85.955,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 85.475,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 85.743,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 86.524,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.746,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 78.442,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 78.71,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 80.442,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 79.606,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 79.781,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 81.127,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 79.585,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 81.212,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 79.883,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 80.71,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 1156.45,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 1154.576,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 1144.667,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 1147.366,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 1145.519,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 125.072,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 116.588,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 141.859,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 1142.21,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 130.752,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 1083.424,\r\n                \"constructor\": \"Ferrari\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.303,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.016,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.4,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 85.919,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 86.92,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.34,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 88.534,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 87.106,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 86.751,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 88.552,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 87.618,\r\n                \"constructor\": \"Renault\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 107.752,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 107.187,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 107.345,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 111.249,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 110.532,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 111.368,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 110.858,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 110.963,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 111.517,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 111.075,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 111.748,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 96.424,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 97.376,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 97.793,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 97.466,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 98.291,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 99.199,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 101.775,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 99.653,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 99.243,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 99.781,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 99.35,\r\n                \"constructor\": \"Renault\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 95.152,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 95.511,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 96.756,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 95.118,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 97.02,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 97.597,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 97.785,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 97.177,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 97.978,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 98.496,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 98.0,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 101.897,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 102.424,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.877,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 103.414,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 102.832,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 103.502,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 104.335,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 104.117,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 102.475,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 103.925,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 103.585,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 82.596,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 81.134,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 83.288,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 82.497,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 83.54,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 83.618,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.668,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 83.146,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 83.278,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 83.657,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 84.964,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 85.639,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 86.195,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 85.305,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 86.728,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 86.983,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 86.062,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Guti\\u00e9rrez\",\r\n                \"fastest\": 87.805,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 87.153,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 86.524,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 87.796,\r\n                \"constructor\": \"Manor Marussia\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Nasr\",\r\n                \"fastest\": 87.547,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 105.137,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 103.729,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 104.889,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.249,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 104.495,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 105.675,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 105.715,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 106.591,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 106.216,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 104.97,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 106.145,\r\n                \"constructor\": \"Manor Marussia\"\r\n            }\r\n        ]\r\n    },\r\n    \"1996\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 93.651,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 94.757,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 93.421,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 95.843,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 94.767,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 95.064,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 95.596,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 96.557,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 95.28,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 98.077,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 82.889,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 81.866,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 81.547,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 82.283,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.743,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 82.043,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 96.166,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 95.435,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 82.483,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 83.559,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 85.627,\r\n                \"constructor\": \"Forti\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 90.367,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 89.413,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 89.653,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 91.408,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 91.343,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 91.443,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 91.005,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 91.099,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 91.396,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 92.925,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Andrea Montermini\",\r\n                \"fastest\": 94.592,\r\n                \"constructor\": \"Forti\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.769,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 82.004,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 81.363,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 82.078,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 83.72,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.472,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 82.697,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 83.233,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 82.602,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 84.369,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.966,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 89.542,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 88.931,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 89.48,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 90.184,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 89.888,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 90.811,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 90.479,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 89.997,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 91.633,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 92.426,\r\n                \"constructor\": \"Forti\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 86.12,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 85.205,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 86.682,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 86.238,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 85.581,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 95.477,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 85.608,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 118.465,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 86.461,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 93.305,\r\n                \"constructor\": \"Forti\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 105.517,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 108.509,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 108.707,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 109.771,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 110.636,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 107.735,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 108.846,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 108.302,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 111.734,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 183.566,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.163,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 82.824,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 81.916,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 82.941,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 83.399,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 82.958,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 83.907,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 84.844,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 83.648,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 84.349,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Andrea Montermini\",\r\n                \"fastest\": 84.621,\r\n                \"constructor\": \"Forti\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 81.824,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 79.206,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 78.61,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 79.632,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 78.712,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.134,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 81.262,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 81.461,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 80.71,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 82.842,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 82.258,\r\n                \"constructor\": \"Forti\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 90.944,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 89.984,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 89.288,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 90.531,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 92.188,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 90.552,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 92.213,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 92.08,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 91.765,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 93.707,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 108.336,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 107.643,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 106.504,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 107.856,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 108.288,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 109.176,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 109.773,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 111.702,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 110.553,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 111.654,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 80.912,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 81.733,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 80.093,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 82.257,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 81.562,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.181,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 81.882,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 84.018,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 84.04,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 85.006,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 113.905,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 113.067,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 113.441,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 114.198,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 118.665,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 115.616,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 116.704,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 115.854,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 117.468,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 86.11,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 86.652,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 87.027,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 86.827,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 87.905,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 87.557,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 88.223,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 88.65,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 88.98,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 91.353,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.059,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 84.331,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 82.873,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 84.747,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 85.008,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 84.954,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 84.869,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 85.913,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 86.199,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 87.754,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 104.445,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 104.35,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 104.043,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 104.852,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 105.347,\r\n                \"constructor\": \"Ligier\"\r\n            },\r\n            {\r\n                \"driver\": \"Martin Brundle\",\r\n                \"fastest\": 105.882,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 105.932,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 106.977,\r\n                \"constructor\": \"Footwork\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 107.518,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Lamy\",\r\n                \"fastest\": 109.22,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ]\r\n    },\r\n    \"1997\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 94.465,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 90.585,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 91.067,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 91.624,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 91.412,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 94.147,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 91.762,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicola Larini\",\r\n                \"fastest\": 92.784,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 94.194,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 94.918,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 93.386,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 79.91,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 78.397,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 78.773,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 78.509,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 78.649,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 78.441,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 79.094,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicola Larini\",\r\n                \"fastest\": 78.73,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 80.274,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 79.96,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.788,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 90.649,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 88.028,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 88.288,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 87.981,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 89.076,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 88.382,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 89.09,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicola Larini\",\r\n                \"fastest\": 88.41,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 89.541,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 90.593,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 89.834,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 87.793,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 85.531,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 85.537,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 87.091,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 86.067,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 86.62,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 88.064,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicola Larini\",\r\n                \"fastest\": 86.753,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 88.189,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 89.554,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 87.741,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 137.648,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 113.504,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 113.315,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 115.451,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 131.201,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 113.43,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 115.309,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 115.84,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 114.968,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 116.101,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 113.495,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 83.716,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 82.534,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 82.295,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 83.096,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 82.34,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.242,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.422,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 83.178,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 84.517,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 84.213,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.564,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 82.434,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 79.997,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 80.171,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 80.679,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 79.635,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.013,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 80.945,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 80.709,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 81.622,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.712,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.366,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 80.434,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 78.136,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 77.91,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 78.684,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 79.317,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 79.225,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 79.417,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Norberto Fontana\",\r\n                \"fastest\": 79.849,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 80.385,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 80.534,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 78.781,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 86.471,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 85.082,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.475,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 86.26,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 85.988,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.872,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 86.61,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 86.232,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 88.053,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 89.1,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 87.586,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 106.56,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 107.044,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 106.603,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 105.747,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 106.831,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 106.127,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 106.733,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Norberto Fontana\",\r\n                \"fastest\": 107.908,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 109.611,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 110.161,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 107.074,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 79.648,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 78.372,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 79.527,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 79.923,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 80.161,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.366,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 80.003,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 80.606,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 81.578,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 80.672,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 81.409,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 113.652,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 112.692,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 115.29,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 113.649,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 114.175,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 114.688,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 115.152,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 113.615,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 116.919,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 115.413,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 115.726,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 87.081,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 85.6,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 85.655,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 85.653,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 84.808,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.909,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 86.383,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 86.572,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 88.004,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 89.116,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 87.447,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 72.903,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 71.814,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 72.169,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 72.624,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 72.207,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 72.375,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 72.598,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 72.574,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 73.708,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Ukyo Katayama\",\r\n                \"fastest\": 74.394,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 72.535,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Luxembourg Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 80.407,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 78.805,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 81.793,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 79.716,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 79.576,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 81.086,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 80.518,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 81.996,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 96.826,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.737,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 101.419,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 98.942,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 99.268,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 99.381,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 99.771,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 99.737,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 100.43,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 100.266,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 102.996,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 102.699,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 103.883,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 84.274,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 83.135,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 83.692,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Gerhard Berger\",\r\n                \"fastest\": 83.361,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 84.006,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 85.434,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 83.941,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Norberto Fontana\",\r\n                \"fastest\": 85.154,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 85.237,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 85.947,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 85.37,\r\n                \"constructor\": \"Stewart\"\r\n            }\r\n        ]\r\n    },\r\n    \"1998\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 93.554,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 93.79,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 94.319,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 91.649,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 94.196,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 94.319,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 94.878,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 96.032,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 112.353,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 98.116,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 96.475,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 80.129,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.627,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 79.863,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 79.337,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 81.035,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 80.449,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 80.623,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 82.969,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 80.991,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 83.226,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 83.293,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Argentine Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 89.592,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.272,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 88.179,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 88.261,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 89.31,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 89.201,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 89.0,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 92.519,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 90.408,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 91.057,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 90.992,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 89.726,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 89.345,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 91.562,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 89.497,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 90.859,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 90.481,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 90.391,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 91.267,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 95.069,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 92.43,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 93.443,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 86.011,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.625,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 85.343,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 84.275,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 86.501,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 86.394,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 85.668,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 87.638,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 86.532,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 88.066,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 87.601,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 84.381,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 83.189,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 83.594,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 82.948,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 86.091,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 84.874,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 84.539,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 84.456,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jan Magnussen\",\r\n                \"fastest\": 86.637,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 86.506,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 86.054,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 81.233,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.379,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 80.942,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 80.852,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 81.933,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 81.669,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 83.466,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 81.814,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.239,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 83.418,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 82.907,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 78.913,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 77.77,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.307,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 77.523,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 79.052,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 79.869,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 79.66,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 81.502,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.651,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 80.299,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 81.883,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 96.884,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 95.704,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 97.982,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 95.961,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 97.223,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 102.346,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 97.202,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 97.887,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 100.097,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 100.948,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 103.755,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 73.73,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 73.029,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 74.04,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 72.878,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 73.972,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 75.709,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 74.639,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 100.264,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 75.61,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Rosset\",\r\n                \"fastest\": 76.1,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 75.575,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 106.274,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 106.381,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 106.831,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 106.116,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 106.317,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 107.775,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 106.964,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 108.899,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 107.544,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 108.608,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 109.424,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 80.078,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.286,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.06,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 80.545,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 80.68,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.538,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 81.329,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 83.429,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.294,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 82.495,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 83.573,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 126.284,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 123.766,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 129.528,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 925.994,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 125.63,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 131.701,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 127.597,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 131.331,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 132.425,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 132.327,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 139.996,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 86.479,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 85.483,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 86.659,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 85.139,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 86.194,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 86.285,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 86.84,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 87.866,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 87.77,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 87.726,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Tuero\",\r\n                \"fastest\": 89.093,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Luxembourg Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 81.394,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.001,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.506,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 80.45,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 81.741,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.931,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 81.979,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 83.552,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.412,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 83.392,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 84.21,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 102.273,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 100.19,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 102.335,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 100.426,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 102.275,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 103.073,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 102.357,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 105.304,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 104.947,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 105.673,\r\n                \"constructor\": \"Tyrrell\"\r\n            },\r\n            {\r\n                \"driver\": \"Shinji Nakano\",\r\n                \"fastest\": 104.158,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ]\r\n    },\r\n    \"1999\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 93.309,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.112,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 93.407,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 93.378,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 93.657,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 94.748,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 95.22,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 92.894,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 94.98,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 97.073,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 94.756,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 78.448,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 78.616,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 79.395,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 79.009,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 80.145,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 78.897,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 81.598,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 79.477,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 79.386,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"St\\u00e9phane Sarrazin\",\r\n                \"fastest\": 81.225,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 80.727,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 89.145,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.547,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alessandro Zanardi\",\r\n                \"fastest\": 90.254,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 90.14,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 90.977,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 90.442,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 91.587,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 90.564,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 90.081,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 92.851,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 91.007,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 82.259,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 82.288,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 82.837,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 82.471,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 83.236,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 82.637,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 86.482,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.583,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 83.646,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 86.864,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 83.537,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 85.209,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.982,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 86.52,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 86.348,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 87.029,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 86.315,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 87.409,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 86.006,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 86.505,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 89.632,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 86.675,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 80.961,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 80.382,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 82.002,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 81.284,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.345,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 81.864,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 82.792,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 82.078,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.1,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 82.888,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 82.283,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 79.227,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 80.328,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 80.313,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 80.994,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 81.409,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 80.848,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 82.535,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.878,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 81.33,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 82.844,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 80.881,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 88.309,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 88.782,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 89.414,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 89.252,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 90.296,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 89.819,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 92.442,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 89.493,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 90.793,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 91.612,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 90.611,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 72.107,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 72.787,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alessandro Zanardi\",\r\n                \"fastest\": 74.381,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 73.176,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 73.579,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 73.093,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 74.914,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 72.641,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 73.465,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 74.517,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 73.977,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 105.27,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 107.687,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 108.083,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 107.619,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 107.785,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 108.334,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 110.286,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 107.788,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 106.823,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 109.894,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 109.179,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 80.699,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 81.01,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 81.745,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 80.991,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.469,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 80.83,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 83.52,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 81.707,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 81.936,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 83.456,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 81.343,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 113.955,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 115.299,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alessandro Zanardi\",\r\n                \"fastest\": 115.786,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Damon Hill\",\r\n                \"fastest\": 114.954,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 117.037,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 116.016,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 118.48,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 116.131,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 116.367,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 116.789,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 117.619,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 85.832,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 85.63,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.579,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 85.917,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 88.338,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 85.911,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 88.516,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 85.825,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 85.953,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Luca Badoer\",\r\n                \"fastest\": 88.914,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 86.338,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 81.282,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 82.332,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 82.237,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 82.082,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.244,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 83.097,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Toranosuke Takagi\",\r\n                \"fastest\": 84.848,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.96,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 83.742,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 83.657,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 82.564,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 101.103,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 100.267,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alessandro Zanardi\",\r\n                \"fastest\": 102.056,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 100.631,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 100.96,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 101.328,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 103.885,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 100.81,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 106.874,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 102.49,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 101.769,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 101.577,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 101.319,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 102.567,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 102.972,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 103.963,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 103.669,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 105.556,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 103.496,\r\n                \"constructor\": \"Stewart\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 103.188,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 105.359,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 103.898,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ]\r\n    },\r\n    \"2000\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 92.433,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 91.481,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 92.11,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 95.789,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 92.525,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 93.449,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.111,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 92.977,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 94.834,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 93.231,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 93.185,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 75.456,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 74.755,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 75.192,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 77.696,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.379,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.002,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 78.381,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 76.967,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 77.174,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 76.658,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 86.523,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 86.774,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 88.754,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 88.387,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 87.339,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 88.884,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 89.35,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 87.814,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 88.842,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Gast\\u00f3n Mazzacane\",\r\n                \"fastest\": 90.03,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 88.787,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 86.217,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 86.428,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 87.286,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 88.001,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 86.998,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 88.116,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 88.388,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 88.037,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 88.867,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 88.557,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 87.655,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 84.47,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.517,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 85.183,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 86.239,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 84.729,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 86.147,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 86.663,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 85.896,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 87.152,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 85.915,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 86.241,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 82.288,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 82.269,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 84.937,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 84.008,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 83.688,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 83.255,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 83.898,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 84.346,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 83.125,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 84.018,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 83.39,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 81.571,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 81.91,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 82.123,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 82.424,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 83.769,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.905,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 83.261,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 82.634,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 84.486,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 84.351,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 83.393,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 79.049,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 79.235,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 80.479,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 80.693,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 80.52,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 80.399,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 80.889,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 80.494,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 80.693,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 80.547,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 80.533,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 79.479,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.656,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 81.071,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 79.708,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 80.908,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 80.958,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 81.115,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 81.725,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 81.506,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 82.42,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 80.857,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 71.783,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 71.887,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 76.588,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 73.613,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 72.811,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 73.317,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 73.593,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 72.955,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 73.49,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 73.626,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 72.63,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 104.579,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 104.3,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 104.614,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 107.332,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 106.685,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 107.269,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 107.001,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 106.639,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 106.243,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 107.158,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 106.374,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 80.028,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.52,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 80.64,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 81.572,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 81.211,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 81.483,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 83.644,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 81.372,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 82.366,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 83.388,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 81.163,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 114.131,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 113.803,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 114.966,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 115.603,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 115.425,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 116.726,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 115.954,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 115.11,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 116.77,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 117.261,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 115.511,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 85.595,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 85.663,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Johnny Herbert\",\r\n                \"fastest\": 258.026,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 86.636,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 86.731,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 87.978,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 87.215,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 87.033,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 88.131,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 86.433,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 74.711,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 74.822,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 75.521,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 75.675,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 75.598,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 75.56,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.074,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 75.305,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 76.252,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 76.044,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 75.117,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 99.189,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 99.443,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 100.967,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 101.154,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 100.699,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 102.416,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 102.356,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro Diniz\",\r\n                \"fastest\": 101.002,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 102.079,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 102.815,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 100.739,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 98.543,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 99.064,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 101.262,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 100.292,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 101.729,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 100.312,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 101.634,\r\n                \"constructor\": \"Prost\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 100.896,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 101.104,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 101.928,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 100.16,\r\n                \"constructor\": \"BAR\"\r\n            }\r\n        ]\r\n    },\r\n    \"2001\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.214,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 88.838,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 89.606,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 92.001,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 90.199,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 90.266,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 91.999,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 90.229,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Luciano Burti\",\r\n                \"fastest\": 90.903,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 92.043,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 91.03,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 101.833,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 100.962,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 101.503,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 104.891,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 103.47,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 102.119,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 103.029,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 105.328,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Luciano Burti\",\r\n                \"fastest\": 103.697,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 105.585,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 103.853,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.545,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.498,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 75.693,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 77.83,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 76.732,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 77.522,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 78.875,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 77.816,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 77.132,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 79.734,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 77.609,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 86.117,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 85.569,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.524,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 89.096,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 87.582,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 87.243,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Enrique Bernoldi\",\r\n                \"fastest\": 88.956,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 87.35,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 87.854,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 91.671,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 88.369,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.151,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 81.368,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 82.362,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 85.298,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.475,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 83.087,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 83.965,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 82.738,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 82.568,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 84.423,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 83.668,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 71.009,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 70.843,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 71.14,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 73.498,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 71.718,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 74.082,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 72.423,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 71.284,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 72.088,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.432,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Luciano Burti\",\r\n                \"fastest\": 72.642,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.77,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 79.424,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 80.975,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 81.58,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 80.417,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 80.81,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 81.732,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.705,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 80.681,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 82.956,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 81.151,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 78.176,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 78.148,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 77.205,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 81.124,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 79.782,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 79.414,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 79.257,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 79.309,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 79.006,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 82.312,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 79.328,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 78.537,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 78.883,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 78.354,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 80.069,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 79.797,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 79.484,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 81.154,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.498,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 78.674,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.937,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Luciano Burti\",\r\n                \"fastest\": 79.105,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 76.181,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.088,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 76.355,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 77.968,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 78.181,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.369,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 78.662,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 77.311,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 77.304,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 79.199,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Luciano Burti\",\r\n                \"fastest\": 78.253,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 83.928,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 83.405,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 84.437,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 86.798,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 85.809,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 85.029,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 86.394,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 84.563,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 84.544,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.091,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 86.497,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 102.638,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 103.516,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 101.808,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 103.999,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 103.329,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 103.74,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 104.681,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 104.365,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 104.415,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 105.908,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 104.135,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 77.274,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 76.723,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 77.233,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.471,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 79.494,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 78.536,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 80.401,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.165,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 78.186,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 81.379,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 80.046,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 109.758,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 111.608,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 111.058,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 111.725,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 112.372,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 111.828,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 114.095,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 229.381,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Tarso Marques\",\r\n                \"fastest\": 116.484,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 114.051,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 85.221,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 87.323,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.073,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 87.283,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 86.386,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 86.365,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 87.945,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.656,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 86.381,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.709,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 87.394,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 74.629,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 74.481,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 74.448,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.252,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 75.919,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 75.199,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Enrique Bernoldi\",\r\n                \"fastest\": 76.068,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 75.169,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 75.139,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.694,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 75.296,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 96.97,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika H\\u00e4kkinen\",\r\n                \"fastest\": 97.298,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 96.45,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 98.361,\r\n                \"constructor\": \"Benetton\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 98.887,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jean Alesi\",\r\n                \"fastest\": 98.857,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Enrique Bernoldi\",\r\n                \"fastest\": 100.94,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 98.647,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 98.62,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.153,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 98.24,\r\n                \"constructor\": \"Prost\"\r\n            }\r\n        ]\r\n    },\r\n    \"2002\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.628,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 88.541,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 89.143,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 95.197,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 93.54,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 94.233,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 91.539,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 93.534,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 93.296,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 92.225,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 98.754,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.8,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 98.049,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 100.575,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 101.181,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 102.373,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 100.011,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 100.675,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 100.267,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 103.125,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 99.649,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.235,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.529,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 76.079,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 77.782,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 77.32,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 77.131,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.396,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 77.569,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 77.568,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 78.386,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 77.398,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 84.17,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 85.483,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 84.718,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 85.301,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 88.741,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 85.959,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 85.761,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 87.104,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 86.537,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 87.914,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 88.46,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 80.355,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 81.931,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 81.74,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 82.186,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 84.198,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 82.827,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.155,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 84.187,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 82.32,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 82.524,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 69.298,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 71.223,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 69.853,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 72.18,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 71.284,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 70.823,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 71.209,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 72.602,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 71.201,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 71.819,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Allan McNish\",\r\n                \"fastest\": 71.456,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 78.023,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 79.36,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 79.489,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 80.927,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.12,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 81.916,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 80.445,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 80.953,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 79.601,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 79.968,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 79.479,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.971,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.369,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 75.96,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 77.017,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.658,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 77.202,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.128,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 77.813,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 77.892,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.807,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 77.539,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.226,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.159,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 93.856,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.224,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 95.029,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 94.609,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.676,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 95.644,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 94.503,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 95.88,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 95.267,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.083,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 85.409,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 84.586,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 84.996,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 85.104,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 84.949,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 86.074,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 85.54,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Enrique Bernoldi\",\r\n                \"fastest\": 87.328,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 88.321,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 86.723,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.311,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 75.045,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 75.584,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.847,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 77.565,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 76.278,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.957,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 76.456,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.087,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 77.295,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.462,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 77.53,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 76.513,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.062,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 78.053,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 78.405,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 78.28,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 78.859,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Enrique Bernoldi\",\r\n                \"fastest\": 79.084,\r\n                \"constructor\": \"Arrows\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 79.485,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 78.497,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.207,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.926,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 77.783,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.185,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 78.247,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 78.126,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 78.438,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 78.889,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 79.347,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 79.408,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 107.176,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 109.398,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 109.293,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 110.595,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 110.886,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 109.787,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 110.235,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 110.221,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 111.878,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 110.832,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.657,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 84.962,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 85.094,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 85.867,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 85.215,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 85.335,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 85.368,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 85.579,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 87.104,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 85.971,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 72.738,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 73.481,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 72.798,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 74.557,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 74.025,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 73.848,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 74.026,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 74.19,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Alex Yoong\",\r\n                \"fastest\": 75.347,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 74.672,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 96.125,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 96.848,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 96.59,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 98.534,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 97.84,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 98.058,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 98.0,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Eddie Irvine\",\r\n                \"fastest\": 98.647,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 100.232,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Mika Salo\",\r\n                \"fastest\": 97.761,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ]\r\n    },\r\n    \"2003\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 87.759,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 87.942,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 87.724,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.17,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 89.096,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 89.274,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\",\r\n                \"fastest\": 89.217,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 88.6,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 91.785,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 89.694,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 96.412,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 97.787,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 96.764,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.078,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 98.528,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralph Firman\",\r\n                \"fastest\": 99.665,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 98.464,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 98.413,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 99.667,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 98.156,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.032,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 84.778,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 83.132,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.77,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 83.089,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 83.454,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.956,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 82.713,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 88.01,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 87.08,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 82.491,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 82.946,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.81,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.844,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 84.874,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 84.73,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.258,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 83.972,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Justin Wilson\",\r\n                \"fastest\": 86.354,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 84.705,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.143,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 80.798,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 82.577,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.476,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 81.791,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralph Firman\",\r\n                \"fastest\": 82.719,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 81.967,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 81.3,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 82.942,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 80.803,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 68.337,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 70.112,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 69.423,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 70.358,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 70.516,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralph Firman\",\r\n                \"fastest\": 70.659,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 68.966,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 69.764,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Justin Wilson\",\r\n                \"fastest\": 71.267,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 70.466,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 74.707,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 74.768,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 74.545,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.397,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.835,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.647,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 78.004,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 76.292,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 79.146,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 76.282,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 76.368,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 76.349,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.699,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.04,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 77.769,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 77.186,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\",\r\n                \"fastest\": 77.324,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.562,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Justin Wilson\",\r\n                \"fastest\": 78.039,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 77.787,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.904,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 92.826,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 92.621,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.307,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 93.994,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 94.656,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.191,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.208,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Justin Wilson\",\r\n                \"fastest\": 96.709,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 93.398,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.303,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 75.512,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 75.981,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.025,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 78.099,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.093,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.068,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.149,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 78.754,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 77.398,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.236,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 82.938,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 82.692,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.797,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 83.933,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 84.823,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\",\r\n                \"fastest\": 83.158,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 83.705,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Justin Wilson\",\r\n                \"fastest\": 85.859,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 83.463,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.081,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 74.917,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.003,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 75.74,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.036,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 78.145,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.754,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.43,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicolas Kiesa\",\r\n                \"fastest\": 80.171,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 75.883,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 83.207,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 82.095,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.372,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 82.565,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 84.267,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 85.081,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 83.156,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 83.376,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 86.559,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 83.04,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.832,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 82.126,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.032,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.195,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Heinz-Harald Frentzen\",\r\n                \"fastest\": 83.518,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 85.133,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 83.778,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 83.039,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 85.816,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 83.303,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 71.473,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 71.595,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 71.617,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 71.525,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 73.085,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 73.63,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 73.099,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 73.038,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicolas Kiesa\",\r\n                \"fastest\": 74.737,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 73.231,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 93.553,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 93.408,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 93.416,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 94.255,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.991,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 95.824,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.635,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.605,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Jos Verstappen\",\r\n                \"fastest\": 97.869,\r\n                \"constructor\": \"Minardi\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 95.023,\r\n                \"constructor\": \"Toyota\"\r\n            }\r\n        ]\r\n    },\r\n    \"2004\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.125,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 85.286,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 86.328,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.088,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 85.982,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 86.282,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 85.952,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 87.807,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 87.503,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 90.621,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 94.819,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 94.223,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 95.156,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 95.039,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.967,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 96.57,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 96.922,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 95.951,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 97.433,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 99.911,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 90.252,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 90.781,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 91.861,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 90.654,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 90.96,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 92.329,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 92.277,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 92.319,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 93.284,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 94.555,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 80.411,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 81.689,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.5,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 81.65,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 81.201,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.654,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 82.931,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 82.861,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 83.381,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 86.075,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 77.45,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 78.262,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 78.842,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 77.556,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.495,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 78.819,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 78.617,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 79.112,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.971,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 82.323,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 74.439,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 75.395,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.203,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 74.87,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.22,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 77.151,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.466,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 76.232,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.262,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 81.592,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 89.468,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 91.424,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 91.67,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 91.065,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 90.004,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 91.413,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 91.893,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 92.506,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 92.121,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 94.666,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 73.622,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 74.04,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 74.752,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.179,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 74.246,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 75.078,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 75.731,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 75.652,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 75.89,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 77.516,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 70.399,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 71.255,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 71.248,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 71.187,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 70.727,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 72.129,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 72.14,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 70.933,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 73.095,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 74.097,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.377,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Marc Gen\\u00e9\",\r\n                \"fastest\": 76.07,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 75.791,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.551,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.971,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.699,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.956,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 76.937,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Giorgio Pantano\",\r\n                \"fastest\": 77.641,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 78.932,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 78.739,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 79.968,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 79.554,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.442,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 79.488,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.813,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 80.768,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Cristiano da Matta\",\r\n                \"fastest\": 80.768,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 81.72,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 84.296,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 73.783,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 74.446,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 73.78,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.265,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 74.117,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 75.635,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 74.883,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 74.247,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Giorgio Pantano\",\r\n                \"fastest\": 76.058,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 78.372,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 79.071,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\",\r\n                \"fastest\": 80.501,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 81.134,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.275,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 80.425,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.022,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 80.825,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 81.31,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 81.518,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 84.601,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 105.503,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 106.547,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 105.108,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 105.87,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 107.151,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 106.758,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 107.509,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 107.576,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 110.471,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 111.031,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 81.046,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\",\r\n                \"fastest\": 82.246,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 82.889,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.855,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 82.66,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.615,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 83.09,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 83.41,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Giorgio Pantano\",\r\n                \"fastest\": 84.061,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 86.356,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.238,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 93.108,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 92.876,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.625,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 92.935,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 93.483,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.893,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Ricardo Zonta\",\r\n                \"fastest\": 94.269,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.717,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 97.377,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 92.73,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 93.467,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 93.917,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 94.279,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 93.742,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 93.614,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.229,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Olivier Panis\",\r\n                \"fastest\": 94.438,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 95.524,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Gianmaria Bruni\",\r\n                \"fastest\": 99.352,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 71.672,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 71.473,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 71.562,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 72.118,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 71.941,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 71.877,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 72.891,\r\n                \"constructor\": \"Jaguar\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 72.435,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 73.905,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Zsolt Baumgartner\",\r\n                \"fastest\": 74.743,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ]\r\n    },\r\n    \"2005\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 86.233,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 86.26,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.683,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 86.493,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.255,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.893,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 86.627,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 86.536,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 87.97,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Patrick Friesacher\",\r\n                \"fastest\": 92.852,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 96.878,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 97.912,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 95.899,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 95.712,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 95.483,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 97.212,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 96.79,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 95.816,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 99.833,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 102.465,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.886,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 92.411,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 91.713,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 93.055,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 91.447,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 93.326,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 93.417,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 92.324,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 95.744,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Patrick Friesacher\",\r\n                \"fastest\": 96.432,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.858,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 82.604,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.133,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 83.917,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 83.023,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 83.602,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 83.488,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 84.022,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 84.094,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 87.42,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.648,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 75.641,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.519,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 75.771,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.802,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.947,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 76.469,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 78.998,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 80.124,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.842,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.6,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 76.971,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 75.921,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 77.482,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 77.693,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 76.812,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 80.747,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Patrick Friesacher\",\r\n                \"fastest\": 79.037,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 91.028,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 91.889,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 90.711,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 91.124,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 90.94,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 92.329,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 91.306,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 91.724,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 93.292,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 95.047,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 74.868,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.189,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.727,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.401,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 74.384,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 75.945,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 76.299,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 75.827,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 77.015,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 78.462,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 71.497,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 73.237,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 73.907,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 77.714,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.408,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.502,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 78.102,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.423,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 77.805,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 77.611,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.792,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 80.004,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 81.077,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.675,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 81.993,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.159,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 83.291,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.502,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 82.466,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 83.089,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 81.96,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 84.247,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 86.182,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.099,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.843,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.235,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.607,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 74.873,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.288,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.233,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 76.073,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 78.106,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 78.425,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.476,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 82.399,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.506,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 82.053,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.219,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 83.048,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 81.842,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 84.446,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Doornbos\",\r\n                \"fastest\": 85.646,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 86.635,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 85.79,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.524,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 86.791,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 84.77,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.514,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 86.374,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 86.178,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 89.035,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Doornbos\",\r\n                \"fastest\": 89.229,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.466,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 83.161,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 82.146,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Ant\\u00f4nio Pizzonia\",\r\n                \"fastest\": 82.87,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.504,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 83.365,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 83.633,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.831,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 84.81,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 84.966,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 112.59,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 113.323,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 116.131,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 112.287,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 113.81,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 114.251,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 112.582,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 111.453,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 115.885,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Doornbos\",\r\n                \"fastest\": 121.148,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 72.8,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 73.746,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 72.653,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 73.59,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 72.268,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 74.054,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 73.8,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 73.57,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Narain Karthikeyan\",\r\n                \"fastest\": 74.906,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 75.527,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.763,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 92.754,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 91.599,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 93.022,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 91.54,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 93.232,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 93.023,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 92.795,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 95.458,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 96.039,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 95.011,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.766,\r\n                \"constructor\": \"BAR\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.536,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.271,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.242,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 94.094,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 93.727,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 94.035,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 96.563,\r\n                \"constructor\": \"Jordan\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Doornbos\",\r\n                \"fastest\": 96.894,\r\n                \"constructor\": \"Minardi\"\r\n            }\r\n        ]\r\n    },\r\n    \"2006\": {\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 92.534,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 92.771,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.523,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 94.112,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 92.408,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 92.729,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 93.212,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 93.694,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 95.94,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 93.108,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 97.104,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 94.803,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Juan Pablo Montoya\",\r\n                \"fastest\": 95.566,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 95.647,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 95.686,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 96.771,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 95.604,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 98.078,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 95.751,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 98.198,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 97.313,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 100.199,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 86.189,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.045,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 87.18,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 87.81,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 87.8,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 87.69,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 88.25,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 87.7,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 89.238,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 87.988,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 90.574,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"San Marino Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 84.569,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 85.027,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 84.624,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.316,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 85.488,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 85.347,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 86.759,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 85.438,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 87.16,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 85.679,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 89.1,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 92.532,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 92.472,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.099,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 93.607,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 93.579,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 93.952,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 94.553,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.035,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 95.428,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 94.091,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 96.706,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.723,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 77.357,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.648,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 78.465,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.861,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.367,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 77.862,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 77.869,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 79.265,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 78.488,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 80.411,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.671,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 75.325,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.143,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.18,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.68,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.3,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 77.849,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 77.319,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 77.329,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 77.481,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 78.793,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 81.599,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.461,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 81.934,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.744,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 82.916,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.224,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 83.712,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 82.706,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 83.977,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 84.221,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 86.52,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.911,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 75.841,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.993,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.503,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.705,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 78.001,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 77.576,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 77.394,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 79.291,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 77.72,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 80.49,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 73.131,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 72.719,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 73.225,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 74.707,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 73.611,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 74.73,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 73.934,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 74.731,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 74.286,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 103.802,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 77.77,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 77.625,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 77.111,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 77.809,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 78.796,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 78.51,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 78.968,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 77.906,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 79.356,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 78.241,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Franck Montagny\",\r\n                \"fastest\": 80.113,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.981,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.475,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 76.357,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 76.763,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 76.812,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.818,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 77.719,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jacques Villeneuve\",\r\n                \"fastest\": 78.904,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 78.247,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 77.407,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 79.413,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 89.408,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 84.315,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 83.516,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 85.247,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 98.964,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 84.678,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 87.572,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 85.801,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 86.117,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 86.249,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 90.957,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.245,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 88.959,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 88.005,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 89.084,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 90.071,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 88.474,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 90.025,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 89.723,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 90.403,\r\n                \"constructor\": \"MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 89.933,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 91.814,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.121,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.559,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 82.575,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 83.869,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.197,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 83.518,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 84.571,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 83.111,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 84.822,\r\n                \"constructor\": \"Spyker MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 84.764,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 85.676,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.586,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 99.149,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 98.553,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 99.823,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 99.907,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 99.206,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Doornbos\",\r\n                \"fastest\": 99.801,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 99.164,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 101.483,\r\n                \"constructor\": \"Spyker MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 99.681,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 100.856,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 92.676,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.344,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 92.792,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 93.607,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 94.802,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.451,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 95.052,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 93.509,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 95.26,\r\n                \"constructor\": \"Spyker MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 94.131,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 95.082,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 72.961,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 73.281,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 72.162,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 74.882,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 103.205,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 73.053,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Doornbos\",\r\n                \"fastest\": 73.7,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 74.117,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Tiago Monteiro\",\r\n                \"fastest\": 74.41,\r\n                \"constructor\": \"Spyker MF1\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 73.687,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 73.379,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ]\r\n    },\r\n    \"2007\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 86.314,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 86.892,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 85.235,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 88.098,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 86.642,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 87.796,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 87.501,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 86.721,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 88.282,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 88.687,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 88.487,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 96.701,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 97.81,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 97.199,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 98.566,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 97.417,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 98.016,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 98.098,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 97.704,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 98.447,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 101.495,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 98.496,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 94.27,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 95.2,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 94.067,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 95.842,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.47,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 95.153,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 95.384,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 95.556,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 95.723,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 96.772,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 96.111,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 82.876,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 82.98,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 82.68,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 84.186,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 83.129,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 84.003,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 83.524,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 83.693,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 85.207,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 85.191,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 84.11,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.284,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.254,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.183,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.802,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 76.006,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 77.231,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.786,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 76.658,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 76.867,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 77.678,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 77.183,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.367,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 77.411,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.849,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 78.543,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.696,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 77.91,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.618,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.156,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 79.375,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 79.254,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 78.035,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 73.222,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 73.998,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 73.117,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 74.703,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 73.414,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 74.016,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 74.004,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 74.066,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 75.092,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 74.858,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 74.066,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 76.495,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 76.703,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 76.099,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.77,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.875,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 76.966,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.249,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.011,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 77.934,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 78.091,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 77.796,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 81.117,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.136,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.638,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 83.387,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 81.991,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 82.51,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 83.118,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 82.693,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 83.57,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Christijan Albers\",\r\n                \"fastest\": 84.39,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 83.413,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.231,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 94.603,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 92.853,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 95.632,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 94.354,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 94.496,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 94.316,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Wurz\",\r\n                \"fastest\": 94.235,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Scott Speed\",\r\n                \"fastest\": 129.078,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Markus Winkelhock\",\r\n                \"fastest\": 102.783,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 95.282,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 80.171,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 80.935,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.047,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.004,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 80.419,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 80.961,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 80.915,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 80.672,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 81.915,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 82.263,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 80.98,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 87.963,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 88.603,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 87.295,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 88.873,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 88.319,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Ralf Schumacher\",\r\n                \"fastest\": 88.924,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 89.068,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 88.536,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 89.563,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 90.617,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 89.658,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 82.871,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 84.226,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 83.37,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 84.532,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 83.681,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 84.622,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.824,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 84.472,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 85.313,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 85.377,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 84.669,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 108.182,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 109.6,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 108.036,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 110.678,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 108.663,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 108.99,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 110.049,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 109.769,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 110.73,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 110.902,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 110.886,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.193,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 89.655,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 89.588,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 91.06,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 89.021,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 92.414,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 88.94,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 89.926,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 89.057,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 91.891,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 91.507,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.991,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 98.9,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 97.454,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 98.913,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 99.325,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 99.911,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 99.371,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 99.233,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 99.654,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 100.764,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 100.126,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 72.506,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 74.891,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 72.445,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 74.039,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 72.686,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 73.361,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 74.195,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 73.116,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 73.643,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 75.202,\r\n                \"constructor\": \"Spyker\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 74.329,\r\n                \"constructor\": \"Super Aguri\"\r\n            }\r\n        ]\r\n    },\r\n    \"2008\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 87.903,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 87.739,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.603,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 88.09,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 89.502,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 89.31,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 89.534,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 88.736,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 90.892,\r\n                \"constructor\": \"Super Aguri\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 92.021,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 87.418,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 95.405,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 95.366,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 96.288,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 96.782,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 96.206,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 96.068,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 96.87,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 95.715,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 98.171,\r\n                \"constructor\": \"Super Aguri\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 96.962,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 95.462,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 93.6,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 93.565,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 95.129,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 94.072,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.305,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 94.204,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 95.333,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 94.855,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Anthony Davidson\",\r\n                \"fastest\": 95.324,\r\n                \"constructor\": \"Super Aguri\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 95.057,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 93.193,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.67,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 82.106,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 82.683,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 83.319,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 82.564,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 82.758,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 87.449,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 82.353,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Takuma Sato\",\r\n                \"fastest\": 84.617,\r\n                \"constructor\": \"Super Aguri\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 83.439,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 82.017,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.506,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 86.78,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.28,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 87.795,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 87.63,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 87.926,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.18,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 87.998,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 88.78,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.529,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.689,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 77.933,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 77.869,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 79.91,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 79.036,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 79.618,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 78.787,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 79.574,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 82.039,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 77.282,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 77.387,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 77.43,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 78.225,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.977,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 78.085,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 78.87,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 78.532,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 78.301,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 79.066,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 77.506,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.63,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 77.172,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 77.641,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 78.054,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 77.507,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 77.567,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 77.76,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 77.969,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 78.462,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 77.134,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 92.15,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 92.719,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.133,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 94.277,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 92.952,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 93.808,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 93.367,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.376,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 94.93,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 92.817,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 76.342,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 75.987,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 76.91,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.38,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 76.994,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 76.712,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 76.772,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 77.636,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 77.889,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 76.039,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.195,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 81.941,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 81.537,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 82.397,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 82.125,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 81.638,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 83.22,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 82.397,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 82.641,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 81.493,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 98.708,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 99.33,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 99.544,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 99.577,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 100.264,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 99.535,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.485,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 100.593,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 100.353,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 98.884,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 107.93,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 108.965,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 109.238,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 110.656,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 109.515,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 110.255,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 109.002,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 110.671,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 110.487,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 108.135,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 88.047,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 89.807,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 89.961,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 90.019,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 89.681,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 89.948,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 89.258,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 89.827,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 93.458,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 89.721,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 105.599,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 106.899,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 105.768,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 106.454,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"David Coulthard\",\r\n                \"fastest\": 107.562,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 106.972,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 107.271,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 108.128,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 109.101,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 106.072,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 78.426,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 79.292,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 79.101,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 79.531,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 79.82,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 79.524,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 79.262,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 80.575,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 81.189,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 79.258,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 96.483,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 96.498,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 96.659,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 97.246,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 97.68,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 96.727,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 97.212,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 97.773,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 98.372,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 96.325,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 73.736,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 74.375,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.229,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 74.934,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.033,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 74.057,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 74.214,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 74.759,\r\n                \"constructor\": \"Honda\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 75.212,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 74.159,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ]\r\n    },\r\n    \"2009\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 89.02,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 88.488,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 87.988,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 88.712,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 88.416,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 89.23,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.14,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 87.706,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 88.943,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 88.02,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 99.141,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 98.453,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 99.084,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.006,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 97.591,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 98.938,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 97.672,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 97.598,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 99.407,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 96.641,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 114.516,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 115.396,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 114.158,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 114.481,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 112.703,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 113.474,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 112.627,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 114.243,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 114.777,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 112.592,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 94.915,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 95.065,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 95.706,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 95.441,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 94.556,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 95.41,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 94.756,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 95.816,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 96.219,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.588,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 83.839,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 83.089,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 83.878,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.42,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 84.134,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 83.09,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 83.621,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 83.796,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.762,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 75.672,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 75.154,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 76.268,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.371,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 76.011,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 76.178,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 75.321,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 75.772,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 76.245,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 75.19,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.562,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 88.061,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 88.008,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 88.34,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 87.868,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 88.624,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 87.622,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 87.988,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 89.192,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 87.579,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 82.418,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 81.509,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 81.956,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 81.852,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 81.671,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Bourdais\",\r\n                \"fastest\": 82.466,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 80.735,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 81.054,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 81.81,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 81.189,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 95.367,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 94.458,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 94.537,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.365,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 93.654,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 96.279,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 94.003,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 94.238,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 95.301,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 94.252,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 82.479,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 82.434,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 83.224,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Nelson Piquet Jr.\",\r\n                \"fastest\": 83.418,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 82.506,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 82.955,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 81.931,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 82.468,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 83.174,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 82.706,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 99.056,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.207,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 99.374,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 99.428,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 98.683,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 100.935,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 99.528,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 99.329,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 99.622,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 98.874,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 108.348,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 107.674,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 107.371,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 108.634,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 107.736,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 107.763,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 107.263,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 107.766,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Giancarlo Fisichella\",\r\n                \"fastest\": 107.737,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 108.257,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 84.802,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 84.761,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 85.488,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.199,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 85.7,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 87.846,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 85.194,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 85.901,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 84.739,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 84.935,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 108.345,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 108.391,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 108.847,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 108.24,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 108.396,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 110.636,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 108.398,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 108.352,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 109.852,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 108.369,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 93.259,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 92.999,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 93.334,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.946,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 93.152,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 94.049,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 92.569,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 93.595,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 93.668,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.251,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 74.303,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 74.558,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 74.155,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 74.789,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 74.676,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 74.563,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 73.733,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 74.37,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 74.99,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 73.95,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 100.367,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 100.843,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 100.672,\r\n                \"constructor\": \"BMW Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 100.757,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 100.723,\r\n                \"constructor\": \"Toyota\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 100.326,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.279,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kazuki Nakajima\",\r\n                \"fastest\": 100.754,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 100.904,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 100.449,\r\n                \"constructor\": \"Brawn\"\r\n            }\r\n        ]\r\n    },\r\n    \"2010\": {\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 119.56,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 120.204,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 119.487,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 118.287,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 119.833,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 120.474,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 119.393,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 119.964,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 122.701,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 129.127,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 121.65,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 127.062,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.506,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 88.489,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 88.358,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 89.537,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 89.21,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 89.57,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 89.685,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 89.713,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 93.638,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Karun Chandhok\",\r\n                \"fastest\": 95.045,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 90.587,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 94.23,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 97.745,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 98.129,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 97.054,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.231,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 99.124,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 98.074,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 98.16,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 97.61,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 103.753,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Karun Chandhok\",\r\n                \"fastest\": 104.79,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 103.34,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lucas di Grassi\",\r\n                \"fastest\": 103.224,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 102.061,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 103.245,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 102.358,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 104.134,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 104.549,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 103.63,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 104.364,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 103.755,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 107.141,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 108.216,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 107.739,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lucas di Grassi\",\r\n                \"fastest\": 1026.445,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 84.357,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 85.455,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.828,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 84.846,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 85.728,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 85.466,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 85.845,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 85.655,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 89.564,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Karun Chandhok\",\r\n                \"fastest\": 92.041,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 86.083,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 89.776,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 76.219,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 75.58,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 75.192,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 75.503,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 79.074,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 75.353,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 75.963,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 76.381,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 78.401,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Karun Chandhok\",\r\n                \"fastest\": 79.553,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 78.775,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 80.775,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 89.895,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 89.81,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 89.195,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 89.996,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 90.62,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 89.165,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 89.959,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 89.535,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 94.363,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 94.247,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 90.421,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 92.265,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 77.806,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 77.832,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 78.148,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 78.207,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 78.912,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 76.972,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 79.349,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 79.784,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 80.654,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Karun Chandhok\",\r\n                \"fastest\": 81.884,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 80.574,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 81.669,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"European Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 98.766,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 98.968,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.141,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.889,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 99.489,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 99.542,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 99.803,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 100.084,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 101.77,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 102.927,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 99.517,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 102.319,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 92.758,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 92.952,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 91.967,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 90.874,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 93.615,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 92.484,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 94.018,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 92.98,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 96.251,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 98.309,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 93.558,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 96.415,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 76.451,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 76.609,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 75.824,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.88,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 76.836,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 77.166,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 76.596,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 76.971,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 80.664,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 80.861,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 76.527,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 78.211,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 84.205,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 85.372,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 82.362,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.195,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 82.811,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitaly Petrov\",\r\n                \"fastest\": 83.799,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 85.358,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 85.449,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 87.429,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 88.093,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 84.282,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lucas di Grassi\",\r\n                \"fastest\": 87.287,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 109.069,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 111.688,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 109.395,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 110.111,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 111.864,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 109.807,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 110.477,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 111.576,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Jarno Trulli\",\r\n                \"fastest\": 115.103,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 115.484,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 111.749,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 115.268,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 84.598,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 84.491,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 84.278,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 84.139,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 84.576,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 84.56,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 84.937,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 85.224,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 87.822,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 88.875,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Pedro de la Rosa\",\r\n                \"fastest\": 86.325,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 87.765,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 109.711,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 109.68,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 108.141,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 107.976,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 110.334,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 109.255,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 112.473,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 109.71,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 113.051,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 117.766,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 112.475,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lucas di Grassi\",\r\n                \"fastest\": 112.513,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Jenson Button\",\r\n                \"fastest\": 93.529,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 94.853,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 93.474,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.823,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 95.597,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 127.363,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 96.319,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 94.365,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 97.62,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 99.806,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 94.486,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 99.813,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Korean Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 110.43,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Michael Schumacher\",\r\n                \"fastest\": 111.835,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 110.375,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 110.257,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Rubens Barrichello\",\r\n                \"fastest\": 111.564,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 111.604,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Vitantonio Liuzzi\",\r\n                \"fastest\": 111.371,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 111.962,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 115.018,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Sakon Yamamoto\",\r\n                \"fastest\": 118.313,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 113.086,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Timo Glock\",\r\n                \"fastest\": 118.102,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 73.851,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 74.184,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Mark Webber\",\r\n                \"fastest\": 74.047,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 73.855,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 74.985,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 75.161,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 74.997,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jaime Alguersuari\",\r\n                \"fastest\": 75.695,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 77.161,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Christian Klien\",\r\n                \"fastest\": 77.69,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Kamui Kobayashi\",\r\n                \"fastest\": 74.748,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lucas di Grassi\",\r\n                \"fastest\": 76.767,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 101.274,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico Rosberg\",\r\n                \"fastest\": 101.711,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 101.739,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 102.227,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 102.397,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 101.753,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Adrian Sutil\",\r\n                \"fastest\": 102.695,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"S\\u00e9bastien Buemi\",\r\n                \"fastest\": 102.573,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Heikki Kovalainen\",\r\n                \"fastest\": 105.378,\r\n                \"constructor\": \"Lotus\"\r\n            },\r\n            {\r\n                \"driver\": \"Bruno Senna\",\r\n                \"fastest\": 106.255,\r\n                \"constructor\": \"HRT\"\r\n            },\r\n            {\r\n                \"driver\": \"Nick Heidfeld\",\r\n                \"fastest\": 102.673,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lucas di Grassi\",\r\n                \"fastest\": 106.126,\r\n                \"constructor\": \"Virgin\"\r\n            }\r\n        ]\r\n    },\r\n    \"2017\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 86.593,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.538,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 86.964,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 88.045,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 87.568,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 86.711,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 88.336,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 89.44,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 88.486,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 89.052,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 95.378,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 95.423,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 96.722,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 97.398,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.496,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 96.511,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 96.531,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.015,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 97.528,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 99.732,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 92.798,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.72,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 93.495,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 94.256,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 95.372,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 94.948,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 94.609,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 94.985,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 95.595,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 95.086,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 97.367,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 96.844,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 98.429,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 98.232,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 98.661,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.418,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 99.566,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 98.3,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 99.835,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 99.79,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 83.674,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 83.593,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 83.686,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 85.755,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 84.843,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 86.371,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 85.976,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 83.894,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 86.213,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 86.472,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 75.238,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 75.825,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 75.756,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 76.539,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 74.82,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 76.313,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 76.614,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 76.665,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 76.075,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 76.829,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 74.551,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 76.165,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 74.719,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 76.247,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 76.136,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 76.713,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.853,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 76.341,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 75.979,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 76.995,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 103.469,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 103.441,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.588,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 104.882,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 105.108,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 108.536,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 106.312,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 105.866,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 107.12,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 105.168,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 67.411,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 67.486,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 67.442,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 68.59,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 68.47,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 68.061,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 68.419,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 68.652,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 68.422,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 69.241,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 90.621,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 91.517,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 90.678,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 92.577,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 93.504,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 93.464,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 93.4,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 92.29,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 93.119,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 93.594,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.461,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 80.818,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 80.49,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 81.631,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.182,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 82.105,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 81.589,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 82.1,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 82.83,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 81.752,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 109.637,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 108.3,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 106.603,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 108.922,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 109.907,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 110.775,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 106.577,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 107.549,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 109.708,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 109.087,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 83.361,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 83.897,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.871,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 85.752,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 83.488,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 86.547,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 84.968,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 85.477,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 85.894,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 85.02,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 105.301,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 106.722,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 106.722,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 105.008,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 109.061,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 106.731,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Felipe Massa\",\r\n                \"fastest\": 107.055,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 106.537,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 107.585,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Malaysian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 94.467,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 94.08,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 95.931,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 94.266,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 94.452,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 96.395,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 95.591,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 96.627,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 97.17,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 95.796,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 93.694,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.175,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 93.724,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Jolyon Palmer\",\r\n                \"fastest\": 94.095,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 93.144,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 96.43,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 94.744,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 94.548,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 94.533,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 95.338,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 101.041,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 98.06,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 97.893,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 99.979,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 99.666,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 100.499,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 97.767,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 100.462,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 100.349,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 97.766,\r\n                \"constructor\": \"Ferrari\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 78.892,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 78.785,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 80.972,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 81.36,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 79.374,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pascal Wehrlein\",\r\n                \"fastest\": 81.638,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 79.929,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 81.062,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 80.859,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 80.345,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 71.044,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 72.492,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 73.451,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 73.625,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 71.845,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 73.666,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 73.052,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 71.862,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 73.323,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 73.532,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 102.028,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.77,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 101.669,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 102.376,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 100.65,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 103.567,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 102.609,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 102.324,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 103.844,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 102.437,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ]\r\n    },\r\n    \"2018\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 88.176,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 88.511,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 88.759,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.444,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 87.6,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 86.958,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 87.081,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 85.945,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 88.805,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.373,\r\n                \"constructor\": \"Ferrari\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 95.043,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 94.563,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 94.168,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 95.058,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 94.053,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 94.667,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 94.689,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 98.684,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 93.74,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 94.337,\r\n                \"constructor\": \"Ferrari\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 96.456,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 96.878,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 95.785,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 96.881,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 97.41,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.234,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 98.5,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 97.673,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 98.367,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 98.386,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 105.53,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 105.149,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 105.419,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 106.856,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 106.815,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 106.206,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 108.035,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 107.403,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 107.449,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 106.88,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 79.133,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 79.128,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 78.441,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 80.246,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 81.324,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 82.122,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 81.128,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.727,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 82.095,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 81.439,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 74.26,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 76.065,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 76.27,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 77.027,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 76.864,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 76.061,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 77.099,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 74.944,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 76.936,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 74.822,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 73.964,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 73.992,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 73.864,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 75.1,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 75.588,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 75.48,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 75.401,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 75.924,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 75.765,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 75.699,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 94.225,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 94.275,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 95.638,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 95.425,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 95.977,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 94.398,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 98.319,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 95.133,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 96.839,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 98.3,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 67.241,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 67.442,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 66.957,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 68.476,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 68.766,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 68.504,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 68.971,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 68.216,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 69.171,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 68.661,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 90.696,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 91.245,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 91.589,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 93.405,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 93.675,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 93.472,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 93.604,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.482,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 93.465,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 93.869,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 75.99,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 75.545,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 75.852,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 76.716,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 77.43,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 77.867,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 77.745,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 77.537,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 78.861,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 77.681,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 81.107,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 80.056,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 80.012,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 81.685,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 81.302,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 81.261,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 82.09,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 82.876,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 82.66,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 83.671,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 106.644,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 106.286,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 108.078,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 106.946,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 107.937,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 108.588,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 108.694,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 109.113,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 108.67,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 108.956,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 82.505,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 82.497,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 83.609,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 84.243,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 84.056,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 83.529,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 83.768,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 84.772,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 84.767,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 83.768,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 102.913,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 104.669,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 103.12,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.389,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 101.905,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 103.164,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 105.211,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 104.889,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 105.169,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 105.902,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 95.861,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 95.99,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 98.015,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 97.931,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 98.3,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 99.108,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 96.283,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 99.435,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 99.59,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 104.071,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 92.785,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 93.187,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 92.318,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 94.786,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 94.133,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 94.073,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 94.197,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 94.515,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.943,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 93.354,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 98.28,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 97.392,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 98.246,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 99.548,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 99.569,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 98.963,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 100.433,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 99.646,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 99.24,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Marcus Ericsson\",\r\n                \"fastest\": 100.098,\r\n                \"constructor\": \"Sauber\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 79.186,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 78.741,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 79.522,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 80.637,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 80.537,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 82.629,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Stoffel Vandoorne\",\r\n                \"fastest\": 81.921,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 82.64,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 81.37,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 82.438,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 70.54,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 70.831,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 71.343,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 72.082,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 72.206,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Brendon Hartley\",\r\n                \"fastest\": 72.949,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 72.352,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 72.169,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 72.643,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 71.751,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 100.953,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.867,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 102.876,\r\n                \"constructor\": \"Sauber\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.249,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 102.822,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 102.816,\r\n                \"constructor\": \"Force India\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 101.351,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 103.988,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 102.393,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergey Sirotkin\",\r\n                \"fastest\": 103.831,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ]\r\n    },\r\n    \"2019\": {\r\n        \"Australian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 85.58,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 86.926,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 86.256,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 88.182,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 88.444,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 88.27,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 88.555,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 87.448,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 87.568,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 88.713,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 93.411,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 93.528,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 95.291,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 95.586,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 95.892,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 95.237,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 95.215,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 96.33,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 94.934,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 97.313,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Chinese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 94.872,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 94.836,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 94.742,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 98.632,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 96.678,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 96.873,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 97.812,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 97.283,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 97.975,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 97.502,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 104.024,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 103.009,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 105.524,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 104.794,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 105.394,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 105.754,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 106.767,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 106.682,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 105.969,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 107.251,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.492,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 79.769,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 79.82,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 80.77,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 80.726,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 80.859,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 80.615,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 81.859,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.382,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 82.382,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 75.163,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 74.279,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 76.277,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 75.697,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 76.746,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 75.891,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 75.607,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 76.379,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 76.299,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 77.038,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Canadian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 74.356,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 73.078,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 75.995,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 74.767,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 76.471,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 76.198,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 76.043,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 75.442,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 77.241,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 76.245,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 92.764,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 92.74,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 94.162,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 94.561,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 94.95,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 94.754,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 94.924,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 95.691,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 95.029,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 95.83,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 67.676,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 68.05,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 69.051,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 68.117,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 67.475,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 68.903,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 69.061,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 68.019,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 69.926,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 68.946,\r\n                \"constructor\": \"Toro Rosso\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 87.369,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.733,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 89.272,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 89.636,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 89.624,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 89.91,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 90.034,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 89.39,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 91.013,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 93.425,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"German Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 77.485,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 77.507,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 76.645,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 89.576,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 76.794,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 78.811,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 77.841,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 77.831,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 77.708,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 79.3,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 77.103,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.528,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 79.786,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 81.002,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.88,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 81.008,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 80.839,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 80.603,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 80.621,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 82.386,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 106.409,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 106.465,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 108.321,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 108.677,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 108.357,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 108.143,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 107.56,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 107.507,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 108.349,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 108.86,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 82.799,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 81.779,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 83.466,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 83.77,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 84.044,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 83.143,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 84.419,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 84.443,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 83.885,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 84.842,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Singapore Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 104.723,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 103.534,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 105.176,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 105.716,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 105.63,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 102.301,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 104.371,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 104.896,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 105.765,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 106.793,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 96.193,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 95.761,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 98.02,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 98.043,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 96.762,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.519,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 98.13,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 98.589,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 98.228,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 101.705,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Japanese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 90.983,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 91.611,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 93.563,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 92.775,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 93.239,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 92.621,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 93.481,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 92.369,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 91.732,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 95.458,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Mexican Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 79.232,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 79.325,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 80.311,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 79.461,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 79.53,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 80.485,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 80.146,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.082,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 81.581,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Robert Kubica\",\r\n                \"fastest\": 80.696,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 96.957,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 98.029,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 96.169,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 98.074,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 98.437,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 98.969,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 100.347,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.608,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 100.165,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 101.239,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Brazilian Grand Prix\": [\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 73.752,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 72.328,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 72.385,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 72.733,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 72.603,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 71.384,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 73.02,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 73.262,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 70.862,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 70.698,\r\n                \"constructor\": \"Mercedes\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 99.283,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.128,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 101.119,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 101.294,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 101.19,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 103.666,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 102.639,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 103.142,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 102.222,\r\n                \"constructor\": \"Toro Rosso\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 103.074,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ]\r\n    },\r\n    \"2020\": {\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 67.657,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 68.432,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 67.475,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 68.305,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 67.901,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 68.912,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 69.025,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 70.228,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 68.796,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 69.317,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Styrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 66.719,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 66.145,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 65.619,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 67.832,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 67.827,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 92.548,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 67.188,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 68.601,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 68.009,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 68.382,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 76.627,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 78.973,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 79.184,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 80.363,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 79.457,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 79.532,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 79.984,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 80.946,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 80.096,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 80.477,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 89.238,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 87.097,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 89.813,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 89.948,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 89.482,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 90.475,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 89.603,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 89.973,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 89.782,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 90.501,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"70th Anniversary Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.451,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 89.465,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Nico H\\u00fclkenberg\",\r\n                \"fastest\": 90.087,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 90.575,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 90.092,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 90.556,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 90.552,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 90.793,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 91.756,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 89.95,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 78.183,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 81.477,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 82.024,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 81.771,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 82.336,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 82.707,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 82.174,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 80.409,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 81.801,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 82.03,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 107.758,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 108.305,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 107.483,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 108.389,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 107.84,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 107.839,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 108.552,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 109.822,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 108.083,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 108.048,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 82.746,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 83.882,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 83.897,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 83.898,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 84.888,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 84.037,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 84.835,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 86.026,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 84.785,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 84.421,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Tuscan Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.833,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 81.202,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 80.039,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 80.632,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 80.426,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 81.198,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 81.458,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 81.645,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 128.433,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 130.612,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 97.03,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 97.332,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 97.886,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 98.141,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 97.231,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 99.053,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 99.614,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 98.858,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 97.352,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 97.377,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Eifel Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 88.145,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 88.139,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 90.408,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 89.584,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 90.129,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 89.7,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 90.512,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 90.11,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 90.456,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 91.377,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.75,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 79.36,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 79.854,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 80.408,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.058,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 80.859,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 80.449,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 80.802,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 80.882,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 81.46,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Emilia Romagna Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 75.484,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 76.177,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 77.552,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 77.666,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 77.767,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 78.069,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 78.084,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 78.719,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 78.088,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Romain Grosjean\",\r\n                \"fastest\": 78.822,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 99.921,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.662,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 98.431,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 98.193,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 100.677,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 99.743,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 96.806,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 100.948,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 99.586,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 100.814,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 92.864,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 92.014,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 93.629,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 92.827,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 94.141,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 93.411,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 93.625,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 93.573,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 95.241,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 94.591,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Sakhir Grand Prix\": [\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 55.404,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 57.165,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 56.979,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniil Kvyat\",\r\n                \"fastest\": 57.001,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 56.789,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 56.905,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kevin Magnussen\",\r\n                \"fastest\": 57.516,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Alexander Albon\",\r\n                \"fastest\": 57.056,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 56.887,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Jack Aitken\",\r\n                \"fastest\": 57.392,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 100.958,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 101.131,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 101.947,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 102.474,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 101.866,\r\n                \"constructor\": \"Racing Point\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 100.926,\r\n                \"constructor\": \"Renault\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 101.475,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 101.675,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 102.497,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Pietro Fittipaldi\",\r\n                \"fastest\": 101.707,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ]\r\n    },\r\n    \"2021\": {\r\n        \"Bahrain Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 93.228,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 92.09,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 94.509,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 94.09,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 94.396,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 95.25,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 94.865,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 95.122,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 95.036,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 96.134,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Emilia Romagna Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 77.524,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 76.702,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 78.379,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 78.259,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Yuki Tsunoda\",\r\n                \"fastest\": 78.353,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 78.994,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 86.543,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 79.422,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 79.396,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 79.193,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Portuguese Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 79.865,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 79.849,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 81.496,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 81.696,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 81.032,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 82.014,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 81.97,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 82.654,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 82.167,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 82.755,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Spanish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 78.149,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 79.43,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 80.459,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 81.279,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 81.182,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 82.607,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 81.375,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 82.802,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 82.637,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 82.905,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Monaco Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 74.552,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 72.909,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 74.621,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 74.578,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Yuki Tsunoda\",\r\n                \"fastest\": 74.037,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 74.674,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 74.971,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 75.026,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 75.539,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 76.425,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Azerbaijan Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 105.382,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 104.769,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 104.481,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Yuki Tsunoda\",\r\n                \"fastest\": 104.939,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 105.624,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 104.89,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 105.326,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 105.575,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 105.959,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 107.624,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"French Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 96.96,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 96.404,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 97.681,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 98.103,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 97.646,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 97.425,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 97.138,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 97.992,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 98.313,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 98.847,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Styrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 67.894,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 67.058,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 68.903,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 69.787,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 69.576,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 70.104,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Yuki Tsunoda\",\r\n                \"fastest\": 69.65,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 68.609,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 69.128,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 70.005,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Austrian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 66.2,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 68.471,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 68.126,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 68.146,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 68.42,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 67.762,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 68.52,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 68.874,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 68.405,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 69.394,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"British Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 90.569,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 89.699,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 91.284,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 91.992,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 91.698,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 91.895,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 90.266,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 92.049,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 92.862,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 88.617,\r\n                \"constructor\": \"Red Bull\"\r\n            }\r\n        ],\r\n        \"Hungarian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 78.715,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.359,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 81.459,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 81.423,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 78.394,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 82.112,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 80.945,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 81.518,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 82.711,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 82.802,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Belgian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 207.071,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 209.066,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 209.672,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 211.567,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 214.55,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 217.248,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Esteban Ocon\",\r\n                \"fastest\": 218.65,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 219.679,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 231.234,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 236.578,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Dutch Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 73.275,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 71.097,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 74.818,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 74.78,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 74.323,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 74.236,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 75.125,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 75.628,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 73.958,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 75.927,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Italian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 84.812,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 85.156,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 84.827,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 85.319,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 85.853,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 85.472,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 85.835,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 85.718,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 86.707,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 89.005,\r\n                \"constructor\": \"AlphaTauri\"\r\n            }\r\n        ],\r\n        \"Russian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 98.994,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 97.423,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 100.0,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 99.251,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 98.686,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 97.575,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 98.396,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 99.058,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 100.276,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 98.279,\r\n                \"constructor\": \"AlphaTauri\"\r\n            }\r\n        ],\r\n        \"Turkish Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 90.432,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 92.459,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 91.921,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 92.814,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 92.446,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Lance Stroll\",\r\n                \"fastest\": 92.608,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 93.252,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 92.586,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 93.399,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 94.209,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"United States Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 98.485,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 99.096,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 99.303,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 100.228,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Yuki Tsunoda\",\r\n                \"fastest\": 101.151,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 100.792,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 100.067,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 101.12,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 100.481,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 101.395,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Mexico City Grand Prix\": [\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 78.999,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 77.774,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 80.51,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 80.081,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 80.713,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 80.46,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 81.546,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nikita Mazepin\",\r\n                \"fastest\": 81.402,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 80.711,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 80.617,\r\n                \"constructor\": \"McLaren\"\r\n            }\r\n        ],\r\n        \"Sao Paulo Grand Prix\": [\r\n            {\r\n                \"driver\": \"Sergio P\\u00e9rez\",\r\n                \"fastest\": 71.01,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 71.982,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 72.71,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 73.634,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 73.227,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 73.761,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 73.922,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 72.621,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 73.793,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 74.355,\r\n                \"constructor\": \"Williams\"\r\n            }\r\n        ],\r\n        \"Qatar Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 85.084,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 86.682,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 87.019,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 83.196,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 85.746,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 86.555,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 86.434,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Kimi R\\u00e4ikk\\u00f6nen\",\r\n                \"fastest\": 86.358,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"George Russell\",\r\n                \"fastest\": 85.768,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Nikita Mazepin\",\r\n                \"fastest\": 87.34,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Saudi Arabian Grand Prix\": [\r\n            {\r\n                \"driver\": \"Valtteri Bottas\",\r\n                \"fastest\": 1193.967,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 1190.175,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Charles Leclerc\",\r\n                \"fastest\": 1194.398,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Daniel Ricciardo\",\r\n                \"fastest\": 1193.15,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 91.633,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 1196.151,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 1197.442,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 94.03,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 1186.542,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 96.043,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ],\r\n        \"Abu Dhabi Grand Prix\": [\r\n            {\r\n                \"driver\": \"Lewis Hamilton\",\r\n                \"fastest\": 86.615,\r\n                \"constructor\": \"Mercedes\"\r\n            },\r\n            {\r\n                \"driver\": \"Max Verstappen\",\r\n                \"fastest\": 86.103,\r\n                \"constructor\": \"Red Bull\"\r\n            },\r\n            {\r\n                \"driver\": \"Carlos Sainz\",\r\n                \"fastest\": 87.618,\r\n                \"constructor\": \"Ferrari\"\r\n            },\r\n            {\r\n                \"driver\": \"Lando Norris\",\r\n                \"fastest\": 86.762,\r\n                \"constructor\": \"McLaren\"\r\n            },\r\n            {\r\n                \"driver\": \"Pierre Gasly\",\r\n                \"fastest\": 87.342,\r\n                \"constructor\": \"AlphaTauri\"\r\n            },\r\n            {\r\n                \"driver\": \"Fernando Alonso\",\r\n                \"fastest\": 87.607,\r\n                \"constructor\": \"Alpine F1 Team\"\r\n            },\r\n            {\r\n                \"driver\": \"Antonio Giovinazzi\",\r\n                \"fastest\": 89.442,\r\n                \"constructor\": \"Alfa Romeo\"\r\n            },\r\n            {\r\n                \"driver\": \"Sebastian Vettel\",\r\n                \"fastest\": 88.303,\r\n                \"constructor\": \"Aston Martin\"\r\n            },\r\n            {\r\n                \"driver\": \"Nicholas Latifi\",\r\n                \"fastest\": 89.293,\r\n                \"constructor\": \"Williams\"\r\n            },\r\n            {\r\n                \"driver\": \"Mick Schumacher\",\r\n                \"fastest\": 89.457,\r\n                \"constructor\": \"Haas F1 Team\"\r\n            }\r\n        ]\r\n    }\r\n}","\r\nconst HINTS = [\r\n    {\r\n        msg: \"Cette piste de course permet de visualiser la progression du Scrolly-Telling. Les cercles rouges représentent des changements d'époque importante.\",\r\n        target: '.progress-svg',\r\n        offset: 230,\r\n    },\r\n    {\r\n        msg: \"Sur les graphiques, les lignes rouges verticales représentent un changement dans le règlement de la Formule 1. Vous allez pouvoir les survolez à la fin du scrolly pour avoir plus de détails.\",\r\n        target: '#graph-2',\r\n        offset: 220,\r\n    },\r\n    {\r\n        msg: \"Une fois arrivé à la fin, différents contrôles apparaîtront et vous serez libre de sélectionner par vous même un grand prix spécifique, et comparer les temps de course avec les temps en qualification. \\n\\nBonne découverte!\",\r\n        target: '.progress-svg',\r\n        offset: 450,\r\n    },\r\n];\r\n\r\nconst ID = 'onboarding-popup'\r\nexport class OnboardingManager {\r\n    private wrapper: HTMLDivElement;\r\n    private textElem: HTMLParagraphElement;\r\n    private cbs = [];\r\n    private currentHint = -1;\r\n    private completed = false;\r\n\r\n    constructor() {\r\n        this.wrapper = document.createElement('div');\r\n        this.wrapper.setAttribute('id', ID);\r\n        this.textElem = document.createElement('p');\r\n        const button = document.createElement('button');\r\n        button.innerText = \"Continuer\";\r\n        button.addEventListener('click', () => {\r\n            this.removeHint();\r\n            this.nextMessage();\r\n        });\r\n\r\n        this.wrapper.append(this.textElem);\r\n        this.wrapper.append(button);\r\n\r\n    }\r\n\r\n    startOnboarding(): void {\r\n        if (this.completed) return;\r\n\r\n        this.nextMessage();\r\n    }\r\n\r\n\r\n    onOnboardingFinished(cb: () => void): void {\r\n        this.cbs.push(cb)\r\n    }\r\n\r\n    private nextMessage(): void {\r\n        if (this.currentHint + 1 == HINTS.length) {\r\n            this.completed = true;\r\n            this.cbs.forEach(cb => cb());\r\n            return;\r\n        }\r\n        this.currentHint += 1;\r\n        const hint = HINTS[this.currentHint];\r\n        const target = document.querySelector<HTMLElement>(hint.target);\r\n        const boundingRect = target.getBoundingClientRect();\r\n        const hintLeft = boundingRect.left + boundingRect.width / 2 - 100;\r\n        const hintTop = boundingRect.top - hint.offset;\r\n        this.render(hintLeft, hintTop, hint.msg);\r\n    }\r\n\r\n    private render(x: number, y: number, message: string): void {\r\n        this.textElem.innerText = message;\r\n        this.wrapper.style.left = `${x}px`;\r\n        this.wrapper.style.top = `${y}px`;\r\n        document.body.append(this.wrapper);\r\n    }\r\n\r\n    private removeHint(): void {\r\n        document.body.removeChild(this.wrapper);\r\n    }\r\n\r\n\r\n\r\n}\r\n","\r\nimport { SCROLLYOPTION, CONSTRUCTOR } from \"./utils\";\r\n\r\nconst PERIODS = [{\r\n    range: [1994, 1999],\r\n    tag: SCROLLYOPTION.FERRARI_VS_WILLIAMS,\r\n    constructors: [CONSTRUCTOR.FERRARI, CONSTRUCTOR.WILLIAMS],\r\n    html: `\r\n    <h4 class=\"card-title\">Les débuts</h4>\r\n    <p>Les années 90 sont marquées par l'interdiction\r\n    des assistances électroniques. Les châssis sont donc nerveux,\r\n    difficiles à piloter.</p>\r\n    <p>À cette époque, Ferrari et Williams dominent la compétition.</p>\r\n    `\r\n}, {\r\n    range: [2000, 2009],\r\n    tag: SCROLLYOPTION.ANNEES_2000,\r\n    constructors: [],\r\n    html: `\r\n    <h5 class=\"card-title\">Années 2000</h5>\r\n    <p>Dans les années 2000, la Formule 1 vise à réduire la vitesse des voitures\r\n    pour des raisons évidentes de sécurité.</p>\r\n    <p>Les moteurs sont désormais obligatoirement des V10, l'aérodynamique des châssis\r\n    commence à être définie très précisément afin de réduire la force d'appui qu'ils\r\n    génèrent, et ainsi réduire les vitesses en virage.</p>\r\n`\r\n}, {\r\n    range: [2010, 2013],\r\n    tag: SCROLLYOPTION.ANNEES_2010,\r\n    constructors: [],\r\n    html: `\r\n    <h5 class=\"card-title\">Années 2010</h5>\r\n    <p>Courant les années 2010, le règlement vise à rendre le sport plus\r\n    spectaculaire. Son but est donc de resserrer l'écart entre les\r\n    écuries</p>\r\n    <p>La principale mesure prise consiste à limiter le budget alloué aux\r\n    écuries. Malheureusement, en comparaison aux années 2000, les écuries\r\n    ayant le moins de moyen sont tout de même affectées par les limitations\r\n    de budget et l'écart a plutôt tendance à augmenter qu'à se réduire.</p>\r\n`}, {\r\n    range: [2014, 2021],\r\n    tag: SCROLLYOPTION.TURBOHYBRID,\r\n    constructors: [],\r\n    html: `\r\n    <h5 class=\"card-title\">Ère contemporaine de la Formule 1</h5>\r\n    <p>En 2014, le règlement impose de nouveaux moteurs aux équipes : 1.6L compressés,\r\n    boite 8, hybride, et doivent maintenant durer minimum 4000km.</p>\r\n    <p>C'est le début de l'ère turbo-hybride, qui a continué jusqu'à la saison dernière\r\n    (2021).</p>\r\n`}];\r\n\r\nconst MIN_YEAR = 1994\r\nconst MAX_YEAR = 2021\r\n\r\n\r\nexport class ContentManager {\r\n\r\n    private currentPeriodIndex = -1;\r\n\r\n    periodChanged(progress: number): boolean {\r\n        const year = this.getCorrespondingYear(progress);\r\n        const periodIndex = this.getPeriodIndex(year);\r\n        if (periodIndex === this.currentPeriodIndex) return false;\r\n        this.currentPeriodIndex = periodIndex;\r\n        return true\r\n    }\r\n\r\n    getContent() {\r\n        return PERIODS[this.currentPeriodIndex]\r\n    }\r\n\r\n    private getCorrespondingYear(progress: number): number {\r\n        return MIN_YEAR + Math.floor((MAX_YEAR - MIN_YEAR) * progress / 100)\r\n    }\r\n\r\n    private getPeriodIndex(year: number): number {\r\n        return PERIODS.findIndex((period) => {\r\n            return year >= period.range[0] && year <= period.range[1]\r\n        })\r\n    }\r\n}\r\n","import * as viz from './scripts/viz'\r\nimport * as utils from './scripts/utils'\r\nimport * as types from './scripts/types'\r\nimport qualifs from \"./assets/data/parsed_quali.json\";\r\nimport races from \"./assets/data/parsed_races.json\";\r\nimport * as d3 from 'd3'\r\nimport { ScrollManager, ScrollyEvent } from './scripts/scroll-event';\r\nimport { VisibilityManager, VisibilityTarget } from './scripts/visibility-manager';\r\nimport { OnboardingManager } from './scripts/onboarding-manager';\r\nimport { ContentManager } from './scripts/content-manager';\r\n\r\n/**\r\n * Main\r\n */\r\n(function (d3) {\r\n    const onboardingManager = new OnboardingManager()\r\n    const scrollManager = new ScrollManager(d3, onboardingManager)\r\n    const visibilityManager = new VisibilityManager()\r\n    const contentManager = new ContentManager();\r\n    visibilityManager.hide(VisibilityTarget.DashboardOnly)\r\n    const onboard = document.querySelector<HTMLElement>(`#onboarding`)\r\n    onboard.classList.add('visible')\r\n    scrollManager.onScrollyStateChange(state => {\r\n        if (state == ScrollyEvent.Finished) {\r\n            visibilityManager.show(VisibilityTarget.DashboardOnly)\r\n            visibilityManager.hide(VisibilityTarget.ScrollyOnly)\r\n            d3.select<HTMLInputElement, unknown>('#constructor-option-max')\r\n                .node()\r\n                .checked = true\r\n            d3.select<HTMLInputElement, unknown>('#constructor-option-min')\r\n                .node()\r\n                .checked = true\r\n            d3.select<HTMLDivElement, unknown>('#select-constructor').node().dispatchEvent(new Event('change'))\r\n        } else {\r\n            visibilityManager.hide(VisibilityTarget.DashboardOnly)\r\n            visibilityManager.show(VisibilityTarget.ScrollyOnly)\r\n        }\r\n    })\r\n\r\n    let scrollyOpt: utils.SCROLLYOPTION = null\r\n    let constructorsToPlot = []\r\n    const minMaxYears = [1994, 2021]\r\n    const length = minMaxYears[1] - minMaxYears[0]\r\n\r\n    scrollManager.onScrollyProgress(({ progress, forward }) => {\r\n        const yearProgress = Math.round(minMaxYears[0] + ((progress / 100) * length))\r\n        const yearsToPlot = [minMaxYears[0], yearProgress]\r\n        if (contentManager.periodChanged(progress)) {\r\n            const content = contentManager.getContent();\r\n            scrollyOpt = content.tag;\r\n            constructorsToPlot = content.constructors\r\n            d3.select('#scrolly-content').html(content.html)\r\n            if (forward) {\r\n                scrollManager.reachedCheckpoint()\r\n            }\r\n        }\r\n        for (let i = 1; i < 5; i++) {\r\n            updateGraph(i, constructorsToPlot, scrollyOpt, !scrollManager.scrollyFinished, yearsToPlot)\r\n        }\r\n\r\n    })\r\n\r\n    const baseGPs = [utils.GP.AUSTRALIAN, utils.GP.BELGIAN, utils.GP.MONACO, utils.GP.BRAZILIAN]\r\n    const baseConstructors = []\r\n\r\n    const selectConstructor = d3.select('#select-constructor')\r\n    selectConstructor.on('change', () => {\r\n        const constructors = getSelectedConstructors()\r\n        for (let i = 1; i < 5; i++)\r\n            updateGraph(i, constructors, null, !scrollManager.scrollyFinished)\r\n    })\r\n    utils.addSelectOptionsConstructors(selectConstructor.node(), baseConstructors)\r\n\r\n    for (let i = 1; i < 5; i++) {\r\n        const selectGP = d3.select<HTMLSelectElement, unknown>('#select-gp-' + i)\r\n        selectGP.on('change', () => updateGraph(i, getSelectedConstructors(), null, !scrollManager.scrollyFinished))\r\n        d3.select('#select-gp-type-' + i)\r\n            .on('change', () => updateGraph(i, getSelectedConstructors(), null, !scrollManager.scrollyFinished))\r\n        utils.addSelectOptionsGps(selectGP.node(), baseGPs[i - 1])\r\n        // viz.makeLineChart(qualifs, baseGPs[i - 1], \"#graph-\" + i, width, height, margin, baseConstructors, null, !scrollManager.scrollyFinished)\r\n        updateGraph(i, getSelectedConstructors(), null, true, [1994, 1994])\r\n    }\r\n})(d3)\r\n\r\nfunction getSelectedConstructors() {\r\n    const selectConstructor = d3.select<HTMLDivElement, unknown>('#select-constructor').node()\r\n    const displayedConstructors = []\r\n    const children = selectConstructor.children\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i].children[0];\r\n        if (utils.isInputElem(child) && child.checked) {\r\n            displayedConstructors.push(child.value);\r\n        }\r\n    }\r\n    return displayedConstructors\r\n}\r\n\r\nfunction updateGraph(graphId: number,\r\n    constructors: utils.CONSTRUCTOR[],\r\n    scrollyOpt: utils.SCROLLYOPTION = null,\r\n    scrollyMode: boolean,\r\n    yearRange?: number[]) {\r\n    const margin: types.Margins = { top: 30, right: 30, bottom: 30, left: 60 }\r\n    const svgWidth: number = (innerWidth / 2) - 200\r\n    const svgHeight: number = (innerHeight / 2) - 110\r\n\r\n    const width: number = svgWidth - margin.left - margin.right\r\n    const height: number = svgHeight - margin.top - margin.bottom\r\n\r\n    const gpName = d3.select('#select-gp-' + graphId).property('value')\r\n    const gpType = d3.select('#select-gp-type-' + graphId).property('value')\r\n\r\n    let data = gpType === 'race' ? races : qualifs\r\n    let filteredData: Object = {}\r\n\r\n    if (yearRange) {\r\n        for (const [year, results] of Object.entries(data)) {\r\n            if (yearRange[0] <= +year && +year < yearRange[1]) {\r\n                filteredData[year] = results\r\n            } else {\r\n                filteredData[year] = null\r\n            }\r\n        }\r\n    } else {\r\n        if (Object.keys(filteredData).length == 0) // Redundant check, since it should be empty if we don't enter previous if\r\n            filteredData = data\r\n    }\r\n    \r\n    if (gpType === 'race') {\r\n        viz.makeLineChart(filteredData, gpName, \"#graph-\" + graphId, width, height, margin, constructors, scrollyOpt, scrollyMode)\r\n    } else {\r\n        viz.makeLineChart(filteredData, gpName, \"#graph-\" + graphId, width, height, margin, constructors, scrollyOpt, scrollyMode)\r\n    }\r\n}\r\n"],"names":["$6e4904b1452f326a$exports","JSON","parse","$63cbeabc75241824$export$2e2bcd8739ae039","a","b","NaN","$0ae9019609d046a1$export$2e2bcd8739ae039","f","delta","compare1","compare2","left","x","lo","hi","length","mid","d","center","i","right","$591ad978f2ce6133$export$2e2bcd8739ae039","$a6e17c0ec55d7735$var$ascendingBisect","$a6e17c0ec55d7735$export$4d945ad3ad5751b0","$a6e17c0ec55d7735$export$df7d25c84ebd12a5","$a6e17c0ec55d7735$export$c1cb828b1117c77b","$a6e17c0ec55d7735$export$2e2bcd8739ae039","$5c80433537c7ad93$export$2e2bcd8739ae039","values","valueof","undefined","value","index","$674b813fb857ae76$var$length","array","$674b813fb857ae76$var$empty","$674b813fb857ae76$var$arrayify","Array","from","$674b813fb857ae76$export$2e2bcd8739ae039","reduce","$674b813fb857ae76$var$reducer","pop","lengths","map","j1","fill","product","some","push","j","i1","$439e396521e041a4$export$2e2bcd8739ae039","sum","Float64Array","v","$3acd474ceacf8a38$export$2e2bcd8739ae039","$4eefdd235be3059b$export$2e2bcd8739ae039","count","mean","$317408b795339b26$export$2e2bcd8739ae039","Math","sqrt","$24461355656d8852$export$2e2bcd8739ae039","min","max","$44a48d1cb1f34224$export$bda7ba77fb86c375","constructor","this","_partials","_n","add","p","y","abs","valueOf","n","$44a48d1cb1f34224$export$61cb83f1a93e9fae","adder","$44a48d1cb1f34224$export$5a6391da70c130da","$3160658555deb5c9$export$dcc6fb7d82b5bc7b","Map","entries","key","$3160658555deb5c9$var$keyof","super","Object","defineProperties","_intern","_key","key1","set","get","$3160658555deb5c9$var$intern_get","has","$3160658555deb5c9$var$intern_set","delete","$3160658555deb5c9$var$intern_delete","$3160658555deb5c9$export$55278c3294239828","Set","$d9caf9fd1659d791$export$2e2bcd8739ae039","$6f0c14a1378d16c1$export$2e2bcd8739ae039","keys","$6f0c14a1378d16c1$var$nest","$6f0c14a1378d16c1$export$d4abd167df80d226","$6f0c14a1378d16c1$var$flatten","flatMap","g","$6f0c14a1378d16c1$export$4ed6fc79ae2c51b5","$6f0c14a1378d16c1$export$788c7294dbcd8e36","$6f0c14a1378d16c1$export$24814875ed03194b","$6f0c14a1378d16c1$export$97e11c0b0230f130","$6f0c14a1378d16c1$export$b610b8812bbcded9","$6f0c14a1378d16c1$var$unique","$6f0c14a1378d16c1$export$8b04ba635e5803cd","Error","values2","regroup","keyof","values1","$752ccd95a674b233$export$2e2bcd8739ae039","source","$3dc3306e587e145d$export$2e2bcd8739ae039","F","Symbol","iterator","TypeError","f1","Uint32Array","sort","c","$3dc3306e587e145d$export$686e14b8469efec4","$3dc3306e587e145d$export$5708b2c031939e56","compare","$5d73447cdfa9c155$export$2e2bcd8739ae039","ak","av","bk","bv","$38806e4e35e056bb$var$array","prototype","$38806e4e35e056bb$export$58adb3bec8346d0f","slice","$a193f63211edda81$export$2e2bcd8739ae039","$7c028b8201e48c5a$var$e10","$7c028b8201e48c5a$var$e5","$7c028b8201e48c5a$var$e2","$7c028b8201e48c5a$export$2e2bcd8739ae039","start","stop","reverse","step","$7c028b8201e48c5a$export$bc64d00cc98e7e95","isFinite","r0","round","r1","power","floor","log","LN10","error","pow","$7c028b8201e48c5a$export$81087d9b915d4ede","step0","step1","$4bf21a6c2cd653e6$export$2e2bcd8739ae039","prestep","ceil","$6d386446084ca1a9$export$2e2bcd8739ae039","LN2","$83488795b448c080$export$2e2bcd8739ae039","domain","threshold","histogram","data","isArray","xz","x0","x1","tz","tn","m","shift","bins","_","arguments","thresholds","call","$5a964dca3df4eea7$export$2e2bcd8739ae039","$02ed355deaa9e190$export$2e2bcd8739ae039","$6637506e64922c38$export$2e2bcd8739ae039","k","z","s","exp","sd","t","$6637506e64922c38$var$swap","$231c9024a6754413$export$2e2bcd8739ae039","$591ad978f2ce6133$export$1f6c9cc012ebacae","i0","value0","subarray","$231c9024a6754413$export$f924a6cad778dddb","$1ae435d6739098c4$export$2e2bcd8739ae039","$e5c6de1a6d3b2294$export$2e2bcd8739ae039","cbrt","$3ce2d353ce06f740$export$2e2bcd8739ae039","$be26fde1f1f97ef0$export$2e2bcd8739ae039","$5713cbb46e42efc2$export$2e2bcd8739ae039","$54ced0ad7294c1a8$export$2e2bcd8739ae039","arrays","$54ced0ad7294c1a8$var$flatten","$70ebee7adc32f27f$export$2e2bcd8739ae039","$50f73767cb5db446$export$2e2bcd8739ae039","counts","modeValue","modeCount","$a9640ed34ca3d852$export$2e2bcd8739ae039","pairof","$a9640ed34ca3d852$export$a04cb3fe8b81dd","previous","first","$61d27a61db04c1a6$export$2e2bcd8739ae039","$0554e12b5fe33289$export$2e2bcd8739ae039","V","R","compareIndex","r","forEach","$3bd3713abbf324da$export$2e2bcd8739ae039","defined","minValue","element","$a30f57acbe236c75$export$2e2bcd8739ae039","$f89111cbb3c9d70b$export$2e2bcd8739ae039","maxValue","$17d3a79dc1681cbc$export$2e2bcd8739ae039","$69f952dec6daacf1$export$2e2bcd8739ae039","$0a6b5bfe2fca1ade$export$2e2bcd8739ae039","$0a6b5bfe2fca1ade$export$a430ea578c95d356","random","$daf42a1f07322cf6$export$2e2bcd8739ae039","$e58cab29de1f7712$export$2e2bcd8739ae039","matrix","$e58cab29de1f7712$var$length","row","$7d941308464d4714$export$2e2bcd8739ae039","$c88765d66e97cb9d$export$2e2bcd8739ae039","test","$7ec830459bc1d587$export$2e2bcd8739ae039","$c2cd44209c86b471$export$2e2bcd8739ae039","$81758ba8ba9ddd3a$export$2e2bcd8739ae039","mapper","$5f9d0bf97cbd4c21$export$2e2bcd8739ae039","reducer","done","next","$0b47a96a2caef260$export$2e2bcd8739ae039","$1bbff5b2b5c7d28d$export$2e2bcd8739ae039","others","other","$280a3f874265aff4$export$2e2bcd8739ae039","is","$e7fd243b0459dad3$export$2e2bcd8739ae039","$e7fd243b0459dad3$var$set","out","$cd440485491a144b$export$2e2bcd8739ae039","o","io","$cd440485491a144b$var$intern","ivalue","$85602eed14b56bd2$export$2e2bcd8739ae039","$46cf405d3a14ae8d$export$2e2bcd8739ae039","$575c8f74500ed33b$export$2e2bcd8739ae039","$834b38f205523964$var$translateX","$834b38f205523964$var$translateY","$834b38f205523964$var$number","scale","$834b38f205523964$var$center","offset","bandwidth","$834b38f205523964$var$entering","__axis","$834b38f205523964$var$axis","orient","tickArguments","tickValues","tickFormat","tickSizeInner","tickSizeOuter","tickPadding","window","devicePixelRatio","transform","axis","context","ticks","apply","format","spacing","range","range0","range1","position","copy","selection","path","selectAll","tick","order","tickExit","exit","tickEnter","enter","append","attr","line","select","text","merge","insert","transition","getAttribute","parentNode","remove","filter","each","tickSize","$834b38f205523964$export$59b8cfab074bdeb1","$834b38f205523964$export$b0d2e24dc4f898f0","$834b38f205523964$export$e5cb22533a15e72e","$834b38f205523964$export$2749afb169a520d2","$7c4cf709d1826294$var$noop","$7c4cf709d1826294$var$dispatch","$7c4cf709d1826294$var$Dispatch","$7c4cf709d1826294$var$parseTypenames","typenames","types","trim","split","name","indexOf","hasOwnProperty","type","$7c4cf709d1826294$var$get","$7c4cf709d1826294$var$set","callback","concat","on","typename","T","that","args","$7c4cf709d1826294$export$2e2bcd8739ae039","$53f2bc3e7847f93d$export$2e2bcd8739ae039","svg","xhtml","xlink","xml","xmlns","$b659c67af9335162$export$2e2bcd8739ae039","prefix","space","local","$8408c2f95f59818f$var$creatorInherit","document","ownerDocument","uri","namespaceURI","documentElement","createElement","createElementNS","$8408c2f95f59818f$var$creatorFixed","fullname","$8408c2f95f59818f$export$2e2bcd8739ae039","$6e0da2549057218e$var$none","$6e0da2549057218e$export$2e2bcd8739ae039","selector","querySelector","$cade2308c136039a$export$2e2bcd8739ae039","$7d92e4f75dbef49d$var$empty","$7d92e4f75dbef49d$export$2e2bcd8739ae039","querySelectorAll","$5fb24786d2a5f87a$export$2e2bcd8739ae039","matches","$5fb24786d2a5f87a$export$90c2759c036528","node","$31ffd623f27a3a65$var$find","find","$31ffd623f27a3a65$var$childFirst","firstElementChild","$956143cec557381d$var$filter","$956143cec557381d$var$children","children","$e7fb628d3a97a780$export$2e2bcd8739ae039","update","$3e99928b06782938$export$67b01759a14cf6a4","parent","datum","_next","_parent","__data__","$d8d677a8510c2e55$export$2e2bcd8739ae039","$cf943aeeeea8dffb$var$bindIndex","group","groupLength","dataLength","$cf943aeeeea8dffb$var$bindKey","keyValue","nodeByKeyValue","keyValues","$cf943aeeeea8dffb$var$datum","$cf943aeeeea8dffb$var$arraylike","$faed8eab1469f61d$var$ascending","$8ba31651ad7591ba$var$attrRemove","removeAttribute","$8ba31651ad7591ba$var$attrRemoveNS","removeAttributeNS","$8ba31651ad7591ba$var$attrConstant","setAttribute","$8ba31651ad7591ba$var$attrConstantNS","setAttributeNS","$8ba31651ad7591ba$var$attrFunction","$8ba31651ad7591ba$var$attrFunctionNS","$89f2562a5a0d5a13$export$2e2bcd8739ae039","defaultView","$6abb942964e997ae$var$styleRemove","style","removeProperty","$6abb942964e997ae$var$styleConstant","priority","setProperty","$6abb942964e997ae$var$styleFunction","$6abb942964e997ae$export$5e3cec964f0b5efd","getPropertyValue","getComputedStyle","$2b37810bbc11c28b$var$propertyRemove","$2b37810bbc11c28b$var$propertyConstant","$2b37810bbc11c28b$var$propertyFunction","$6515c3ccac9efd7a$var$classArray","string","$6515c3ccac9efd7a$var$classList","classList","$6515c3ccac9efd7a$var$ClassList","_node","_names","$6515c3ccac9efd7a$var$classedAdd","names","list","$6515c3ccac9efd7a$var$classedRemove","$6515c3ccac9efd7a$var$classedTrue","$6515c3ccac9efd7a$var$classedFalse","$6515c3ccac9efd7a$var$classedFunction","$23bcbc7d81179ba9$var$textRemove","textContent","$23bcbc7d81179ba9$var$textConstant","$23bcbc7d81179ba9$var$textFunction","$d5514f1406649954$var$htmlRemove","innerHTML","$d5514f1406649954$var$htmlConstant","$d5514f1406649954$var$htmlFunction","$c6aae8ef09c3d03d$var$raise","nextSibling","appendChild","$4669a19c71181bd1$var$lower","previousSibling","insertBefore","firstChild","$45485f4f27d149f8$var$constantNull","$d587d6535138580c$var$remove","removeChild","$3323c835dc2d74de$var$selection_cloneShallow","clone","cloneNode","$3323c835dc2d74de$var$selection_cloneDeep","$dd1fb49221ad966f$var$parseTypenames","$dd1fb49221ad966f$var$onRemove","__on","removeEventListener","listener","options","$dd1fb49221ad966f$var$onAdd","event","$dd1fb49221ad966f$var$contextListener","addEventListener","$27c639e461d8a390$var$dispatchEvent","params","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","dispatchEvent","$27c639e461d8a390$var$dispatchConstant","$27c639e461d8a390$var$dispatchFunction","child","join","splice","contains","$28a9f77d63e1ff25$export$e8e78c978b129247","$28a9f77d63e1ff25$export$52baac22726c72bf","groups","parents","_groups","_parents","$28a9f77d63e1ff25$var$selection","subgroups","subnode","subgroup","$a3d7edd03ec30cc1$var$arrayAll","selectChild","match","$31ffd623f27a3a65$var$childFind","selectChildren","$956143cec557381d$var$childrenFilter","bind","enterGroup","updateGroup","exitGroup","_enter","_exit","onenter","onupdate","onexit","groups0","groups1","m0","m1","merges","group0","group1","compareDocumentPosition","compareNode","sortgroups","sortgroup","nodes","size","empty","getAttributeNS","property","classed","html","raise","lower","create","before","deep","dispatch","$28a9f77d63e1ff25$export$2e2bcd8739ae039","$cf81072cf307ee25$export$2e2bcd8739ae039","$1df142200d400520$export$2e2bcd8739ae039","$83f7984d0c2930db$var$nextId","$83f7984d0c2930db$export$2e2bcd8739ae039","$83f7984d0c2930db$var$Local","toString","$c447ae86a8320d39$export$2e2bcd8739ae039","sourceEvent","$1be794af963d8372$export$2e2bcd8739ae039","currentTarget","ownerSVGElement","createSVGPoint","point","clientX","clientY","matrixTransform","getScreenCTM","inverse","getBoundingClientRect","rect","clientLeft","top","clientTop","pageX","pageY","$072c439c93c95916$export$2e2bcd8739ae039","events","target","touches","$e5dfdc386da08eff$export$2e2bcd8739ae039","id","$914edae09cbfb4c0$export$524615cd03e458cc","passive","$914edae09cbfb4c0$export$35431a0e47022de1","capture","$914edae09cbfb4c0$export$2e2561858db9bf47","stopImmediatePropagation","$914edae09cbfb4c0$export$2e2bcd8739ae039","preventDefault","$905558291b0c219c$export$2e2bcd8739ae039","view","root","__noselect","MozUserSelect","$905558291b0c219c$export$833237748009e1e1","noclick","setTimeout","$620ab3a49fccb4fc$export$2e2bcd8739ae039","$45813ed5c6fd1799$export$2e2bcd8739ae039","subject","identifier","active","dx","dy","enumerable","configurable","$0b4a1789c016a21b$var$defaultFilter","ctrlKey","button","$0b4a1789c016a21b$var$defaultContainer","$0b4a1789c016a21b$var$defaultSubject","$0b4a1789c016a21b$var$defaultTouchable","navigator","maxTouchPoints","$0b4a1789c016a21b$export$2e2bcd8739ae039","mousedownx","mousedowny","mousemoving","touchending","container1","touchable","gestures","listeners","clickDistance2","drag","mousedowned","touchstarted","touchmoved","touchended","gesture","beforestart","mousemoved","mouseupped","mouse","changedTouches","clearTimeout","container","event1","touch1","touch","p0","clickDistance","$831e9a7deaab9d1d$export$2e2bcd8739ae039","factory","$831e9a7deaab9d1d$export$8b58be045bf06082","definition","$8b7826cd7970b69e$export$892596cec99bc70e","$8b7826cd7970b69e$var$reN","$8b7826cd7970b69e$var$reP","$8b7826cd7970b69e$var$reHex","$8b7826cd7970b69e$var$reRgbInteger","RegExp","$8b7826cd7970b69e$var$reRgbPercent","$8b7826cd7970b69e$var$reRgbaInteger","$8b7826cd7970b69e$var$reRgbaPercent","$8b7826cd7970b69e$var$reHslPercent","$8b7826cd7970b69e$var$reHslaPercent","$8b7826cd7970b69e$var$named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","$8b7826cd7970b69e$var$color_formatHex","rgb","formatHex","$8b7826cd7970b69e$var$color_formatRgb","formatRgb","$8b7826cd7970b69e$export$2e2bcd8739ae039","l","toLowerCase","exec","parseInt","$8b7826cd7970b69e$var$rgbn","$8b7826cd7970b69e$export$5e05a94393ac29e3","$8b7826cd7970b69e$var$rgba","$8b7826cd7970b69e$var$hsla","$8b7826cd7970b69e$export$42da0a331c2802f5","opacity","$8b7826cd7970b69e$export$8972dc0e6ad9238f","$8b7826cd7970b69e$var$rgb_formatHex","$8b7826cd7970b69e$var$hex","$8b7826cd7970b69e$var$rgb_formatRgb","$8b7826cd7970b69e$var$clampa","$8b7826cd7970b69e$var$clampi","isNaN","h","$8b7826cd7970b69e$var$Hsl","$8b7826cd7970b69e$export$8133dc3fa904d6d1","$8b7826cd7970b69e$export$8f4a7c0bb78e6ea8","$8b7826cd7970b69e$var$clamph","$8b7826cd7970b69e$var$clampt","$8b7826cd7970b69e$var$hsl2rgb","m2","channels","assign","displayable","hex","formatHex8","formatHsl","brighter","darker","clamp","$70576c5c5ae147f6$export$8449e153fbd325fc","PI","$70576c5c5ae147f6$export$41fc368e1a942b97","$80e69e9a1ed94a67$var$labConvert","$80e69e9a1ed94a67$export$f2722c70a60257f7","$80e69e9a1ed94a67$export$d9397e094a5fbb9a","$80e69e9a1ed94a67$var$hcl2lab","$80e69e9a1ed94a67$var$rgb2lrgb","$80e69e9a1ed94a67$var$xyz2lab","$80e69e9a1ed94a67$export$3e2c219d3ab79d01","$80e69e9a1ed94a67$export$2e2bcd8739ae039","$80e69e9a1ed94a67$var$t1","$80e69e9a1ed94a67$var$lab2xyz","$80e69e9a1ed94a67$var$lrgb2rgb","$80e69e9a1ed94a67$var$hclConvert","atan2","$80e69e9a1ed94a67$export$5a21418738164530","$80e69e9a1ed94a67$export$d0e870ba50062ff1","cos","sin","$046e8f1d7426ff04$var$cubehelixConvert","$046e8f1d7426ff04$export$57ed4bde61a1e2f2","$046e8f1d7426ff04$var$B","$046e8f1d7426ff04$var$E","bl","$046e8f1d7426ff04$export$2e2bcd8739ae039","$dd5733431a2d0880$export$4e41033bfeec1a4c","t1","v0","v1","v2","v3","t2","t3","$dd5733431a2d0880$export$2e2bcd8739ae039","$68731c1c421d9916$export$2e2bcd8739ae039","cosh","sinh","$78a660cd70c52f6f$export$2e2bcd8739ae039","$529dc8928f6a4077$var$linear","$529dc8928f6a4077$export$97d7b0c7ddb78dcf","$529dc8928f6a4077$export$a7ebe8cc6aaf8d37","$529dc8928f6a4077$export$2e2bcd8739ae039","$529dc8928f6a4077$var$exponential","$e7e88f7f6ed95eef$export$2e2bcd8739ae039","rgbGamma","color","end","gamma","$e7e88f7f6ed95eef$var$rgbSpline","spline","colors","$e7e88f7f6ed95eef$export$2c0e28f2e2852d3f","$e7e88f7f6ed95eef$export$53d5214f625ccd4c","$7bfe9c15ff8ebf5c$export$2e2bcd8739ae039","$7bfe9c15ff8ebf5c$export$5cd576d1827d40c8","ArrayBuffer","isView","DataView","$23bbf03008765dcc$export$2e2bcd8739ae039","$23bbf03008765dcc$export$15d09067c6a5ee49","nb","na","$8385105b4986daed$export$2e2bcd8739ae039","$063cbb46f86ba478$export$2e2bcd8739ae039","Date","setTime","$bebed377ddb9d3af$export$2e2bcd8739ae039","$cf536f4647e343d9$export$2e2bcd8739ae039","$020916edd93bff72$var$reA","$020916edd93bff72$var$reB","$020916edd93bff72$export$2e2bcd8739ae039","am","bm","bs","bi","lastIndex","q","$020916edd93bff72$var$one","$020916edd93bff72$var$zero","$56de3e3c7b7fc500$export$2e2bcd8739ae039","$e62510ebe0cc0f51$export$2e2bcd8739ae039","$c0f8a9efb1caa699$export$2e2bcd8739ae039","$4a001faa54972590$var$svgNode","$2938f7d64470581a$var$degrees","$2938f7d64470581a$export$f0954fd7d5368655","translateX","translateY","rotate","skewX","scaleX","scaleY","$2938f7d64470581a$export$2e2bcd8739ae039","e","atan","$e4d1a233c7242264$var$interpolateTransform","pxComma","pxParen","degParen","xa","ya","xb","yb","translate","$e4d1a233c7242264$export$56bec7123bb3589a","DOMMatrix","WebKitCSSMatrix","isIdentity","$e4d1a233c7242264$export$da8cba906d64c082","baseVal","consolidate","$e4199827a75856fd$var$cosh","$e4199827a75856fd$export$2e2bcd8739ae039","zoomRho","rho","rho2","rho4","zoom","p1","S","ux0","uy0","w0","ux1","uy1","w1","d2","d1","b0","b1","coshr0","u","$e4199827a75856fd$var$sinh","duration","SQRT2","_1","_2","$852106acfdc40efe$var$hsl","hue","$852106acfdc40efe$export$2e2bcd8739ae039","$852106acfdc40efe$export$a2c535e270a59256","$5eb07f15d29dfb2b$export$2e2bcd8739ae039","$86158b7019ca6112$var$hcl","$86158b7019ca6112$export$2e2bcd8739ae039","$86158b7019ca6112$export$5aaa50f7615f9b70","$ffc3b01ae2663238$var$cubehelix","cubehelixGamma","cubehelix","$ffc3b01ae2663238$export$2e2bcd8739ae039","$ffc3b01ae2663238$export$934fa09ad474a1b4","$25f2a121ae5a240e$export$2e2bcd8739ae039","interpolate","I","$4f501ce7bede8755$export$2e2bcd8739ae039","interpolator","samples","$e782289d8bd71451$var$taskHead","$e782289d8bd71451$var$taskTail","$e782289d8bd71451$var$frame","$e782289d8bd71451$var$timeout","$e782289d8bd71451$var$interval","$e782289d8bd71451$var$clockLast","$e782289d8bd71451$var$clockNow","$e782289d8bd71451$var$clockSkew","$e782289d8bd71451$var$clock","performance","now","$e782289d8bd71451$var$setFrame","requestAnimationFrame","$e782289d8bd71451$export$461939dd4422153","$e782289d8bd71451$var$clearNow","$e782289d8bd71451$export$c57e9b2d8b9e4de","_call","_time","$e782289d8bd71451$export$9dc4ecf953986f04","delay","time","restart","$e782289d8bd71451$export$d60154c1d7f3990e","$e782289d8bd71451$var$wake","t0","Infinity","$e782289d8bd71451$var$sleep","$e782289d8bd71451$var$nap","$e782289d8bd71451$var$poke","clearInterval","setInterval","$d15c972f8843a0f2$export$2e2bcd8739ae039","elapsed","$a3747dc08dcc0650$export$2e2bcd8739ae039","callback1","delay1","time1","total","_restart","$150ba4634a330696$var$emptyOn","$150ba4634a330696$var$emptyTween","$150ba4634a330696$export$2e2bcd8739ae039","timing","schedules","__transition","self","tween","schedule","state","timer","ease","$150ba4634a330696$var$create","$150ba4634a330696$export$2cd8252107eb640b","$150ba4634a330696$export$3988ae62b71be9a3","$150ba4634a330696$export$adaa4cf7ef1b65be","$b05ce272ee11a654$export$2e2bcd8739ae039","$922feb1dfe9c8dcf$var$tweenRemove","tween0","tween1","$922feb1dfe9c8dcf$var$tweenFunction","$922feb1dfe9c8dcf$export$f78ce6ab10405d82","_id","$8a713565676b726d$export$2e2bcd8739ae039","$2a651cfc4e49b53d$var$attrRemove","$2a651cfc4e49b53d$var$attrRemoveNS","$2a651cfc4e49b53d$var$attrConstant","value1","string00","interpolate0","string1","string0","$2a651cfc4e49b53d$var$attrConstantNS","$2a651cfc4e49b53d$var$attrFunction","string10","$2a651cfc4e49b53d$var$attrFunctionNS","$cad13035adb29669$var$attrInterpolate","$cad13035adb29669$var$attrInterpolateNS","$cad13035adb29669$var$attrTweenNS","_value","$cad13035adb29669$var$attrTween","$09cd57996bd81614$var$delayFunction","$09cd57996bd81614$var$delayConstant","$9c9f124117d5bf14$var$durationFunction","$9c9f124117d5bf14$var$durationConstant","$8ea7852b6976e6d1$var$easeConstant","$fd664209e896113c$var$onFunction","on0","on1","sit","every","$fd664209e896113c$var$start","$13be595fcf5febb7$var$Selection","$d0bf366fdef4c332$var$styleRemove","$83672080502c9717$var$styleInterpolate","$83672080502c9717$var$styleTween","$64d823b28aa7019a$var$textInterpolate","$64d823b28aa7019a$var$textTween","$a4d5b9ef4f9cfabb$var$id","$a4d5b9ef4f9cfabb$export$be58926105124dd4","_name","$a4d5b9ef4f9cfabb$export$2e2bcd8739ae039","$a4d5b9ef4f9cfabb$export$9ffd10a3fbdc175b","$a4d5b9ef4f9cfabb$var$selection_prototype","inherit","id0","id1","attrTween","styleTween","$d0bf366fdef4c332$var$styleNull","$d0bf366fdef4c332$var$styleFunction","listener0","$d0bf366fdef4c332$var$styleMaybeRemove","$d0bf366fdef4c332$var$styleConstant","$e62b6dd5e7df40e7$var$textFunction","$e62b6dd5e7df40e7$var$textConstant","textTween","easeVarying","$9d186bb80d60f6c9$var$easeVarying","Promise","resolve","reject","cancel","interrupt","$37db570cec68f9fe$export$45db2fc2f15997e7","$f649c99b97df4dce$export$5118fc7a1e64441b","$f649c99b97df4dce$export$5be5f5e804d0b60c","$f649c99b97df4dce$export$d6ded66933892ed3","$5b131c7b61a09e82$export$b1a09cb1b71f86aa","$5b131c7b61a09e82$export$68d528839c701b6","$5b131c7b61a09e82$export$89238d3bc79d3ada","$e3f4fd1b826fe896$export$aa0b5c3ce2df9d7d","custom","exponent","$e3f4fd1b826fe896$export$e3d987a417dc6640","$e3f4fd1b826fe896$export$ae94c6a40058b429","$be9767de548efcdf$var$pi","$be9767de548efcdf$var$halfPi","$be9767de548efcdf$export$a83a280f8d31ba8d","$be9767de548efcdf$export$62ec6410ca53f2a7","$be9767de548efcdf$export$ff58b604d3ba15ba","$5da950e9c8199481$export$be3f0f7224794b88","$7630653bcd5363c7$export$fc3e95f15e1ef38e","$7630653bcd5363c7$export$f3c9b2f85fbcf0ab","$7630653bcd5363c7$export$ae4d4e77fab188ff","$893afee85b619bbe$export$9f82a71b0377c018","$893afee85b619bbe$export$27989e665abef2c8","$893afee85b619bbe$export$2d757ff9ad09038f","$87b1ec4351e96388$export$fccebd7948554554","$87b1ec4351e96388$export$cccc9e04465dce11","$87b1ec4351e96388$export$41ad9e9849a703ce","$88aafd51566551a1$export$b01116c84cdfe1a2","overshoot","$88aafd51566551a1$export$77edfce482316a60","$88aafd51566551a1$export$ddc5fd596f6c71b2","$94735d3a98b9ae57$var$tau","$94735d3a98b9ae57$export$41f42134872a5fa0","a1","asin","amplitude","period","$94735d3a98b9ae57$export$ed1782b99e69bbc8","a2","p2","$94735d3a98b9ae57$export$309de4f35f218bfd","a3","p3","$b5b43281074f9351$var$defaultTiming","$b5b43281074f9351$var$inherit","$a3ea65c9b2342fdf$var$root","$a3ea65c9b2342fdf$export$2e2bcd8739ae039","$4fc3d848825eb4c8$export$2e2bcd8739ae039","$de0b5bec424cf247$export$2e2bcd8739ae039","mode","$48e2d3ac3b9a75ee$export$2e2561858db9bf47","$48e2d3ac3b9a75ee$export$2e2bcd8739ae039","$5c8970f4694d4107$var$MODE_DRAG","$5c8970f4694d4107$var$MODE_SPACE","$5c8970f4694d4107$var$MODE_HANDLE","$5c8970f4694d4107$var$MODE_CENTER","$5c8970f4694d4107$var$abs","$5c8970f4694d4107$var$max","$5c8970f4694d4107$var$min","$5c8970f4694d4107$var$number1","$5c8970f4694d4107$var$number2","$5c8970f4694d4107$var$X","handles","$5c8970f4694d4107$var$type","input","output","xy","$5c8970f4694d4107$var$Y","$5c8970f4694d4107$var$XY","$5c8970f4694d4107$var$cursors","overlay","w","nw","ne","se","sw","$5c8970f4694d4107$var$flipX","$5c8970f4694d4107$var$flipY","$5c8970f4694d4107$var$signsX","$5c8970f4694d4107$var$signsY","$5c8970f4694d4107$var$defaultFilter","$5c8970f4694d4107$var$defaultExtent","hasAttribute","viewBox","width","height","$5c8970f4694d4107$var$defaultTouchable","$5c8970f4694d4107$var$local","__brush","$5c8970f4694d4107$var$empty","extent","$5c8970f4694d4107$export$69760394fc76f689","dim","$5c8970f4694d4107$export$979ace6c88860aa8","$5c8970f4694d4107$var$brush","$5c8970f4694d4107$export$468748b530991c54","$5c8970f4694d4107$export$2e2bcd8739ae039","extent1","handleSize","brush","initialize","handle","redraw","started","emitter","clean","emit","Emitter","event2","n0","n1","e0","e1","s0","s1","moving","lockX","lockY","metaKey","altKey","signX","signY","W","N","E","shifting","shiftKey","points","point0","pts","move","moved","ended","keydowned","keyupped","cur","keyCode","selection0","selection1","clear","starting","keyModifiers","$e4f9e8af03305b19$export$2335f513bbd82c6d","$e4f9e8af03305b19$export$50d414a77b60d802","$e4f9e8af03305b19$export$5de3937cb4b592ed","$e4f9e8af03305b19$export$18c7bea995a110f","$e4f9e8af03305b19$export$e51408a300e8929a","$e4f9e8af03305b19$export$a4b4b4d4d776fe92","$e4f9e8af03305b19$export$8960430cfd85939f","$47b4debc53fe20f4$var$range","$47b4debc53fe20f4$var$compareValue","$47b4debc53fe20f4$export$2e2bcd8739ae039","$47b4debc53fe20f4$var$chord","$47b4debc53fe20f4$export$ccf0fb804feeadb0","$47b4debc53fe20f4$export$66e653ba9a7a4d8c","directed","transpose","padAngle","sortGroups","sortSubgroups","sortChords","chord1","groupSums","groupIndex","chords","subgroupIndex","startAngle","endAngle","j5","chord","$c9f66a4d1c06b373$var$pi","$c9f66a4d1c06b373$var$tau","$c9f66a4d1c06b373$var$tauEpsilon","$c9f66a4d1c06b373$var$Path","_x0","_y0","_x1","_y1","$c9f66a4d1c06b373$var$path","moveTo","closePath","lineTo","quadraticCurveTo","y1","bezierCurveTo","x2","y2","arcTo","y0","x21","y21","x01","y01","l01_2","x20","y20","l21_2","l20_2","l21","l01","acos","t01","t21","arc","a0","ccw","cw","da","$c9f66a4d1c06b373$export$2e2bcd8739ae039","$2ce5bb679b5f7ae5$export$58adb3bec8346d0f","$f3e37bc5e2106614$export$2e2bcd8739ae039","$c94985b24ca476f5$var$defaultSource","$c94985b24ca476f5$var$defaultTarget","$c94985b24ca476f5$var$defaultRadius","radius","$c94985b24ca476f5$var$defaultStartAngle","$c94985b24ca476f5$var$defaultEndAngle","$c94985b24ca476f5$var$defaultPadAngle","$c94985b24ca476f5$var$defaultArrowheadRadius","$c94985b24ca476f5$var$ribbon","headRadius","sourceRadius","targetRadius","ribbon","buffer","ap","argv","sr","sa0","sa1","tr","ta0","ta1","hr","tr2","ta2","$c94985b24ca476f5$export$2e2bcd8739ae039","$c94985b24ca476f5$export$63f6c8bb9e816a34","$6e529a4d7c5318cb$export$58adb3bec8346d0f","$8cf317e8294c08d4$export$2e2bcd8739ae039","$2c54087e0cd22b13$export$2e2bcd8739ae039","$dab7974168a117cc$export$2e2bcd8739ae039","ring","hole","$dab7974168a117cc$var$ringContains","pi","xi","yi","pj","xj","yj","$dab7974168a117cc$var$segmentContains","$dab7974168a117cc$var$collinear","$a2ef71a294399755$export$2e2bcd8739ae039","$bedfe0973872bedd$var$cases","$bedfe0973872bedd$export$2e2bcd8739ae039","smooth","smoothLinear","contours","ts","contour","polygons","holes","fragmentByStart","fragmentByEnd","stitch","startIndex","endIndex","unshift","isorings","area","$3e63541b38411916$export$2e2bcd8739ae039","polygon","coordinates","xt","yt","_0","$52e275d1063750f6$export$d6b6c69cb5897b44","$52e275d1063750f6$export$96ba1179f8344c4b","$ad0d499b029c9e60$var$defaultX","$ad0d499b029c9e60$var$defaultY","$ad0d499b029c9e60$var$defaultWeight","$ad0d499b029c9e60$export$2e2bcd8739ae039","weight","density","data1","values0","Float32Array","pow2k","wi","geometry","transformPolygon","transformRing","transformPoint","resize","cellSize","$a13f3b841662c3aa$export$8a63f25cc62965f1","elen","flen","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","$a13f3b841662c3aa$export$9f3a0795ca2cc944","$a13f3b841662c3aa$export$202e0172ed3c7be0","$cb91d66db176b6ab$var$B","$cb91d66db176b6ab$var$C1","$cb91d66db176b6ab$var$C2","$cb91d66db176b6ab$var$D","$cb91d66db176b6ab$var$u","$cb91d66db176b6ab$export$bbb923599a46a7d8","ax","ay","bx","by","cx","cy","detleft","detright","det","detsum","acxtail","acytail","bcxtail","bcytail","ahi","alo","bhi","blo","_i","_j","u3","acx","bcx","acy","bcy","errbound","C1len","C2len","Dlen","$cb91d66db176b6ab$var$orient2dadapt","$70edea87a85254c2$var$EPSILON","$70edea87a85254c2$var$EDGE_STACK","$70edea87a85254c2$export$2e2bcd8739ae039","static","getX","$70edea87a85254c2$var$defaultGetX","getY","$70edea87a85254c2$var$defaultGetY","coords","maxTriangles","_triangles","_halfedges","Int32Array","_hashSize","_hullPrev","_hullNext","_hullTri","_hullHash","_ids","_dists","hullPrev","hullNext","hullTri","hullHash","minX","minY","maxX","maxY","i2","minDist","i3","$70edea87a85254c2$var$dist","i0x","i0y","i4","i1x","i1y","minRadius","i5","$70edea87a85254c2$var$circumradius","i2x","i2y","$70edea87a85254c2$var$quicksort","hull","i8","d0","triangles","halfedges","ex","ey","cl","$70edea87a85254c2$var$circumcenter","_cx","_cy","i6","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","_legalize","i7","$70edea87a85254c2$var$pseudoAngle","ar","al","pr","pl","$70edea87a85254c2$var$inCircle","hbl","_link","br","px","py","fx","fy","bp","cp","ids","dists","temp","tempDist","$70edea87a85254c2$var$swap","arr","tmp","$2aef1c41b22bee3b$export$2e2bcd8739ae039","$40cb11f76cb02c56$export$2e2bcd8739ae039","$7255a684e7c13e05$export$2e2bcd8739ae039","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","x3","y3","ab","sign","render","inedges","ti","tj","_renderSegment","h0","h1","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","c0","_regioncode","c1","_clipSegment","_step","neighbors","ci","cj","loop","ai","li","aj","lj","_cell","_clipInfinite","_clipFinite","P","sx0","sy0","sx1","sy1","_edgecode","_edge","vx0","vy0","vxn","vyn","vx","vy","$ccf8c12920069fbd$var$tau","$ccf8c12920069fbd$var$pow","$ccf8c12920069fbd$var$pointX","$ccf8c12920069fbd$var$pointY","$ccf8c12920069fbd$var$jitter","$ccf8c12920069fbd$export$2e2bcd8739ae039","$ccf8c12920069fbd$var$flatArray","$ccf8c12920069fbd$var$flatIterable","_delaunator","_hullIndex","$ccf8c12920069fbd$var$collinear","collinear","bounds","hypot","hullIndex","voronoi","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","trianglePolygons","trianglePolygon","$da9f1d0b98e1d19a$var$EOL","$da9f1d0b98e1d19a$var$EOF","$da9f1d0b98e1d19a$var$objectConverter","columns","Function","stringify","$da9f1d0b98e1d19a$var$inferColumns","rows","columnSet","column","$da9f1d0b98e1d19a$var$pad","$da9f1d0b98e1d19a$var$formatDate","date","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","$da9f1d0b98e1d19a$export$2e2bcd8739ae039","delimiter","reFormat","DELIMITER","charCodeAt","parseRows","eof","eol","token","replace","preformatBody","formatValue","formatRow","convert","object","$da9f1d0b98e1d19a$var$customConverter","formatBody","formatRows","$e989978fabb69dc0$var$csv","$e989978fabb69dc0$export$289d25497b0f4c16","$e989978fabb69dc0$export$c82550ca942d869","$e989978fabb69dc0$export$afe767551074aa08","$e989978fabb69dc0$export$b46fa59a5e3bc8a2","$e989978fabb69dc0$export$3f42a65843fbd1d9","$e989978fabb69dc0$export$c30212b87b2d080f","$e989978fabb69dc0$export$2771de09a60fc648","$eb4983181a99ad22$var$tsv","$eb4983181a99ad22$export$f913251db2f734ee","$eb4983181a99ad22$export$8de3b5abc40a067f","$eb4983181a99ad22$export$77e754c4f8504293","$eb4983181a99ad22$export$9d44987d460c9cb3","$eb4983181a99ad22$export$ae461973f6adc981","$eb4983181a99ad22$export$5d61cf35a4a738d2","$eb4983181a99ad22$export$4280e6a416cd92a3","$0b55a96f8e46a2ae$export$2e2bcd8739ae039","number","$0b55a96f8e46a2ae$var$fixtz","getHours","$4e3d46555264b645$var$responseBlob","response","ok","status","statusText","blob","$4e3d46555264b645$export$2e2bcd8739ae039","init","fetch","then","$b6490c40b83516fa$var$responseArrayBuffer","arrayBuffer","$b6490c40b83516fa$export$2e2bcd8739ae039","$da5fa16673f32559$var$responseText","$da5fa16673f32559$export$2e2bcd8739ae039","$3cf83c8bf9fa611f$var$dsvParse","$3cf83c8bf9fa611f$export$2e2bcd8739ae039","$3cf83c8bf9fa611f$export$901ba78aa04f49da","$3cf83c8bf9fa611f$export$580b2de76423ff18","$cb37cbcf951e868e$export$2e2bcd8739ae039","image","Image","onerror","onload","src","$2e3d422b625f0291$var$responseJson","json","$2e3d422b625f0291$export$2e2bcd8739ae039","$fb66c851eb4dc391$var$parser","DOMParser","parseFromString","$fb66c851eb4dc391$export$2e2bcd8739ae039","$fb66c851eb4dc391$export$c0bb0b647f701bb5","$fb66c851eb4dc391$export$7ed1367e7fa1ad68","$32b22de0132cc595$export$2e2bcd8739ae039","strength","force","sx","sy","$be1b12895c7da8cf$var$add","tree","xm","ym","bottom","_root","leaf","_x","_y","$75f49fd5af8d23e7$export$2e2bcd8739ae039","$e002de94352e4f40$export$e6fafc98131d2a44","$6a00482922687876$export$6f0a21aeb844a64c","$977cc0295d3f184c$export$2e2bcd8739ae039","$977cc0295d3f184c$var$Quadtree","addAll","$977cc0295d3f184c$var$leaf_copy","$977cc0295d3f184c$var$treeProto","$b10509a5c523ef79$export$2e2bcd8739ae039","$2dea4bbaea189065$export$2e2bcd8739ae039","$bdd28c4fe1fd882d$var$x","$bdd28c4fe1fd882d$var$y","$bdd28c4fe1fd882d$export$2e2bcd8739ae039","radii","iterations","ri","ri2","visitAfter","prepare","visit","quad","rj","_nodes","_random","$4275f440a0eccb35$var$index","$4275f440a0eccb35$var$find","nodeById","nodeId","$4275f440a0eccb35$export$2e2bcd8739ae039","links","strengths","distances","bias","link","distance","alpha","initializeStrength","initializeDistance","cover","yz","quads","retainer","removeAll","$f7ecda670cf68ae1$export$d141bba7fdc215a3","$f7ecda670cf68ae1$export$4a5767248b18ef41","$f7ecda670cf68ae1$var$initialAngle","$f7ecda670cf68ae1$export$2e2bcd8739ae039","simulation","alphaMin","alphaDecay","alphaTarget","velocityDecay","forces","stepper","$2a41329dd990bdd6$export$2e2bcd8739ae039","initializeNodes","angle","initializeForce","randomSource","closest","$6b6e9bc7f2e1a0ee$export$2e2bcd8739ae039","node1","strength1","distanceMin2","distanceMax2","theta2","accumulate","distanceMin","distanceMax","theta","$6f671e8f12d94cfe$export$2e2bcd8739ae039","radiuses","$0269baf63e02b6fc$export$2e2bcd8739ae039","$a8abf7da4ed52888$export$2e2bcd8739ae039","$0e9bdd5fefd6a5f6$export$8f8e23dd27dc19f5","toExponential","coefficient","$1589426e0436f502$export$2e2bcd8739ae039","$fe491ef31c379765$export$6863724d9a42263","$d5828d241e6c1f75$var$re","$d5828d241e6c1f75$export$2e2bcd8739ae039","specifier","$d5828d241e6c1f75$export$963aac351db36ed4","align","symbol","zero","comma","precision","$458fe095863893c0$export$2e2bcd8739ae039","$03e2e7837f70dba5$export$2e2bcd8739ae039","toFixed","toLocaleString","toPrecision","X","toUpperCase","$1bc532601db445af$export$2e2bcd8739ae039","$54a757fa53542946$var$locale","$54a757fa53542946$export$d9468344d3651243","$54a757fa53542946$export$8d85692a469dde6f","$e8b109bb95cf9845$var$map","$e8b109bb95cf9845$var$prefixes","$e8b109bb95cf9845$export$2e2bcd8739ae039","locale","grouping","thousands","Number","substring","currencyPrefix","currency","currencySuffix","decimal","numerals","$95e9c493347f9308$export$2e2bcd8739ae039","String","percent","minus","nan","newFormat","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","$dd689cef4c920567$export$2e2bcd8739ae039","padding","formatPrefix","$54a757fa53542946$export$2e2bcd8739ae039","$f4e256a3cb9c44da$export$2e2bcd8739ae039","$162912dc121d0934$export$2e2bcd8739ae039","$d27f2d3c2137f747$export$2e2bcd8739ae039","$670604c4306869d0$export$18c7bea995a110f","$670604c4306869d0$export$e51408a300e8929a","$670604c4306869d0$export$c39a5cba78ea0fc2","$670604c4306869d0$export$a4b4b4d4d776fe92","$670604c4306869d0$export$41fc368e1a942b97","$670604c4306869d0$export$8449e153fbd325fc","$670604c4306869d0$export$2335f513bbd82c6d","$670604c4306869d0$export$628dc4eed22b0fbd","$670604c4306869d0$export$b8b770ee6a0d9760","$670604c4306869d0$export$50d414a77b60d802","$670604c4306869d0$export$803ce6b71a0a94b2","$670604c4306869d0$export$b310ec824aaee37f","$670604c4306869d0$export$f95c7888b62f8e9a","$670604c4306869d0$export$bef1f36f5486a6a3","$670604c4306869d0$export$9c297f60e22e3389","$670604c4306869d0$export$5de3937cb4b592ed","$670604c4306869d0$export$c5552dfdbc7cec71","$670604c4306869d0$export$eba8049fb5020b81","$670604c4306869d0$export$fcdd3b0b3246a325","$670604c4306869d0$export$fd6306be3fde5b04","$670604c4306869d0$export$41726bdb1fc63f","$670604c4306869d0$export$e808712c2966e662","$f233d25ba5a1175b$export$2e2bcd8739ae039","$f64eb890237a613b$var$streamGeometry","stream","$f64eb890237a613b$var$streamGeometryType","$f64eb890237a613b$var$streamObjectType","Feature","FeatureCollection","features","Sphere","sphere","Point","MultiPoint","LineString","$f64eb890237a613b$var$streamLine","MultiLineString","Polygon","$f64eb890237a613b$var$streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","$f64eb890237a613b$export$2e2bcd8739ae039","$6aa5b11c7f6dd542$var$lambda00","$6aa5b11c7f6dd542$var$phi00","$6aa5b11c7f6dd542$var$lambda0","$6aa5b11c7f6dd542$var$cosPhi0","$6aa5b11c7f6dd542$var$sinPhi0","$483b84b7680c23fd$var$lambda0","$483b84b7680c23fd$var$phi0","$483b84b7680c23fd$var$lambda1","$483b84b7680c23fd$var$phi1","$483b84b7680c23fd$var$lambda2","$483b84b7680c23fd$var$lambda00","$483b84b7680c23fd$var$phi00","$483b84b7680c23fd$var$p0","$483b84b7680c23fd$var$deltaSum","$483b84b7680c23fd$var$ranges","$483b84b7680c23fd$var$range","$6aa5b11c7f6dd542$export$bf8f994332070c7f","$6aa5b11c7f6dd542$var$areaSum","$6aa5b11c7f6dd542$export$cb67cfa750ae69dc","$6aa5b11c7f6dd542$var$areaRingStart","$6aa5b11c7f6dd542$var$areaRingEnd","areaRing","$6aa5b11c7f6dd542$var$areaPointFirst","$6aa5b11c7f6dd542$var$areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","$6aa5b11c7f6dd542$export$2e2bcd8739ae039","$36ccb64133f7e1ee$export$12f9ad44fe773943","$36ccb64133f7e1ee$export$6e6697ef026a96","$36ccb64133f7e1ee$export$2ef80f51436a9de9","$36ccb64133f7e1ee$export$4763f5351b14293f","$36ccb64133f7e1ee$export$e62eba72fc898eae","$36ccb64133f7e1ee$export$52d0ee3fc868d452","vector","$36ccb64133f7e1ee$export$6789498aec2cb34b","$ebe8e4fbe3a74a06$var$W0","$ebe8e4fbe3a74a06$var$W1","$ebe8e4fbe3a74a06$var$X0","$ebe8e4fbe3a74a06$var$Y0","$ebe8e4fbe3a74a06$var$Z0","$ebe8e4fbe3a74a06$var$X1","$ebe8e4fbe3a74a06$var$Y1","$ebe8e4fbe3a74a06$var$Z1","$ebe8e4fbe3a74a06$var$X2","$ebe8e4fbe3a74a06$var$Y2","$ebe8e4fbe3a74a06$var$Z2","$ebe8e4fbe3a74a06$var$lambda00","$ebe8e4fbe3a74a06$var$phi00","$ebe8e4fbe3a74a06$var$x0","$ebe8e4fbe3a74a06$var$y0","$ebe8e4fbe3a74a06$var$z0","$483b84b7680c23fd$var$boundsStream","$483b84b7680c23fd$var$boundsPoint","$483b84b7680c23fd$var$boundsLineStart","$483b84b7680c23fd$var$boundsLineEnd","$483b84b7680c23fd$var$boundsRingPoint","$483b84b7680c23fd$var$boundsRingStart","$483b84b7680c23fd$var$boundsRingEnd","$483b84b7680c23fd$var$linePoint","normal","inflection","phii","lambdai","antimeridian","$483b84b7680c23fd$var$angle","lambda0","lambda1","$483b84b7680c23fd$var$rangeCompare","$483b84b7680c23fd$var$rangeContains","$483b84b7680c23fd$export$2e2bcd8739ae039","feature","merged","deltaMax","$ebe8e4fbe3a74a06$var$centroidStream","$ebe8e4fbe3a74a06$var$centroidPoint","$ebe8e4fbe3a74a06$var$centroidLineStart","$ebe8e4fbe3a74a06$var$centroidLineEnd","$ebe8e4fbe3a74a06$var$centroidRingStart","$ebe8e4fbe3a74a06$var$centroidRingEnd","$ebe8e4fbe3a74a06$var$centroidPointCartesian","$ebe8e4fbe3a74a06$var$centroidLinePointFirst","$ebe8e4fbe3a74a06$var$centroidLinePoint","$ebe8e4fbe3a74a06$var$centroidRingPointFirst","$ebe8e4fbe3a74a06$var$centroidRingPoint","cz","$ebe8e4fbe3a74a06$export$2e2bcd8739ae039","$b8847947ca497f4e$export$2e2bcd8739ae039","$2f457a25c4f4f64a$export$2e2bcd8739ae039","compose","invert","$f7d73791d6cf97d0$var$rotationIdentity","$f7d73791d6cf97d0$export$a2ba89726971a90f","deltaLambda","deltaPhi","deltaGamma","$f7d73791d6cf97d0$var$rotationLambda","$f7d73791d6cf97d0$var$rotationPhiGamma","$f7d73791d6cf97d0$var$forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","$f7d73791d6cf97d0$export$2e2bcd8739ae039","forward","$d53290674478fba6$export$b5441eb324cd8d4e","direction","cosRadius","sinRadius","$d53290674478fba6$var$circleRadius","$d53290674478fba6$export$2e2bcd8739ae039","circle","$2f42e5268a6797f5$export$2e2bcd8739ae039","lines","rejoin","result","$f3f0691eeedc9e29$export$2e2bcd8739ae039","$b2af5411bf749438$var$Intersection","entry","$b2af5411bf749438$export$2e2bcd8739ae039","segments","compareIntersection","startInside","clip","segment","$b2af5411bf749438$var$link","current","isSubject","$3befe798acd13223$var$longitude","$3befe798acd13223$export$2e2bcd8739ae039","winding","phi0","sinPhi0","cosPhi0","sinPhi1","cosPhi1","point1","phi1","absDelta","intersection","phiArc","$fbd6c74debefbf49$export$2e2bcd8739ae039","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","$fbd6c74debefbf49$var$compareIntersection","pointLine","ringSegments","$fbd6c74debefbf49$var$validSegment","$6887d3a2b3b1b107$export$2e2bcd8739ae039","sign0","sign1","sinLambda0Lambda1","$6887d3a2b3b1b107$var$clipAntimeridianIntersect","to","$24a437a45f982759$export$2e2bcd8739ae039","cr","delta1","smallRadius","notHemisphere","visible","intersect","two","n2","n2n2","n1n2","determinant","c2","n1xn2","A","uu","polar","q1","code1","code","v00","point2","$04b2d10238c6a44a$var$lengthSum","$04b2d10238c6a44a$var$lambda0","$04b2d10238c6a44a$var$sinPhi0","$04b2d10238c6a44a$var$cosPhi0","$7d62d240b7fd88a7$export$2e2bcd8739ae039","visible1","corner","comparePoint","ca","cb","ring1","x__","y__","v__","x_","y_","v_","activeStream","bufferStream","clipStream","linePoint","polygonInside","cleanInside","$b55afac96a294cb9$export$2e2bcd8739ae039","$5ad07cf3cad32926$export$2e2bcd8739ae039","cache","cacheStream","$04b2d10238c6a44a$var$lengthStream","$04b2d10238c6a44a$var$lengthPointFirst","$04b2d10238c6a44a$var$lengthLineEnd","$04b2d10238c6a44a$var$lengthPoint","cosDelta","$04b2d10238c6a44a$export$2e2bcd8739ae039","$1143abd7b4bdf4a0$var$coordinates","$1143abd7b4bdf4a0$var$object","$1143abd7b4bdf4a0$export$2e2bcd8739ae039","$ebfdf142729ef2d5$var$containsObjectType","$ebfdf142729ef2d5$var$containsGeometry","$ebfdf142729ef2d5$var$containsGeometryType","$ebfdf142729ef2d5$var$containsPoint","$ebfdf142729ef2d5$var$containsLine","$ebfdf142729ef2d5$var$containsPolygon","ao","bo","$ebfdf142729ef2d5$var$ringRadians","$ebfdf142729ef2d5$var$pointRadians","$ebfdf142729ef2d5$export$2e2bcd8739ae039","$d9594d9be57d8b1a$var$graticuleX","$d9594d9be57d8b1a$var$graticuleY","$d9594d9be57d8b1a$export$2e2bcd8739ae039","X1","X0","Y1","Y0","Y","DX","DY","outline","extentMajor","extentMinor","stepMajor","stepMinor","$d9594d9be57d8b1a$export$b8db4e9403a5b6f1","$f1eb1080d4add1b6$export$2e2bcd8739ae039","cy0","cy1","kx0","ky0","kx1","ky1","B","$aac5fcedac7c8011$var$x00","$aac5fcedac7c8011$var$y00","$aac5fcedac7c8011$var$x0","$aac5fcedac7c8011$var$y0","$523470b6dc0fb943$export$2e2bcd8739ae039","$aac5fcedac7c8011$var$areaSum","$aac5fcedac7c8011$var$areaRingSum","$aac5fcedac7c8011$var$areaStream","$aac5fcedac7c8011$var$areaRingStart","$aac5fcedac7c8011$var$areaRingEnd","$aac5fcedac7c8011$var$areaPointFirst","$aac5fcedac7c8011$var$areaPoint","$aac5fcedac7c8011$export$2e2bcd8739ae039","$efdab2656f7d9ccc$var$x0","$efdab2656f7d9ccc$var$y0","$efdab2656f7d9ccc$var$x1","$efdab2656f7d9ccc$var$y1","$8d0804faef1e75f0$var$x00","$8d0804faef1e75f0$var$y00","$8d0804faef1e75f0$var$x0","$8d0804faef1e75f0$var$y0","$efdab2656f7d9ccc$export$2e2bcd8739ae039","$8d0804faef1e75f0$var$X0","$8d0804faef1e75f0$var$Y0","$8d0804faef1e75f0$var$Z0","$8d0804faef1e75f0$var$X1","$8d0804faef1e75f0$var$Y1","$8d0804faef1e75f0$var$Z1","$8d0804faef1e75f0$var$X2","$8d0804faef1e75f0$var$Y2","$8d0804faef1e75f0$var$Z2","$8d0804faef1e75f0$var$centroidStream","$8d0804faef1e75f0$var$centroidPoint","$8d0804faef1e75f0$var$centroidLineStart","$8d0804faef1e75f0$var$centroidLineEnd","$8d0804faef1e75f0$var$centroidRingStart","$8d0804faef1e75f0$var$centroidRingEnd","centroid","$8d0804faef1e75f0$var$centroidPointFirstLine","$8d0804faef1e75f0$var$centroidPointLine","$8d0804faef1e75f0$var$centroidPointFirstRing","$8d0804faef1e75f0$var$centroidPointRing","$8d0804faef1e75f0$export$2e2bcd8739ae039","$bc272bd0e70c3e89$export$2e2bcd8739ae039","_context","_radius","pointRadius","_line","_point","$9d42a1f4ad2437ef$var$lengthRing","$9d42a1f4ad2437ef$var$x00","$9d42a1f4ad2437ef$var$y00","$9d42a1f4ad2437ef$var$x0","$9d42a1f4ad2437ef$var$y0","$9d42a1f4ad2437ef$var$lengthSum","$9d42a1f4ad2437ef$var$lengthStream","$9d42a1f4ad2437ef$var$lengthPointFirst","$9d42a1f4ad2437ef$var$lengthPoint","$9d42a1f4ad2437ef$export$2e2bcd8739ae039","$eeca8dbd32c6e6b7$export$2e2bcd8739ae039","_string","$eeca8dbd32c6e6b7$var$circle","$58c46562f4a8d739$export$2e2bcd8739ae039","projection","projectionStream","contextStream","measure","$0412b2d170387dff$export$2e2bcd8739ae039","methods","$0412b2d170387dff$export$6b468dcfb64c653c","$0412b2d170387dff$var$TransformStream","$f635eb16c9b15b07$var$fit","fitBounds","clipExtent","$f635eb16c9b15b07$export$e450184041869e7f","$f635eb16c9b15b07$export$33a367fa1728c3ba","$f635eb16c9b15b07$export$7d8f2192ef31c5a7","$f635eb16c9b15b07$export$7069bab0d2ced675","_circle","$64af1b85c5f97f77$var$cosMinDistance","$64af1b85c5f97f77$export$2e2bcd8739ae039","project","delta2","resampleLineTo","depth","phi2","lambda2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","$64af1b85c5f97f77$var$resample","$64af1b85c5f97f77$var$resampleNone","$5ee116a807460c55$var$transformRadians","$5ee116a807460c55$var$scaleTranslateRotate","$5ee116a807460c55$var$scaleTranslate","cosAlpha","sinAlpha","fi","$5ee116a807460c55$export$2e2bcd8739ae039","$5ee116a807460c55$export$155d5a6fa6fddeba","projectAt","projectResample","projectTransform","projectRotateTransform","preclip","postclip","recenter","reset","$5ee116a807460c55$var$transformRotate","clipAngle","reflectX","reflectY","fitExtent","fitSize","fitWidth","fitHeight","$91fc065f2c677322$export$228272587c4d24d8","parallels","$be3cbe5874066802$export$75409dad1c406288","$5474082c8e90dfac$export$ae68c6db8b65046a","r0y","$be3cbe5874066802$export$2e2bcd8739ae039","$189dcd4c41cb3d8a$export$2e2bcd8739ae039","$dae3a16b5ba78504$export$2e2bcd8739ae039","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","$8549f9238ecb0bb6$export$f1211ac1bdb0796","$8549f9238ecb0bb6$export$3cee429f13e44eac","sc","cc","$cde1dad42250dd7d$export$5e11f94fc4a8d2c6","cxcy","$cde1dad42250dd7d$export$2e2bcd8739ae039","$7a9894a70b3e10e2$export$b94a4d6aa3dd25c","$7a9894a70b3e10e2$export$2e2bcd8739ae039","$ff090f04ba81e8e2$export$94ff8a57e9b91cc3","$ff090f04ba81e8e2$export$2e2bcd8739ae039","$ff090f04ba81e8e2$export$44b9b66a01f2127b","reclip","$c71ea640260518ba$var$tany","$c71ea640260518ba$export$2b1bc913962ed170","$c71ea640260518ba$export$2e2bcd8739ae039","$b150c6d84b26cddf$export$f5fee52180f2f058","$b150c6d84b26cddf$export$2e2bcd8739ae039","$d8f5b846585bb1cd$export$24f604fe80e5f192","gy","nx","$d8f5b846585bb1cd$export$2e2bcd8739ae039","$fc041bd5ad9011bc$var$M","$fc041bd5ad9011bc$export$a320734067e7a731","l2","l6","$fc041bd5ad9011bc$export$2e2bcd8739ae039","$ec357a35bfb88504$export$dc8c6ddfc8b22c85","$ec357a35bfb88504$export$2e2bcd8739ae039","$15e2e8eada86334f$export$2e2bcd8739ae039","sa","tx","ty","kx","ky","$e77a13f6018ce2d0$export$acb6def22fe878e6","phi4","$e77a13f6018ce2d0$export$2e2bcd8739ae039","$5bed72effbe81a9c$export$1cd9c2eb846182a","$5bed72effbe81a9c$export$2e2bcd8739ae039","$30512e786dc906d9$export$f9ccbb0dcb3dcd2b","$30512e786dc906d9$export$2e2bcd8739ae039","$75766842dfa94e14$export$e84942adec6de533","$75766842dfa94e14$export$2e2bcd8739ae039","$72960a09a94aecc9$var$defaultSeparation","$72960a09a94aecc9$var$meanXReduce","$72960a09a94aecc9$var$maxYReduce","$72960a09a94aecc9$export$2e2bcd8739ae039","separation","nodeSize","cluster","previousNode","eachAfter","$72960a09a94aecc9$var$meanX","$72960a09a94aecc9$var$maxY","$72960a09a94aecc9$var$leafLeft","$72960a09a94aecc9$var$leafRight","$06713b77db0b884a$var$count","$9a60c0761eaba32b$export$2e2bcd8739ae039","$9a60c0761eaba32b$var$mapChildren","$9a60c0761eaba32b$var$objectChildren","childs","$9a60c0761eaba32b$export$85c928794f8d04d4","eachBefore","$9a60c0761eaba32b$export$5af32d52ab5dfd57","$9a60c0761eaba32b$var$copyData","$90128989f18a9a47$export$516e28dec6a4b6d4","$90128989f18a9a47$export$a7a0278c004aac3f","$4ecbd2dc481264b5$export$99e2e371aa6a9db","$4ecbd2dc481264b5$export$2e2bcd8739ae039","ancestor","aNodes","ancestors","bNodes","$b87aaeb3b6fa0399$var$leastCommonAncestor","descendants","leaves","$a2ff0f94b9ee8fb6$export$2e2bcd8739ae039","$ea1b36d15ec8a0dd$export$2e2bcd8739ae039","circles","$ea1b36d15ec8a0dd$export$55712536b4d8ce73","$b99145bc2d4353db$export$448332262467e042","$ea1b36d15ec8a0dd$var$enclosesWeak","$ea1b36d15ec8a0dd$var$encloseBasis","$ea1b36d15ec8a0dd$var$extendBasis","$ea1b36d15ec8a0dd$var$enclosesWeakAll","$ea1b36d15ec8a0dd$var$enclosesNot","$ea1b36d15ec8a0dd$var$encloseBasis2","$ea1b36d15ec8a0dd$var$encloseBasis3","dr","r2","r21","r3","b2","b3","c3","d3","C","$6594768d72e976ec$var$place","$6594768d72e976ec$var$intersects","$6594768d72e976ec$var$score","$6594768d72e976ec$var$Node","$6594768d72e976ec$export$5390336473d877c8","aa","sj","sk","pack","$6594768d72e976ec$export$2e2bcd8739ae039","$2c146828ae9cce7b$var$defaultRadius","$2c146828ae9cce7b$export$2e2bcd8739ae039","$2c146828ae9cce7b$var$radiusLeaf","$2c146828ae9cce7b$var$packChildrenRandom","$2c146828ae9cce7b$var$translateChild","$aed60e160d4ee5c0$export$2e2bcd8739ae039","$41d50c80388e33d8$export$2e2bcd8739ae039","$33157bf754db4825$export$2e2bcd8739ae039","dy1","partition","positionNode","$380ae89231a1c1f0$var$preroot","$380ae89231a1c1f0$var$ambiguous","$380ae89231a1c1f0$var$imputed","$380ae89231a1c1f0$var$defaultId","$380ae89231a1c1f0$var$defaultParentId","parentId","$380ae89231a1c1f0$export$2e2bcd8739ae039","stratify","nodeKey","currentId","currentParentId","nodeByKey","$380ae89231a1c1f0$var$slash","$380ae89231a1c1f0$var$normalize","$380ae89231a1c1f0$var$parentof","$5dd6fb578301fa88$var$defaultSeparation","$5dd6fb578301fa88$var$nextLeft","$5dd6fb578301fa88$var$nextRight","$5dd6fb578301fa88$var$moveSubtree","wm","wp","change","$5dd6fb578301fa88$var$nextAncestor","vim","$5dd6fb578301fa88$var$TreeNode","$5dd6fb578301fa88$export$2e2bcd8739ae039","$5dd6fb578301fa88$var$treeRoot","firstWalk","secondWalk","sizeNode","siblings","$5dd6fb578301fa88$var$executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","$e510cc16795bdea9$export$2e2bcd8739ae039","$b59b7ec66acd2122$export$324943737027944a","$b59b7ec66acd2122$export$9ff1217655212093","ratio","nodeValue","sumValue","newRatio","minRatio","beta","dice","$b59b7ec66acd2122$export$2e2bcd8739ae039","squarify","$eaa8edfadbfdf0f7$export$2e2bcd8739ae039","tile","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","treemap","paddingOuter","$db77ef44c1b1abd6$export$2e2bcd8739ae039","x11","y11","sums","valueOffset","valueTarget","valueLeft","valueRight","xk","yk","$4cdb51c023cf32ea$export$2e2bcd8739ae039","$7d7ebb8fcbd38e77$export$2e2bcd8739ae039","resquarify","_squarify","$deaab42f8ba89893$export$2e2bcd8739ae039","$e647516d223f0095$export$2e2bcd8739ae039","$061b6e9b6f8eb82d$var$lexicographicOrder","$061b6e9b6f8eb82d$var$computeUpperHullIndexes","indexes","$061b6e9b6f8eb82d$export$2e2bcd8739ae039","sortedPoints","flippedPoints","upperIndexes","lowerIndexes","skipLeft","skipRight","$909fc8bab4d5ea35$export$2e2bcd8739ae039","inside","$0cd8c52cc110161f$export$2e2bcd8739ae039","perimeter","$47e50bac224ef074$export$2e2bcd8739ae039","$6f2138f117e664d5$export$2e2bcd8739ae039","sourceRandomUniform","randomUniform","$cce324d019e80e63$export$2e2bcd8739ae039","sourceRandomInt","randomInt","$84a8341e7a81af75$export$2e2bcd8739ae039","sourceRandomNormal","randomNormal","mu","sigma","$b55220c14c05b678$export$2e2bcd8739ae039","sourceRandomLogNormal","randomLogNormal","$239f1e07ebca197f$export$2e2bcd8739ae039","sourceRandomIrwinHall","randomIrwinHall","$ec31e64bd24fe1c3$export$2e2bcd8739ae039","sourceRandomBates","randomBates","$82c98442936778b2$export$2e2bcd8739ae039","sourceRandomExponential","randomExponential","log1p","$60171e9cac65c5e1$export$2e2bcd8739ae039","sourceRandomPareto","randomPareto","RangeError","$13367c09e2c8c99b$export$2e2bcd8739ae039","sourceRandomBernoulli","randomBernoulli","$f24477a6937e046c$export$2e2bcd8739ae039","sourceRandomGeometric","randomGeometric","$ac591d038f437b3d$export$2e2bcd8739ae039","sourceRandomGamma","randomGamma","multiplier","$a230a5e9d2cb8df9$export$2e2bcd8739ae039","sourceRandomBeta","G","randomBeta","$c99ad4cc56366c49$export$2e2bcd8739ae039","sourceRandomBinomial","randomBinomial","acc","nn","pp","$b46f5c685343eb72$export$2e2bcd8739ae039","sourceRandomWeibull","randomWeibull","outerFunc","$4ac13d60ee4ab12c$export$2e2bcd8739ae039","sourceRandomCauchy","randomCauchy","$cc20134327df03f7$export$2e2bcd8739ae039","sourceRandomLogistic","randomLogistic","$55aa7f6e5b96a11a$export$2e2bcd8739ae039","sourceRandomPoisson","randomPoisson","$e8a0bfad26e955e5$export$2e2bcd8739ae039","seed","$5b694e64f5326630$export$23c7bb9e6558da2a","$5b694e64f5326630$export$7d6b419e59e83f3d","$38404d762c7ac827$export$e4f898ab14d9d460","$38404d762c7ac827$export$2e2bcd8739ae039","unknown","$c1f2fa2a7653ca3a$export$2e2bcd8739ae039","ordinalRange","rescale","rangeRound","$c1f2fa2a7653ca3a$var$pointish","$c1f2fa2a7653ca3a$export$105684a3041cb6f3","$6cab7aea8ef8b40b$export$2e2bcd8739ae039","$afe237385175446a$var$unit","$afe237385175446a$export$f0954fd7d5368655","$afe237385175446a$var$normalize","$afe237385175446a$var$bimap","$afe237385175446a$var$polymap","$afe237385175446a$export$784d13d8ee351f07","$afe237385175446a$export$6b468dcfb64c653c","untransform","piecewise","$afe237385175446a$export$2e2bcd8739ae039","$b0a07d06c8b316c1$export$2e2bcd8739ae039","$db1dd3c66a0cbf94$export$16a5d4b4a61a274d","nice","maxIter","$db1dd3c66a0cbf94$export$2e2bcd8739ae039","$dcfca0550ace1fe6$export$2e2bcd8739ae039","$0c42deabcdb569d9$export$2e2bcd8739ae039","interval","$5bf2f979a0299157$var$transformLog","$5bf2f979a0299157$var$transformExp","$5bf2f979a0299157$var$transformLogn","$5bf2f979a0299157$var$transformExpn","$5bf2f979a0299157$var$pow10","$5bf2f979a0299157$var$reflect","$5bf2f979a0299157$export$860836db074028f0","logs","pows","base","log10","log2","$5bf2f979a0299157$var$logp","$5bf2f979a0299157$var$powp","$5bf2f979a0299157$export$2e2bcd8739ae039","$cb758ed0dff37844$var$transformSymlog","$cb758ed0dff37844$var$transformSymexp","expm1","$cb758ed0dff37844$export$4602684e614eba38","constant","$cb758ed0dff37844$export$2e2bcd8739ae039","$d97c146f4f811488$var$transformPow","$d97c146f4f811488$var$transformSqrt","$d97c146f4f811488$var$transformSquare","$d97c146f4f811488$export$34695211ec403a46","$d97c146f4f811488$export$2e2bcd8739ae039","$d97c146f4f811488$export$eba8049fb5020b81","$649799b8497b3636$var$square","$649799b8497b3636$var$unsquare","$649799b8497b3636$export$2e2bcd8739ae039","squared","$96238d247b54f1ee$export$2e2bcd8739ae039","invertExtent","quantiles","$a6fd4026648153e5$export$2e2bcd8739ae039","$8058838348a44fed$export$2e2bcd8739ae039","$f26fc9b6912de968$var$t0","$f26fc9b6912de968$var$t1","$f26fc9b6912de968$export$2e2bcd8739ae039","floori","offseti","field","$79ec6c01997bf022$var$millisecond","$79ec6c01997bf022$export$2e2bcd8739ae039","$79ec6c01997bf022$export$9a27fac83d67afd3","$490d5c36270b8fcb$var$second","getMilliseconds","$490d5c36270b8fcb$export$2e2bcd8739ae039","$490d5c36270b8fcb$export$4792e48abc550fa1","$292297f992a3b17e$var$minute","getSeconds","$a28c7a35eadfe1f6$export$79ef0e34099623dc","getMinutes","$292297f992a3b17e$export$2e2bcd8739ae039","$292297f992a3b17e$export$666252b437cce0c7","$9472e71f07850dab$var$hour","$a28c7a35eadfe1f6$export$683905d551c33fa9","$9472e71f07850dab$export$2e2bcd8739ae039","$9472e71f07850dab$export$8d468796d69cdad1","$51fe2e20810fcb40$var$day","setHours","setDate","getDate","getTimezoneOffset","$a28c7a35eadfe1f6$export$4157bf0c8e241659","$51fe2e20810fcb40$export$2e2bcd8739ae039","$51fe2e20810fcb40$export$3cf5dda4201cc0f2","$7f6029921eecd017$var$weekday","getDay","$a28c7a35eadfe1f6$export$353686095f4fbf45","$7f6029921eecd017$export$fb3ee18ed410cc21","$7f6029921eecd017$export$6416afaab03bc9b8","$7f6029921eecd017$export$cb8f040f5d17ac7b","$7f6029921eecd017$export$347581849975dfc8","$7f6029921eecd017$export$2f2b56683a3e5629","$7f6029921eecd017$export$59b8c2ccd931d806","$7f6029921eecd017$export$478ceadebff4d377","$7f6029921eecd017$export$e8daabaa40641211","$7f6029921eecd017$export$74e5b559c235c00e","$7f6029921eecd017$export$e7d6aa4fb107bc56","$7f6029921eecd017$export$fcd5880b20bb06a8","$7f6029921eecd017$export$682716b7bbe33641","$7f6029921eecd017$export$482924968ca86084","$7f6029921eecd017$export$7d755172c9cda9d2","$031c190f93ea3efa$var$month","setMonth","getMonth","getFullYear","$031c190f93ea3efa$export$2e2bcd8739ae039","$031c190f93ea3efa$export$16352d1b10c5eb38","$dd6e0f506bfbbd03$var$year","setFullYear","$dd6e0f506bfbbd03$export$2e2bcd8739ae039","$dd6e0f506bfbbd03$export$6fda41c7fb23acf9","$6790bec6cda46448$var$utcMinute","setUTCSeconds","$6790bec6cda46448$export$2e2bcd8739ae039","$6790bec6cda46448$export$cedd563624e8ee50","$2305685918ef6fca$var$utcHour","setUTCMinutes","$2305685918ef6fca$export$2e2bcd8739ae039","$2305685918ef6fca$export$6e7a76cd5f50b719","$1e9cc8da96008c84$var$utcDay","setUTCHours","setUTCDate","$1e9cc8da96008c84$export$2e2bcd8739ae039","$1e9cc8da96008c84$export$d277e198508549a1","$7055c522f3e8f599$var$utcWeekday","getUTCDay","$7055c522f3e8f599$export$4898b06303a92011","$7055c522f3e8f599$export$9cfc53b9cfafd080","$7055c522f3e8f599$export$2a6d545f77eceb15","$7055c522f3e8f599$export$a5c25d8ed64433c4","$7055c522f3e8f599$export$1db08111baec2f53","$7055c522f3e8f599$export$29265e34dd5921f7","$7055c522f3e8f599$export$85b74dad05049604","$7055c522f3e8f599$export$6f3e1c2b0f7d7880","$7055c522f3e8f599$export$1d2d8b858bb366f9","$7055c522f3e8f599$export$1d5f6785fc7f30f8","$7055c522f3e8f599$export$7a75faf0e37ef4af","$7055c522f3e8f599$export$417eb959611b2f2f","$7055c522f3e8f599$export$59d308db7af08c64","$7055c522f3e8f599$export$a124108a0a7f34c8","$8f8815fab2435516$var$utcMonth","setUTCMonth","$8f8815fab2435516$export$2e2bcd8739ae039","$8f8815fab2435516$export$49159f585997498","$997354f20ca19d0d$var$utcYear","setUTCFullYear","$997354f20ca19d0d$export$2e2bcd8739ae039","$997354f20ca19d0d$export$3e24d311e17f5802","$047ba3ec3f41562e$var$ticker","month","week","day","hour","minute","tickIntervals","tickInterval","$047ba3ec3f41562e$export$826ba5ae907e9767","$047ba3ec3f41562e$export$6262d8d056ea44c4","$047ba3ec3f41562e$export$60c76498552d28a6","$047ba3ec3f41562e$export$69511150134dd174","$463505b9d968caf4$var$localDate","H","M","L","$463505b9d968caf4$var$utcDate","UTC","$463505b9d968caf4$var$newDate","$463505b9d968caf4$export$2e2bcd8739ae039","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_weekdays","days","locale_shortWeekdays","shortDays","locale_months","months","locale_shortMonths","shortMonths","periodRe","$463505b9d968caf4$var$formatRe","periodLookup","$463505b9d968caf4$var$formatLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats1","$463505b9d968caf4$var$formatDayOfMonth","$463505b9d968caf4$var$formatMicroseconds","$463505b9d968caf4$var$formatYearISO","$463505b9d968caf4$var$formatFullYearISO","$463505b9d968caf4$var$formatHour24","$463505b9d968caf4$var$formatHour12","$463505b9d968caf4$var$formatDayOfYear","$463505b9d968caf4$var$formatMilliseconds","$463505b9d968caf4$var$formatMonthNumber","$463505b9d968caf4$var$formatMinutes","$463505b9d968caf4$var$formatUnixTimestamp","$463505b9d968caf4$var$formatUnixTimestampSeconds","$463505b9d968caf4$var$formatSeconds","$463505b9d968caf4$var$formatWeekdayNumberMonday","U","$463505b9d968caf4$var$formatWeekNumberSunday","$463505b9d968caf4$var$formatWeekNumberISO","$463505b9d968caf4$var$formatWeekdayNumberSunday","$463505b9d968caf4$var$formatWeekNumberMonday","$463505b9d968caf4$var$formatYear","$463505b9d968caf4$var$formatFullYear","Z","$463505b9d968caf4$var$formatZone","$463505b9d968caf4$var$formatLiteralPercent","utcFormats","$463505b9d968caf4$var$formatUTCDayOfMonth","$463505b9d968caf4$var$formatUTCMicroseconds","$463505b9d968caf4$var$formatUTCYearISO","$463505b9d968caf4$var$formatUTCFullYearISO","$463505b9d968caf4$var$formatUTCHour24","$463505b9d968caf4$var$formatUTCHour12","$463505b9d968caf4$var$formatUTCDayOfYear","$463505b9d968caf4$var$formatUTCMilliseconds","$463505b9d968caf4$var$formatUTCMonthNumber","$463505b9d968caf4$var$formatUTCMinutes","$463505b9d968caf4$var$formatUTCSeconds","$463505b9d968caf4$var$formatUTCWeekdayNumberMonday","$463505b9d968caf4$var$formatUTCWeekNumberSunday","$463505b9d968caf4$var$formatUTCWeekNumberISO","$463505b9d968caf4$var$formatUTCWeekdayNumberSunday","$463505b9d968caf4$var$formatUTCWeekNumberMonday","$463505b9d968caf4$var$formatUTCYear","$463505b9d968caf4$var$formatUTCFullYear","$463505b9d968caf4$var$formatUTCZone","parses","parseSpecifier","$463505b9d968caf4$var$parseDayOfMonth","$463505b9d968caf4$var$parseMicroseconds","$463505b9d968caf4$var$parseYear","$463505b9d968caf4$var$parseFullYear","$463505b9d968caf4$var$parseHour24","$463505b9d968caf4$var$parseDayOfYear","$463505b9d968caf4$var$parseMilliseconds","$463505b9d968caf4$var$parseMonthNumber","$463505b9d968caf4$var$parseMinutes","$463505b9d968caf4$var$parseQuarter","$463505b9d968caf4$var$parseUnixTimestamp","$463505b9d968caf4$var$parseUnixTimestampSeconds","$463505b9d968caf4$var$parseSeconds","$463505b9d968caf4$var$parseWeekdayNumberMonday","$463505b9d968caf4$var$parseWeekNumberSunday","$463505b9d968caf4$var$parseWeekNumberISO","$463505b9d968caf4$var$parseWeekdayNumberSunday","$463505b9d968caf4$var$parseWeekNumberMonday","$463505b9d968caf4$var$parseZone","$463505b9d968caf4$var$parseLiteralPercent","formats","pad","$463505b9d968caf4$var$pads","charAt","newParse","utcFormat","utcParse","$0a9ce0165786feda$var$locale","$0a9ce0165786feda$export$94f4d87fad5dcf9a","$0a9ce0165786feda$export$32b9cd16e1b8c8d2","$0a9ce0165786feda$export$1a08fe38f63ebbbb","$0a9ce0165786feda$export$3edae9cf8e233729","$463505b9d968caf4$var$numberRe","$463505b9d968caf4$var$percentRe","$463505b9d968caf4$var$requoteRe","$463505b9d968caf4$var$pad","$463505b9d968caf4$var$requote","$463505b9d968caf4$var$dISO","dow","$463505b9d968caf4$var$UTCdISO","$0a9ce0165786feda$export$2e2bcd8739ae039","$33cd1bbab5277664$export$2e2bcd8739ae039","toISOString","$a83cd7f3979a4bad$export$2e2bcd8739ae039","$304372357472b2a4$var$date","$304372357472b2a4$var$number","$304372357472b2a4$export$56bbcdb8aca31149","second","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","formatMonth","formatYear","$304372357472b2a4$export$2e2bcd8739ae039","$f4e8dbe80a3143de$export$2e2bcd8739ae039","$f9c43af42f8b19e4$var$transformer","k10","$f9c43af42f8b19e4$export$784d13d8ee351f07","$f9c43af42f8b19e4$export$2e2bcd8739ae039","$f9c43af42f8b19e4$export$6843e08bf2ff981f","$f9c43af42f8b19e4$export$9d4af4de62c81941","$f9c43af42f8b19e4$export$de9f78581b4f2405","$f9c43af42f8b19e4$export$413d935127ed466e","$52fcf35202383c14$export$2e2bcd8739ae039","$19e76371916c670d$var$transformer","k21","$19e76371916c670d$export$2e2bcd8739ae039","$19e76371916c670d$export$5f0266a9159c47fb","$19e76371916c670d$export$50b3da713cf557c6","$19e76371916c670d$export$d6cedcc63bf26e7e","$19e76371916c670d$export$33ddefb5c4ab9e9c","$fe769d98421e6dac$export$2e2bcd8739ae039","$b0a93f4c47fccf6f$export$2e2bcd8739ae039","$5c89bc3d03077aec$export$2e2bcd8739ae039","$8720e88c6715774d$export$2e2bcd8739ae039","$892d66d4b4370fa9$export$2e2bcd8739ae039","$8b74c2f853351d4b$export$2e2bcd8739ae039","$21804f83495238ab$export$2e2bcd8739ae039","$067ed124de63e363$export$2e2bcd8739ae039","$0b28fee23808bb16$export$2e2bcd8739ae039","$2c32d07a5d4299df$export$2e2bcd8739ae039","$4fe0d67c4ca00f70$export$2e2bcd8739ae039","$c38bc04632290fce$export$2e2bcd8739ae039","scheme","$923009811f34a285$export$3005042704f95a69","$923009811f34a285$export$2e2bcd8739ae039","$bebec87caf5c9753$export$3005042704f95a69","$bebec87caf5c9753$export$2e2bcd8739ae039","$cd2b06ef8006df98$export$3005042704f95a69","$cd2b06ef8006df98$export$2e2bcd8739ae039","$fa43973b0e53adde$export$3005042704f95a69","$fa43973b0e53adde$export$2e2bcd8739ae039","$459633cf9cf535bb$export$3005042704f95a69","$459633cf9cf535bb$export$2e2bcd8739ae039","$d593cda9522f5e9b$export$3005042704f95a69","$d593cda9522f5e9b$export$2e2bcd8739ae039","$cc75fec219df38fc$export$3005042704f95a69","$cc75fec219df38fc$export$2e2bcd8739ae039","$34bd5cca956fffae$export$3005042704f95a69","$34bd5cca956fffae$export$2e2bcd8739ae039","$9f2dc97368c5eb16$export$3005042704f95a69","$9f2dc97368c5eb16$export$2e2bcd8739ae039","$1346c9d2a50a7688$export$3005042704f95a69","$1346c9d2a50a7688$export$2e2bcd8739ae039","$c6eb5bbbe1fe33f2$export$3005042704f95a69","$c6eb5bbbe1fe33f2$export$2e2bcd8739ae039","$54d7f7dcce705495$export$3005042704f95a69","$54d7f7dcce705495$export$2e2bcd8739ae039","$eeccadfeb064b2e3$export$3005042704f95a69","$eeccadfeb064b2e3$export$2e2bcd8739ae039","$256ade4440a037db$export$3005042704f95a69","$256ade4440a037db$export$2e2bcd8739ae039","$378e987a98dccf42$export$3005042704f95a69","$378e987a98dccf42$export$2e2bcd8739ae039","$5387771dbbae7a61$export$3005042704f95a69","$5387771dbbae7a61$export$2e2bcd8739ae039","$c0b866951e59a25a$export$3005042704f95a69","$c0b866951e59a25a$export$2e2bcd8739ae039","$59f93d7737a98115$export$3005042704f95a69","$59f93d7737a98115$export$2e2bcd8739ae039","$9f35832fa0e76f1c$export$3005042704f95a69","$9f35832fa0e76f1c$export$2e2bcd8739ae039","$8ba4ac8d08f3d776$export$3005042704f95a69","$8ba4ac8d08f3d776$export$2e2bcd8739ae039","$f3f63506e2889591$export$3005042704f95a69","$f3f63506e2889591$export$2e2bcd8739ae039","$145b892380fd2d31$export$3005042704f95a69","$145b892380fd2d31$export$2e2bcd8739ae039","$8f3c9c616b880108$export$3005042704f95a69","$8f3c9c616b880108$export$2e2bcd8739ae039","$7bfe5c88f8446526$export$3005042704f95a69","$7bfe5c88f8446526$export$2e2bcd8739ae039","$1d375f28523a6def$export$3005042704f95a69","$1d375f28523a6def$export$2e2bcd8739ae039","$1061f70ec19e6f6b$export$3005042704f95a69","$1061f70ec19e6f6b$export$2e2bcd8739ae039","$595eb3851ff257d2$export$3005042704f95a69","$595eb3851ff257d2$export$2e2bcd8739ae039","$9952aaaded0c8a28$export$2e2bcd8739ae039","$29d6cb6ff87ef07d$export$2e2bcd8739ae039","$99c57285242dd2ea$export$fc70efcec537be98","$99c57285242dd2ea$export$c5cedbc1ab3be2c3","$99c57285242dd2ea$var$c","$99c57285242dd2ea$export$2e2bcd8739ae039","$8a82e5e51ab56b0d$var$c","$8a82e5e51ab56b0d$var$pi_1_3","$8a82e5e51ab56b0d$var$pi_2_3","$8a82e5e51ab56b0d$export$2e2bcd8739ae039","$b6e6a61cd0d5bfcf$export$2e2bcd8739ae039","$c1e92c032cb158e3$var$ramp","$c1e92c032cb158e3$export$2e2bcd8739ae039","$c1e92c032cb158e3$export$c41e69203f572e8d","$c1e92c032cb158e3$export$ad0c8285c8ea6dbd","$c1e92c032cb158e3$export$6664860a633d9daf","$59cb0344df9474fa$export$2e2bcd8739ae039","$f0560c970166d25b$export$2335f513bbd82c6d","$f0560c970166d25b$export$b8b770ee6a0d9760","$f0560c970166d25b$export$50d414a77b60d802","$f0560c970166d25b$export$8960430cfd85939f","$f0560c970166d25b$export$96ec731ed4dcb222","$f0560c970166d25b$export$5de3937cb4b592ed","$f0560c970166d25b$export$eba8049fb5020b81","$f0560c970166d25b$export$18c7bea995a110f","$f0560c970166d25b$export$e51408a300e8929a","$f0560c970166d25b$export$a4b4b4d4d776fe92","$f0560c970166d25b$export$fd6306be3fde5b04","$f0560c970166d25b$export$41726bdb1fc63f","$b196a0c5210e8c70$var$arcInnerRadius","innerRadius","$b196a0c5210e8c70$var$arcOuterRadius","outerRadius","$b196a0c5210e8c70$var$arcStartAngle","$b196a0c5210e8c70$var$arcEndAngle","$b196a0c5210e8c70$var$arcPadAngle","$b196a0c5210e8c70$var$intersect","x10","y10","x32","y32","$b196a0c5210e8c70$var$cornerTangents","rc","ox","oy","D","cx0","cx1","dx0","dy0","dx1","$b196a0c5210e8c70$export$2e2bcd8739ae039","cornerRadius","padRadius","a01","a11","a10","da0","da1","rp","rc0","rc1","oc","kc","lc","$b1edd492c2923d6f$export$58adb3bec8346d0f","$b1edd492c2923d6f$export$2e2bcd8739ae039","$c1e9e09d9174b864$var$Linear","$c1e9e09d9174b864$export$2e2bcd8739ae039","$ebec7ab58e49c436$export$d141bba7fdc215a3","$ebec7ab58e49c436$export$4a5767248b18ef41","$3fbda81220c6ea9c$export$2e2bcd8739ae039","curve","defined0","$b654034e6c52569c$export$2e2bcd8739ae039","x0z","y0z","areaStart","areaEnd","arealine","lineX0","lineY0","lineY1","lineX1","$afcf5628442ed482$export$2e2bcd8739ae039","$b802d97edd5fe3af$export$2e2bcd8739ae039","$b3395c44b48089b3$export$2e2bcd8739ae039","sortValues","pie","arcs","pa","$da46f1219e1ec848$export$22d25ffb9fb15b6f","$da46f1219e1ec848$export$2e2bcd8739ae039","$da46f1219e1ec848$var$Radial","_curve","radial","$2a786db3fa594b9b$export$4d8815a75dc8cd4d","$2a786db3fa594b9b$export$2e2bcd8739ae039","$593a6c9db6c01801$export$2e2bcd8739ae039","lineStartAngle","lineEndAngle","lineInnerRadius","lineOuterRadius","$8bd0ba086b92e84b$export$2e2bcd8739ae039","$bf3175dc82ec4a49$var$Bump","$bf3175dc82ec4a49$var$BumpRadial","$bf3175dc82ec4a49$export$2c099b5096f70ce6","$bf3175dc82ec4a49$export$908da9dfa54cbed6","$bf3175dc82ec4a49$export$8c82a77a5061b331","$3cf76165ec7f8ace$var$linkSource","$3cf76165ec7f8ace$var$linkTarget","$3cf76165ec7f8ace$export$9c30223ca0a664fb","$3cf76165ec7f8ace$export$e7c381889b2cd14d","$3cf76165ec7f8ace$export$75de4c8c66884e04","$3cf76165ec7f8ace$export$7739cfe68d4e0799","$134055608cfdbbf1$var$sqrt3","$134055608cfdbbf1$export$2e2bcd8739ae039","draw","$77cd44e2ac6dc1c2$export$2e2bcd8739ae039","$6389eccbe795c95c$export$2e2bcd8739ae039","$42af998bb354705d$var$tan30","$42af998bb354705d$var$tan30_2","$42af998bb354705d$export$2e2bcd8739ae039","$f2564dd3ed0020e5$export$2e2bcd8739ae039","$6eee48c5df32b70c$export$2e2bcd8739ae039","$1dda04e919c4f021$export$2e2bcd8739ae039","$efaaae86227c5844$export$2e2bcd8739ae039","$4ff326387f52757d$var$kr","$4ff326387f52757d$var$kx","$4ff326387f52757d$var$ky","$4ff326387f52757d$export$2e2bcd8739ae039","$d45526fd1ffbd617$var$sqrt3","$d45526fd1ffbd617$export$2e2bcd8739ae039","$70a1b9646572faf7$var$sqrt3","$70a1b9646572faf7$export$2e2bcd8739ae039","$6b5c98530d683be5$var$s","$6b5c98530d683be5$var$k","$6b5c98530d683be5$var$a","$6b5c98530d683be5$export$2e2bcd8739ae039","$69804eee5da4e1fc$export$2e2bcd8739ae039","$497fe223f0c7b3e8$export$19158c96a6700c15","$497fe223f0c7b3e8$export$915e06de6acf8fe","$497fe223f0c7b3e8$export$2e2bcd8739ae039","$72ccadd7b0a5f010$export$2e2bcd8739ae039","$4fcc1327a5d07e55$export$105684a3041cb6f3","$4fcc1327a5d07e55$export$957f7263e89bedd2","$4fcc1327a5d07e55$export$2e2bcd8739ae039","$183ce554afe8c6f0$var$BasisClosed","$183ce554afe8c6f0$export$2e2bcd8739ae039","$a34a32e088f640bf$var$BasisOpen","$a34a32e088f640bf$export$2e2bcd8739ae039","$f6400194fd6a0bdb$var$Bundle","_basis","_beta","_x2","_x3","_x4","_y2","_y3","_y4","$f6400194fd6a0bdb$export$2e2bcd8739ae039","beta1","bundle","$c90bcdedc71457ea$export$105684a3041cb6f3","_k","$c90bcdedc71457ea$export$ee51ff373511cbeb","tension","$c90bcdedc71457ea$export$2e2bcd8739ae039","tension1","cardinal","$73ff40c99770ef6d$export$da3940d7e9162858","_x5","_y5","$73ff40c99770ef6d$export$2e2bcd8739ae039","$a213115754da7990$export$cd7d1a617282f2f1","$a213115754da7990$export$2e2bcd8739ae039","$4db5f4f17c3a16b3$export$105684a3041cb6f3","_l01_a","_l01_2a","_l12_a","_l12_2a","_l23_a","_l23_2a","$4db5f4f17c3a16b3$var$CatmullRom","_alpha","x23","y23","$4db5f4f17c3a16b3$export$2e2bcd8739ae039","alpha1","catmullRom","$f936d5ffcfb25824$var$CatmullRomClosed","$f936d5ffcfb25824$export$2e2bcd8739ae039","$341349acb9991726$var$CatmullRomOpen","$341349acb9991726$export$2e2bcd8739ae039","$35e56ad4997e8f65$var$LinearClosed","$35e56ad4997e8f65$export$2e2bcd8739ae039","$cab75dc01e66b193$var$sign","$cab75dc01e66b193$var$slope3","$cab75dc01e66b193$var$slope2","$cab75dc01e66b193$var$point","$cab75dc01e66b193$var$MonotoneX","$cab75dc01e66b193$var$MonotoneY","$cab75dc01e66b193$var$ReflectContext","$cab75dc01e66b193$export$99563b5420dbdc55","$cab75dc01e66b193$export$8b5360456d6bdb88","$ecaddebfc9069a1b$var$Natural","$ecaddebfc9069a1b$var$controlPoints","$ecaddebfc9069a1b$export$2e2bcd8739ae039","$1262f1c88e9696b5$var$Step","_t","$1262f1c88e9696b5$export$2e2bcd8739ae039","$1262f1c88e9696b5$export$10eafa5b7478b343","$1262f1c88e9696b5$export$793b3db073781cbb","$c64e8c12a3952a1f$export$2e2bcd8739ae039","series","$6392d700c6254b89$export$2e2bcd8739ae039","$73c272f50974b1c6$var$stackValue","$73c272f50974b1c6$var$stackSeries","$73c272f50974b1c6$export$2e2bcd8739ae039","stack","oz","sz","$51565f53ec41433e$export$2e2bcd8739ae039","$d09434863b8b6e3d$export$2e2bcd8739ae039","yn","$95481d90954f4963$export$2e2bcd8739ae039","$ffb6de494d457d9e$export$2e2bcd8739ae039","s2","si","sij0","s3","$e4e2d1e78c331793$export$2e2bcd8739ae039","peaks","$e4e2d1e78c331793$var$peak","vi","vj","$913764245d665e2c$export$2e2bcd8739ae039","$913764245d665e2c$export$8a63f25cc62965f1","$68d1e6105a476da6$export$2e2bcd8739ae039","$ce234225308b920e$export$2e2bcd8739ae039","tops","bottoms","$ba9e5360bfebb59e$export$2e2bcd8739ae039","_t0","$4aeb7326706b2467$export$2e2bcd8739ae039","$7a8a51016481311d$export$2e2bcd8739ae039","$a3c1094a2e8782d7$export$563a914cafbdc389","applyX","applyY","location","invertX","invertY","rescaleX","rescaleY","$a3c1094a2e8782d7$export$f0954fd7d5368655","$a3c1094a2e8782d7$export$2e2bcd8739ae039","__zoom","$b2e4663bd9fbfcc1$export$2e2561858db9bf47","$b2e4663bd9fbfcc1$export$2e2bcd8739ae039","$91e02783b8b1c24a$var$defaultFilter","$91e02783b8b1c24a$var$defaultExtent","SVGElement","clientWidth","clientHeight","$91e02783b8b1c24a$var$defaultTransform","$91e02783b8b1c24a$var$defaultWheelDelta","deltaY","deltaMode","$91e02783b8b1c24a$var$defaultTouchable","$91e02783b8b1c24a$var$defaultConstrain","translateExtent","$91e02783b8b1c24a$export$2e2bcd8739ae039","touchstarting","touchfirst","constrain","wheelDelta","scaleExtent","touchDelay","tapDistance","wheeled","dblclicked","__zooming","Gesture","taps","wheel","wheelidled","k1","touch0","l0","l1","dp","dl","collection","scaleBy","scaleTo","k0","translateBy","translateTo","$22285973ae9eeea8$export$1aaaf00d0f682bfd","constructorName","constructorRecord","constructorResult","results","fastest","$22285973ae9eeea8$export$fdba1d0dfc11d67","$parcel$interopDefault","$b25678c505cad7eb$export$a1e9daa76fd80d91","$b25678c505cad7eb$export$943e078395581e44","$b25678c505cad7eb$export$e70fd2e5c39d9016","WILLIAMS","FERRARI","MCLAREN","RED_BULL","SAUBER","TORO_ROSSO","RENAULT","MERCEDES","$b25678c505cad7eb$export$d3dc73a2a55a3789","$b25678c505cad7eb$export$127faf44a8c6ef86","$b25678c505cad7eb$export$d08e833524fd8dd7","$b25678c505cad7eb$export$25f0382f666f2c69","selected","gp","option","$b25678c505cad7eb$export$7232d76e98ca9044","ALFA_ROMEO","$b25678c505cad7eb$export$94bd867f55fe638c","$38063efcb0b229b0$var$Map","$38063efcb0b229b0$var$map","$38063efcb0b229b0$export$2e2bcd8739ae039","$cf3c72678de97179$var$Set","$cf3c72678de97179$var$proto","$cf3c72678de97179$var$set","$34d9787a78835aba$var$none","$34d9787a78835aba$export$2e2bcd8739ae039","$e173af50759a96f0$var$empty","$7cd42c2a1518bcda$export$2e2bcd8739ae039","$24aa5e45c51c7b87$export$67b01759a14cf6a4","$71d88cd6e9fce502$var$bindIndex","$71d88cd6e9fce502$var$bindKey","$9ab4313b90016298$var$ascending","$6df8c7322544a5b0$export$2e2bcd8739ae039","$40040e30e08ab761$export$2e2bcd8739ae039","$3c2121ddd5dd6bc4$var$attrRemove","$3c2121ddd5dd6bc4$var$attrRemoveNS","$3c2121ddd5dd6bc4$var$attrConstant","$3c2121ddd5dd6bc4$var$attrConstantNS","$3c2121ddd5dd6bc4$var$attrFunction","$3c2121ddd5dd6bc4$var$attrFunctionNS","$65d48ef58cc2c976$export$2e2bcd8739ae039","$a3b11c6f3c0e6c40$var$styleRemove","$a3b11c6f3c0e6c40$var$styleConstant","$a3b11c6f3c0e6c40$var$styleFunction","$a3b11c6f3c0e6c40$export$5e3cec964f0b5efd","$6764411a1c4f53c2$var$propertyRemove","$6764411a1c4f53c2$var$propertyConstant","$6764411a1c4f53c2$var$propertyFunction","$44eedec431f2508b$var$classArray","$44eedec431f2508b$var$classList","$44eedec431f2508b$var$ClassList","$44eedec431f2508b$var$classedAdd","$44eedec431f2508b$var$classedRemove","$44eedec431f2508b$var$classedTrue","$44eedec431f2508b$var$classedFalse","$44eedec431f2508b$var$classedFunction","$337a94bcd9cf48bd$var$textRemove","$337a94bcd9cf48bd$var$textConstant","$337a94bcd9cf48bd$var$textFunction","$ee8ecf964749ab5f$var$htmlRemove","$ee8ecf964749ab5f$var$htmlConstant","$ee8ecf964749ab5f$var$htmlFunction","$96823a0ecbd03ecc$var$raise","$f6a6dbb63a0832f7$var$lower","$099c85b3aac58598$var$creatorInherit","$099c85b3aac58598$var$creatorFixed","$099c85b3aac58598$export$2e2bcd8739ae039","$2c48475019c7f1cb$var$constantNull","$6d22e73c88172e32$var$remove","$f5510dc951ff3be4$var$selection_cloneShallow","$f5510dc951ff3be4$var$selection_cloneDeep","$4a86b8b40de234e8$var$filterEvents","$4a86b8b40de234e8$export$6cd530ed55e06764","mouseenter","mouseleave","$4a86b8b40de234e8$var$filterContextListener","$4a86b8b40de234e8$var$contextListener","related","relatedTarget","event0","$4a86b8b40de234e8$var$parseTypenames","$4a86b8b40de234e8$var$onRemove","$4a86b8b40de234e8$var$onAdd","wrap","$96e4b7ca6f10c917$var$dispatchEvent","$96e4b7ca6f10c917$var$dispatchConstant","$96e4b7ca6f10c917$var$dispatchFunction","$8ff1b472f0b7c39d$export$e8e78c978b129247","$8ff1b472f0b7c39d$export$52baac22726c72bf","$8ff1b472f0b7c39d$var$selection","$8ff1b472f0b7c39d$export$2e2bcd8739ae039","$ab3fdcde556fa861$export$2e2bcd8739ae039","$b92a11c9470fd5d4$export$2e2bcd8739ae039","rootElement","body","initNode","tip","vis","svgNode","tagName","show","content","poffset","dir","nodel","getNodeEl","directions","scrollTop","scrollLeft","directionCallbacks","hide","functor","destroy","bbox","getScreenBBox","offsetHeight","offsetWidth","div","targetShape","targetel","tbbox","getBBox","$d4314cbe4dbb11f8$var$getHoverContent","keyword","pilot","maxIndex","yearResults","driver","minIndex","$d4314cbe4dbb11f8$var$addLineAndDotTransparency","hoveredClass","parentElement","includes","el","$d4314cbe4dbb11f8$var$removeLineAndDotTransparency","$d4314cbe4dbb11f8$export$ccf7fa9eeed94bae","rawData","gpName","divId","margin","constructors","scrollyOpt","scrollyMode","$22285973ae9eeea8$export$eeb77593ce8a8b3","svgId","$d4314cbe4dbb11f8$var$buildSvg","mainTitle","console","regulationDates","YMin","minTime","$22285973ae9eeea8$export$b7dd1a70cd52bf70","YMax","maxTime","$22285973ae9eeea8$export$143c76f75e7a00b7","toPlot","allY","xScale","xDomain","$d4314cbe4dbb11f8$export$cd00e79bee881048","yScale","$d4314cbe4dbb11f8$var$getYScale","regulationPaths","ANNEES_2000","$d4314cbe4dbb11f8$var$drawRectangle","FERRARI_VS_WILLIAMS","ANNEES_2010","TURBOHYBRID","isThereAFocusedEvent","regDiv","description","$22285973ae9eeea8$export$aaecad8e38ebab8a","idx","Ydata","isPlottingMinOrMax","svgToPlot","tipCircles","$857bd249bdf1bb8f$exports","$8d32a1b6d9e51e3c$export$d30a89b66630a4d","$3de823115354e56c$export$4bb61a51c65c2222","$3ec4b05764ffc625$exports","$8d32a1b6d9e51e3c$export$c4257058f6eb2273","progress","scrollyFinished","stateCallbacks","Started","_progress","updateProgressElem","progressCallbacks","Finished","onboardingManager","homepage","atCheckpoint","isEnabled","checkpoints","carElem","ev","handleScrollEvent","onOnboardingFinished","enable","onScrollyStateChange","onScrollyProgress","reachedCheckpoint","onboard","startOnboarding","$3de823115354e56c$export$6ae07542001fee49","elem","display","$ae10e3cb7a4d7c1e$var$HINTS","msg","$ae10e3cb7a4d7c1e$export$a2f244fe169736c5","cbs","currentHint","completed","wrapper","textElem","innerText","removeHint","nextMessage","hint","boundingRect","hintLeft","hintTop","message","$d0917a9c90cdc851$var$PERIODS","tag","$b4e14b6b8da86996$var$getSelectedConstructors","displayedConstructors","$22b18e23564de7e8$exports","checked","$b4e14b6b8da86996$var$updateGraph","graphId","yearRange","svgWidth","innerWidth","svgHeight","innerHeight","gpType","filteredData","scrollManager","visibilityManager","contentManager","$d0917a9c90cdc851$export$3c34ec388832a30","DashboardOnly","ScrollyOnly","Event","constructorsToPlot","minMaxYears","yearProgress","yearsToPlot","periodChanged","getContent","baseGPs","AUSTRALIAN","BELGIAN","MONACO","BRAZILIAN","selectConstructor","selectOptions","label","border","backgroundColor","selectGP"],"version":3,"file":"index.27af53d9.js.map"}