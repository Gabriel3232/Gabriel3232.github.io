// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"8wcER":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "5c1b77e3b71e74eb";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"h7u1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _viz = require("./scripts/viz");
var _utils = require("./scripts/utils");
var _parsedQualiJson = require("./assets/data/parsed_quali.json");
var _parsedQualiJsonDefault = parcelHelpers.interopDefault(_parsedQualiJson);
var _parsedRacesJson = require("./assets/data/parsed_races.json");
var _parsedRacesJsonDefault = parcelHelpers.interopDefault(_parsedRacesJson);
var _d3 = require("d3");
var _scrollEvent = require("./scripts/scroll-event");
var _visibilityManager = require("./scripts/visibility-manager");
var _onboardingManager = require("./scripts/onboarding-manager");
var _contentManager = require("./scripts/content-manager");
/**
 * Main
 */ (function(d3) {
    const onboardingManager = new _onboardingManager.OnboardingManager();
    const scrollManager = new _scrollEvent.ScrollManager(d3, onboardingManager);
    const visibilityManager = new _visibilityManager.VisibilityManager();
    const contentManager = new _contentManager.ContentManager();
    visibilityManager.hide(_visibilityManager.VisibilityTarget.DashboardOnly);
    const onboard = document.querySelector(`#onboarding`);
    onboard.classList.add('visible');
    scrollManager.onScrollyStateChange((state)=>{
        if (state == _scrollEvent.ScrollyEvent.Finished) {
            visibilityManager.show(_visibilityManager.VisibilityTarget.DashboardOnly);
            visibilityManager.hide(_visibilityManager.VisibilityTarget.ScrollyOnly);
            d3.select('#constructor-option-max').node().checked = true;
            d3.select('#constructor-option-min').node().checked = true;
            d3.select('#select-constructor').node().dispatchEvent(new Event('change'));
        } else {
            visibilityManager.hide(_visibilityManager.VisibilityTarget.DashboardOnly);
            visibilityManager.show(_visibilityManager.VisibilityTarget.ScrollyOnly);
        }
    });
    let scrollyOpt = null;
    let constructorsToPlot = [];
    const minMaxYears = [
        1994,
        2021
    ];
    const length = minMaxYears[1] - minMaxYears[0];
    scrollManager.onScrollyProgress(({ progress , forward  })=>{
        const yearProgress = Math.round(minMaxYears[0] + progress / 100 * length);
        const yearsToPlot = [
            minMaxYears[0],
            yearProgress
        ];
        if (contentManager.periodChanged(progress)) {
            const content = contentManager.getContent();
            scrollyOpt = content.tag;
            constructorsToPlot = content.constructors;
            d3.select('#scrolly-content').html(content.html);
            if (forward) scrollManager.reachedCheckpoint();
        }
        for(let i = 1; i < 5; i++)updateGraph(i, constructorsToPlot, scrollyOpt, !scrollManager.scrollyFinished, yearsToPlot);
    });
    const baseGPs = [
        _utils.GP.AUSTRALIAN,
        _utils.GP.BELGIAN,
        _utils.GP.MONACO,
        _utils.GP.BRAZILIAN
    ];
    const baseConstructors = [];
    const selectConstructor = d3.select('#select-constructor');
    selectConstructor.on('change', ()=>{
        const constructors = getSelectedConstructors();
        for(let i = 1; i < 5; i++)updateGraph(i, constructors, null, !scrollManager.scrollyFinished);
    });
    _utils.addSelectOptionsConstructors(selectConstructor.node(), baseConstructors);
    for(let i1 = 1; i1 < 5; i1++){
        const selectGP = d3.select('#select-gp-' + i1);
        selectGP.on('change', ()=>updateGraph(i1, getSelectedConstructors(), null, !scrollManager.scrollyFinished)
        );
        d3.select('#select-gp-type-' + i1).on('change', ()=>updateGraph(i1, getSelectedConstructors(), null, !scrollManager.scrollyFinished)
        );
        _utils.addSelectOptionsGps(selectGP.node(), baseGPs[i1 - 1]);
        // viz.makeLineChart(qualifs, baseGPs[i - 1], "#graph-" + i, width, height, margin, baseConstructors, null, !scrollManager.scrollyFinished)
        updateGraph(i1, getSelectedConstructors(), null, true, [
            1994,
            1994
        ]);
    }
})(_d3);
function getSelectedConstructors() {
    const selectConstructor = _d3.select('#select-constructor').node();
    const displayedConstructors = [];
    const children = selectConstructor.children;
    for(let i = 0; i < children.length; i++){
        const child = children[i].children[0];
        if (_utils.isInputElem(child) && child.checked) displayedConstructors.push(child.value);
    }
    return displayedConstructors;
}
function updateGraph(graphId, constructors, scrollyOpt = null, scrollyMode, yearRange) {
    const margin = {
        top: 30,
        right: 30,
        bottom: 30,
        left: 60
    };
    const svgWidth = innerWidth / 2 - 200;
    const heightFactor = scrollyMode ? 110 : 110;
    const svgHeight = innerHeight / 2 - heightFactor;
    const width = svgWidth - margin.left - margin.right;
    const height = svgHeight - margin.top - margin.bottom;
    const gpName = _d3.select('#select-gp-' + graphId).property('value');
    const gpType = _d3.select('#select-gp-type-' + graphId).property('value');
    let data = gpType === 'race' ? _parsedRacesJsonDefault.default : _parsedQualiJsonDefault.default;
    let filteredData = {};
    if (yearRange) {
        for (const [year, results] of Object.entries(data))if (yearRange[0] <= +year && +year < yearRange[1]) filteredData[year] = results;
        else filteredData[year] = null;
    } else if (Object.keys(filteredData).length == 0) filteredData = data;
    if (gpType === 'race') _viz.makeLineChart(filteredData, gpName, "#graph-" + graphId, width, height, margin, constructors, scrollyOpt, scrollyMode);
    else _viz.makeLineChart(filteredData, gpName, "#graph-" + graphId, width, height, margin, constructors, scrollyOpt, scrollyMode);
}

},{"./scripts/viz":"afQSi","./scripts/utils":"isRWn","./assets/data/parsed_quali.json":"gzCRJ","./assets/data/parsed_races.json":"2bgs1","d3":"17XFv","./scripts/scroll-event":"fSYCR","./scripts/visibility-manager":"1ioqJ","./scripts/onboarding-manager":"cZssj","./scripts/content-manager":"9XsVr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afQSi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Build a d3 X Scale from the x values to draw the linechart
 * @param X array of dates
 * @param width witdh of the plot
 * @returns X scale for the linechart
 */ parcelHelpers.export(exports, "getXScale", ()=>getXScale
);
/**
 * Build an SVG containing a graph
 * @param rawData raw data
 * @param gpName Name of the grand prix in data, usually '<country> Grand Prix'
 * @param divId id of the div that will contain the chart
 * @param width width of the chart
 * @param height height of the chart
 * @param margin margins
 * @param constructors list of constructors to plot
 * @param scrollyMode boolean, true if the user is still in the scrolly, false otherwise
 * @param scrollyOpt SCROLLYOPTION : an enum that defines the scrolly step we are in
 */ parcelHelpers.export(exports, "makeLineChart", ()=>makeLineChart
);
/**
 * Draws the legend. The legends is updated every time the user selects/deselects a constructor
 * @param constructors list of constructors to plot
 * @param scrollyMode boolean, true if the user is still in the scrolly, false otherwise
 */ parcelHelpers.export(exports, "drawLegend", ()=>drawLegend
);
var _preprocess = require("./preprocess");
var _utils = require("./utils");
var _d3 = require("d3");
var _d3Tip = require("d3-tip");
var _d3TipDefault = parcelHelpers.interopDefault(_d3Tip);
function getXScale(X, width) {
    const xDomain = _d3.extent(X);
    return _d3.scaleTime().domain(xDomain).range([
        0,
        width
    ]);
}
/**
 * Build a d3 Y Scale from the y values to draw the linechart
 * @param Y array laptimes (can contain null)
 * @param height witdh of the plot
 * @returns Y scale for the linechart
 */ function getYScale(Y, height) {
    return _d3.scaleLinear().domain(_utils.Y_MINMAX).range([
        height,
        0
    ]);
}
/**
 * Build an svg to draw a linechart in
 * @param svgId id of the created svg
 * @param width svg width
 * @param height svg height
 * @param margin svg margins
 * @returns built svg
 */ function buildSvg(svgId, width, height, margin) {
    _d3.select(svgId).selectAll("*").remove();
    return _d3.select(svgId).append("svg").attr('width', '98%').attr('height', '98%').attr("viewBox", '0 0 ' + (width + margin.left + margin.right) + ' ' + (height + margin.bottom + margin.top)).attr('class', 'card').attr('id', (svgId + '-svg').replace('#', '')).append("g").attr('class', 'main-g').attr("transform", "translate(" + margin.left + "," + margin.top + ")");
}
/**
 * Get the driver and constructor name for a hovered point
 * @param d hovered point data
 * @param keyword min for mintime, max for maxtime, otherwise it should be the constructor's name
 * @returns tooltip content
 */ function getHoverContent(d, keyword) {
    if (!d.results) return '';
    let constructor = '';
    let pilot = '';
    let time = '';
    if (keyword === 'max') {
        const maxIndex = _d3.maxIndex(d.results, (yearResults)=>yearResults.fastest
        );
        constructor = 'Worst time - ' + d.results[maxIndex].constructor;
        pilot = d.results[maxIndex].driver;
        time = _utils.getHumanReadableTime(d.results[maxIndex].fastest * 1000);
    } else if (keyword === 'min') {
        const minIndex = _d3.minIndex(d.results, (yearResults)=>yearResults.fastest
        );
        constructor = 'Best time - ' + d.results[minIndex].constructor;
        pilot = d.results[minIndex].driver;
        time = _utils.getHumanReadableTime(d.results[minIndex].fastest * 1000);
    } else {
        const point = d.results.find((result)=>result["constructor"].toLowerCase() === keyword.toLowerCase()
        );
        constructor = keyword;
        pilot = point.driver;
        time = _utils.getHumanReadableTime(point.fastest * 1000);
    }
    return `<p style="font-weight: bold">${constructor}</p><p>Driver: <i>${pilot}</i></p><p>Time: <i>${time}</i></p>`;
}
/**
 * Make all unhovered lines and points have an opacity of 0.5
 * @param node hovered node that called this function. We don't touch the opacity of it.
 * @returns
 */ function addLineAndDotTransparency(node) {
    const hoveredClass = node.parentElement.getAttribute('class');
    for(let i = 1; i < 5; i++)_d3.select('#graph-' + i + '-svg').select('g.main-g').selectChildren().nodes().filter((element)=>![
            ..._utils.FIXED_CLASSES_OPACITY,
            hoveredClass
        ].includes(element.getAttribute('class'))
    ).forEach((el)=>el.setAttribute('style', 'opacity: 0.3')
    );
}
/**
 * Make all lines and dots opaque
 * @returns void
 */ function removeLineAndDotTransparency() {
    for(let i = 1; i < 5; i++)_d3.select('#graph-' + i + '-svg').select('g.main-g').selectChildren().nodes().filter((element)=>!_utils.FIXED_CLASSES_OPACITY.includes(element.getAttribute('class'))
    ).forEach((el)=>el.setAttribute('style', 'opacity: 1')
    );
}
function makeLineChart(rawData, gpName, divId, width, height, margin, constructors, scrollyOpt = null, scrollyMode) {
    const data = _preprocess.extractGP(rawData, gpName);
    let svg = buildSvg(divId, width, height, margin);
    draw(data, svg, width, height, gpName, constructors, scrollyOpt, scrollyMode);
    drawLegend(constructors, scrollyMode);
}
/**
 * Draws the actual graph. Will draw all the available constructors in the constructors argument.
 * @param data data to draw
 * @param svg svg to draw in
 * @param width svg width
 * @param height svg height
 * @param mainTitle line chart title
 * @param constructors list of constructors to plot
 * @param scrollyMode boolean, true if the user is still in the scrolly, false otherwise
 * @param scrollyOpt SCROLLYOPTION : an enum that defines the scrolly step we are in
 */ function draw(data, svg, width, height, mainTitle, constructors, scrollyOpt = null, scrollyMode) {
    const X = _preprocess.extractDates(data);
    console.log(mainTitle, width, height);
    const regulationDates = _preprocess.extractRegulationDates();
    const YMin = _preprocess.extractBestTimes(data);
    const YMax = _preprocess.extractWorstTimes(data);
    let toPlot = [];
    if (scrollyMode) toPlot = [
        {
            data: YMin,
            name: 'min',
            color: 'purple'
        },
        {
            data: YMax,
            name: 'max',
            color: 'black'
        }
    ];
    else {
        if (constructors.includes('min')) toPlot.push({
            data: YMin,
            name: 'min',
            color: 'purple'
        });
        if (constructors.includes('max')) toPlot.push({
            data: YMax,
            name: 'max',
            color: 'black'
        });
    }
    for (const constructor of constructors)toPlot.push({
        data: _preprocess.extractConstructor(data, constructor),
        name: constructor,
        color: _utils.getConstructorColor(constructor)
    });
    /* define the scales */ const allY = [];
    for (const Y of toPlot)allY.push(...Y.data);
    const xScale = getXScale(X, width);
    const yScale = getYScale(allY, height);
    /* bind the data */ svg.datum(data);
    /* draw x and y axis + their labels */ svg.append("g").attr("class", "xaxis").attr("transform", "translate(0," + height + ")").call(_d3.axisBottom(xScale)).call((g)=>g.append("text").attr("x", width + 5).attr("y", 5).attr("fill", "currentColor").attr("text-anchor", "start").text('Year')
    );
    svg.append("g").attr("class", "yaxis").call(_d3.axisLeft(yScale)).call((g)=>g.append("text").attr("x", -25).attr("y", -5).attr("fill", "currentColor").attr("text-anchor", "start").text('Lap Time (s)')
    );
    /* draw the regulations red bars */ const regulationPaths = svg.append('g').attr('class', 'regulations').selectAll('path').data(regulationDates.map((d)=>{
        return [
            {
                x: d,
                y: _utils.Y_MINMAX[0]
            },
            {
                x: d,
                y: _utils.Y_MINMAX[1]
            }
        ];
    })).enter().append('path').attr("class", "regulationline").attr("fill", "none").attr("stroke-width", 2).attr("opacity", 0.3).attr("stroke", "red").attr("d", (d1)=>{
        return _d3.line().x((d)=>xScale(d.x)
        ).y((d)=>yScale(d.y)
        )(d1);
    });
    if (!scrollyMode) /* add the regulations red bars events if we are in the dashboard mode */ regulationPaths.on("click", function(_, d) {
        const year = (d[0].x.getFullYear() + 1).toString();
        const index = _preprocess.getIndexOfYear(year);
        const regDiv = _d3.select('#regulation-div');
        if (regDiv.attr('class') === 'regulation-visible') {
            const isThereAFocusedEvent = _d3.select("#graph-1").select('g .regulations').selectAll('path').filter((_, i)=>i === index
            ).attr('opacity') === '0.7';
            for(let i2 = 1; i2 < 5; i2++)_d3.select('#graph-' + i2).select('g .regulations').selectAll('path').attr('opacity', 0.3);
            if (isThereAFocusedEvent) return;
        }
        for(let i3 = 1; i3 < 5; i3++)_d3.select('#graph-' + i3).select('g .regulations').selectAll('path').attr('opacity', 0.3);
        regDiv.attr('class', 'regulation-visible');
        for(let i1 = 1; i1 < 5; i1++)_d3.select('#graph-' + i1).select('g .regulations').selectAll('path').filter((_, i)=>i === index
        ).attr('opacity', 0.7);
    }).on("mouseover", function(_, d) {
        const year = (d[0].x.getFullYear() + 1).toString();
        const regDiv = _d3.select('#regulation-div');
        const description = _preprocess.extractRegulation(year)[1][0].description;
        if (regDiv.attr('class') === 'regulation-invisible') {
            regDiv.attr('class', 'regulation-visible');
            regDiv.node().innerHTML = `<p>${description}</p>`;
        }
        _d3.select(this).style("cursor", "pointer").attr('stroke-width', 4);
    }).on("mouseout", function(_, d) {
        const year = (d[0].x.getFullYear() + 1).toString();
        const index = _preprocess.getIndexOfYear(year);
        const isPathFocused = _d3.select("#graph-1").select('g .regulations').selectAll('path').filter((_, i)=>i === index
        ).attr('opacity') === '0.7';
        if (!isPathFocused) _d3.select('#regulation-div').attr('class', 'regulation-invisible');
        _d3.select(this).style("cursor", "default").attr('stroke-width', 2);
    });
    else {
        /* draw the scrolly step we are in if there is one, and add the title */ switch(scrollyOpt){
            case _utils.SCROLLYOPTION.ANNEES_2000:
                drawRectangle(2000, 2010, xScale, yScale, svg);
                break;
            case _utils.SCROLLYOPTION.FERRARI_VS_WILLIAMS:
                drawRectangle(1994, 2000, xScale, yScale, svg);
                break;
            case _utils.SCROLLYOPTION.ANNEES_2010:
                drawRectangle(2009, 2014, xScale, yScale, svg);
                break;
            case _utils.SCROLLYOPTION.TURBOHYBRID:
                drawRectangle(2014, 2021, xScale, yScale, svg);
                break;
            default:
                break;
        }
        svg.append('g').attr('class', 'main-title').append('text').attr('x', width / 2).attr('y', 0).attr('text-anchor', 'middle').text(mainTitle);
    }
    /* remove all existing d3 tips for this graph */ const svgId = svg.node().parentElement.getAttribute('id');
    _d3.selectAll('div.tip-' + svgId).nodes().forEach((node)=>node.remove()
    );
    /* draw all the possible constructors */ for(let idx = 0; idx < toPlot.length; idx++){
        const Y = toPlot[idx];
        const Ydata = Y.data;
        const isPlottingMinOrMax = scrollyMode ? false : [
            "min",
            "max"
        ].includes(Y.name);
        const svgToPlot = svg.append('g').attr('class', Y.name.replace(' ', ''));
        /* configure the line object and the tooltip */ let line = _d3.line().defined(function(_, i) {
            return !!Ydata[i];
        }).x(function(_, i) {
            return xScale(X[i]);
        }).y(function(_, i) {
            return yScale(Ydata[i]);
        });
        const tipCircles = _d3TipDefault.default().attr('class', 'd3-tip tip-' + svgId).html(function(d) {
            return getHoverContent(d, Y.name);
        });
        svg.call(tipCircles);
        if (!isPlottingMinOrMax) svgToPlot.append("path").attr("class", "line").attr("fill", "none").attr("stroke-width", 2).attr("stroke", Y.color).attr("d", (i)=>{
            return line(i);
        }).on('mouseover', function() {
            addLineAndDotTransparency(this);
        }).on('mouseout', function() {
            removeLineAndDotTransparency();
        });
        /* draw the circles and add the hover events */ svgToPlot.selectAll(".dot").data(data).enter().append("circle").attr("class", "dot").attr("cx", line.x()).attr("cy", line.y()).attr('fill', isPlottingMinOrMax ? 'white' : Y.color).attr('stroke', Y.color).attr('stroke-width', 1).attr("r", (_, i)=>{
            if (Ydata[i]) return isPlottingMinOrMax ? 4 : 3;
            return 0;
        }).on('mouseover', function(_, d) {
            tipCircles.show(d, this);
            addLineAndDotTransparency(this);
        }).on('mouseout', function(_, d) {
            tipCircles.hide(d, this);
            removeLineAndDotTransparency();
        });
    }
}
function drawLegend(constructors, scrollyMode) {
    const data = scrollyMode ? [
        'min',
        'max'
    ] : [];
    data.push(...constructors);
    const legend = _d3.select('#legend');
    legend.selectAll('g.legendItem').remove();
    const group = legend.selectAll('g.legendItem').data(data).enter().append('g').attr('class', 'legendItem');
    group.append("circle").attr("cx", (_, i)=>i * 130 + 10
    ).attr("cy", 10).attr("r", 6).style("fill", (d)=>_utils.getConstructorColor(d)
    );
    group.append("text").attr("x", (_, i)=>i * 130 + 20
    ).attr("y", 14).text((d)=>{
        if (d === 'min') return 'Meilleur temps';
        else if (d === 'max') return 'Pire temps';
        return d;
    }).style("font-size", "15px").attr("alignment-baseline", "middle");
}
/**
 * Draws a green rectangle to enhance a particular period of the svg node.
 * @param yearStart lower left bound of the rectangle
 * @param yearStop lower right bound of the rectangle
 * @param xScale xScale
 * @param yScale yScale
 * @param svg svg node
 */ function drawRectangle(yearStart, yearStop, xScale, yScale, svg) {
    const rect = {
        x: xScale(new Date(yearStart + '-01-01')),
        y: 0,
        width: xScale(new Date(yearStop + '-01-01')) - xScale(new Date(yearStart + '-01-01')),
        height: yScale(_utils.Y_MINMAX[0])
    };
    svg.append('rect').attr('class', 'scrolly-rect').attr('x', rect.x).attr('y', rect.y).attr('height', rect.height).attr('width', rect.width).attr('fill', 'green').attr('opacity', 0.1);
}

},{"./preprocess":"caCbt","./utils":"isRWn","d3":"17XFv","d3-tip":"5xA8i","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"caCbt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Extract all the results available for a specific GP through all years.
 * @param data Raw data from either parsed_quali.json or parsed_races.json
 * @param gpName Name of the grand prix to extract
 * @returns raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}
 */ parcelHelpers.export(exports, "extractGP", ()=>extractGP
);
parcelHelpers.export(exports, "extractConstructor", ()=>extractConstructor
);
parcelHelpers.export(exports, "extractRegulation", ()=>extractRegulation
);
/**
 * Extracts all the best times every year. If the best time is above 300s (5min), return null
 * @param data raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}
 * @returns array of time, each item is the best time for a year in the current GP
 */ parcelHelpers.export(exports, "extractBestTimes", ()=>extractBestTimes
);
/**
 * Extracts all the worst times every year. If the worst time is above 300s (5min), return null
 * @param data raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}
 * @returns array of time, each item is the worst time for a year in the current GP
 */ parcelHelpers.export(exports, "extractWorstTimes", ()=>extractWorstTimes
);
/**
 * Builds the X vector. If no results (y value) is available, replace the date with a null
 * @param data raw data : {'year': 19xx, 'results': [{..., 'fastest/fastest_race': 80.xxx, ...}]}
 * @returns array of dates
 */ parcelHelpers.export(exports, "extractDates", ()=>extractDates
);
/**
 * Returns the years of each regulation.
 * @returns array of dates
 */ parcelHelpers.export(exports, "extractRegulationDates", ()=>extractRegulationDates
);
parcelHelpers.export(exports, "getIndexOfYear", ()=>getIndexOfYear
);
var _regulationsJson = require("../assets/data/regulations.json");
var _regulationsJsonDefault = parcelHelpers.interopDefault(_regulationsJson);
var _d3 = require("d3");
function extractGP(data, gpName) {
    let all_years = Object.entries(data).map((q)=>{
        if (q[1]) return {
            year: q[0],
            results: Object.entries(q[1]).filter((y)=>y[0] === gpName
            ).map((o)=>o[1]
            )[0]
        };
        else return {
            year: q[0],
            results: null
        };
    });
    return all_years;
}
function extractConstructor(data, constructorName) {
    const constructorRecord = [];
    for (const d of data){
        let constructorResult = null;
        if (!!d.results) {
            constructorResult = d.results.find((result)=>result["constructor"].toLowerCase() === constructorName.toLowerCase()
            );
            if (constructorResult && constructorResult.fastest < 300) {
                constructorRecord.push(constructorResult.fastest);
                continue;
            }
        }
        constructorRecord.push(null);
    }
    return constructorRecord;
}
function extractRegulation(year) {
    return Object.entries(_regulationsJsonDefault.default).find((q)=>q[0] === year
    );
}
function extractBestTimes(data) {
    return _d3.map(data, ({ results  })=>{
        if (results) {
            const minTime = _d3.min(results.map(({ fastest  })=>fastest
            ));
            return +minTime > 300 ? null : minTime;
        }
        return null;
    });
}
function extractWorstTimes(data) {
    return _d3.map(data, ({ results  })=>{
        if (results) {
            const maxTime = _d3.max(results.map(({ fastest  })=>fastest
            ));
            return +maxTime > 300 ? null : maxTime;
        }
        return null;
    });
}
function extractDates(data) {
    // const allYears = Object.entries(data).map(([key, val]) => +val['year'])
    // return d3.range(d3.min(allYears), d3.max(allYears)).map(d => new Date(d + '-01-01'))
    return _d3.range(1994, 2021).map((d)=>new Date(d + '-01-01')
    );
}
function extractRegulationDates() {
    return Object.keys(_regulationsJsonDefault.default).map((element)=>new Date(element + '-01-01')
    );
}
function getIndexOfYear(year) {
    return Object.keys(_regulationsJsonDefault.default).indexOf(year);
}

},{"../assets/data/regulations.json":"kBFuF","d3":"17XFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBFuF":[function(require,module,exports) {
module.exports = JSON.parse("{\"1994\":[{\"description\":\"Toute assistance électronique bannie (TC, launch control, ABS, suspension active). Limites variées sur les tailles des ailes arrières et avant. Mise en place d'une limitation de vitesse dans les stands\",\"type\":\"electronique\"}],\"1995\":[{\"description\":\"Limitation des moteurs à 3.0L atmosphériques, pour ralentir les voitures\",\"type\":\"moteur\"}],\"1999\":[{\"description\":\"Réduction de la largeur des voitures (2m -> 1.8m). Bannissement des ailes flexibles.\",\"type\":\"aero\"}],\"2002\":[{\"description\":\"TC de nouveau autorisé, launch control aussi\",\"type\":\"electronique\"}],\"2004\":[{\"description\":\"Poids minimum 600kg. Moteurs doivent durer minimum 2 weekends, 10 places de pénalité en cas de changement\",\"type\":\"moteur\"}],\"2006\":[{\"description\":\"Moteurs limités à 2.4L et introduction de V8 pour limiter la puissance (mais les teams étaient autorisées à utiliser un V10 pendant un moment si elles n'avaient pas de V8 prêt). Obligation moteur en V 90°\",\"type\":\"moteur\"}],\"2007\":[{\"description\":\"Limite à 19000 rpm. Spécifications sur le moteur gelées pour limiter les coûts de développement\",\"type\":\"moteur\"}],\"2009\":[{\"description\":\"Limite à 18000 rpm. Banissement de presque tous les éléments aérodynamiques autres que l'aile avant et arrière\",\"type\":\"moteur\"}],\"2010\":[{\"description\":\"Restriction des coûts drastique. Introduction du DRS\",\"type\":\"cout\"}],\"2014\":[{\"description\":\"Changement total des moteurs : on passe à 1.6L compressés, boite 8, hybride. Moteurs doivent durer minimum 4000km\",\"type\":\"moteur\"}],\"2017\":[{\"description\":\"Ré augmentation de la largeur des voitures de 1.8m à 2m\",\"type\":\"aero\"}]}");

},{}],"17XFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
parcelHelpers.exportAll(_d3Array, exports);
var _d3Axis = require("d3-axis");
parcelHelpers.exportAll(_d3Axis, exports);
var _d3Brush = require("d3-brush");
parcelHelpers.exportAll(_d3Brush, exports);
var _d3Chord = require("d3-chord");
parcelHelpers.exportAll(_d3Chord, exports);
var _d3Color = require("d3-color");
parcelHelpers.exportAll(_d3Color, exports);
var _d3Contour = require("d3-contour");
parcelHelpers.exportAll(_d3Contour, exports);
var _d3Delaunay = require("d3-delaunay");
parcelHelpers.exportAll(_d3Delaunay, exports);
var _d3Dispatch = require("d3-dispatch");
parcelHelpers.exportAll(_d3Dispatch, exports);
var _d3Drag = require("d3-drag");
parcelHelpers.exportAll(_d3Drag, exports);
var _d3Dsv = require("d3-dsv");
parcelHelpers.exportAll(_d3Dsv, exports);
var _d3Ease = require("d3-ease");
parcelHelpers.exportAll(_d3Ease, exports);
var _d3Fetch = require("d3-fetch");
parcelHelpers.exportAll(_d3Fetch, exports);
var _d3Force = require("d3-force");
parcelHelpers.exportAll(_d3Force, exports);
var _d3Format = require("d3-format");
parcelHelpers.exportAll(_d3Format, exports);
var _d3Geo = require("d3-geo");
parcelHelpers.exportAll(_d3Geo, exports);
var _d3Hierarchy = require("d3-hierarchy");
parcelHelpers.exportAll(_d3Hierarchy, exports);
var _d3Interpolate = require("d3-interpolate");
parcelHelpers.exportAll(_d3Interpolate, exports);
var _d3Path = require("d3-path");
parcelHelpers.exportAll(_d3Path, exports);
var _d3Polygon = require("d3-polygon");
parcelHelpers.exportAll(_d3Polygon, exports);
var _d3Quadtree = require("d3-quadtree");
parcelHelpers.exportAll(_d3Quadtree, exports);
var _d3Random = require("d3-random");
parcelHelpers.exportAll(_d3Random, exports);
var _d3Scale = require("d3-scale");
parcelHelpers.exportAll(_d3Scale, exports);
var _d3ScaleChromatic = require("d3-scale-chromatic");
parcelHelpers.exportAll(_d3ScaleChromatic, exports);
var _d3Selection = require("d3-selection");
parcelHelpers.exportAll(_d3Selection, exports);
var _d3Shape = require("d3-shape");
parcelHelpers.exportAll(_d3Shape, exports);
var _d3Time = require("d3-time");
parcelHelpers.exportAll(_d3Time, exports);
var _d3TimeFormat = require("d3-time-format");
parcelHelpers.exportAll(_d3TimeFormat, exports);
var _d3Timer = require("d3-timer");
parcelHelpers.exportAll(_d3Timer, exports);
var _d3Transition = require("d3-transition");
parcelHelpers.exportAll(_d3Transition, exports);
var _d3Zoom = require("d3-zoom");
parcelHelpers.exportAll(_d3Zoom, exports);

},{"d3-array":"1yX2W","d3-axis":"2g6gM","d3-brush":"7TG1H","d3-chord":"a34mM","d3-color":"grhaa","d3-contour":"5lvYf","d3-delaunay":"aJhty","d3-dispatch":"5WtHO","d3-drag":"hGy7N","d3-dsv":"4Jb1j","d3-ease":"8sCNl","d3-fetch":"jvQ3c","d3-force":"helua","d3-format":"4XOv2","d3-geo":"01Z75","d3-hierarchy":"ffs4h","d3-interpolate":"6jJyi","d3-path":"eY3pl","d3-polygon":"e80Vt","d3-quadtree":"ep5gF","d3-random":"60d0K","d3-scale":"UQ8g3","d3-scale-chromatic":"dfCpU","d3-selection":"gn9gd","d3-shape":"SqrXv","d3-time":"1UOEe","d3-time-format":"4FtNS","d3-timer":"7TEss","d3-transition":"4lorl","d3-zoom":"hQoq0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yX2W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisect", ()=>_bisectJsDefault.default
);
parcelHelpers.export(exports, "bisectRight", ()=>_bisectJs.bisectRight
);
parcelHelpers.export(exports, "bisectLeft", ()=>_bisectJs.bisectLeft
);
parcelHelpers.export(exports, "bisectCenter", ()=>_bisectJs.bisectCenter
);
parcelHelpers.export(exports, "ascending", ()=>_ascendingJsDefault.default
);
parcelHelpers.export(exports, "bisector", ()=>_bisectorJsDefault.default
);
parcelHelpers.export(exports, "count", ()=>_countJsDefault.default
);
parcelHelpers.export(exports, "cross", ()=>_crossJsDefault.default
);
parcelHelpers.export(exports, "cumsum", ()=>_cumsumJsDefault.default
);
parcelHelpers.export(exports, "descending", ()=>_descendingJsDefault.default
);
parcelHelpers.export(exports, "deviation", ()=>_deviationJsDefault.default
);
parcelHelpers.export(exports, "extent", ()=>_extentJsDefault.default
);
parcelHelpers.export(exports, "Adder", ()=>_fsumJs.Adder
);
parcelHelpers.export(exports, "fsum", ()=>_fsumJs.fsum
);
parcelHelpers.export(exports, "fcumsum", ()=>_fsumJs.fcumsum
);
parcelHelpers.export(exports, "group", ()=>_groupJsDefault.default
);
parcelHelpers.export(exports, "flatGroup", ()=>_groupJs.flatGroup
);
parcelHelpers.export(exports, "flatRollup", ()=>_groupJs.flatRollup
);
parcelHelpers.export(exports, "groups", ()=>_groupJs.groups
);
parcelHelpers.export(exports, "index", ()=>_groupJs.index
);
parcelHelpers.export(exports, "indexes", ()=>_groupJs.indexes
);
parcelHelpers.export(exports, "rollup", ()=>_groupJs.rollup
);
parcelHelpers.export(exports, "rollups", ()=>_groupJs.rollups
);
parcelHelpers.export(exports, "groupSort", ()=>_groupSortJsDefault.default
);
parcelHelpers.export(exports, "bin", ()=>_binJsDefault.default
) // Deprecated; use bin.
;
parcelHelpers.export(exports, "histogram", ()=>_binJsDefault.default
);
parcelHelpers.export(exports, "thresholdFreedmanDiaconis", ()=>_freedmanDiaconisJsDefault.default
);
parcelHelpers.export(exports, "thresholdScott", ()=>_scottJsDefault.default
);
parcelHelpers.export(exports, "thresholdSturges", ()=>_sturgesJsDefault.default
);
parcelHelpers.export(exports, "max", ()=>_maxJsDefault.default
);
parcelHelpers.export(exports, "maxIndex", ()=>_maxIndexJsDefault.default
);
parcelHelpers.export(exports, "mean", ()=>_meanJsDefault.default
);
parcelHelpers.export(exports, "median", ()=>_medianJsDefault.default
);
parcelHelpers.export(exports, "merge", ()=>_mergeJsDefault.default
);
parcelHelpers.export(exports, "min", ()=>_minJsDefault.default
);
parcelHelpers.export(exports, "minIndex", ()=>_minIndexJsDefault.default
);
parcelHelpers.export(exports, "mode", ()=>_modeJsDefault.default
);
parcelHelpers.export(exports, "nice", ()=>_niceJsDefault.default
);
parcelHelpers.export(exports, "pairs", ()=>_pairsJsDefault.default
);
parcelHelpers.export(exports, "permute", ()=>_permuteJsDefault.default
);
parcelHelpers.export(exports, "quantile", ()=>_quantileJsDefault.default
);
parcelHelpers.export(exports, "quantileSorted", ()=>_quantileJs.quantileSorted
);
parcelHelpers.export(exports, "quickselect", ()=>_quickselectJsDefault.default
);
parcelHelpers.export(exports, "range", ()=>_rangeJsDefault.default
);
parcelHelpers.export(exports, "rank", ()=>_rankJsDefault.default
);
parcelHelpers.export(exports, "least", ()=>_leastJsDefault.default
);
parcelHelpers.export(exports, "leastIndex", ()=>_leastIndexJsDefault.default
);
parcelHelpers.export(exports, "greatest", ()=>_greatestJsDefault.default
);
parcelHelpers.export(exports, "greatestIndex", ()=>_greatestIndexJsDefault.default
);
parcelHelpers.export(exports, "scan", ()=>_scanJsDefault.default
) // Deprecated; use leastIndex.
;
parcelHelpers.export(exports, "shuffle", ()=>_shuffleJsDefault.default
);
parcelHelpers.export(exports, "shuffler", ()=>_shuffleJs.shuffler
);
parcelHelpers.export(exports, "sum", ()=>_sumJsDefault.default
);
parcelHelpers.export(exports, "ticks", ()=>_ticksJsDefault.default
);
parcelHelpers.export(exports, "tickIncrement", ()=>_ticksJs.tickIncrement
);
parcelHelpers.export(exports, "tickStep", ()=>_ticksJs.tickStep
);
parcelHelpers.export(exports, "transpose", ()=>_transposeJsDefault.default
);
parcelHelpers.export(exports, "variance", ()=>_varianceJsDefault.default
);
parcelHelpers.export(exports, "zip", ()=>_zipJsDefault.default
);
parcelHelpers.export(exports, "every", ()=>_everyJsDefault.default
);
parcelHelpers.export(exports, "some", ()=>_someJsDefault.default
);
parcelHelpers.export(exports, "filter", ()=>_filterJsDefault.default
);
parcelHelpers.export(exports, "map", ()=>_mapJsDefault.default
);
parcelHelpers.export(exports, "reduce", ()=>_reduceJsDefault.default
);
parcelHelpers.export(exports, "reverse", ()=>_reverseJsDefault.default
);
parcelHelpers.export(exports, "sort", ()=>_sortJsDefault.default
);
parcelHelpers.export(exports, "difference", ()=>_differenceJsDefault.default
);
parcelHelpers.export(exports, "disjoint", ()=>_disjointJsDefault.default
);
parcelHelpers.export(exports, "intersection", ()=>_intersectionJsDefault.default
);
parcelHelpers.export(exports, "subset", ()=>_subsetJsDefault.default
);
parcelHelpers.export(exports, "superset", ()=>_supersetJsDefault.default
);
parcelHelpers.export(exports, "union", ()=>_unionJsDefault.default
);
parcelHelpers.export(exports, "InternMap", ()=>_internmap.InternMap
);
parcelHelpers.export(exports, "InternSet", ()=>_internmap.InternSet
);
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _crossJs = require("./cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _cumsumJs = require("./cumsum.js");
var _cumsumJsDefault = parcelHelpers.interopDefault(_cumsumJs);
var _descendingJs = require("./descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _deviationJs = require("./deviation.js");
var _deviationJsDefault = parcelHelpers.interopDefault(_deviationJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _fsumJs = require("./fsum.js");
var _groupJs = require("./group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _groupSortJs = require("./groupSort.js");
var _groupSortJsDefault = parcelHelpers.interopDefault(_groupSortJs);
var _binJs = require("./bin.js");
var _binJsDefault = parcelHelpers.interopDefault(_binJs);
var _freedmanDiaconisJs = require("./threshold/freedmanDiaconis.js");
var _freedmanDiaconisJsDefault = parcelHelpers.interopDefault(_freedmanDiaconisJs);
var _scottJs = require("./threshold/scott.js");
var _scottJsDefault = parcelHelpers.interopDefault(_scottJs);
var _sturgesJs = require("./threshold/sturges.js");
var _sturgesJsDefault = parcelHelpers.interopDefault(_sturgesJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _medianJs = require("./median.js");
var _medianJsDefault = parcelHelpers.interopDefault(_medianJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
var _modeJs = require("./mode.js");
var _modeJsDefault = parcelHelpers.interopDefault(_modeJs);
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _pairsJs = require("./pairs.js");
var _pairsJsDefault = parcelHelpers.interopDefault(_pairsJs);
var _permuteJs = require("./permute.js");
var _permuteJsDefault = parcelHelpers.interopDefault(_permuteJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _rankJs = require("./rank.js");
var _rankJsDefault = parcelHelpers.interopDefault(_rankJs);
var _leastJs = require("./least.js");
var _leastJsDefault = parcelHelpers.interopDefault(_leastJs);
var _leastIndexJs = require("./leastIndex.js");
var _leastIndexJsDefault = parcelHelpers.interopDefault(_leastIndexJs);
var _greatestJs = require("./greatest.js");
var _greatestJsDefault = parcelHelpers.interopDefault(_greatestJs);
var _greatestIndexJs = require("./greatestIndex.js");
var _greatestIndexJsDefault = parcelHelpers.interopDefault(_greatestIndexJs);
var _scanJs = require("./scan.js");
var _scanJsDefault = parcelHelpers.interopDefault(_scanJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _ticksJs = require("./ticks.js");
var _ticksJsDefault = parcelHelpers.interopDefault(_ticksJs);
var _transposeJs = require("./transpose.js");
var _transposeJsDefault = parcelHelpers.interopDefault(_transposeJs);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _disjointJs = require("./disjoint.js");
var _disjointJsDefault = parcelHelpers.interopDefault(_disjointJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _subsetJs = require("./subset.js");
var _subsetJsDefault = parcelHelpers.interopDefault(_subsetJs);
var _supersetJs = require("./superset.js");
var _supersetJsDefault = parcelHelpers.interopDefault(_supersetJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _internmap = require("internmap");

},{"./bisect.js":"2jqf4","./ascending.js":"2iZSL","./bisector.js":"1BY0F","./count.js":"fdcqm","./cross.js":"7sblS","./cumsum.js":"2kpSh","./descending.js":"dpgkj","./deviation.js":"2qowT","./extent.js":"bpNTV","./fsum.js":"7NEFi","./group.js":"dY8VH","./groupSort.js":"7Ogmv","./bin.js":"18IDv","./threshold/freedmanDiaconis.js":"YzWbd","./threshold/scott.js":"84IpX","./threshold/sturges.js":"aAePr","./max.js":"6b1uv","./maxIndex.js":"1pqy7","./mean.js":"diWJS","./median.js":"3NuqZ","./merge.js":"hviMC","./min.js":"1KKa7","./minIndex.js":"g6uuQ","./mode.js":"9MNuy","./nice.js":"hx3lC","./pairs.js":"krmK9","./permute.js":"72FE4","./quantile.js":"etiLw","./quickselect.js":"4sTUl","./range.js":"kH8Ba","./rank.js":"bZOnA","./least.js":"69Q1F","./leastIndex.js":"9vype","./greatest.js":"4LoCm","./greatestIndex.js":"lg7Xr","./scan.js":"cKBNL","./shuffle.js":"iaAC9","./sum.js":"47K1s","./ticks.js":"iDfKX","./transpose.js":"jO6XX","./variance.js":"go0M5","./zip.js":"8wbOt","./every.js":"87TIV","./some.js":"1GQIB","./filter.js":"lrcfK","./map.js":"x1FBS","./reduce.js":"3Dobh","./reverse.js":"hee4j","./sort.js":"ApqXa","./difference.js":"l43vv","./disjoint.js":"jrbsK","./intersection.js":"cBy6r","./subset.js":"32tt1","./superset.js":"l8AhK","./union.js":"80KgN","internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2jqf4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisectRight", ()=>bisectRight
);
parcelHelpers.export(exports, "bisectLeft", ()=>bisectLeft
);
parcelHelpers.export(exports, "bisectCenter", ()=>bisectCenter
);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
const ascendingBisect = _bisectorJsDefault.default(_ascendingJsDefault.default);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = _bisectorJsDefault.default(_numberJsDefault.default).center;
exports.default = bisectRight;

},{"./ascending.js":"2iZSL","./bisector.js":"1BY0F","./number.js":"imr9T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2iZSL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ascending(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
exports.default = ascending;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"1BY0F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function bisector(f) {
    let delta = f;
    let compare1 = f;
    let compare2 = f;
    if (f.length !== 2) {
        delta = (d, x)=>f(d) - x
        ;
        compare1 = _ascendingJsDefault.default;
        compare2 = (d, x)=>_ascendingJsDefault.default(f(d), x)
        ;
    }
    function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi)
        }
        return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) <= 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi)
        }
        return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left,
        center,
        right
    };
}
exports.default = bisector;

},{"./ascending.js":"2iZSL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"imr9T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
function number(x) {
    return x === null ? NaN : +x;
}
exports.default = number;
function* numbers(values, valueof) {
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) yield value;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdcqm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function count(values, valueof) {
    let count1 = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count1;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count1;
    }
    return count1;
}
exports.default = count;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sblS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function length(array) {
    return array.length | 0;
}
function empty(length1) {
    return !(length1 > 0);
}
function arrayify(values) {
    return typeof values !== "object" || "length" in values ? values : Array.from(values);
}
function reducer(reduce) {
    return (values)=>reduce(...values)
    ;
}
function cross(...values) {
    const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
    values = values.map(arrayify);
    const lengths = values.map(length);
    const j1 = values.length - 1;
    const index = new Array(j1 + 1).fill(0);
    const product = [];
    if (j1 < 0 || lengths.some(empty)) return product;
    while(true){
        product.push(index.map((j, i)=>values[i][j]
        ));
        let i1 = j1;
        while(++index[i1] === lengths[i1]){
            if (i1 === 0) return reduce ? product.map(reduce) : product;
            index[i1--] = 0;
        }
    }
}
exports.default = cross;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2kpSh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function cumsum(values, valueof) {
    var sum = 0, index = 0;
    return Float64Array.from(values, valueof === undefined ? (v)=>sum += +v || 0
     : (v)=>sum += +valueof(v, index++, values) || 0
    );
}
exports.default = cumsum;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpgkj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function descending(a, b) {
    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
exports.default = descending;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qowT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
function deviation(values, valueof) {
    const v = _varianceJsDefault.default(values, valueof);
    return v ? Math.sqrt(v) : v;
}
exports.default = deviation;

},{"./variance.js":"go0M5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"go0M5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function variance(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    }
    if (count > 1) return sum / (count - 1);
}
exports.default = variance;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpNTV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function extent(values, valueof) {
    let min;
    let max;
    if (valueof === undefined) {
        for (const value of values)if (value != null) {
            if (min === undefined) {
                if (value >= value) min = max = value;
            } else {
                if (min > value) min = value;
                if (max < value) max = value;
            }
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
                if (value >= value) min = max = value;
            } else {
                if (min > value) min = value;
                if (max < value) max = value;
            }
        }
    }
    return [
        min,
        max
    ];
}
exports.default = extent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7NEFi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
parcelHelpers.export(exports, "Adder", ()=>Adder
);
parcelHelpers.export(exports, "fsum", ()=>fsum
);
parcelHelpers.export(exports, "fcumsum", ()=>fcumsum
);
class Adder {
    constructor(){
        this._partials = new Float64Array(32);
        this._n = 0;
    }
    add(x) {
        const p = this._partials;
        let i = 0;
        for(let j = 0; j < this._n && j < 32; j++){
            const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
            if (lo) p[i++] = lo;
            x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
    }
    valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
            hi = p[--n];
            while(n > 0){
                x = hi;
                y = p[--n];
                hi = x + y;
                lo = y - (hi - x);
                if (lo) break;
            }
            if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
                y = lo * 2;
                x = hi + y;
                if (y == x - hi) hi = x;
            }
        }
        return hi;
    }
}
function fsum(values, valueof) {
    const adder = new Adder();
    if (valueof === undefined) {
        for (let value of values)if (value = +value) adder.add(value);
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) adder.add(value);
    }
    return +adder;
}
function fcumsum(values, valueof) {
    const adder = new Adder();
    let index = -1;
    return Float64Array.from(values, valueof === undefined ? (v)=>adder.add(+v || 0)
     : (v)=>adder.add(+valueof(v, ++index, values) || 0)
    );
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dY8VH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "groups", ()=>groups
);
parcelHelpers.export(exports, "flatGroup", ()=>flatGroup
);
parcelHelpers.export(exports, "flatRollup", ()=>flatRollup
);
parcelHelpers.export(exports, "rollup", ()=>rollup
);
parcelHelpers.export(exports, "rollups", ()=>rollups
);
parcelHelpers.export(exports, "index", ()=>index
);
parcelHelpers.export(exports, "indexes", ()=>indexes
);
var _internmap = require("internmap");
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
function group(values, ...keys) {
    return nest(values, _identityJsDefault.default, _identityJsDefault.default, keys);
}
exports.default = group;
function groups(values, ...keys) {
    return nest(values, Array.from, _identityJsDefault.default, keys);
}
function flatten(groups1, keys) {
    for(let i = 1, n = keys.length; i < n; ++i)groups1 = groups1.flatMap((g)=>g.pop().map(([key, value])=>[
                ...g,
                key,
                value
            ]
        )
    );
    return groups1;
}
function flatGroup(values, ...keys) {
    return flatten(groups(values, ...keys), keys);
}
function flatRollup(values, reduce, ...keys) {
    return flatten(rollups(values, reduce, ...keys), keys);
}
function rollup(values, reduce, ...keys) {
    return nest(values, _identityJsDefault.default, reduce, keys);
}
function rollups(values, reduce, ...keys) {
    return nest(values, Array.from, reduce, keys);
}
function index(values, ...keys) {
    return nest(values, _identityJsDefault.default, unique, keys);
}
function indexes(values, ...keys) {
    return nest(values, Array.from, unique, keys);
}
function unique(values) {
    if (values.length !== 1) throw new Error("duplicate key");
    return values[0];
}
function nest(values2, map, reduce, keys) {
    return function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups2 = new _internmap.InternMap();
        const keyof = keys[i++];
        let index1 = -1;
        for (const value of values){
            const key = keyof(value, ++index1, values);
            const group1 = groups2.get(key);
            if (group1) group1.push(value);
            else groups2.set(key, [
                value
            ]);
        }
        for (const [key, values1] of groups2)groups2.set(key, regroup(values1, i));
        return map(groups2);
    }(values2, 0);
}

},{"internmap":"a6b0X","./identity.js":"gZYoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a6b0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InternMap", ()=>InternMap
);
parcelHelpers.export(exports, "InternSet", ()=>InternSet
);
class InternMap extends Map {
    constructor(entries, key = keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (entries != null) for (const [key1, value] of entries)this.set(key1, value);
    }
    get(key) {
        return super.get(intern_get(this, key));
    }
    has(key) {
        return super.has(intern_get(this, key));
    }
    set(key, value) {
        return super.set(intern_set(this, key), value);
    }
    delete(key) {
        return super.delete(intern_delete(this, key));
    }
}
class InternSet extends Set {
    constructor(values, key = keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (values != null) for (const value of values)this.add(value);
    }
    has(value) {
        return super.has(intern_get(this, value));
    }
    add(value) {
        return super.add(intern_set(this, value));
    }
    delete(value) {
        return super.delete(intern_delete(this, value));
    }
}
function intern_get({ _intern , _key  }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern , _key  }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
}
function intern_delete({ _intern , _key  }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
    }
    return value;
}
function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZYoG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function identity(x) {
    return x;
}
exports.default = identity;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Ogmv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _groupJs = require("./group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
function groupSort(values, reduce, key1) {
    return (reduce.length !== 2 ? _sortJsDefault.default(_groupJs.rollup(values, reduce, key1), ([ak, av], [bk, bv])=>_ascendingJsDefault.default(av, bv) || _ascendingJsDefault.default(ak, bk)
    ) : _sortJsDefault.default(_groupJsDefault.default(values, key1), ([ak, av], [bk, bv])=>reduce(av, bv) || _ascendingJsDefault.default(ak, bk)
    )).map(([key])=>key
    );
}
exports.default = groupSort;

},{"./ascending.js":"2iZSL","./group.js":"dY8VH","./sort.js":"ApqXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ApqXa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compareDefined", ()=>compareDefined
);
parcelHelpers.export(exports, "ascendingDefined", ()=>ascendingDefined
);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _permuteJs = require("./permute.js");
var _permuteJsDefault = parcelHelpers.interopDefault(_permuteJs);
function sort(values, ...F) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    values = Array.from(values);
    let [f1] = F;
    if (f1 && f1.length !== 2 || F.length > 1) {
        const index = Uint32Array.from(values, (d, i)=>i
        );
        if (F.length > 1) {
            F = F.map((f)=>values.map(f)
            );
            index.sort((i, j)=>{
                for (const f of F){
                    const c = ascendingDefined(f[i], f[j]);
                    if (c) return c;
                }
            });
        } else {
            f1 = values.map(f1);
            index.sort((i, j)=>ascendingDefined(f1[i], f1[j])
            );
        }
        return _permuteJsDefault.default(values, index);
    }
    return values.sort(compareDefined(f1));
}
exports.default = sort;
function compareDefined(compare = _ascendingJsDefault.default) {
    if (compare === _ascendingJsDefault.default) return ascendingDefined;
    if (typeof compare !== "function") throw new TypeError("compare is not a function");
    return (a, b)=>{
        const x = compare(a, b);
        if (x || x === 0) return x;
        return (compare(b, b) === 0) - (compare(a, a) === 0);
    };
}
function ascendingDefined(a, b) {
    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
}

},{"./ascending.js":"2iZSL","./permute.js":"72FE4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72FE4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function permute(source, keys) {
    return Array.from(keys, (key)=>source[key]
    );
}
exports.default = permute;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18IDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayJs = require("./array.js");
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _ticksJs = require("./ticks.js");
var _ticksJsDefault = parcelHelpers.interopDefault(_ticksJs);
var _sturgesJs = require("./threshold/sturges.js");
var _sturgesJsDefault = parcelHelpers.interopDefault(_sturgesJs);
function bin() {
    var value = _identityJsDefault.default, domain = _extentJsDefault.default, threshold = _sturgesJsDefault.default;
    function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);
        var i, n = data.length, x, step, values = new Array(n);
        for(i = 0; i < n; ++i)values[i] = value(data[i], i, data);
        var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
        // Convert number of thresholds into uniform thresholds, and nice the
        // default domain accordingly.
        if (!Array.isArray(tz)) {
            const max = x1, tn = +tz;
            if (domain === _extentJsDefault.default) [x0, x1] = _niceJsDefault.default(x0, x1, tn);
            tz = _ticksJsDefault.default(x0, x1, tn);
            // If the domain is aligned with the first tick (which it will by
            // default), then we can use quantization rather than bisection to bin
            // values, which is substantially faster.
            if (tz[0] <= x0) step = _ticksJs.tickIncrement(x0, x1, tn);
            // If the last threshold is coincident with the domain’s upper bound, the
            // last bin will be zero-width. If the default domain is used, and this
            // last threshold is coincident with the maximum input value, we can
            // extend the niced upper bound by one tick to ensure uniform bin widths;
            // otherwise, we simply remove the last threshold. Note that we don’t
            // coerce values or the domain to numbers, and thus must be careful to
            // compare order (>=) rather than strict equality (===)!
            if (tz[tz.length - 1] >= x1) {
                if (max >= x1 && domain === _extentJsDefault.default) {
                    const step = _ticksJs.tickIncrement(x0, x1, tn);
                    if (isFinite(step)) {
                        if (step > 0) x1 = (Math.floor(x1 / step) + 1) * step;
                        else if (step < 0) x1 = (Math.ceil(x1 * -step) + 1) / -step;
                    }
                } else tz.pop();
            }
        }
        // Remove any thresholds outside the domain.
        var m = tz.length;
        while(tz[0] <= x0)tz.shift(), --m;
        while(tz[m - 1] > x1)tz.pop(), --m;
        var bins = new Array(m + 1), bin1;
        // Initialize bins.
        for(i = 0; i <= m; ++i){
            bin1 = bins[i] = [];
            bin1.x0 = i > 0 ? tz[i - 1] : x0;
            bin1.x1 = i < m ? tz[i] : x1;
        }
        // Assign data to bins by value, ignoring any outside the domain.
        if (isFinite(step)) {
            if (step > 0) {
                for(i = 0; i < n; ++i)if ((x = values[i]) != null && x0 <= x && x <= x1) bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);
            } else if (step < 0) {
                for(i = 0; i < n; ++i)if ((x = values[i]) != null && x0 <= x && x <= x1) {
                    const j = Math.floor((x0 - x) * step);
                    bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding
                }
            }
        } else {
            for(i = 0; i < n; ++i)if ((x = values[i]) != null && x0 <= x && x <= x1) bins[_bisectJsDefault.default(tz, x, 0, m)].push(data[i]);
        }
        return bins;
    }
    histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : _constantJsDefault.default(_), histogram) : value;
    };
    histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : _constantJsDefault.default([
            _[0],
            _[1]
        ]), histogram) : domain;
    };
    histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? _constantJsDefault.default(_arrayJs.slice.call(_)) : _constantJsDefault.default(_), histogram) : threshold;
    };
    return histogram;
}
exports.default = bin;

},{"./array.js":"9A0pE","./bisect.js":"2jqf4","./constant.js":"1EOU8","./extent.js":"bpNTV","./identity.js":"gZYoG","./nice.js":"hx3lC","./ticks.js":"iDfKX","./threshold/sturges.js":"aAePr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9A0pE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice
);
parcelHelpers.export(exports, "map", ()=>map
);
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1EOU8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function constant(x) {
    return ()=>x
    ;
}
exports.default = constant;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hx3lC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ticksJs = require("./ticks.js");
function nice(start, stop, count) {
    let prestep;
    while(true){
        const step = _ticksJs.tickIncrement(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) return [
            start,
            stop
        ];
        else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
        }
        prestep = step;
    }
}
exports.default = nice;

},{"./ticks.js":"iDfKX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iDfKX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tickIncrement", ()=>tickIncrement
);
parcelHelpers.export(exports, "tickStep", ()=>tickStep
);
var e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
function ticks(start, stop, count) {
    var reverse, i = -1, n, ticks1, step;
    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [
        start
    ];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
    if (step > 0) {
        let r0 = Math.round(start / step), r1 = Math.round(stop / step);
        if (r0 * step < start) ++r0;
        if (r1 * step > stop) --r1;
        ticks1 = new Array(n = r1 - r0 + 1);
        while(++i < n)ticks1[i] = (r0 + i) * step;
    } else {
        step = -step;
        let r0 = Math.round(start * step), r1 = Math.round(stop * step);
        if (r0 / step < start) ++r0;
        if (r1 / step > stop) --r1;
        ticks1 = new Array(n = r1 - r0 + 1);
        while(++i < n)ticks1[i] = (r0 + i) / step;
    }
    if (reverse) ticks1.reverse();
    return ticks1;
}
exports.default = ticks;
function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e10) step1 *= 10;
    else if (error >= e5) step1 *= 5;
    else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aAePr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _countJs = require("../count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
function thresholdSturges(values) {
    return Math.ceil(Math.log(_countJsDefault.default(values)) / Math.LN2) + 1;
}
exports.default = thresholdSturges;

},{"../count.js":"fdcqm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"YzWbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _countJs = require("../count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _quantileJs = require("../quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
function thresholdFreedmanDiaconis(values, min, max) {
    return Math.ceil((max - min) / (2 * (_quantileJsDefault.default(values, 0.75) - _quantileJsDefault.default(values, 0.25)) * Math.pow(_countJsDefault.default(values), -1 / 3)));
}
exports.default = thresholdFreedmanDiaconis;

},{"../count.js":"fdcqm","../quantile.js":"etiLw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etiLw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quantileSorted", ()=>quantileSorted
);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
function quantile(values, p, valueof) {
    values = Float64Array.from(_numberJs.numbers(values, valueof));
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return _minJsDefault.default(values);
    if (p >= 1) return _maxJsDefault.default(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = _maxJsDefault.default(_quickselectJsDefault.default(values, i0).subarray(0, i0 + 1)), value1 = _minJsDefault.default(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
}
exports.default = quantile;
function quantileSorted(values, p, valueof = _numberJsDefault.default) {
    if (!(n = values.length)) return;
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
}

},{"./max.js":"6b1uv","./min.js":"1KKa7","./quickselect.js":"4sTUl","./number.js":"imr9T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6b1uv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function max(values, valueof) {
    let max1;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (max1 < value || max1 === undefined && value >= value)) max1 = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max1 < value || max1 === undefined && value >= value)) max1 = value;
    }
    return max1;
}
exports.default = max;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1KKa7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function min(values, valueof) {
    let min1;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (min1 > value || min1 === undefined && value >= value)) min1 = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (min1 > value || min1 === undefined && value >= value)) min1 = value;
    }
    return min1;
}
exports.default = min;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sTUl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sortJs = require("./sort.js");
function quickselect(array, k, left = 0, right = array.length - 1, compare) {
    compare = compare === undefined ? _sortJs.ascendingDefined : _sortJs.compareDefined(compare);
    while(right > left){
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselect(array, k, newLeft, newRight, compare);
        }
        const t = array[k];
        let i = left;
        let j = right;
        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);
        while(i < j){
            swap(array, i, j), ++i, --j;
            while(compare(array[i], t) < 0)++i;
            while(compare(array[j], t) > 0)--j;
        }
        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
    return array;
}
exports.default = quickselect;
function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}

},{"./sort.js":"ApqXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84IpX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _countJs = require("../count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _deviationJs = require("../deviation.js");
var _deviationJsDefault = parcelHelpers.interopDefault(_deviationJs);
function thresholdScott(values, min, max) {
    return Math.ceil((max - min) * Math.cbrt(_countJsDefault.default(values)) / (3.49 * _deviationJsDefault.default(values)));
}
exports.default = thresholdScott;

},{"../count.js":"fdcqm","../deviation.js":"2qowT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pqy7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function maxIndex(values, valueof) {
    let max;
    let maxIndex1 = -1;
    let index = -1;
    if (valueof === undefined) for (const value of values){
        ++index;
        if (value != null && (max < value || max === undefined && value >= value)) max = value, maxIndex1 = index;
    }
    else {
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) max = value, maxIndex1 = index;
    }
    return maxIndex1;
}
exports.default = maxIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"diWJS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function mean(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count, sum += value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count, sum += value;
    }
    if (count) return sum / count;
}
exports.default = mean;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3NuqZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
function median(values, valueof) {
    return _quantileJsDefault.default(values, 0.5, valueof);
}
exports.default = median;

},{"./quantile.js":"etiLw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hviMC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function* flatten(arrays) {
    for (const array of arrays)yield* array;
}
function merge(arrays) {
    return Array.from(flatten(arrays));
}
exports.default = merge;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6uuQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function minIndex(values, valueof) {
    let min;
    let minIndex1 = -1;
    let index = -1;
    if (valueof === undefined) for (const value of values){
        ++index;
        if (value != null && (min > value || min === undefined && value >= value)) min = value, minIndex1 = index;
    }
    else {
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) min = value, minIndex1 = index;
    }
    return minIndex1;
}
exports.default = minIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9MNuy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function mode(values, valueof) {
    const counts = new _internmap.InternMap();
    if (valueof === undefined) {
        for (let value of values)if (value != null && value >= value) counts.set(value, (counts.get(value) || 0) + 1);
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && value >= value) counts.set(value, (counts.get(value) || 0) + 1);
    }
    let modeValue;
    let modeCount = 0;
    for (const [value, count] of counts)if (count > modeCount) {
        modeCount = count;
        modeValue = value;
    }
    return modeValue;
}
exports.default = mode;

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"krmK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pair", ()=>pair
);
function pairs(values, pairof = pair) {
    const pairs1 = [];
    let previous;
    let first = false;
    for (const value of values){
        if (first) pairs1.push(pairof(previous, value));
        previous = value;
        first = true;
    }
    return pairs1;
}
exports.default = pairs;
function pair(a, b) {
    return [
        a,
        b
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kH8Ba":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range1 = new Array(n);
    while(++i < n)range1[i] = start + i * step;
    return range1;
}
exports.default = range;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZOnA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _sortJs = require("./sort.js");
function rank(values, valueof = _ascendingJsDefault.default) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    let V = Array.from(values);
    const R = new Float64Array(V.length);
    if (valueof.length !== 2) V = V.map(valueof), valueof = _ascendingJsDefault.default;
    const compareIndex = (i, j)=>valueof(V[i], V[j])
    ;
    let k, r;
    Uint32Array.from(V, (_, i)=>i
    ).sort(valueof === _ascendingJsDefault.default ? (i, j)=>_sortJs.ascendingDefined(V[i], V[j])
     : _sortJs.compareDefined(compareIndex)).forEach((j, i)=>{
        const c = compareIndex(j, k === undefined ? j : k);
        if (c >= 0) {
            if (k === undefined || c > 0) k = j, r = i;
            R[j] = r;
        } else R[j] = NaN;
    });
    return R;
}
exports.default = rank;

},{"./ascending.js":"2iZSL","./sort.js":"ApqXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"69Q1F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function least(values, compare = _ascendingJsDefault.default) {
    let min;
    let defined = false;
    if (compare.length === 1) {
        let minValue;
        for (const element of values){
            const value = compare(element);
            if (defined ? _ascendingJsDefault.default(value, minValue) < 0 : _ascendingJsDefault.default(value, value) === 0) {
                min = element;
                minValue = value;
                defined = true;
            }
        }
    } else {
        for (const value of values)if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
            min = value;
            defined = true;
        }
    }
    return min;
}
exports.default = least;

},{"./ascending.js":"2iZSL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vype":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
function leastIndex(values, compare = _ascendingJsDefault.default) {
    if (compare.length === 1) return _minIndexJsDefault.default(values, compare);
    let minValue;
    let min = -1;
    let index = -1;
    for (const value of values){
        ++index;
        if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
            minValue = value;
            min = index;
        }
    }
    return min;
}
exports.default = leastIndex;

},{"./ascending.js":"2iZSL","./minIndex.js":"g6uuQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4LoCm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function greatest(values, compare = _ascendingJsDefault.default) {
    let max;
    let defined = false;
    if (compare.length === 1) {
        let maxValue;
        for (const element of values){
            const value = compare(element);
            if (defined ? _ascendingJsDefault.default(value, maxValue) > 0 : _ascendingJsDefault.default(value, value) === 0) {
                max = element;
                maxValue = value;
                defined = true;
            }
        }
    } else {
        for (const value of values)if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
            max = value;
            defined = true;
        }
    }
    return max;
}
exports.default = greatest;

},{"./ascending.js":"2iZSL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lg7Xr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
function greatestIndex(values, compare = _ascendingJsDefault.default) {
    if (compare.length === 1) return _maxIndexJsDefault.default(values, compare);
    let maxValue;
    let max = -1;
    let index = -1;
    for (const value of values){
        ++index;
        if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
            maxValue = value;
            max = index;
        }
    }
    return max;
}
exports.default = greatestIndex;

},{"./ascending.js":"2iZSL","./maxIndex.js":"1pqy7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKBNL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _leastIndexJs = require("./leastIndex.js");
var _leastIndexJsDefault = parcelHelpers.interopDefault(_leastIndexJs);
function scan(values, compare) {
    const index = _leastIndexJsDefault.default(values, compare);
    return index < 0 ? undefined : index;
}
exports.default = scan;

},{"./leastIndex.js":"9vype","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iaAC9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shuffler", ()=>shuffler
);
exports.default = shuffler(Math.random);
function shuffler(random) {
    return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while(m){
            const i = random() * m-- | 0, t = array[m + i0];
            array[m + i0] = array[i + i0];
            array[i + i0] = t;
        }
        return array;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47K1s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function sum(values, valueof) {
    let sum1 = 0;
    if (valueof === undefined) {
        for (let value of values)if (value = +value) sum1 += value;
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) sum1 += value;
    }
    return sum1;
}
exports.default = sum;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jO6XX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
function transpose(matrix) {
    if (!(n = matrix.length)) return [];
    for(var i = -1, m = _minJsDefault.default(matrix, length), transpose1 = new Array(m); ++i < m;)for(var j = -1, n, row = transpose1[i] = new Array(n); ++j < n;)row[j] = matrix[j][i];
    return transpose1;
}
exports.default = transpose;
function length(d) {
    return d.length;
}

},{"./min.js":"1KKa7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wbOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transposeJs = require("./transpose.js");
var _transposeJsDefault = parcelHelpers.interopDefault(_transposeJs);
function zip() {
    return _transposeJsDefault.default(arguments);
}
exports.default = zip;

},{"./transpose.js":"jO6XX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87TIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function every(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values){
        if (!test(value, ++index, values)) return false;
    }
    return true;
}
exports.default = every;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GQIB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function some(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values){
        if (test(value, ++index, values)) return true;
    }
    return false;
}
exports.default = some;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrcfK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function filter(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    const array = [];
    let index = -1;
    for (const value of values)if (test(value, ++index, values)) array.push(value);
    return array;
}
exports.default = filter;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"x1FBS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function map(values, mapper) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
    return Array.from(values, (value, index)=>mapper(value, index, values)
    );
}
exports.default = map;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Dobh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function reduce(values, reducer, value) {
    if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
    const iterator = values[Symbol.iterator]();
    let done, next, index = -1;
    if (arguments.length < 3) {
        ({ done , value  } = iterator.next());
        if (done) return;
        ++index;
    }
    while({ done , value: next  } = iterator.next(), !done)value = reducer(value, next, ++index, values);
    return value;
}
exports.default = reduce;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hee4j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function reverse(values) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    return Array.from(values).reverse();
}
exports.default = reverse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l43vv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function difference(values, ...others) {
    values = new _internmap.InternSet(values);
    for (const other of others)for (const value of other)values.delete(value);
    return values;
}
exports.default = difference;

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jrbsK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function disjoint(values, other) {
    const iterator = other[Symbol.iterator](), set = new _internmap.InternSet();
    for (const v of values){
        if (set.has(v)) return false;
        let value, done;
        while({ value , done  } = iterator.next()){
            if (done) break;
            if (Object.is(v, value)) return false;
            set.add(value);
        }
    }
    return true;
}
exports.default = disjoint;

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBy6r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function intersection(values, ...others) {
    values = new _internmap.InternSet(values);
    others = others.map(set);
    out: for (const value of values){
        for (const other of others)if (!other.has(value)) {
            values.delete(value);
            continue out;
        }
    }
    return values;
}
exports.default = intersection;
function set(values) {
    return values instanceof _internmap.InternSet ? values : new _internmap.InternSet(values);
}

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32tt1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _supersetJs = require("./superset.js");
var _supersetJsDefault = parcelHelpers.interopDefault(_supersetJs);
function subset(values, other) {
    return _supersetJsDefault.default(other, values);
}
exports.default = subset;

},{"./superset.js":"l8AhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8AhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function superset(values, other) {
    const iterator = values[Symbol.iterator](), set = new Set();
    for (const o of other){
        const io = intern(o);
        if (set.has(io)) continue;
        let value, done;
        while({ value , done  } = iterator.next()){
            if (done) return false;
            const ivalue = intern(value);
            set.add(ivalue);
            if (Object.is(io, ivalue)) break;
        }
    }
    return true;
}
exports.default = superset;
function intern(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80KgN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internmap = require("internmap");
function union(...others) {
    const set = new _internmap.InternSet();
    for (const other of others)for (const o of other)set.add(o);
    return set;
}
exports.default = union;

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2g6gM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axisTop", ()=>_axisJs.axisTop
);
parcelHelpers.export(exports, "axisRight", ()=>_axisJs.axisRight
);
parcelHelpers.export(exports, "axisBottom", ()=>_axisJs.axisBottom
);
parcelHelpers.export(exports, "axisLeft", ()=>_axisJs.axisLeft
);
var _axisJs = require("./axis.js");

},{"./axis.js":"lwARn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwARn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axisTop", ()=>axisTop
);
parcelHelpers.export(exports, "axisRight", ()=>axisRight
);
parcelHelpers.export(exports, "axisBottom", ()=>axisBottom
);
parcelHelpers.export(exports, "axisLeft", ()=>axisLeft
);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var top = 1, right = 2, bottom = 3, left = 4, epsilon = 0.000001;
function translateX(x) {
    return "translate(" + x + ",0)";
}
function translateY(y) {
    return "translate(0," + y + ")";
}
function number(scale) {
    return (d)=>+scale(d)
    ;
}
function center(scale, offset) {
    offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
    if (scale.round()) offset = Math.round(offset);
    return (d)=>+scale(d) + offset
    ;
}
function entering() {
    return !this.__axis;
}
function axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k = orient === top || orient === left ? -1 : 1, x = orient === left || orient === right ? "x" : "y", transform = orient === top || orient === bottom ? translateX : translateY;
    function axis1(context) {
        var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identityJsDefault.default : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = +range[0] + offset, range1 = +range[range.length - 1] + offset, position = (scale.bandwidth ? center : number)(scale.copy(), offset), selection = context.selection ? context.selection() : context, path = selection.selectAll(".domain").data([
            null
        ]), tick = selection.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
        path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
        tick = tick.merge(tickEnter);
        line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
        text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
        if (context !== selection) {
            path = path.transition(context);
            tick = tick.transition(context);
            line = line.transition(context);
            text = text.transition(context);
            tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
                return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform");
            });
            tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
                var p = this.parentNode.__axis;
                return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset);
            });
        }
        tickExit.remove();
        path.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
        tick.attr("opacity", 1).attr("transform", function(d) {
            return transform(position(d) + offset);
        });
        line.attr(x + "2", k * tickSizeInner);
        text.attr(x, k * spacing).text(format);
        selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
        selection.each(function() {
            this.__axis = position;
        });
    }
    axis1.scale = function(_) {
        return arguments.length ? (scale = _, axis1) : scale;
    };
    axis1.ticks = function() {
        return tickArguments = Array.from(arguments), axis1;
    };
    axis1.tickArguments = function(_) {
        return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis1) : tickArguments.slice();
    };
    axis1.tickValues = function(_) {
        return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis1) : tickValues && tickValues.slice();
    };
    axis1.tickFormat = function(_) {
        return arguments.length ? (tickFormat = _, axis1) : tickFormat;
    };
    axis1.tickSize = function(_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis1) : tickSizeInner;
    };
    axis1.tickSizeInner = function(_) {
        return arguments.length ? (tickSizeInner = +_, axis1) : tickSizeInner;
    };
    axis1.tickSizeOuter = function(_) {
        return arguments.length ? (tickSizeOuter = +_, axis1) : tickSizeOuter;
    };
    axis1.tickPadding = function(_) {
        return arguments.length ? (tickPadding = +_, axis1) : tickPadding;
    };
    axis1.offset = function(_) {
        return arguments.length ? (offset = +_, axis1) : offset;
    };
    return axis1;
}
function axisTop(scale) {
    return axis(top, scale);
}
function axisRight(scale) {
    return axis(right, scale);
}
function axisBottom(scale) {
    return axis(bottom, scale);
}
function axisLeft(scale) {
    return axis(left, scale);
}

},{"./identity.js":"aXZUf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXZUf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return x;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TG1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "brush", ()=>_brushJsDefault.default
);
parcelHelpers.export(exports, "brushX", ()=>_brushJs.brushX
);
parcelHelpers.export(exports, "brushY", ()=>_brushJs.brushY
);
parcelHelpers.export(exports, "brushSelection", ()=>_brushJs.brushSelection
);
var _brushJs = require("./brush.js");
var _brushJsDefault = parcelHelpers.interopDefault(_brushJs);

},{"./brush.js":"7XkAB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7XkAB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "brushSelection", ()=>brushSelection
);
parcelHelpers.export(exports, "brushX", ()=>brushX
);
parcelHelpers.export(exports, "brushY", ()=>brushY
);
var _d3Dispatch = require("d3-dispatch");
var _d3Drag = require("d3-drag");
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _d3Transition = require("d3-transition");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _eventJs = require("./event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
var MODE_DRAG = {
    name: "drag"
}, MODE_SPACE = {
    name: "space"
}, MODE_HANDLE = {
    name: "handle"
}, MODE_CENTER = {
    name: "center"
};
const { abs , max , min  } = Math;
function number1(e) {
    return [
        +e[0],
        +e[1]
    ];
}
function number2(e) {
    return [
        number1(e[0]),
        number1(e[1])
    ];
}
var X = {
    name: "x",
    handles: [
        "w",
        "e"
    ].map(type),
    input: function(x, e) {
        return x == null ? null : [
            [
                +x[0],
                e[0][1]
            ],
            [
                +x[1],
                e[1][1]
            ]
        ];
    },
    output: function(xy) {
        return xy && [
            xy[0][0],
            xy[1][0]
        ];
    }
};
var Y = {
    name: "y",
    handles: [
        "n",
        "s"
    ].map(type),
    input: function(y, e) {
        return y == null ? null : [
            [
                e[0][0],
                +y[0]
            ],
            [
                e[1][0],
                +y[1]
            ]
        ];
    },
    output: function(xy) {
        return xy && [
            xy[0][1],
            xy[1][1]
        ];
    }
};
var XY = {
    name: "xy",
    handles: [
        "n",
        "w",
        "e",
        "s",
        "nw",
        "ne",
        "sw",
        "se"
    ].map(type),
    input: function(xy) {
        return xy == null ? null : number2(xy);
    },
    output: function(xy) {
        return xy;
    }
};
var cursors = {
    overlay: "crosshair",
    selection: "move",
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
};
var flipX = {
    e: "w",
    w: "e",
    nw: "ne",
    ne: "nw",
    se: "sw",
    sw: "se"
};
var flipY = {
    n: "s",
    s: "n",
    nw: "sw",
    ne: "se",
    se: "ne",
    sw: "nw"
};
var signsX = {
    overlay: 1,
    selection: 1,
    n: null,
    e: 1,
    s: null,
    w: -1,
    nw: -1,
    ne: 1,
    se: 1,
    sw: -1
};
var signsY = {
    overlay: 1,
    selection: 1,
    n: -1,
    e: null,
    s: 1,
    w: null,
    nw: -1,
    ne: -1,
    se: 1,
    sw: 1
};
function type(t) {
    return {
        type: t
    };
}
// Ignore right-click, since that should open the context menu.
function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
}
function defaultExtent() {
    var svg = this.ownerSVGElement || this;
    if (svg.hasAttribute("viewBox")) {
        svg = svg.viewBox.baseVal;
        return [
            [
                svg.x,
                svg.y
            ],
            [
                svg.x + svg.width,
                svg.y + svg.height
            ]
        ];
    }
    return [
        [
            0,
            0
        ],
        [
            svg.width.baseVal.value,
            svg.height.baseVal.value
        ]
    ];
}
function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
}
// Like d3.local, but with the name “__brush” rather than auto-generated.
function local(node) {
    while(!node.__brush)if (!(node = node.parentNode)) return;
    return node.__brush;
}
function empty(extent) {
    return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}
function brushSelection(node) {
    var state = node.__brush;
    return state ? state.dim.output(state.selection) : null;
}
function brushX() {
    return brush(X);
}
function brushY() {
    return brush(Y);
}
exports.default = function() {
    return brush(XY);
};
function brush(dim) {
    var extent1 = defaultExtent, filter = defaultFilter, touchable = defaultTouchable, keys = true, listeners = _d3Dispatch.dispatch("start", "brush", "end"), handleSize = 6, touchending;
    function brush1(group) {
        var overlay = group.property("__brush", initialize).selectAll(".overlay").data([
            type("overlay")
        ]);
        overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
            var extent = local(this).extent;
            _d3Selection.select(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
        });
        group.selectAll(".selection").data([
            type("selection")
        ]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
        var handle = group.selectAll(".handle").data(dim.handles, function(d) {
            return d.type;
        });
        handle.exit().remove();
        handle.enter().append("rect").attr("class", function(d) {
            return "handle handle--" + d.type;
        }).attr("cursor", function(d) {
            return cursors[d.type];
        });
        group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    brush1.move = function(group, selection, event1) {
        if (group.tween) group.on("start.brush", function(event) {
            emitter(this, arguments).beforestart().start(event);
        }).on("interrupt.brush end.brush", function(event) {
            emitter(this, arguments).end(event);
        }).tween("brush", function() {
            var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent), i = _d3Interpolate.interpolate(selection0, selection1);
            function tween(t) {
                state.selection = t === 1 && selection1 === null ? null : i(t);
                redraw.call(that);
                emit.brush();
            }
            return selection0 !== null && selection1 !== null ? tween : tween(1);
        });
        else group.each(function() {
            var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent), emit = emitter(that, args).beforestart();
            _d3Transition.interrupt(that);
            state.selection = selection1 === null ? null : selection1;
            redraw.call(that);
            emit.start(event1).brush(event1).end(event1);
        });
    };
    brush1.clear = function(group, event) {
        brush1.move(group, null, event);
    };
    function redraw() {
        var group = _d3Selection.select(this), selection = local(this).selection;
        if (selection) {
            group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
            group.selectAll(".handle").style("display", null).attr("x", function(d) {
                return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
            }).attr("y", function(d) {
                return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
            }).attr("width", function(d) {
                return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
            }).attr("height", function(d) {
                return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
            });
        } else group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
    function emitter(that, args, clean) {
        var emit = that.__brush.emitter;
        return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
    }
    function Emitter(that, args, clean) {
        this.that = that;
        this.args = args;
        this.state = that.__brush;
        this.active = 0;
        this.clean = clean;
    }
    Emitter.prototype = {
        beforestart: function() {
            if (++this.active === 1) this.state.emitter = this, this.starting = true;
            return this;
        },
        start: function(event, mode) {
            if (this.starting) this.starting = false, this.emit("start", event, mode);
            else this.emit("brush", event);
            return this;
        },
        brush: function(event, mode) {
            this.emit("brush", event, mode);
            return this;
        },
        end: function(event, mode) {
            if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);
            return this;
        },
        emit: function(type1, event, mode) {
            var d = _d3Selection.select(this.that).datum();
            listeners.call(type1, this.that, new _eventJsDefault.default(type1, {
                sourceEvent: event,
                target: brush1,
                selection: dim.output(this.state.selection),
                mode,
                dispatch: listeners
            }), d);
        }
    };
    function started(event2) {
        if (touchending && !event2.touches) return;
        if (!filter.apply(this, arguments)) return;
        var that = this, type2 = event2.target.__data__.type, mode = (keys && event2.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys && event2.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type2], signY = dim === X ? null : signsY[type2], state = local(that), extent = state.extent, selection = state.selection, W = extent[0][0], w0, w1, N = extent[0][1], n0, n1, E = extent[1][0], e0, e1, S = extent[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event2.shiftKey, lockX, lockY, points = Array.from(event2.touches || [
            event2
        ], (t)=>{
            const i = t.identifier;
            t = _d3Selection.pointer(t, that);
            t.point0 = t.slice();
            t.identifier = i;
            return t;
        });
        _d3Transition.interrupt(that);
        var emit = emitter(that, arguments, true).beforestart();
        if (type2 === "overlay") {
            if (selection) moving = true;
            const pts = [
                points[0],
                points[1] || points[0]
            ];
            state.selection = selection = [
                [
                    w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),
                    n0 = dim === X ? N : min(pts[0][1], pts[1][1])
                ],
                [
                    e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),
                    s0 = dim === X ? S : max(pts[0][1], pts[1][1])
                ]
            ];
            if (points.length > 1) move(event2);
        } else {
            w0 = selection[0][0];
            n0 = selection[0][1];
            e0 = selection[1][0];
            s0 = selection[1][1];
        }
        w1 = w0;
        n1 = n0;
        e1 = e0;
        s1 = s0;
        var group = _d3Selection.select(that).attr("pointer-events", "none");
        var overlay = group.selectAll(".overlay").attr("cursor", cursors[type2]);
        if (event2.touches) {
            emit.moved = moved;
            emit.ended = ended;
        } else {
            var view = _d3Selection.select(event2.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
            if (keys) view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
            _d3Drag.dragDisable(event2.view);
        }
        redraw.call(that);
        emit.start(event2, mode.name);
        function moved(event) {
            for (const p of event.changedTouches || [
                event
            ]){
                for (const d of points)if (d.identifier === p.identifier) d.cur = _d3Selection.pointer(p, that);
            }
            if (shifting && !lockX && !lockY && points.length === 1) {
                const point = points[0];
                if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1])) lockY = true;
                else lockX = true;
            }
            for (const point of points)if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];
            moving = true;
            _noeventJsDefault.default(event);
            move(event);
        }
        function move(event) {
            const point = points[0], point0 = point.point0;
            var t;
            dx = point[0] - point0[0];
            dy = point[1] - point0[1];
            switch(mode){
                case MODE_SPACE:
                case MODE_DRAG:
                    if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                    if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                    break;
                case MODE_HANDLE:
                    if (points[1]) {
                        if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;
                        if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;
                    } else {
                        if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                        else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                        if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                        else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                    }
                    break;
                case MODE_CENTER:
                    if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));
                    if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));
                    break;
            }
            if (e1 < w1) {
                signX *= -1;
                t = w0, w0 = e0, e0 = t;
                t = w1, w1 = e1, e1 = t;
                if (type2 in flipX) overlay.attr("cursor", cursors[type2 = flipX[type2]]);
            }
            if (s1 < n1) {
                signY *= -1;
                t = n0, n0 = s0, s0 = t;
                t = n1, n1 = s1, s1 = t;
                if (type2 in flipY) overlay.attr("cursor", cursors[type2 = flipY[type2]]);
            }
            if (state.selection) selection = state.selection; // May be set by brush.move!
            if (lockX) w1 = selection[0][0], e1 = selection[1][0];
            if (lockY) n1 = selection[0][1], s1 = selection[1][1];
            if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
                state.selection = [
                    [
                        w1,
                        n1
                    ],
                    [
                        e1,
                        s1
                    ]
                ];
                redraw.call(that);
                emit.brush(event, mode.name);
            }
        }
        function ended(event) {
            _noeventJs.nopropagation(event);
            if (event.touches) {
                if (event.touches.length) return;
                if (touchending) clearTimeout(touchending);
                touchending = setTimeout(function() {
                    touchending = null;
                }, 500); // Ghost clicks are delayed!
            } else {
                _d3Drag.dragEnable(event.view, moving);
                view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
            }
            group.attr("pointer-events", "all");
            overlay.attr("cursor", cursors.overlay);
            if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
            if (empty(selection)) state.selection = null, redraw.call(that);
            emit.end(event, mode.name);
        }
        function keydowned(event) {
            switch(event.keyCode){
                case 16:
                    shifting = signX && signY;
                    break;
                case 18:
                    if (mode === MODE_HANDLE) {
                        if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                        if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                        mode = MODE_CENTER;
                        move(event);
                    }
                    break;
                case 32:
                    if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                        if (signX < 0) e0 = e1 - dx;
                        else if (signX > 0) w0 = w1 - dx;
                        if (signY < 0) s0 = s1 - dy;
                        else if (signY > 0) n0 = n1 - dy;
                        mode = MODE_SPACE;
                        overlay.attr("cursor", cursors.selection);
                        move(event);
                    }
                    break;
                default:
                    return;
            }
            _noeventJsDefault.default(event);
        }
        function keyupped(event) {
            switch(event.keyCode){
                case 16:
                    if (shifting) {
                        lockX = lockY = shifting = false;
                        move(event);
                    }
                    break;
                case 18:
                    if (mode === MODE_CENTER) {
                        if (signX < 0) e0 = e1;
                        else if (signX > 0) w0 = w1;
                        if (signY < 0) s0 = s1;
                        else if (signY > 0) n0 = n1;
                        mode = MODE_HANDLE;
                        move(event);
                    }
                    break;
                case 32:
                    if (mode === MODE_SPACE) {
                        if (event.altKey) {
                            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                            mode = MODE_CENTER;
                        } else {
                            if (signX < 0) e0 = e1;
                            else if (signX > 0) w0 = w1;
                            if (signY < 0) s0 = s1;
                            else if (signY > 0) n0 = n1;
                            mode = MODE_HANDLE;
                        }
                        overlay.attr("cursor", cursors[type2]);
                        move(event);
                    }
                    break;
                default:
                    return;
            }
            _noeventJsDefault.default(event);
        }
    }
    function touchmoved(event) {
        emitter(this, arguments).moved(event);
    }
    function touchended(event) {
        emitter(this, arguments).ended(event);
    }
    function initialize() {
        var state = this.__brush || {
            selection: null
        };
        state.extent = number2(extent1.apply(this, arguments));
        state.dim = dim;
        return state;
    }
    brush1.extent = function(_) {
        return arguments.length ? (extent1 = typeof _ === "function" ? _ : _constantJsDefault.default(number2(_)), brush1) : extent1;
    };
    brush1.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), brush1) : filter;
    };
    brush1.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), brush1) : touchable;
    };
    brush1.handleSize = function(_) {
        return arguments.length ? (handleSize = +_, brush1) : handleSize;
    };
    brush1.keyModifiers = function(_) {
        return arguments.length ? (keys = !!_, brush1) : keys;
    };
    brush1.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? brush1 : value;
    };
    return brush1;
}

},{"d3-dispatch":"5WtHO","d3-drag":"hGy7N","d3-interpolate":"6jJyi","d3-selection":"gn9gd","d3-transition":"4lorl","./constant.js":"fmgIQ","./event.js":"6f6C1","./noevent.js":"cozwm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5WtHO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dispatch", ()=>_dispatchJsDefault.default
);
var _dispatchJs = require("./dispatch.js");
var _dispatchJsDefault = parcelHelpers.interopDefault(_dispatchJs);

},{"./dispatch.js":"8Hmyd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Hmyd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var noop = {
    value: ()=>{}
};
function dispatch() {
    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){
        if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
    }
    return new Dispatch(_);
}
function Dispatch(_) {
    this._ = _;
}
function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {
            type: t,
            name: name
        };
    });
}
Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
        var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
            while(++i < n)if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
            return;
        }
        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while(++i < n){
            if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
            else if (callback == null) for(t in _)_[t] = set(_[t], typename.name, null);
        }
        return this;
    },
    copy: function() {
        var copy = {}, _ = this._;
        for(var t in _)copy[t] = _[t].slice();
        return new Dispatch(copy);
    },
    call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    }
};
function get(type, name) {
    for(var i = 0, n = type.length, c; i < n; ++i){
        if ((c = type[i]).name === name) return c.value;
    }
}
function set(type, name, callback) {
    for(var i = 0, n = type.length; i < n; ++i)if (type[i].name === name) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
    }
    if (callback != null) type.push({
        name: name,
        value: callback
    });
    return type;
}
exports.default = dispatch;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hGy7N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "drag", ()=>_dragJsDefault.default
);
parcelHelpers.export(exports, "dragDisable", ()=>_nodragJsDefault.default
);
parcelHelpers.export(exports, "dragEnable", ()=>_nodragJs.yesdrag
);
var _dragJs = require("./drag.js");
var _dragJsDefault = parcelHelpers.interopDefault(_dragJs);
var _nodragJs = require("./nodrag.js");
var _nodragJsDefault = parcelHelpers.interopDefault(_nodragJs);

},{"./drag.js":"nkoqB","./nodrag.js":"la87z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"nkoqB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Dispatch = require("d3-dispatch");
var _d3Selection = require("d3-selection");
var _nodragJs = require("./nodrag.js");
var _nodragJsDefault = parcelHelpers.interopDefault(_nodragJs);
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _eventJs = require("./event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
// Ignore right-click, since that should open the context menu.
function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
}
function defaultContainer() {
    return this.parentNode;
}
function defaultSubject(event, d) {
    return d == null ? {
        x: event.x,
        y: event.y
    } : d;
}
function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
}
exports.default = function() {
    var filter = defaultFilter, container1 = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = _d3Dispatch.dispatch("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection) {
        selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, _noeventJs.nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d) {
        if (touchending || !filter.call(this, event, d)) return;
        var gesture = beforestart(this, container1.call(this, event, d), event, d, "mouse");
        if (!gesture) return;
        _d3Selection.select(event.view).on("mousemove.drag", mousemoved, _noeventJs.nonpassivecapture).on("mouseup.drag", mouseupped, _noeventJs.nonpassivecapture);
        _nodragJsDefault.default(event.view);
        _noeventJs.nopropagation(event);
        mousemoving = false;
        mousedownx = event.clientX;
        mousedowny = event.clientY;
        gesture("start", event);
    }
    function mousemoved(event) {
        _noeventJsDefault.default(event);
        if (!mousemoving) {
            var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
            mousemoving = dx * dx + dy * dy > clickDistance2;
        }
        gestures.mouse("drag", event);
    }
    function mouseupped(event) {
        _d3Selection.select(event.view).on("mousemove.drag mouseup.drag", null);
        _nodragJs.yesdrag(event.view, mousemoving);
        _noeventJsDefault.default(event);
        gestures.mouse("end", event);
    }
    function touchstarted(event, d) {
        if (!filter.call(this, event, d)) return;
        var touches = event.changedTouches, c = container1.call(this, event, d), n = touches.length, i, gesture;
        for(i = 0; i < n; ++i)if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
            _noeventJs.nopropagation(event);
            gesture("start", event, touches[i]);
        }
    }
    function touchmoved(event) {
        var touches = event.changedTouches, n = touches.length, i, gesture;
        for(i = 0; i < n; ++i)if (gesture = gestures[touches[i].identifier]) {
            _noeventJsDefault.default(event);
            gesture("drag", event, touches[i]);
        }
    }
    function touchended(event) {
        var touches = event.changedTouches, n = touches.length, i, gesture;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() {
            touchending = null;
        }, 500); // Ghost clicks are delayed!
        for(i = 0; i < n; ++i)if (gesture = gestures[touches[i].identifier]) {
            _noeventJs.nopropagation(event);
            gesture("end", event, touches[i]);
        }
    }
    function beforestart(that, container, event1, d, identifier, touch1) {
        var dispatch = listeners.copy(), p = _d3Selection.pointer(touch1 || event1, container), dx, dy, s;
        if ((s = subject.call(that, new _eventJsDefault.default("beforestart", {
            sourceEvent: event1,
            target: drag,
            identifier,
            active,
            x: p[0],
            y: p[1],
            dx: 0,
            dy: 0,
            dispatch
        }), d)) == null) return;
        dx = s.x - p[0] || 0;
        dy = s.y - p[1] || 0;
        return function gesture(type, event, touch) {
            var p0 = p, n;
            switch(type){
                case "start":
                    gestures[identifier] = gesture, n = active++;
                    break;
                case "end":
                    delete gestures[identifier], --active; // falls through
                case "drag":
                    p = _d3Selection.pointer(touch || event, container), n = active;
                    break;
            }
            dispatch.call(type, that, new _eventJsDefault.default(type, {
                sourceEvent: event,
                subject: s,
                target: drag,
                identifier,
                active: n,
                x: p[0] + dx,
                y: p[1] + dy,
                dx: p[0] - p0[0],
                dy: p[1] - p0[1],
                dispatch
            }), d);
        };
    }
    drag.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), drag) : filter;
    };
    drag.container = function(_) {
        return arguments.length ? (container1 = typeof _ === "function" ? _ : _constantJsDefault.default(_), drag) : container1;
    };
    drag.subject = function(_) {
        return arguments.length ? (subject = typeof _ === "function" ? _ : _constantJsDefault.default(_), drag) : subject;
    };
    drag.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), drag) : touchable;
    };
    drag.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? drag : value;
    };
    drag.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    };
    return drag;
};

},{"d3-dispatch":"5WtHO","d3-selection":"gn9gd","./nodrag.js":"la87z","./noevent.js":"chHoc","./constant.js":"jkLzs","./event.js":"9jrzj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gn9gd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", ()=>_createJsDefault.default
);
parcelHelpers.export(exports, "creator", ()=>_creatorJsDefault.default
);
parcelHelpers.export(exports, "local", ()=>_localJsDefault.default
);
parcelHelpers.export(exports, "matcher", ()=>_matcherJsDefault.default
);
parcelHelpers.export(exports, "namespace", ()=>_namespaceJsDefault.default
);
parcelHelpers.export(exports, "namespaces", ()=>_namespacesJsDefault.default
);
parcelHelpers.export(exports, "pointer", ()=>_pointerJsDefault.default
);
parcelHelpers.export(exports, "pointers", ()=>_pointersJsDefault.default
);
parcelHelpers.export(exports, "select", ()=>_selectJsDefault.default
);
parcelHelpers.export(exports, "selectAll", ()=>_selectAllJsDefault.default
);
parcelHelpers.export(exports, "selection", ()=>_indexJsDefault.default
);
parcelHelpers.export(exports, "selector", ()=>_selectorJsDefault.default
);
parcelHelpers.export(exports, "selectorAll", ()=>_selectorAllJsDefault.default
);
parcelHelpers.export(exports, "style", ()=>_styleJs.styleValue
);
parcelHelpers.export(exports, "window", ()=>_windowJsDefault.default
);
var _createJs = require("./create.js");
var _createJsDefault = parcelHelpers.interopDefault(_createJs);
var _creatorJs = require("./creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);
var _localJs = require("./local.js");
var _localJsDefault = parcelHelpers.interopDefault(_localJs);
var _matcherJs = require("./matcher.js");
var _matcherJsDefault = parcelHelpers.interopDefault(_matcherJs);
var _namespaceJs = require("./namespace.js");
var _namespaceJsDefault = parcelHelpers.interopDefault(_namespaceJs);
var _namespacesJs = require("./namespaces.js");
var _namespacesJsDefault = parcelHelpers.interopDefault(_namespacesJs);
var _pointerJs = require("./pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _pointersJs = require("./pointers.js");
var _pointersJsDefault = parcelHelpers.interopDefault(_pointersJs);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _selectAllJs = require("./selectAll.js");
var _selectAllJsDefault = parcelHelpers.interopDefault(_selectAllJs);
var _indexJs = require("./selection/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _selectorJs = require("./selector.js");
var _selectorJsDefault = parcelHelpers.interopDefault(_selectorJs);
var _selectorAllJs = require("./selectorAll.js");
var _selectorAllJsDefault = parcelHelpers.interopDefault(_selectorAllJs);
var _styleJs = require("./selection/style.js");
var _windowJs = require("./window.js");
var _windowJsDefault = parcelHelpers.interopDefault(_windowJs);

},{"./create.js":"e1dzW","./creator.js":"a6062","./local.js":"hcwa6","./matcher.js":"hovSo","./namespace.js":"a23xG","./namespaces.js":"dDfgS","./pointer.js":"bs1Eh","./pointers.js":"fqMp7","./select.js":"4pqgd","./selectAll.js":"eAYBy","./selection/index.js":"fK3Dl","./selector.js":"7VF9r","./selectorAll.js":"2SKTE","./selection/style.js":"GUHZ1","./window.js":"6di7h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1dzW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _creatorJs = require("./creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
exports.default = function(name) {
    return _selectJsDefault.default(_creatorJsDefault.default(name).call(document.documentElement));
};

},{"./creator.js":"a6062","./select.js":"4pqgd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a6062":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namespaceJs = require("./namespace.js");
var _namespaceJsDefault = parcelHelpers.interopDefault(_namespaceJs);
var _namespacesJs = require("./namespaces.js");
function creatorInherit(name) {
    return function() {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === _namespacesJs.xhtml && document.documentElement.namespaceURI === _namespacesJs.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
    };
}
function creatorFixed(fullname) {
    return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
}
exports.default = function(name) {
    var fullname = _namespaceJsDefault.default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
};

},{"./namespace.js":"a23xG","./namespaces.js":"dDfgS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a23xG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namespacesJs = require("./namespaces.js");
var _namespacesJsDefault = parcelHelpers.interopDefault(_namespacesJs);
exports.default = function(name) {
    var prefix = name += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
    return _namespacesJsDefault.default.hasOwnProperty(prefix) ? {
        space: _namespacesJsDefault.default[prefix],
        local: name
    } : name; // eslint-disable-line no-prototype-builtins
};

},{"./namespaces.js":"dDfgS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDfgS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xhtml", ()=>xhtml
);
var xhtml = "http://www.w3.org/1999/xhtml";
exports.default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4pqgd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./selection/index.js");
exports.default = function(selector) {
    return typeof selector === "string" ? new _indexJs.Selection([
        [
            document.querySelector(selector)
        ]
    ], [
        document.documentElement
    ]) : new _indexJs.Selection([
        [
            selector
        ]
    ], _indexJs.root);
};

},{"./selection/index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fK3Dl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "root", ()=>root
);
parcelHelpers.export(exports, "Selection", ()=>Selection
);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _selectAllJs = require("./selectAll.js");
var _selectAllJsDefault = parcelHelpers.interopDefault(_selectAllJs);
var _selectChildJs = require("./selectChild.js");
var _selectChildJsDefault = parcelHelpers.interopDefault(_selectChildJs);
var _selectChildrenJs = require("./selectChildren.js");
var _selectChildrenJsDefault = parcelHelpers.interopDefault(_selectChildrenJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _dataJs = require("./data.js");
var _dataJsDefault = parcelHelpers.interopDefault(_dataJs);
var _enterJs = require("./enter.js");
var _enterJsDefault = parcelHelpers.interopDefault(_enterJs);
var _exitJs = require("./exit.js");
var _exitJsDefault = parcelHelpers.interopDefault(_exitJs);
var _joinJs = require("./join.js");
var _joinJsDefault = parcelHelpers.interopDefault(_joinJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _orderJs = require("./order.js");
var _orderJsDefault = parcelHelpers.interopDefault(_orderJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _callJs = require("./call.js");
var _callJsDefault = parcelHelpers.interopDefault(_callJs);
var _nodesJs = require("./nodes.js");
var _nodesJsDefault = parcelHelpers.interopDefault(_nodesJs);
var _nodeJs = require("./node.js");
var _nodeJsDefault = parcelHelpers.interopDefault(_nodeJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _emptyJs = require("./empty.js");
var _emptyJsDefault = parcelHelpers.interopDefault(_emptyJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _attrJs = require("./attr.js");
var _attrJsDefault = parcelHelpers.interopDefault(_attrJs);
var _styleJs = require("./style.js");
var _styleJsDefault = parcelHelpers.interopDefault(_styleJs);
var _propertyJs = require("./property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _classedJs = require("./classed.js");
var _classedJsDefault = parcelHelpers.interopDefault(_classedJs);
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _htmlJs = require("./html.js");
var _htmlJsDefault = parcelHelpers.interopDefault(_htmlJs);
var _raiseJs = require("./raise.js");
var _raiseJsDefault = parcelHelpers.interopDefault(_raiseJs);
var _lowerJs = require("./lower.js");
var _lowerJsDefault = parcelHelpers.interopDefault(_lowerJs);
var _appendJs = require("./append.js");
var _appendJsDefault = parcelHelpers.interopDefault(_appendJs);
var _insertJs = require("./insert.js");
var _insertJsDefault = parcelHelpers.interopDefault(_insertJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _cloneJs = require("./clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _datumJs = require("./datum.js");
var _datumJsDefault = parcelHelpers.interopDefault(_datumJs);
var _onJs = require("./on.js");
var _onJsDefault = parcelHelpers.interopDefault(_onJs);
var _dispatchJs = require("./dispatch.js");
var _dispatchJsDefault = parcelHelpers.interopDefault(_dispatchJs);
var _iteratorJs = require("./iterator.js");
var _iteratorJsDefault = parcelHelpers.interopDefault(_iteratorJs);
var root = [
    null
];
function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
}
function selection() {
    return new Selection([
        [
            document.documentElement
        ]
    ], root);
}
function selection_selection() {
    return this;
}
Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: _selectJsDefault.default,
    selectAll: _selectAllJsDefault.default,
    selectChild: _selectChildJsDefault.default,
    selectChildren: _selectChildrenJsDefault.default,
    filter: _filterJsDefault.default,
    data: _dataJsDefault.default,
    enter: _enterJsDefault.default,
    exit: _exitJsDefault.default,
    join: _joinJsDefault.default,
    merge: _mergeJsDefault.default,
    selection: selection_selection,
    order: _orderJsDefault.default,
    sort: _sortJsDefault.default,
    call: _callJsDefault.default,
    nodes: _nodesJsDefault.default,
    node: _nodeJsDefault.default,
    size: _sizeJsDefault.default,
    empty: _emptyJsDefault.default,
    each: _eachJsDefault.default,
    attr: _attrJsDefault.default,
    style: _styleJsDefault.default,
    property: _propertyJsDefault.default,
    classed: _classedJsDefault.default,
    text: _textJsDefault.default,
    html: _htmlJsDefault.default,
    raise: _raiseJsDefault.default,
    lower: _lowerJsDefault.default,
    append: _appendJsDefault.default,
    insert: _insertJsDefault.default,
    remove: _removeJsDefault.default,
    clone: _cloneJsDefault.default,
    datum: _datumJsDefault.default,
    on: _onJsDefault.default,
    dispatch: _dispatchJsDefault.default,
    [Symbol.iterator]: _iteratorJsDefault.default
};
exports.default = selection;

},{"./select.js":"aK9lB","./selectAll.js":"8U28K","./selectChild.js":"hBGg0","./selectChildren.js":"hnJ1V","./filter.js":"i1GfU","./data.js":"jIP7J","./enter.js":"27tIy","./exit.js":"6ubri","./join.js":"g7QcH","./merge.js":"fXm9Z","./order.js":"cmxvd","./sort.js":"4UUI2","./call.js":"bsAaT","./nodes.js":"jjFrN","./node.js":"gPGkg","./size.js":"coOTw","./empty.js":"8ybxO","./each.js":"9Y1px","./attr.js":"k8cb1","./style.js":"GUHZ1","./property.js":"f4q4V","./classed.js":"jd3ig","./text.js":"dVAdB","./html.js":"egFAg","./raise.js":"4Xi1m","./lower.js":"l1I8n","./append.js":"1GNgv","./insert.js":"3Xphl","./remove.js":"iNsSa","./clone.js":"jfNc9","./datum.js":"lMowl","./on.js":"ktlxw","./dispatch.js":"eZMTj","./iterator.js":"32Fgr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aK9lB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _selectorJs = require("../selector.js");
var _selectorJsDefault = parcelHelpers.interopDefault(_selectorJs);
exports.default = function(select) {
    if (typeof select !== "function") select = _selectorJsDefault.default(select);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
        }
    }
    return new _indexJs.Selection(subgroups, this._parents);
};

},{"./index.js":"fK3Dl","../selector.js":"7VF9r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7VF9r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function none() {}
exports.default = function(selector) {
    return selector == null ? none : function() {
        return this.querySelector(selector);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8U28K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _arrayJs = require("../array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _selectorAllJs = require("../selectorAll.js");
var _selectorAllJsDefault = parcelHelpers.interopDefault(_selectorAllJs);
function arrayAll(select) {
    return function() {
        return _arrayJsDefault.default(select.apply(this, arguments));
    };
}
exports.default = function(select) {
    if (typeof select === "function") select = arrayAll(select);
    else select = _selectorAllJsDefault.default(select);
    for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
        }
    }
    return new _indexJs.Selection(subgroups, parents);
};

},{"./index.js":"fK3Dl","../array.js":"9WejU","../selectorAll.js":"2SKTE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9WejU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function array(x) {
    return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}
exports.default = array;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SKTE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function empty() {
    return [];
}
exports.default = function(selector) {
    return selector == null ? empty : function() {
        return this.querySelectorAll(selector);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBGg0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _matcherJs = require("../matcher.js");
var find = Array.prototype.find;
function childFind(match) {
    return function() {
        return find.call(this.children, match);
    };
}
function childFirst() {
    return this.firstElementChild;
}
exports.default = function(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : _matcherJs.childMatcher(match)));
};

},{"../matcher.js":"hovSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hovSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "childMatcher", ()=>childMatcher
);
exports.default = function(selector) {
    return function() {
        return this.matches(selector);
    };
};
function childMatcher(selector) {
    return function(node) {
        return node.matches(selector);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnJ1V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _matcherJs = require("../matcher.js");
var filter = Array.prototype.filter;
function children() {
    return Array.from(this.children);
}
function childrenFilter(match) {
    return function() {
        return filter.call(this.children, match);
    };
}
exports.default = function(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : _matcherJs.childMatcher(match)));
};

},{"../matcher.js":"hovSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1GfU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _matcherJs = require("../matcher.js");
var _matcherJsDefault = parcelHelpers.interopDefault(_matcherJs);
exports.default = function(match) {
    if (typeof match !== "function") match = _matcherJsDefault.default(match);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)if ((node = group[i]) && match.call(node, node.__data__, i, group)) subgroup.push(node);
    }
    return new _indexJs.Selection(subgroups, this._parents);
};

},{"./index.js":"fK3Dl","../matcher.js":"hovSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIP7J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _enterJs = require("./enter.js");
var _constantJs = require("../constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for(; i < dataLength; ++i)if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
    } else enter[i] = new _enterJs.EnterNode(parent, data[i]);
    // Put any non-null nodes that don’t fit into exit.
    for(; i < groupLength; ++i)if (node = group[i]) exit[i] = node;
}
function bindKey(parent, group, enter, update, exit, data, key) {
    var i, node, nodeByKeyValue = new Map, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for(i = 0; i < groupLength; ++i)if (node = group[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
        if (nodeByKeyValue.has(keyValue)) exit[i] = node;
        else nodeByKeyValue.set(keyValue, node);
    }
    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for(i = 0; i < dataLength; ++i){
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
            update[i] = node;
            node.__data__ = data[i];
            nodeByKeyValue.delete(keyValue);
        } else enter[i] = new _enterJs.EnterNode(parent, data[i]);
    }
    // Add any remaining nodes that were not bound to data to exit.
    for(i = 0; i < groupLength; ++i)if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) exit[i] = node;
}
function datum(node) {
    return node.__data__;
}
exports.default = function(value, key) {
    if (!arguments.length) return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function") value = _constantJsDefault.default(value);
    for(var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j){
        var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for(var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0)if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while(!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
        }
    }
    update = new _indexJs.Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
};
// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data) {
    return typeof data === "object" && "length" in data ? data // Array, TypedArray, NodeList, array-like
     : Array.from(data); // Map, Set, iterable, string, or anything else
}

},{"./index.js":"fK3Dl","./enter.js":"27tIy","../constant.js":"1wZol","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27tIy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EnterNode", ()=>EnterNode
);
var _sparseJs = require("./sparse.js");
var _sparseJsDefault = parcelHelpers.interopDefault(_sparseJs);
var _indexJs = require("./index.js");
exports.default = function() {
    return new _indexJs.Selection(this._enter || this._groups.map(_sparseJsDefault.default), this._parents);
};
function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
}
EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
        return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
    }
};

},{"./sparse.js":"juhNo","./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juhNo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(update) {
    return new Array(update.length);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wZol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ubri":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sparseJs = require("./sparse.js");
var _sparseJsDefault = parcelHelpers.interopDefault(_sparseJs);
var _indexJs = require("./index.js");
exports.default = function() {
    return new _indexJs.Selection(this._exit || this._groups.map(_sparseJsDefault.default), this._parents);
};

},{"./sparse.js":"juhNo","./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7QcH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(onenter, onupdate, onexit) {
    var enter = this.enter(), update = this, exit = this.exit();
    if (typeof onenter === "function") {
        enter = onenter(enter);
        if (enter) enter = enter.selection();
    } else enter = enter.append(onenter + "");
    if (onupdate != null) {
        update = onupdate(update);
        if (update) update = update.selection();
    }
    if (onexit == null) exit.remove();
    else onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXm9Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
exports.default = function(context) {
    var selection = context.selection ? context.selection() : context;
    for(var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
        for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group0[i] || group1[i]) merge[i] = node;
    }
    for(; j < m0; ++j)merges[j] = groups0[j];
    return new _indexJs.Selection(merges, this._parents);
};

},{"./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmxvd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    for(var groups = this._groups, j = -1, m = groups.length; ++j < m;){
        for(var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;)if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
        }
    }
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UUI2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
exports.default = function(compare) {
    if (!compare) compare = ascending;
    function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }
    for(var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group[i]) sortgroup[i] = node;
        sortgroup.sort(compareNode);
    }
    return new _indexJs.Selection(sortgroups, this._parents).order();
};
function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

},{"./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsAaT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjFrN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return Array.from(this);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPGkg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j)for(var group = groups[j], i = 0, n = group.length; i < n; ++i){
        var node = group[i];
        if (node) return node;
    }
    return null;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"coOTw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    let size = 0;
    for (const node of this)++size; // eslint-disable-line no-unused-vars
    return size;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ybxO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return !this.node();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Y1px":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback) {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
        for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i)if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8cb1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namespaceJs = require("../namespace.js");
var _namespaceJsDefault = parcelHelpers.interopDefault(_namespaceJs);
function attrRemove(name) {
    return function() {
        this.removeAttribute(name);
    };
}
function attrRemoveNS(fullname) {
    return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
}
function attrConstant(name, value) {
    return function() {
        this.setAttribute(name, value);
    };
}
function attrConstantNS(fullname, value) {
    return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
    };
}
function attrFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
    };
}
function attrFunctionNS(fullname, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
    };
}
exports.default = function(name, value) {
    var fullname = _namespaceJsDefault.default(name);
    if (arguments.length < 2) {
        var node = this.node();
        return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
};

},{"../namespace.js":"a23xG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GUHZ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleValue", ()=>styleValue
);
var _windowJs = require("../window.js");
var _windowJsDefault = parcelHelpers.interopDefault(_windowJs);
function styleRemove(name) {
    return function() {
        this.style.removeProperty(name);
    };
}
function styleConstant(name, value, priority) {
    return function() {
        this.style.setProperty(name, value, priority);
    };
}
function styleFunction(name, value, priority) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
    };
}
exports.default = function(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
};
function styleValue(node, name) {
    return node.style.getPropertyValue(name) || _windowJsDefault.default(node).getComputedStyle(node, null).getPropertyValue(name);
}

},{"../window.js":"6di7h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6di7h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(node) {
    return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
     || node.document && node // node is a Window
     || node.defaultView; // node is a Document
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4q4V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function propertyRemove(name) {
    return function() {
        delete this[name];
    };
}
function propertyConstant(name, value) {
    return function() {
        this[name] = value;
    };
}
function propertyFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
    };
}
exports.default = function(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jd3ig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function classArray(string) {
    return string.trim().split(/^|\s+/);
}
function classList(node) {
    return node.classList || new ClassList(node);
}
function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
    add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
            this._names.push(name);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    contains: function(name) {
        return this._names.indexOf(name) >= 0;
    }
};
function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while(++i < n)list.add(names[i]);
}
function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while(++i < n)list.remove(names[i]);
}
function classedTrue(names) {
    return function() {
        classedAdd(this, names);
    };
}
function classedFalse(names) {
    return function() {
        classedRemove(this, names);
    };
}
function classedFunction(names, value) {
    return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
}
exports.default = function(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while(++i < n)if (!list.contains(names[i])) return false;
        return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVAdB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function textRemove() {
    this.textContent = "";
}
function textConstant(value) {
    return function() {
        this.textContent = value;
    };
}
function textFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
    };
}
exports.default = function(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egFAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function htmlRemove() {
    this.innerHTML = "";
}
function htmlConstant(value) {
    return function() {
        this.innerHTML = value;
    };
}
function htmlFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
    };
}
exports.default = function(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Xi1m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function raise() {
    if (this.nextSibling) this.parentNode.appendChild(this);
}
exports.default = function() {
    return this.each(raise);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1I8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
exports.default = function() {
    return this.each(lower);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GNgv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _creatorJs = require("../creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);
exports.default = function(name) {
    var create = typeof name === "function" ? name : _creatorJsDefault.default(name);
    return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
    });
};

},{"../creator.js":"a6062","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Xphl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _creatorJs = require("../creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);
var _selectorJs = require("../selector.js");
var _selectorJsDefault = parcelHelpers.interopDefault(_selectorJs);
function constantNull() {
    return null;
}
exports.default = function(name, before) {
    var create = typeof name === "function" ? name : _creatorJsDefault.default(name), select = before == null ? constantNull : typeof before === "function" ? before : _selectorJsDefault.default(before);
    return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
};

},{"../creator.js":"a6062","../selector.js":"7VF9r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNsSa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
}
exports.default = function() {
    return this.each(remove);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfNc9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
exports.default = function(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lMowl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ktlxw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function contextListener(listener) {
    return function(event) {
        listener.call(this, event, this.__data__);
    };
}
function parseTypenames(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {
            type: t,
            name: name
        };
    });
}
function onRemove(typename) {
    return function() {
        var on = this.__on;
        if (!on) return;
        for(var j = 0, i = -1, m = on.length, o; j < m; ++j)if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) this.removeEventListener(o.type, o.listener, o.options);
        else on[++i] = o;
        if (++i) on.length = i;
        else delete this.__on;
    };
}
function onAdd(typename, value, options) {
    return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) {
            for(var j = 0, m = on.length; j < m; ++j)if ((o = on[j]).type === typename.type && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.options);
                this.addEventListener(o.type, o.listener = listener, o.options = options);
                o.value = value;
                return;
            }
        }
        this.addEventListener(typename.type, listener, options);
        o = {
            type: typename.type,
            name: typename.name,
            value: value,
            listener: listener,
            options: options
        };
        if (!on) this.__on = [
            o
        ];
        else on.push(o);
    };
}
exports.default = function(typename, value, options) {
    var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for(var j = 0, m = on.length, o; j < m; ++j)for(i = 0, o = on[j]; i < n; ++i){
            if ((t = typenames[i]).type === o.type && t.name === o.name) return o.value;
        }
        return;
    }
    on = value ? onAdd : onRemove;
    for(i = 0; i < n; ++i)this.each(on(typenames[i], value, options));
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZMTj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _windowJs = require("../window.js");
var _windowJsDefault = parcelHelpers.interopDefault(_windowJs);
function dispatchEvent(node, type, params) {
    var window = _windowJsDefault.default(node), event = window.CustomEvent;
    if (typeof event === "function") event = new event(type, params);
    else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
    return function() {
        return dispatchEvent(this, type, params);
    };
}
function dispatchFunction(type, params) {
    return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
    };
}
exports.default = function(type, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
};

},{"../window.js":"6di7h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32Fgr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function*() {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
        for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i)if (node = group[i]) yield node;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hcwa6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var nextId = 0;
function local() {
    return new Local;
}
exports.default = local;
function Local() {
    this._ = "@" + (++nextId).toString(36);
}
Local.prototype = local.prototype = {
    constructor: Local,
    get: function(node) {
        var id = this._;
        while(!(id in node))if (!(node = node.parentNode)) return;
        return node[id];
    },
    set: function(node, value) {
        return node[this._] = value;
    },
    remove: function(node) {
        return this._ in node && delete node[this._];
    },
    toString: function() {
        return this._;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bs1Eh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sourceEventJs = require("./sourceEvent.js");
var _sourceEventJsDefault = parcelHelpers.interopDefault(_sourceEventJs);
exports.default = function(event, node) {
    event = _sourceEventJsDefault.default(event);
    if (node === undefined) node = event.currentTarget;
    if (node) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
            var point = svg.createSVGPoint();
            point.x = event.clientX, point.y = event.clientY;
            point = point.matrixTransform(node.getScreenCTM().inverse());
            return [
                point.x,
                point.y
            ];
        }
        if (node.getBoundingClientRect) {
            var rect = node.getBoundingClientRect();
            return [
                event.clientX - rect.left - node.clientLeft,
                event.clientY - rect.top - node.clientTop
            ];
        }
    }
    return [
        event.pageX,
        event.pageY
    ];
};

},{"./sourceEvent.js":"cDi5d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDi5d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(event) {
    let sourceEvent;
    while(sourceEvent = event.sourceEvent)event = sourceEvent;
    return event;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fqMp7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pointerJs = require("./pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _sourceEventJs = require("./sourceEvent.js");
var _sourceEventJsDefault = parcelHelpers.interopDefault(_sourceEventJs);
exports.default = function(events, node) {
    if (events.target) {
        events = _sourceEventJsDefault.default(events);
        if (node === undefined) node = events.currentTarget;
        events = events.touches || [
            events
        ];
    }
    return Array.from(events, (event)=>_pointerJsDefault.default(event, node)
    );
};

},{"./pointer.js":"bs1Eh","./sourceEvent.js":"cDi5d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eAYBy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _indexJs = require("./selection/index.js");
exports.default = function(selector) {
    return typeof selector === "string" ? new _indexJs.Selection([
        document.querySelectorAll(selector)
    ], [
        document.documentElement
    ]) : new _indexJs.Selection([
        _arrayJsDefault.default(selector)
    ], _indexJs.root);
};

},{"./array.js":"9WejU","./selection/index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"la87z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "yesdrag", ()=>yesdrag
);
var _d3Selection = require("d3-selection");
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
exports.default = function(view) {
    var root = view.document.documentElement, selection = _d3Selection.select(view).on("dragstart.drag", _noeventJsDefault.default, _noeventJs.nonpassivecapture);
    if ("onselectstart" in root) selection.on("selectstart.drag", _noeventJsDefault.default, _noeventJs.nonpassivecapture);
    else {
        root.__noselect = root.style.MozUserSelect;
        root.style.MozUserSelect = "none";
    }
};
function yesdrag(view, noclick) {
    var root = view.document.documentElement, selection = _d3Selection.select(view).on("dragstart.drag", null);
    if (noclick) {
        selection.on("click.drag", _noeventJsDefault.default, _noeventJs.nonpassivecapture);
        setTimeout(function() {
            selection.on("click.drag", null);
        }, 0);
    }
    if ("onselectstart" in root) selection.on("selectstart.drag", null);
    else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
    }
}

},{"d3-selection":"gn9gd","./noevent.js":"chHoc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chHoc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonpassive", ()=>nonpassive
);
parcelHelpers.export(exports, "nonpassivecapture", ()=>nonpassivecapture
);
parcelHelpers.export(exports, "nopropagation", ()=>nopropagation
);
const nonpassive = {
    passive: false
};
const nonpassivecapture = {
    capture: true,
    passive: false
};
function nopropagation(event) {
    event.stopImmediatePropagation();
}
exports.default = function(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jkLzs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jrzj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function DragEvent(type, { sourceEvent , subject , target , identifier , active , x , y , dx , dy , dispatch  }) {
    Object.defineProperties(this, {
        type: {
            value: type,
            enumerable: true,
            configurable: true
        },
        sourceEvent: {
            value: sourceEvent,
            enumerable: true,
            configurable: true
        },
        subject: {
            value: subject,
            enumerable: true,
            configurable: true
        },
        target: {
            value: target,
            enumerable: true,
            configurable: true
        },
        identifier: {
            value: identifier,
            enumerable: true,
            configurable: true
        },
        active: {
            value: active,
            enumerable: true,
            configurable: true
        },
        x: {
            value: x,
            enumerable: true,
            configurable: true
        },
        y: {
            value: y,
            enumerable: true,
            configurable: true
        },
        dx: {
            value: dx,
            enumerable: true,
            configurable: true
        },
        dy: {
            value: dy,
            enumerable: true,
            configurable: true
        },
        _: {
            value: dispatch
        }
    });
}
exports.default = DragEvent;
DragEvent.prototype.on = function() {
    var value = this._.on.apply(this._, arguments);
    return value === this._ ? this : value;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6jJyi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolate", ()=>_valueJsDefault.default
);
parcelHelpers.export(exports, "interpolateArray", ()=>_arrayJsDefault.default
);
parcelHelpers.export(exports, "interpolateBasis", ()=>_basisJsDefault.default
);
parcelHelpers.export(exports, "interpolateBasisClosed", ()=>_basisClosedJsDefault.default
);
parcelHelpers.export(exports, "interpolateDate", ()=>_dateJsDefault.default
);
parcelHelpers.export(exports, "interpolateDiscrete", ()=>_discreteJsDefault.default
);
parcelHelpers.export(exports, "interpolateHue", ()=>_hueJsDefault.default
);
parcelHelpers.export(exports, "interpolateNumber", ()=>_numberJsDefault.default
);
parcelHelpers.export(exports, "interpolateNumberArray", ()=>_numberArrayJsDefault.default
);
parcelHelpers.export(exports, "interpolateObject", ()=>_objectJsDefault.default
);
parcelHelpers.export(exports, "interpolateRound", ()=>_roundJsDefault.default
);
parcelHelpers.export(exports, "interpolateString", ()=>_stringJsDefault.default
);
parcelHelpers.export(exports, "interpolateTransformCss", ()=>_indexJs.interpolateTransformCss
);
parcelHelpers.export(exports, "interpolateTransformSvg", ()=>_indexJs.interpolateTransformSvg
);
parcelHelpers.export(exports, "interpolateZoom", ()=>_zoomJsDefault.default
);
parcelHelpers.export(exports, "interpolateRgb", ()=>_rgbJsDefault.default
);
parcelHelpers.export(exports, "interpolateRgbBasis", ()=>_rgbJs.rgbBasis
);
parcelHelpers.export(exports, "interpolateRgbBasisClosed", ()=>_rgbJs.rgbBasisClosed
);
parcelHelpers.export(exports, "interpolateHsl", ()=>_hslJsDefault.default
);
parcelHelpers.export(exports, "interpolateHslLong", ()=>_hslJs.hslLong
);
parcelHelpers.export(exports, "interpolateLab", ()=>_labJsDefault.default
);
parcelHelpers.export(exports, "interpolateHcl", ()=>_hclJsDefault.default
);
parcelHelpers.export(exports, "interpolateHclLong", ()=>_hclJs.hclLong
);
parcelHelpers.export(exports, "interpolateCubehelix", ()=>_cubehelixJsDefault.default
);
parcelHelpers.export(exports, "interpolateCubehelixLong", ()=>_cubehelixJs.cubehelixLong
);
parcelHelpers.export(exports, "piecewise", ()=>_piecewiseJsDefault.default
);
parcelHelpers.export(exports, "quantize", ()=>_quantizeJsDefault.default
);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _basisJs = require("./basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _basisClosedJs = require("./basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _discreteJs = require("./discrete.js");
var _discreteJsDefault = parcelHelpers.interopDefault(_discreteJs);
var _hueJs = require("./hue.js");
var _hueJsDefault = parcelHelpers.interopDefault(_hueJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _indexJs = require("./transform/index.js");
var _zoomJs = require("./zoom.js");
var _zoomJsDefault = parcelHelpers.interopDefault(_zoomJs);
var _rgbJs = require("./rgb.js");
var _rgbJsDefault = parcelHelpers.interopDefault(_rgbJs);
var _hslJs = require("./hsl.js");
var _hslJsDefault = parcelHelpers.interopDefault(_hslJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _hclJs = require("./hcl.js");
var _hclJsDefault = parcelHelpers.interopDefault(_hclJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);
var _piecewiseJs = require("./piecewise.js");
var _piecewiseJsDefault = parcelHelpers.interopDefault(_piecewiseJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);

},{"./value.js":"2GpMq","./array.js":"bQXK0","./basis.js":"enhcL","./basisClosed.js":"gdZAO","./date.js":"cCKgJ","./discrete.js":"gOUg1","./hue.js":"6zMfa","./number.js":"fZAq5","./numberArray.js":"l29YZ","./object.js":"hdyKg","./round.js":"8lHW7","./string.js":"Qre8m","./transform/index.js":"jDBQO","./zoom.js":"7nRsd","./rgb.js":"gHrgo","./hsl.js":"9jAYx","./lab.js":"b6zM3","./hcl.js":"afUSw","./cubehelix.js":"7oITO","./piecewise.js":"1W7eI","./quantize.js":"cTNfr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GpMq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _rgbJs = require("./rgb.js");
var _rgbJsDefault = parcelHelpers.interopDefault(_rgbJs);
var _arrayJs = require("./array.js");
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
exports.default = function(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? _constantJsDefault.default(b) : (t === "number" ? _numberJsDefault.default : t === "string" ? (c = _d3Color.color(b)) ? (b = c, _rgbJsDefault.default) : _stringJsDefault.default : b instanceof _d3Color.color ? _rgbJsDefault.default : b instanceof Date ? _dateJsDefault.default : _numberArrayJs.isNumberArray(b) ? _numberArrayJsDefault.default : Array.isArray(b) ? _arrayJs.genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _objectJsDefault.default : _numberJsDefault.default)(a, b);
};

},{"d3-color":"grhaa","./rgb.js":"gHrgo","./array.js":"bQXK0","./date.js":"cCKgJ","./number.js":"fZAq5","./object.js":"hdyKg","./string.js":"Qre8m","./constant.js":"aXv76","./numberArray.js":"l29YZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grhaa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>_colorJsDefault.default
);
parcelHelpers.export(exports, "rgb", ()=>_colorJs.rgb
);
parcelHelpers.export(exports, "hsl", ()=>_colorJs.hsl
);
parcelHelpers.export(exports, "lab", ()=>_labJsDefault.default
);
parcelHelpers.export(exports, "hcl", ()=>_labJs.hcl
);
parcelHelpers.export(exports, "lch", ()=>_labJs.lch
);
parcelHelpers.export(exports, "gray", ()=>_labJs.gray
);
parcelHelpers.export(exports, "cubehelix", ()=>_cubehelixJsDefault.default
);
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);

},{"./color.js":"cNCyv","./lab.js":"5gBZc","./cubehelix.js":"805Dt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNCyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color
);
parcelHelpers.export(exports, "darker", ()=>darker
);
parcelHelpers.export(exports, "brighter", ()=>brighter
);
parcelHelpers.export(exports, "rgbConvert", ()=>rgbConvert
);
parcelHelpers.export(exports, "rgb", ()=>rgb
);
parcelHelpers.export(exports, "Rgb", ()=>Rgb
);
parcelHelpers.export(exports, "hslConvert", ()=>hslConvert
);
parcelHelpers.export(exports, "hsl", ()=>hsl
);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
};
_defineJsDefault.default(Color, color, {
    copy (channels) {
        return Object.assign(new this.constructor, this, channels);
    },
    displayable () {
        return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
});
function color_formatHex() {
    return this.rgb().formatHex();
}
function color_formatHex8() {
    return this.rgb().formatHex8();
}
function color_formatHsl() {
    return hslConvert(this).formatHsl();
}
function color_formatRgb() {
    return this.rgb().formatRgb();
}
function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
     : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) // #f00
     : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) // #ff000000
     : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) // #f000
     : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
     : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
     : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
     : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
     : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
     : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
     : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
     : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
exports.default = color;
function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
}
_defineJsDefault.default(Rgb, rgb, _defineJs.extend(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb () {
        return this;
    },
    clamp () {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable () {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
}));
function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
}
function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else s = l > 0 && l < 1 ? 0 : h;
    return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
_defineJsDefault.default(Hsl, hsl, _defineJs.extend(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    clamp () {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl () {
        const a = clampa(this.opacity);
        return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
}));
function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
}
function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
}
/* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

},{"./define.js":"avQOe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"avQOe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extend", ()=>extend
);
exports.default = function(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
};
function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for(var key in definition)prototype[key] = definition[key];
    return prototype;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5gBZc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gray", ()=>gray
);
parcelHelpers.export(exports, "Lab", ()=>Lab
);
parcelHelpers.export(exports, "lch", ()=>lch
);
parcelHelpers.export(exports, "hcl", ()=>hcl
);
parcelHelpers.export(exports, "Hcl", ()=>Hcl
);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
// https://observablehq.com/@mbostock/lab-and-rgb
const K = 18, Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) return hcl2lab(o);
    if (!(o instanceof _colorJs.Rgb)) o = _colorJs.rgbConvert(o);
    var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
    if (r === g && g === b) x = z = y;
    else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
    }
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function gray(l, opacity) {
    return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}
function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
exports.default = lab;
function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
}
_defineJsDefault.default(Lab, lab, _defineJs.extend(_colorJs.Color, {
    brighter (k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker (k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb () {
        var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new _colorJs.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.033454 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
}));
function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * _mathJs.degrees;
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function lch(l, c, h, opacity) {
    return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function hcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
}
function hcl2lab(o) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * _mathJs.radians;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
_defineJsDefault.default(Hcl, hcl, _defineJs.extend(_colorJs.Color, {
    brighter (k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
    },
    darker (k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
    },
    rgb () {
        return hcl2lab(this).rgb();
    }
}));

},{"./define.js":"avQOe","./color.js":"cNCyv","./math.js":"beC5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"beC5A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radians", ()=>radians
);
parcelHelpers.export(exports, "degrees", ()=>degrees
);
const radians = Math.PI / 180;
const degrees = 180 / Math.PI;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"805Dt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cubehelix", ()=>Cubehelix
);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
var A = -0.14861, B = 1.78277, C = -0.29227, D = -0.90649, E = 1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof _colorJs.Rgb)) o = _colorJs.rgbConvert(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * _mathJs.degrees - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
exports.default = cubehelix;
function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
_defineJsDefault.default(Cubehelix, cubehelix, _defineJs.extend(_colorJs.Color, {
    brighter (k) {
        k = k == null ? _colorJs.brighter : Math.pow(_colorJs.brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? _colorJs.darker : Math.pow(_colorJs.darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * _mathJs.radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new _colorJs.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
    }
}));

},{"./define.js":"avQOe","./color.js":"cNCyv","./math.js":"beC5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHrgo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rgbBasis", ()=>rgbBasis
);
parcelHelpers.export(exports, "rgbBasisClosed", ()=>rgbBasisClosed
);
var _d3Color = require("d3-color");
var _basisJs = require("./basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _basisClosedJs = require("./basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
exports.default = function rgbGamma(y) {
    var color = _colorJs.gamma(y);
    function rgb(start, end) {
        var r = color((start = _d3Color.rgb(start)).r, (end = _d3Color.rgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = _colorJsDefault.default(start.opacity, end.opacity);
        return function(t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
        };
    }
    rgb.gamma = rgbGamma;
    return rgb;
}(1);
function rgbSpline(spline) {
    return function(colors) {
        var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
        for(i = 0; i < n; ++i){
            color = _d3Color.rgb(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + "";
        };
    };
}
var rgbBasis = rgbSpline(_basisJsDefault.default);
var rgbBasisClosed = rgbSpline(_basisClosedJsDefault.default);

},{"d3-color":"grhaa","./basis.js":"enhcL","./basisClosed.js":"gdZAO","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enhcL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "basis", ()=>basis
);
function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
exports.default = function(values) {
    var n = values.length - 1;
    return function(t) {
        var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis((t - i / n) * n, v0, v1, v2, v3);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gdZAO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
exports.default = function(values) {
    var n = values.length;
    return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
        return _basisJs.basis((t - i / n) * n, v0, v1, v2, v3);
    };
};

},{"./basis.js":"enhcL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eZq9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hue", ()=>hue
);
parcelHelpers.export(exports, "gamma", ()=>gamma
);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
function linear(a, d) {
    return function(t) {
        return a + t * d;
    };
}
function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
    };
}
function hue(a, b) {
    var d = b - a;
    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : _constantJsDefault.default(isNaN(a) ? b : a);
}
function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : _constantJsDefault.default(isNaN(a) ? b : a);
    };
}
function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : _constantJsDefault.default(isNaN(a) ? b : a);
}
exports.default = nogamma;

},{"./constant.js":"aXv76","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXv76":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQXK0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "genericArray", ()=>genericArray
);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
exports.default = function(a, b) {
    return (_numberArrayJs.isNumberArray(b) ? _numberArrayJsDefault.default : genericArray)(a, b);
};
function genericArray(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for(i = 0; i < na; ++i)x[i] = _valueJsDefault.default(a[i], b[i]);
    for(; i < nb; ++i)c[i] = b[i];
    return function(t) {
        for(i = 0; i < na; ++i)c[i] = x[i](t);
        return c;
    };
}

},{"./value.js":"2GpMq","./numberArray.js":"l29YZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l29YZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNumberArray", ()=>isNumberArray
);
exports.default = function(a, b) {
    if (!b) b = [];
    var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
    return function(t) {
        for(i = 0; i < n; ++i)c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
    };
};
function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cCKgJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    var d = new Date;
    return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZAq5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdyKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
exports.default = function(a, b) {
    var i = {}, c = {}, k;
    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};
    for(k in b)if (k in a) i[k] = _valueJsDefault.default(a[k], b[k]);
    else c[k] = b[k];
    return function(t) {
        for(k in i)c[k] = i[k](t);
        return c;
    };
};

},{"./value.js":"2GpMq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Qre8m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
function zero(b) {
    return function() {
        return b;
    };
}
function one(b) {
    return function(t) {
        return b(t) + "";
    };
}
exports.default = function(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i1 = -1, s = [], q = []; // number interpolators
    // Coerce inputs to strings.
    a = a + "", b = b + "";
    // Interpolate pairs of numbers in a & b.
    while((am = reA.exec(a)) && (bm = reB.exec(b))){
        if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs);
            if (s[i1]) s[i1] += bs; // coalesce with previous string
            else s[++i1] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
            if (s[i1]) s[i1] += bm; // coalesce with previous string
            else s[++i1] = bm;
        } else {
            s[++i1] = null;
            q.push({
                i: i1,
                x: _numberJsDefault.default(am, bm)
            });
        }
        bi = reB.lastIndex;
    }
    // Add remains of b.
    if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i1]) s[i1] += bs; // coalesce with previous string
        else s[++i1] = bs;
    }
    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
        for(var i = 0, o; i < b; ++i)s[(o = q[i]).i] = o.x(t);
        return s.join("");
    });
};

},{"./number.js":"fZAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gOUg1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(range) {
    var n = range.length;
    return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6zMfa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("./color.js");
exports.default = function(a, b) {
    var i = _colorJs.hue(+a, +b);
    return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
    };
};

},{"./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8lHW7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jDBQO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolateTransformCss", ()=>interpolateTransformCss
);
parcelHelpers.export(exports, "interpolateTransformSvg", ()=>interpolateTransformSvg
);
var _numberJs = require("../number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _parseJs = require("./parse.js");
function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
        return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push("translate(", null, pxComma, null, pxParen);
            q.push({
                i: i - 4,
                x: _numberJsDefault.default(xa, xb)
            }, {
                i: i - 2,
                x: _numberJsDefault.default(ya, yb)
            });
        } else if (xb || yb) s.push("translate(" + xb + pxComma + yb + pxParen);
    }
    function rotate(a, b, s, q) {
        if (a !== b) {
            if (a - b > 180) b += 360;
            else if (b - a > 180) a += 360; // shortest path
            q.push({
                i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                x: _numberJsDefault.default(a, b)
            });
        } else if (b) s.push(pop(s) + "rotate(" + b + degParen);
    }
    function skewX(a, b, s, q) {
        if (a !== b) q.push({
            i: s.push(pop(s) + "skewX(", null, degParen) - 2,
            x: _numberJsDefault.default(a, b)
        });
        else if (b) s.push(pop(s) + "skewX(" + b + degParen);
    }
    function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
            q.push({
                i: i - 4,
                x: _numberJsDefault.default(xa, xb)
            }, {
                i: i - 2,
                x: _numberJsDefault.default(ya, yb)
            });
        } else if (xb !== 1 || yb !== 1) s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
    return function(a, b) {
        var s = [], q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
            var i = -1, n = q.length, o;
            while(++i < n)s[(o = q[i]).i] = o.x(t);
            return s.join("");
        };
    };
}
var interpolateTransformCss = interpolateTransform(_parseJs.parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(_parseJs.parseSvg, ", ", ")", ")");

},{"../number.js":"fZAq5","./parse.js":"dwvtF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwvtF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-undef */ parcelHelpers.export(exports, "parseCss", ()=>parseCss
);
parcelHelpers.export(exports, "parseSvg", ()=>parseSvg
);
var _decomposeJs = require("./decompose.js");
var _decomposeJsDefault = parcelHelpers.interopDefault(_decomposeJs);
var svgNode;
function parseCss(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? _decomposeJs.identity : _decomposeJsDefault.default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
    if (value == null) return _decomposeJs.identity;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return _decomposeJs.identity;
    value = value.matrix;
    return _decomposeJsDefault.default(value.a, value.b, value.c, value.d, value.e, value.f);
}

},{"./decompose.js":"7Ejbr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Ejbr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity
);
var degrees = 180 / Math.PI;
var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
};
exports.default = function(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees,
        skewX: Math.atan(skewX) * degrees,
        scaleX: scaleX,
        scaleY: scaleY
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7nRsd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var epsilon2 = 0.000000000001;
function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
exports.default = function zoomRho(rho, rho2, rho4) {
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
            S = Math.log(w1 / w0) / rho;
            i = function(t) {
                return [
                    ux0 + t * dx,
                    uy0 + t * dy,
                    w0 * Math.exp(rho * t * S)
                ];
            };
        } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function(t) {
                var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                return [
                    ux0 + u * dx,
                    uy0 + u * dy,
                    w0 * coshr0 / cosh(rho * s + r0)
                ];
            };
        }
        i.duration = S * 1000 * rho / Math.SQRT2;
        return i;
    }
    zoom.rho = function(_) {
        var _1 = Math.max(0.001, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
    };
    return zoom;
}(Math.SQRT2, 2, 4);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jAYx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hslLong", ()=>hslLong
);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function hsl(hue) {
    return function(start, end) {
        var h = hue((start = _d3Color.hsl(start)).h, (end = _d3Color.hsl(end)).h), s = _colorJsDefault.default(start.s, end.s), l = _colorJsDefault.default(start.l, end.l), opacity = _colorJsDefault.default(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
exports.default = hsl(_colorJs.hue);
var hslLong = hsl(_colorJsDefault.default);

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6zM3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function lab(start, end) {
    var l = _colorJsDefault.default((start = _d3Color.lab(start)).l, (end = _d3Color.lab(end)).l), a = _colorJsDefault.default(start.a, end.a), b = _colorJsDefault.default(start.b, end.b), opacity = _colorJsDefault.default(start.opacity, end.opacity);
    return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
    };
}
exports.default = lab;

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afUSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hclLong", ()=>hclLong
);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function hcl(hue) {
    return function(start, end) {
        var h = hue((start = _d3Color.hcl(start)).h, (end = _d3Color.hcl(end)).h), c = _colorJsDefault.default(start.c, end.c), l = _colorJsDefault.default(start.l, end.l), opacity = _colorJsDefault.default(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
exports.default = hcl(_colorJs.hue);
var hclLong = hcl(_colorJsDefault.default);

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oITO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubehelixLong", ()=>cubehelixLong
);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function cubehelix(hue) {
    return function cubehelixGamma(y) {
        y = +y;
        function cubehelix1(start, end) {
            var h = hue((start = _d3Color.cubehelix(start)).h, (end = _d3Color.cubehelix(end)).h), s = _colorJsDefault.default(start.s, end.s), l = _colorJsDefault.default(start.l, end.l), opacity = _colorJsDefault.default(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + "";
            };
        }
        cubehelix1.gamma = cubehelixGamma;
        return cubehelix1;
    }(1);
}
exports.default = cubehelix(_colorJs.hue);
var cubehelixLong = cubehelix(_colorJsDefault.default);

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1W7eI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
function piecewise(interpolate, values) {
    if (values === undefined) values = interpolate, interpolate = _valueJsDefault.default;
    var i1 = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while(i1 < n)I[i1] = interpolate(v, v = values[++i1]);
    return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
    };
}
exports.default = piecewise;

},{"./value.js":"2GpMq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTNfr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(interpolator, n) {
    var samples = new Array(n);
    for(var i = 0; i < n; ++i)samples[i] = interpolator(i / (n - 1));
    return samples;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4lorl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transition", ()=>_indexJsDefault.default
);
parcelHelpers.export(exports, "active", ()=>_activeJsDefault.default
);
parcelHelpers.export(exports, "interrupt", ()=>_interruptJsDefault.default
);
var _indexJs = require("./selection/index.js");
var _indexJs1 = require("./transition/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
var _activeJs = require("./active.js");
var _activeJsDefault = parcelHelpers.interopDefault(_activeJs);
var _interruptJs = require("./interrupt.js");
var _interruptJsDefault = parcelHelpers.interopDefault(_interruptJs);

},{"./selection/index.js":"heX1u","./transition/index.js":"h2Srb","./active.js":"a4qOn","./interrupt.js":"j3g05","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heX1u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _d3Selection = require("d3-selection");
var _interruptJs = require("./interrupt.js");
var _interruptJsDefault = parcelHelpers.interopDefault(_interruptJs);
var _transitionJs = require("./transition.js");
var _transitionJsDefault = parcelHelpers.interopDefault(_transitionJs);
_d3Selection.selection.prototype.interrupt = _interruptJsDefault.default;
_d3Selection.selection.prototype.transition = _transitionJsDefault.default;

},{"d3-selection":"gn9gd","./interrupt.js":"ecsW0","./transition.js":"aZzEX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ecsW0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _interruptJs = require("../interrupt.js");
var _interruptJsDefault = parcelHelpers.interopDefault(_interruptJs);
exports.default = function(name) {
    return this.each(function() {
        _interruptJsDefault.default(this, name);
    });
};

},{"../interrupt.js":"j3g05","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j3g05":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./transition/schedule.js");
exports.default = function(node, name) {
    var schedules = node.__transition, schedule, active, empty = true, i;
    if (!schedules) return;
    name = name == null ? null : name + "";
    for(i in schedules){
        if ((schedule = schedules[i]).name !== name) {
            empty = false;
            continue;
        }
        active = schedule.state > _scheduleJs.STARTING && schedule.state < _scheduleJs.ENDING;
        schedule.state = _scheduleJs.ENDED;
        schedule.timer.stop();
        schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
        delete schedules[i];
    }
    if (empty) delete node.__transition;
};

},{"./transition/schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"de74c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CREATED", ()=>CREATED
);
parcelHelpers.export(exports, "SCHEDULED", ()=>SCHEDULED
);
parcelHelpers.export(exports, "STARTING", ()=>STARTING
);
parcelHelpers.export(exports, "STARTED", ()=>STARTED
);
parcelHelpers.export(exports, "RUNNING", ()=>RUNNING
);
parcelHelpers.export(exports, "ENDING", ()=>ENDING
);
parcelHelpers.export(exports, "ENDED", ()=>ENDED
);
parcelHelpers.export(exports, "init", ()=>init
);
parcelHelpers.export(exports, "set", ()=>set
);
parcelHelpers.export(exports, "get", ()=>get
);
var _d3Dispatch = require("d3-dispatch");
var _d3Timer = require("d3-timer");
var emptyOn = _d3Dispatch.dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
exports.default = function(node, name, id, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules) node.__transition = {};
    else if (id in schedules) return;
    create(node, id, {
        name: name,
        index: index,
        group: group,
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
    });
};
function init(node, id) {
    var schedule = get(node, id);
    if (schedule.state > CREATED) throw new Error("too late; already scheduled");
    return schedule;
}
function set(node, id) {
    var schedule = get(node, id);
    if (schedule.state > STARTED) throw new Error("too late; already running");
    return schedule;
}
function get(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
    return schedule;
}
function create(node, id, self) {
    var schedules = node.__transition, tween;
    // Initialize the self timer when the transition is created.
    // Note the actual delay is not known until the first callback!
    schedules[id] = self;
    self.timer = _d3Timer.timer(schedule, 0, self.time);
    function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);
        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) start(elapsed - self.delay);
    }
    function start(elapsed) {
        var i, j, n, o;
        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) return stop();
        for(i in schedules){
            o = schedules[i];
            if (o.name !== self.name) continue;
            // While this element already has a starting transition during this frame,
            // defer starting an interrupting transition until that transition has a
            // chance to tick (and possibly end); see d3/d3-transition#54!
            if (o.state === STARTED) return _d3Timer.timeout(start);
            // Interrupt the active transition, if any.
            if (o.state === RUNNING) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call("interrupt", node, node.__data__, o.index, o.group);
                delete schedules[i];
            } else if (+i < id) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call("cancel", node, node.__data__, o.index, o.group);
                delete schedules[i];
            }
        }
        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        _d3Timer.timeout(function() {
            if (self.state === STARTED) {
                self.state = RUNNING;
                self.timer.restart(tick, self.delay, self.time);
                tick(elapsed);
            }
        });
        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call("start", node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) return; // interrupted
        self.state = STARTED;
        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for(i = 0, j = -1; i < n; ++i)if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) tween[++j] = o;
        tween.length = j + 1;
    }
    function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
        while(++i < n)tween[i].call(node, t);
        // Dispatch the end event.
        if (self.state === ENDING) {
            self.on.call("end", node, node.__data__, self.index, self.group);
            stop();
        }
    }
    function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for(var i in schedules)return; // eslint-disable-line no-unused-vars
        delete node.__transition;
    }
}

},{"d3-dispatch":"5WtHO","d3-timer":"7TEss","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TEss":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>_timerJs.now
);
parcelHelpers.export(exports, "timer", ()=>_timerJs.timer
);
parcelHelpers.export(exports, "timerFlush", ()=>_timerJs.timerFlush
);
parcelHelpers.export(exports, "timeout", ()=>_timeoutJsDefault.default
);
parcelHelpers.export(exports, "interval", ()=>_intervalJsDefault.default
);
var _timerJs = require("./timer.js");
var _timeoutJs = require("./timeout.js");
var _timeoutJsDefault = parcelHelpers.interopDefault(_timeoutJs);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);

},{"./timer.js":"bfF2F","./timeout.js":"ioM7O","./interval.js":"5wQxk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bfF2F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>now
);
parcelHelpers.export(exports, "Timer", ()=>Timer
);
parcelHelpers.export(exports, "timer", ()=>timer
);
parcelHelpers.export(exports, "timerFlush", ()=>timerFlush
);
var frame = 0, timeout = 0, interval = 0, pokeDelay = 1000, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
};
function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
    clockNow = 0;
}
function Timer() {
    this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
            if (taskTail) taskTail._next = this;
            else taskHead = this;
            taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
    },
    stop: function() {
        if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep();
        }
    }
};
function timer(callback, delay, time) {
    var t = new Timer;
    t.restart(callback, delay, time);
    return t;
}
function timerFlush() {
    now(); // Get the current time, if not already set.
    ++frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while(t){
        if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
        t = t._next;
    }
    --frame;
}
function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
        timerFlush();
    } finally{
        frame = 0;
        nap();
        clockNow = 0;
    }
}
function poke() {
    var now1 = clock.now(), delay = now1 - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now1;
}
function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while(t1)if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
    } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
    taskTail = t0;
    sleep(time);
}
function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
        if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
    } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ioM7O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _timerJs = require("./timer.js");
exports.default = function(callback, delay, time) {
    var t = new _timerJs.Timer;
    delay = delay == null ? 0 : +delay;
    t.restart((elapsed)=>{
        t.stop();
        callback(elapsed + delay);
    }, delay, time);
    return t;
};

},{"./timer.js":"bfF2F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5wQxk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _timerJs = require("./timer.js");
exports.default = function(callback1, delay1, time1) {
    var t = new _timerJs.Timer, total = delay1;
    if (delay1 == null) return t.restart(callback1, delay1, time1), t;
    t._restart = t.restart;
    t.restart = function(callback, delay, time) {
        delay = +delay, time = time == null ? _timerJs.now() : +time;
        t._restart(function tick(elapsed) {
            elapsed += total;
            t._restart(tick, total += delay, time);
            callback(elapsed);
        }, delay, time);
    };
    t.restart(callback1, delay1, time1);
    return t;
};

},{"./timer.js":"bfF2F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZzEX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../transition/index.js");
var _scheduleJs = require("../transition/schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);
var _d3Ease = require("d3-ease");
var _d3Timer = require("d3-timer");
var defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: _d3Ease.easeCubicInOut
};
function inherit(node, id) {
    var timing;
    while(!(timing = node.__transition) || !(timing = timing[id])){
        if (!(node = node.parentNode)) throw new Error(`transition ${id} not found`);
    }
    return timing;
}
exports.default = function(name) {
    var id, timing;
    if (name instanceof _indexJs.Transition) id = name._id, name = name._name;
    else id = _indexJs.newId(), (timing = defaultTiming).time = _d3Timer.now(), name = name == null ? null : name + "";
    for(var groups = this._groups, m = groups.length, j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) _scheduleJsDefault.default(node, name, id, i, group, timing || inherit(node, id));
    }
    return new _indexJs.Transition(groups, this._parents, name, id);
};

},{"../transition/index.js":"h2Srb","../transition/schedule.js":"de74c","d3-ease":"8sCNl","d3-timer":"7TEss","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2Srb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition
);
parcelHelpers.export(exports, "newId", ()=>newId
);
var _d3Selection = require("d3-selection");
var _attrJs = require("./attr.js");
var _attrJsDefault = parcelHelpers.interopDefault(_attrJs);
var _attrTweenJs = require("./attrTween.js");
var _attrTweenJsDefault = parcelHelpers.interopDefault(_attrTweenJs);
var _delayJs = require("./delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var _durationJs = require("./duration.js");
var _durationJsDefault = parcelHelpers.interopDefault(_durationJs);
var _easeJs = require("./ease.js");
var _easeJsDefault = parcelHelpers.interopDefault(_easeJs);
var _easeVaryingJs = require("./easeVarying.js");
var _easeVaryingJsDefault = parcelHelpers.interopDefault(_easeVaryingJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _onJs = require("./on.js");
var _onJsDefault = parcelHelpers.interopDefault(_onJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _selectAllJs = require("./selectAll.js");
var _selectAllJsDefault = parcelHelpers.interopDefault(_selectAllJs);
var _selectionJs = require("./selection.js");
var _selectionJsDefault = parcelHelpers.interopDefault(_selectionJs);
var _styleJs = require("./style.js");
var _styleJsDefault = parcelHelpers.interopDefault(_styleJs);
var _styleTweenJs = require("./styleTween.js");
var _styleTweenJsDefault = parcelHelpers.interopDefault(_styleTweenJs);
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _textTweenJs = require("./textTween.js");
var _textTweenJsDefault = parcelHelpers.interopDefault(_textTweenJs);
var _transitionJs = require("./transition.js");
var _transitionJsDefault = parcelHelpers.interopDefault(_transitionJs);
var _tweenJs = require("./tween.js");
var _tweenJsDefault = parcelHelpers.interopDefault(_tweenJs);
var _endJs = require("./end.js");
var _endJsDefault = parcelHelpers.interopDefault(_endJs);
var id = 0;
function Transition(groups, parents, name, id1) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id1;
}
function transition(name) {
    return _d3Selection.selection().transition(name);
}
exports.default = transition;
function newId() {
    return ++id;
}
var selection_prototype = _d3Selection.selection.prototype;
Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: _selectJsDefault.default,
    selectAll: _selectAllJsDefault.default,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: _filterJsDefault.default,
    merge: _mergeJsDefault.default,
    selection: _selectionJsDefault.default,
    transition: _transitionJsDefault.default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: _onJsDefault.default,
    attr: _attrJsDefault.default,
    attrTween: _attrTweenJsDefault.default,
    style: _styleJsDefault.default,
    styleTween: _styleTweenJsDefault.default,
    text: _textJsDefault.default,
    textTween: _textTweenJsDefault.default,
    remove: _removeJsDefault.default,
    tween: _tweenJsDefault.default,
    delay: _delayJsDefault.default,
    duration: _durationJsDefault.default,
    ease: _easeJsDefault.default,
    easeVarying: _easeVaryingJsDefault.default,
    end: _endJsDefault.default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

},{"d3-selection":"gn9gd","./attr.js":"9UgA3","./attrTween.js":"1hMpn","./delay.js":"2BzOF","./duration.js":"ei298","./ease.js":"lCGHM","./easeVarying.js":"aju4f","./filter.js":"d3Uia","./merge.js":"9odBi","./on.js":"3XrBC","./remove.js":"aZLkz","./select.js":"bgUUX","./selectAll.js":"lqPi4","./selection.js":"iWTRA","./style.js":"44QDP","./styleTween.js":"42AvL","./text.js":"6mGEx","./textTween.js":"kqC5z","./transition.js":"50tVR","./tween.js":"1Kbbg","./end.js":"ev0ir","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UgA3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _tweenJs = require("./tween.js");
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
function attrRemove(name) {
    return function() {
        this.removeAttribute(name);
    };
}
function attrRemoveNS(fullname) {
    return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
}
function attrConstant(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
        var string0 = this.getAttribute(name);
        return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
}
function attrConstantNS(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
        var string0 = this.getAttributeNS(fullname.space, fullname.local);
        return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
}
function attrFunction(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttribute(name);
        string0 = this.getAttribute(name);
        string1 = value1 + "";
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
}
function attrFunctionNS(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
        string0 = this.getAttributeNS(fullname.space, fullname.local);
        string1 = value1 + "";
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
}
exports.default = function(name, value) {
    var fullname = _d3Selection.namespace(name), i = fullname === "transform" ? _d3Interpolate.interpolateTransformSvg : _interpolateJsDefault.default;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, _tweenJs.tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
};

},{"d3-interpolate":"6jJyi","d3-selection":"gn9gd","./tween.js":"1Kbbg","./interpolate.js":"69lgs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Kbbg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tweenValue", ()=>tweenValue
);
var _scheduleJs = require("./schedule.js");
function tweenRemove(id, name) {
    var tween0, tween1;
    return function() {
        var schedule = _scheduleJs.set(this, id), tween = schedule.tween;
        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
            tween1 = tween0 = tween;
            for(var i = 0, n = tween1.length; i < n; ++i)if (tween1[i].name === name) {
                tween1 = tween1.slice();
                tween1.splice(i, 1);
                break;
            }
        }
        schedule.tween = tween1;
    };
}
function tweenFunction(id, name, value) {
    var tween0, tween1;
    if (typeof value !== "function") throw new Error;
    return function() {
        var schedule = _scheduleJs.set(this, id), tween = schedule.tween;
        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
            tween1 = (tween0 = tween).slice();
            for(var t = {
                name: name,
                value: value
            }, i = 0, n = tween1.length; i < n; ++i)if (tween1[i].name === name) {
                tween1[i] = t;
                break;
            }
            if (i === n) tween1.push(t);
        }
        schedule.tween = tween1;
    };
}
exports.default = function(name, value) {
    var id = this._id;
    name += "";
    if (arguments.length < 2) {
        var tween = _scheduleJs.get(this.node(), id).tween;
        for(var i = 0, n = tween.length, t; i < n; ++i){
            if ((t = tween[i]).name === name) return t.value;
        }
        return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
};
function tweenValue(transition, name, value) {
    var id = transition._id;
    transition.each(function() {
        var schedule = _scheduleJs.set(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node) {
        return _scheduleJs.get(node, id).value[name];
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"69lgs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");
exports.default = function(a, b) {
    var c;
    return (typeof b === "number" ? _d3Interpolate.interpolateNumber : b instanceof _d3Color.color ? _d3Interpolate.interpolateRgb : (c = _d3Color.color(b)) ? (b = c, _d3Interpolate.interpolateRgb) : _d3Interpolate.interpolateString)(a, b);
};

},{"d3-color":"grhaa","d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hMpn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Selection = require("d3-selection");
function attrInterpolate(name, i) {
    return function(t) {
        this.setAttribute(name, i.call(this, t));
    };
}
function attrInterpolateNS(fullname, i) {
    return function(t) {
        this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
}
function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
        return t0;
    }
    tween._value = value;
    return tween;
}
function attrTween(name, value) {
    var t0, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
        return t0;
    }
    tween._value = value;
    return tween;
}
exports.default = function(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    var fullname = _d3Selection.namespace(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
};

},{"d3-selection":"gn9gd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BzOF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./schedule.js");
function delayFunction(id, value) {
    return function() {
        _scheduleJs.init(this, id).delay = +value.apply(this, arguments);
    };
}
function delayConstant(id, value) {
    return value = +value, function() {
        _scheduleJs.init(this, id).delay = value;
    };
}
exports.default = function(value) {
    var id = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : _scheduleJs.get(this.node(), id).delay;
};

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ei298":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./schedule.js");
function durationFunction(id, value) {
    return function() {
        _scheduleJs.set(this, id).duration = +value.apply(this, arguments);
    };
}
function durationConstant(id, value) {
    return value = +value, function() {
        _scheduleJs.set(this, id).duration = value;
    };
}
exports.default = function(value) {
    var id = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : _scheduleJs.get(this.node(), id).duration;
};

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCGHM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./schedule.js");
function easeConstant(id, value) {
    if (typeof value !== "function") throw new Error;
    return function() {
        _scheduleJs.set(this, id).ease = value;
    };
}
exports.default = function(value) {
    var id = this._id;
    return arguments.length ? this.each(easeConstant(id, value)) : _scheduleJs.get(this.node(), id).ease;
};

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aju4f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./schedule.js");
function easeVarying(id, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (typeof v !== "function") throw new Error;
        _scheduleJs.set(this, id).ease = v;
    };
}
exports.default = function(value) {
    if (typeof value !== "function") throw new Error;
    return this.each(easeVarying(this._id, value));
};

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d3Uia":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Selection = require("d3-selection");
var _indexJs = require("./index.js");
exports.default = function(match) {
    if (typeof match !== "function") match = _d3Selection.matcher(match);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)if ((node = group[i]) && match.call(node, node.__data__, i, group)) subgroup.push(node);
    }
    return new _indexJs.Transition(subgroups, this._parents, this._name, this._id);
};

},{"d3-selection":"gn9gd","./index.js":"h2Srb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9odBi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
exports.default = function(transition) {
    if (transition._id !== this._id) throw new Error;
    for(var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
        for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group0[i] || group1[i]) merge[i] = node;
    }
    for(; j < m0; ++j)merges[j] = groups0[j];
    return new _indexJs.Transition(merges, this._parents, this._name, this._id);
};

},{"./index.js":"h2Srb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XrBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./schedule.js");
function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
        var i = t.indexOf(".");
        if (i >= 0) t = t.slice(0, i);
        return !t || t === "start";
    });
}
function onFunction(id, name, listener) {
    var on0, on1, sit = start(name) ? _scheduleJs.init : _scheduleJs.set;
    return function() {
        var schedule = sit(this, id), on = schedule.on;
        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
        schedule.on = on1;
    };
}
exports.default = function(name, listener) {
    var id = this._id;
    return arguments.length < 2 ? _scheduleJs.get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
};

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZLkz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function removeFunction(id) {
    return function() {
        var parent = this.parentNode;
        for(var i in this.__transition)if (+i !== id) return;
        if (parent) parent.removeChild(this);
    };
}
exports.default = function() {
    return this.on("end.remove", removeFunction(this._id));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgUUX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Selection = require("d3-selection");
var _indexJs = require("./index.js");
var _scheduleJs = require("./schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);
exports.default = function(select) {
    var name = this._name, id = this._id;
    if (typeof select !== "function") select = _d3Selection.selector(select);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
            _scheduleJsDefault.default(subgroup[i], name, id, i, subgroup, _scheduleJs.get(node, id));
        }
    }
    return new _indexJs.Transition(subgroups, this._parents, name, id);
};

},{"d3-selection":"gn9gd","./index.js":"h2Srb","./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqPi4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Selection = require("d3-selection");
var _indexJs = require("./index.js");
var _scheduleJs = require("./schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);
exports.default = function(select) {
    var name = this._name, id = this._id;
    if (typeof select !== "function") select = _d3Selection.selectorAll(select);
    for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
            for(var children = select.call(node, node.__data__, i, group), child, inherit = _scheduleJs.get(node, id), k = 0, l = children.length; k < l; ++k)if (child = children[k]) _scheduleJsDefault.default(child, name, id, k, children, inherit);
            subgroups.push(children);
            parents.push(node);
        }
    }
    return new _indexJs.Transition(subgroups, parents, name, id);
};

},{"d3-selection":"gn9gd","./index.js":"h2Srb","./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iWTRA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Selection = require("d3-selection");
var Selection = _d3Selection.selection.prototype.constructor;
exports.default = function() {
    return new Selection(this._groups, this._parents);
};

},{"d3-selection":"gn9gd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44QDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _scheduleJs = require("./schedule.js");
var _tweenJs = require("./tween.js");
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
        var string0 = _d3Selection.style(this, name), string1 = (this.style.removeProperty(name), _d3Selection.style(this, name));
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
}
function styleRemove(name) {
    return function() {
        this.style.removeProperty(name);
    };
}
function styleConstant(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
        var string0 = _d3Selection.style(this, name);
        return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
}
function styleFunction(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
        var string0 = _d3Selection.style(this, name), value1 = value(this), string1 = value1 + "";
        if (value1 == null) string1 = value1 = (this.style.removeProperty(name), _d3Selection.style(this, name));
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
}
function styleMaybeRemove(id, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
    return function() {
        var schedule = _scheduleJs.set(this, id), on = schedule.on, listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;
        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
        schedule.on = on1;
    };
}
exports.default = function(name, value, priority) {
    var i = (name += "") === "transform" ? _d3Interpolate.interpolateTransformCss : _interpolateJsDefault.default;
    return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, _tweenJs.tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
};

},{"d3-interpolate":"6jJyi","d3-selection":"gn9gd","./schedule.js":"de74c","./tween.js":"1Kbbg","./interpolate.js":"69lgs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"42AvL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function styleInterpolate(name, i, priority) {
    return function(t) {
        this.style.setProperty(name, i.call(this, t), priority);
    };
}
function styleTween(name, value, priority) {
    var t, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
        return t;
    }
    tween._value = value;
    return tween;
}
exports.default = function(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mGEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tweenJs = require("./tween.js");
function textConstant(value) {
    return function() {
        this.textContent = value;
    };
}
function textFunction(value) {
    return function() {
        var value1 = value(this);
        this.textContent = value1 == null ? "" : value1;
    };
}
exports.default = function(value) {
    return this.tween("text", typeof value === "function" ? textFunction(_tweenJs.tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
};

},{"./tween.js":"1Kbbg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqC5z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function textInterpolate(i) {
    return function(t) {
        this.textContent = i.call(this, t);
    };
}
function textTween(value) {
    var t0, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
        return t0;
    }
    tween._value = value;
    return tween;
}
exports.default = function(value) {
    var key = "text";
    if (arguments.length < 1) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    return this.tween(key, textTween(value));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50tVR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _scheduleJs = require("./schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);
exports.default = function() {
    var name = this._name, id0 = this._id, id1 = _indexJs.newId();
    for(var groups = this._groups, m = groups.length, j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
            var inherit = _scheduleJs.get(node, id0);
            _scheduleJsDefault.default(node, name, id1, i, group, {
                time: inherit.time + inherit.delay + inherit.duration,
                delay: 0,
                duration: inherit.duration,
                ease: inherit.ease
            });
        }
    }
    return new _indexJs.Transition(groups, this._parents, name, id1);
};

},{"./index.js":"h2Srb","./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ev0ir":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scheduleJs = require("./schedule.js");
exports.default = function() {
    var on0, on1, that = this, id = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
        var cancel = {
            value: reject
        }, end = {
            value: function() {
                if (--size === 0) resolve();
            }
        };
        that.each(function() {
            var schedule = _scheduleJs.set(this, id), on = schedule.on;
            // If this node shared a dispatch with the previous node,
            // just assign the updated shared dispatch and we’re done!
            // Otherwise, copy-on-write.
            if (on !== on0) {
                on1 = (on0 = on).copy();
                on1._.cancel.push(cancel);
                on1._.interrupt.push(cancel);
                on1._.end.push(end);
            }
            schedule.on = on1;
        });
        // The selection was empty, resolve end immediately
        if (size === 0) resolve();
    });
};

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8sCNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easeLinear", ()=>_linearJs.linear
);
parcelHelpers.export(exports, "easeQuad", ()=>_quadJs.quadInOut
);
parcelHelpers.export(exports, "easeQuadIn", ()=>_quadJs.quadIn
);
parcelHelpers.export(exports, "easeQuadOut", ()=>_quadJs.quadOut
);
parcelHelpers.export(exports, "easeQuadInOut", ()=>_quadJs.quadInOut
);
parcelHelpers.export(exports, "easeCubic", ()=>_cubicJs.cubicInOut
);
parcelHelpers.export(exports, "easeCubicIn", ()=>_cubicJs.cubicIn
);
parcelHelpers.export(exports, "easeCubicOut", ()=>_cubicJs.cubicOut
);
parcelHelpers.export(exports, "easeCubicInOut", ()=>_cubicJs.cubicInOut
);
parcelHelpers.export(exports, "easePoly", ()=>_polyJs.polyInOut
);
parcelHelpers.export(exports, "easePolyIn", ()=>_polyJs.polyIn
);
parcelHelpers.export(exports, "easePolyOut", ()=>_polyJs.polyOut
);
parcelHelpers.export(exports, "easePolyInOut", ()=>_polyJs.polyInOut
);
parcelHelpers.export(exports, "easeSin", ()=>_sinJs.sinInOut
);
parcelHelpers.export(exports, "easeSinIn", ()=>_sinJs.sinIn
);
parcelHelpers.export(exports, "easeSinOut", ()=>_sinJs.sinOut
);
parcelHelpers.export(exports, "easeSinInOut", ()=>_sinJs.sinInOut
);
parcelHelpers.export(exports, "easeExp", ()=>_expJs.expInOut
);
parcelHelpers.export(exports, "easeExpIn", ()=>_expJs.expIn
);
parcelHelpers.export(exports, "easeExpOut", ()=>_expJs.expOut
);
parcelHelpers.export(exports, "easeExpInOut", ()=>_expJs.expInOut
);
parcelHelpers.export(exports, "easeCircle", ()=>_circleJs.circleInOut
);
parcelHelpers.export(exports, "easeCircleIn", ()=>_circleJs.circleIn
);
parcelHelpers.export(exports, "easeCircleOut", ()=>_circleJs.circleOut
);
parcelHelpers.export(exports, "easeCircleInOut", ()=>_circleJs.circleInOut
);
parcelHelpers.export(exports, "easeBounce", ()=>_bounceJs.bounceOut
);
parcelHelpers.export(exports, "easeBounceIn", ()=>_bounceJs.bounceIn
);
parcelHelpers.export(exports, "easeBounceOut", ()=>_bounceJs.bounceOut
);
parcelHelpers.export(exports, "easeBounceInOut", ()=>_bounceJs.bounceInOut
);
parcelHelpers.export(exports, "easeBack", ()=>_backJs.backInOut
);
parcelHelpers.export(exports, "easeBackIn", ()=>_backJs.backIn
);
parcelHelpers.export(exports, "easeBackOut", ()=>_backJs.backOut
);
parcelHelpers.export(exports, "easeBackInOut", ()=>_backJs.backInOut
);
parcelHelpers.export(exports, "easeElastic", ()=>_elasticJs.elasticOut
);
parcelHelpers.export(exports, "easeElasticIn", ()=>_elasticJs.elasticIn
);
parcelHelpers.export(exports, "easeElasticOut", ()=>_elasticJs.elasticOut
);
parcelHelpers.export(exports, "easeElasticInOut", ()=>_elasticJs.elasticInOut
);
var _linearJs = require("./linear.js");
var _quadJs = require("./quad.js");
var _cubicJs = require("./cubic.js");
var _polyJs = require("./poly.js");
var _sinJs = require("./sin.js");
var _expJs = require("./exp.js");
var _circleJs = require("./circle.js");
var _bounceJs = require("./bounce.js");
var _backJs = require("./back.js");
var _elasticJs = require("./elastic.js");

},{"./linear.js":"ky2JQ","./quad.js":"7ObJ5","./cubic.js":"cGjk7","./poly.js":"3Kvwr","./sin.js":"4uapY","./exp.js":"3VF4w","./circle.js":"7RIn1","./bounce.js":"9OjEn","./back.js":"i00UE","./elastic.js":"izQef","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ky2JQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linear", ()=>linear
);
const linear = (t)=>+t
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ObJ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quadIn", ()=>quadIn
);
parcelHelpers.export(exports, "quadOut", ()=>quadOut
);
parcelHelpers.export(exports, "quadInOut", ()=>quadInOut
);
function quadIn(t) {
    return t * t;
}
function quadOut(t) {
    return t * (2 - t);
}
function quadInOut(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGjk7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubicIn", ()=>cubicIn
);
parcelHelpers.export(exports, "cubicOut", ()=>cubicOut
);
parcelHelpers.export(exports, "cubicInOut", ()=>cubicInOut
);
function cubicIn(t) {
    return t * t * t;
}
function cubicOut(t) {
    return --t * t * t + 1;
}
function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Kvwr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polyIn", ()=>polyIn
);
parcelHelpers.export(exports, "polyOut", ()=>polyOut
);
parcelHelpers.export(exports, "polyInOut", ()=>polyInOut
);
var exponent = 3;
var polyIn = function custom(e) {
    e = +e;
    function polyIn1(t) {
        return Math.pow(t, e);
    }
    polyIn1.exponent = custom;
    return polyIn1;
}(exponent);
var polyOut = function custom(e) {
    e = +e;
    function polyOut1(t) {
        return 1 - Math.pow(1 - t, e);
    }
    polyOut1.exponent = custom;
    return polyOut1;
}(exponent);
var polyInOut = function custom(e) {
    e = +e;
    function polyInOut1(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
    }
    polyInOut1.exponent = custom;
    return polyInOut1;
}(exponent);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4uapY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinIn", ()=>sinIn
);
parcelHelpers.export(exports, "sinOut", ()=>sinOut
);
parcelHelpers.export(exports, "sinInOut", ()=>sinInOut
);
var pi = Math.PI, halfPi = pi / 2;
function sinIn(t) {
    return +t === 1 ? 1 : 1 - Math.cos(t * halfPi);
}
function sinOut(t) {
    return Math.sin(t * halfPi);
}
function sinInOut(t) {
    return (1 - Math.cos(pi * t)) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VF4w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expIn", ()=>expIn
);
parcelHelpers.export(exports, "expOut", ()=>expOut
);
parcelHelpers.export(exports, "expInOut", ()=>expInOut
);
var _mathJs = require("./math.js");
function expIn(t) {
    return _mathJs.tpmt(1 - +t);
}
function expOut(t) {
    return 1 - _mathJs.tpmt(t);
}
function expInOut(t) {
    return ((t *= 2) <= 1 ? _mathJs.tpmt(1 - t) : 2 - _mathJs.tpmt(t - 1)) / 2;
}

},{"./math.js":"fkvlB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkvlB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// tpmt is two power minus ten times t scaled to [0,1]
parcelHelpers.export(exports, "tpmt", ()=>tpmt
);
function tpmt(x) {
    return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7RIn1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "circleIn", ()=>circleIn
);
parcelHelpers.export(exports, "circleOut", ()=>circleOut
);
parcelHelpers.export(exports, "circleInOut", ()=>circleInOut
);
function circleIn(t) {
    return 1 - Math.sqrt(1 - t * t);
}
function circleOut(t) {
    return Math.sqrt(1 - --t * t);
}
function circleInOut(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9OjEn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bounceIn", ()=>bounceIn
);
parcelHelpers.export(exports, "bounceOut", ()=>bounceOut
);
parcelHelpers.export(exports, "bounceInOut", ()=>bounceInOut
);
var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 0.75, b5 = 9 / 11, b6 = 10 / 11, b7 = 0.9375, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
function bounceIn(t) {
    return 1 - bounceOut(1 - t);
}
function bounceOut(t) {
    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}
function bounceInOut(t) {
    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i00UE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "backIn", ()=>backIn
);
parcelHelpers.export(exports, "backOut", ()=>backOut
);
parcelHelpers.export(exports, "backInOut", ()=>backInOut
);
var overshoot = 1.70158;
var backIn = function custom(s) {
    s = +s;
    function backIn1(t) {
        return (t = +t) * t * (s * (t - 1) + t);
    }
    backIn1.overshoot = custom;
    return backIn1;
}(overshoot);
var backOut = function custom(s) {
    s = +s;
    function backOut1(t) {
        return --t * t * ((t + 1) * s + t) + 1;
    }
    backOut1.overshoot = custom;
    return backOut1;
}(overshoot);
var backInOut = function custom(s) {
    s = +s;
    function backInOut1(t) {
        return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
    }
    backInOut1.overshoot = custom;
    return backInOut1;
}(overshoot);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"izQef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "elasticIn", ()=>elasticIn
);
parcelHelpers.export(exports, "elasticOut", ()=>elasticOut
);
parcelHelpers.export(exports, "elasticInOut", ()=>elasticInOut
);
var _mathJs = require("./math.js");
var tau = 2 * Math.PI, amplitude = 1, period = 0.3;
var elasticIn = function custom(a1, p1) {
    var s = Math.asin(1 / (a1 = Math.max(1, a1))) * (p1 /= tau);
    function elasticIn1(t) {
        return a1 * _mathJs.tpmt(- --t) * Math.sin((s - t) / p1);
    }
    elasticIn1.amplitude = function(a) {
        return custom(a, p1 * tau);
    };
    elasticIn1.period = function(p) {
        return custom(a1, p);
    };
    return elasticIn1;
}(amplitude, period);
var elasticOut = function custom(a2, p2) {
    var s = Math.asin(1 / (a2 = Math.max(1, a2))) * (p2 /= tau);
    function elasticOut1(t) {
        return 1 - a2 * _mathJs.tpmt(t = +t) * Math.sin((t + s) / p2);
    }
    elasticOut1.amplitude = function(a) {
        return custom(a, p2 * tau);
    };
    elasticOut1.period = function(p) {
        return custom(a2, p);
    };
    return elasticOut1;
}(amplitude, period);
var elasticInOut = function custom(a3, p3) {
    var s = Math.asin(1 / (a3 = Math.max(1, a3))) * (p3 /= tau);
    function elasticInOut1(t) {
        return ((t = t * 2 - 1) < 0 ? a3 * _mathJs.tpmt(-t) * Math.sin((s - t) / p3) : 2 - a3 * _mathJs.tpmt(t) * Math.sin((s + t) / p3)) / 2;
    }
    elasticInOut1.amplitude = function(a) {
        return custom(a, p3 * tau);
    };
    elasticInOut1.period = function(p) {
        return custom(a3, p);
    };
    return elasticInOut1;
}(amplitude, period);

},{"./math.js":"fkvlB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4qOn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./transition/index.js");
var _scheduleJs = require("./transition/schedule.js");
var root = [
    null
];
exports.default = function(node, name) {
    var schedules = node.__transition, schedule, i;
    if (schedules) {
        name = name == null ? null : name + "";
        for(i in schedules){
            if ((schedule = schedules[i]).state > _scheduleJs.SCHEDULED && schedule.name === name) return new _indexJs.Transition([
                [
                    node
                ]
            ], root, name, +i);
        }
    }
    return null;
};

},{"./transition/index.js":"h2Srb","./transition/schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmgIQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6f6C1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function BrushEvent(type, { sourceEvent , target , selection , mode , dispatch  }) {
    Object.defineProperties(this, {
        type: {
            value: type,
            enumerable: true,
            configurable: true
        },
        sourceEvent: {
            value: sourceEvent,
            enumerable: true,
            configurable: true
        },
        target: {
            value: target,
            enumerable: true,
            configurable: true
        },
        selection: {
            value: selection,
            enumerable: true,
            configurable: true
        },
        mode: {
            value: mode,
            enumerable: true,
            configurable: true
        },
        _: {
            value: dispatch
        }
    });
}
exports.default = BrushEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cozwm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nopropagation", ()=>nopropagation
);
function nopropagation(event) {
    event.stopImmediatePropagation();
}
exports.default = function(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a34mM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chord", ()=>_chordJsDefault.default
);
parcelHelpers.export(exports, "chordTranspose", ()=>_chordJs.chordTranspose
);
parcelHelpers.export(exports, "chordDirected", ()=>_chordJs.chordDirected
);
parcelHelpers.export(exports, "ribbon", ()=>_ribbonJsDefault.default
);
parcelHelpers.export(exports, "ribbonArrow", ()=>_ribbonJs.ribbonArrow
);
var _chordJs = require("./chord.js");
var _chordJsDefault = parcelHelpers.interopDefault(_chordJs);
var _ribbonJs = require("./ribbon.js");
var _ribbonJsDefault = parcelHelpers.interopDefault(_ribbonJs);

},{"./chord.js":"3rEsy","./ribbon.js":"guW62","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3rEsy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chordTranspose", ()=>chordTranspose
);
parcelHelpers.export(exports, "chordDirected", ()=>chordDirected
);
var _mathJs = require("./math.js");
function range(i, j) {
    return Array.from({
        length: j - i
    }, (_, k)=>i + k
    );
}
function compareValue(compare) {
    return function(a, b) {
        return compare(a.source.value + a.target.value, b.source.value + b.target.value);
    };
}
exports.default = function() {
    return chord(false, false);
};
function chordTranspose() {
    return chord(false, true);
}
function chordDirected() {
    return chord(true, false);
}
function chord(directed, transpose) {
    var padAngle = 0, sortGroups = null, sortSubgroups = null, sortChords = null;
    function chord1(matrix) {
        var n = matrix.length, groupSums = new Array(n), groupIndex = range(0, n), chords = new Array(n * n), groups = new Array(n), k = 0, dx;
        matrix = Float64Array.from({
            length: n * n
        }, transpose ? (_, i)=>matrix[i % n][i / n | 0]
         : (_, i)=>matrix[i / n | 0][i % n]
        );
        // Compute the scaling factor from value to angle in [0, 2pi].
        for(let i1 = 0; i1 < n; ++i1){
            let x = 0;
            for(let j = 0; j < n; ++j)x += matrix[i1 * n + j] + directed * matrix[j * n + i1];
            k += groupSums[i1] = x;
        }
        k = _mathJs.max(0, _mathJs.tau - padAngle * n) / k;
        dx = k ? padAngle : _mathJs.tau / n;
        // Compute the angles for each group and constituent chord.
        {
            let x = 0;
            if (sortGroups) groupIndex.sort((a, b)=>sortGroups(groupSums[a], groupSums[b])
            );
            for (const i of groupIndex){
                const x0 = x;
                if (directed) {
                    const subgroupIndex = range(~n + 1, n).filter((j)=>j < 0 ? matrix[~j * n + i] : matrix[i * n + j]
                    );
                    if (sortSubgroups) subgroupIndex.sort((a, b)=>sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b])
                    );
                    for (const j1 of subgroupIndex)if (j1 < 0) {
                        const chord2 = chords[~j1 * n + i] || (chords[~j1 * n + i] = {
                            source: null,
                            target: null
                        });
                        chord2.target = {
                            index: i,
                            startAngle: x,
                            endAngle: x += matrix[~j1 * n + i] * k,
                            value: matrix[~j1 * n + i]
                        };
                    } else {
                        const chord3 = chords[i * n + j1] || (chords[i * n + j1] = {
                            source: null,
                            target: null
                        });
                        chord3.source = {
                            index: i,
                            startAngle: x,
                            endAngle: x += matrix[i * n + j1] * k,
                            value: matrix[i * n + j1]
                        };
                    }
                    groups[i] = {
                        index: i,
                        startAngle: x0,
                        endAngle: x,
                        value: groupSums[i]
                    };
                } else {
                    const subgroupIndex = range(0, n).filter((j)=>matrix[i * n + j] || matrix[j * n + i]
                    );
                    if (sortSubgroups) subgroupIndex.sort((a, b)=>sortSubgroups(matrix[i * n + a], matrix[i * n + b])
                    );
                    for (const j5 of subgroupIndex){
                        let chord4;
                        if (i < j5) {
                            chord4 = chords[i * n + j5] || (chords[i * n + j5] = {
                                source: null,
                                target: null
                            });
                            chord4.source = {
                                index: i,
                                startAngle: x,
                                endAngle: x += matrix[i * n + j5] * k,
                                value: matrix[i * n + j5]
                            };
                        } else {
                            chord4 = chords[j5 * n + i] || (chords[j5 * n + i] = {
                                source: null,
                                target: null
                            });
                            chord4.target = {
                                index: i,
                                startAngle: x,
                                endAngle: x += matrix[i * n + j5] * k,
                                value: matrix[i * n + j5]
                            };
                            if (i === j5) chord4.source = chord4.target;
                        }
                        if (chord4.source && chord4.target && chord4.source.value < chord4.target.value) {
                            const source = chord4.source;
                            chord4.source = chord4.target;
                            chord4.target = source;
                        }
                    }
                    groups[i] = {
                        index: i,
                        startAngle: x0,
                        endAngle: x,
                        value: groupSums[i]
                    };
                }
                x += dx;
            }
        }
        // Remove empty chords.
        chords = Object.values(chords);
        chords.groups = groups;
        return sortChords ? chords.sort(sortChords) : chords;
    }
    chord1.padAngle = function(_) {
        return arguments.length ? (padAngle = _mathJs.max(0, _), chord1) : padAngle;
    };
    chord1.sortGroups = function(_) {
        return arguments.length ? (sortGroups = _, chord1) : sortGroups;
    };
    chord1.sortSubgroups = function(_) {
        return arguments.length ? (sortSubgroups = _, chord1) : sortSubgroups;
    };
    chord1.sortChords = function(_) {
        return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord1) : sortChords && sortChords._;
    };
    return chord1;
}

},{"./math.js":"8kugb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8kugb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "cos", ()=>cos
);
parcelHelpers.export(exports, "sin", ()=>sin
);
parcelHelpers.export(exports, "pi", ()=>pi
);
parcelHelpers.export(exports, "halfPi", ()=>halfPi
);
parcelHelpers.export(exports, "tau", ()=>tau
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "epsilon", ()=>epsilon
);
var abs = Math.abs;
var cos = Math.cos;
var sin = Math.sin;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = pi * 2;
var max = Math.max;
var epsilon = 0.000000000001;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"guW62":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ribbonArrow", ()=>ribbonArrow
);
var _d3Path = require("d3-path");
var _arrayJs = require("./array.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _mathJs = require("./math.js");
function defaultSource(d) {
    return d.source;
}
function defaultTarget(d) {
    return d.target;
}
function defaultRadius(d) {
    return d.radius;
}
function defaultStartAngle(d) {
    return d.startAngle;
}
function defaultEndAngle(d) {
    return d.endAngle;
}
function defaultPadAngle() {
    return 0;
}
function defaultArrowheadRadius() {
    return 10;
}
function ribbon(headRadius) {
    var source = defaultSource, target = defaultTarget, sourceRadius = defaultRadius, targetRadius = defaultRadius, startAngle = defaultStartAngle, endAngle = defaultEndAngle, padAngle = defaultPadAngle, context = null;
    function ribbon1() {
        var buffer, s = source.apply(this, arguments), t = target.apply(this, arguments), ap = padAngle.apply(this, arguments) / 2, argv = _arrayJs.slice.call(arguments), sr = +sourceRadius.apply(this, (argv[0] = s, argv)), sa0 = startAngle.apply(this, argv) - _mathJs.halfPi, sa1 = endAngle.apply(this, argv) - _mathJs.halfPi, tr = +targetRadius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - _mathJs.halfPi, ta1 = endAngle.apply(this, argv) - _mathJs.halfPi;
        if (!context) context = buffer = _d3Path.path();
        if (ap > _mathJs.epsilon) {
            if (_mathJs.abs(sa1 - sa0) > ap * 2 + _mathJs.epsilon) sa1 > sa0 ? (sa0 += ap, sa1 -= ap) : (sa0 -= ap, sa1 += ap);
            else sa0 = sa1 = (sa0 + sa1) / 2;
            if (_mathJs.abs(ta1 - ta0) > ap * 2 + _mathJs.epsilon) ta1 > ta0 ? (ta0 += ap, ta1 -= ap) : (ta0 -= ap, ta1 += ap);
            else ta0 = ta1 = (ta0 + ta1) / 2;
        }
        context.moveTo(sr * _mathJs.cos(sa0), sr * _mathJs.sin(sa0));
        context.arc(0, 0, sr, sa0, sa1);
        if (sa0 !== ta0 || sa1 !== ta1) {
            if (headRadius) {
                var hr = +headRadius.apply(this, arguments), tr2 = tr - hr, ta2 = (ta0 + ta1) / 2;
                context.quadraticCurveTo(0, 0, tr2 * _mathJs.cos(ta0), tr2 * _mathJs.sin(ta0));
                context.lineTo(tr * _mathJs.cos(ta2), tr * _mathJs.sin(ta2));
                context.lineTo(tr2 * _mathJs.cos(ta1), tr2 * _mathJs.sin(ta1));
            } else {
                context.quadraticCurveTo(0, 0, tr * _mathJs.cos(ta0), tr * _mathJs.sin(ta0));
                context.arc(0, 0, tr, ta0, ta1);
            }
        }
        context.quadraticCurveTo(0, 0, sr * _mathJs.cos(sa0), sr * _mathJs.sin(sa0));
        context.closePath();
        if (buffer) return context = null, buffer + "" || null;
    }
    if (headRadius) ribbon1.headRadius = function(_) {
        return arguments.length ? (headRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : headRadius;
    };
    ribbon1.radius = function(_) {
        return arguments.length ? (sourceRadius = targetRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : sourceRadius;
    };
    ribbon1.sourceRadius = function(_) {
        return arguments.length ? (sourceRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : sourceRadius;
    };
    ribbon1.targetRadius = function(_) {
        return arguments.length ? (targetRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : targetRadius;
    };
    ribbon1.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : startAngle;
    };
    ribbon1.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : endAngle;
    };
    ribbon1.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), ribbon1) : padAngle;
    };
    ribbon1.source = function(_) {
        return arguments.length ? (source = _, ribbon1) : source;
    };
    ribbon1.target = function(_) {
        return arguments.length ? (target = _, ribbon1) : target;
    };
    ribbon1.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, ribbon1) : context;
    };
    return ribbon1;
}
exports.default = function() {
    return ribbon();
};
function ribbonArrow() {
    return ribbon(defaultArrowheadRadius);
}

},{"d3-path":"eY3pl","./array.js":"gsZn6","./constant.js":"gFQCM","./math.js":"8kugb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eY3pl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "path", ()=>_pathJsDefault.default
);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);

},{"./path.js":"jFeAg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFeAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const pi = Math.PI, tau = 2 * pi, epsilon = 0.000001, tauEpsilon = tau - epsilon;
function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
    this._ = "";
}
function path() {
    return new Path;
}
Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
    },
    closePath: function() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    },
    lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
    },
    arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);
        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        else if (!(l01_2 > epsilon)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        else {
            var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > epsilon) this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
    },
    arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);
        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) this._ += "M" + x0 + "," + y0;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
        // Is this arc empty? We’re done.
        if (!r) return;
        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau + tau;
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        else if (da > epsilon) this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    },
    rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function() {
        return this._;
    }
};
exports.default = path;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gsZn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice
);
var slice = Array.prototype.slice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFQCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5lvYf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contours", ()=>_contoursJsDefault.default
);
parcelHelpers.export(exports, "contourDensity", ()=>_densityJsDefault.default
);
var _contoursJs = require("./contours.js");
var _contoursJsDefault = parcelHelpers.interopDefault(_contoursJs);
var _densityJs = require("./density.js");
var _densityJsDefault = parcelHelpers.interopDefault(_densityJs);

},{"./contours.js":"7N8hX","./density.js":"DY8zZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7N8hX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _arrayJs = require("./array.js");
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var cases = [
    [],
    [
        [
            [
                1,
                1.5
            ],
            [
                0.5,
                1
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1
            ],
            [
                1,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1
            ],
            [
                0.5,
                1
            ]
        ]
    ],
    [
        [
            [
                1,
                0.5
            ],
            [
                1.5,
                1
            ]
        ]
    ],
    [
        [
            [
                1,
                1.5
            ],
            [
                0.5,
                1
            ]
        ],
        [
            [
                1,
                0.5
            ],
            [
                1.5,
                1
            ]
        ]
    ],
    [
        [
            [
                1,
                0.5
            ],
            [
                1,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1,
                0.5
            ],
            [
                0.5,
                1
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1
            ],
            [
                1,
                0.5
            ]
        ]
    ],
    [
        [
            [
                1,
                1.5
            ],
            [
                1,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1
            ],
            [
                1,
                0.5
            ]
        ],
        [
            [
                1.5,
                1
            ],
            [
                1,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1
            ],
            [
                1,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1
            ],
            [
                1.5,
                1
            ]
        ]
    ],
    [
        [
            [
                1,
                1.5
            ],
            [
                1.5,
                1
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1
            ],
            [
                1,
                1.5
            ]
        ]
    ],
    []
];
exports.default = function() {
    var dx = 1, dy = 1, threshold = _d3Array.thresholdSturges, smooth = smoothLinear;
    function contours(values) {
        var tz = threshold(values);
        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
            const e = _d3Array.extent(values), ts = _d3Array.tickStep(e[0], e[1], tz);
            tz = _d3Array.ticks(Math.floor(e[0] / ts) * ts, Math.floor(e[1] / ts - 1) * ts, tz);
        } else tz = tz.slice().sort(_ascendingJsDefault.default);
        return tz.map((value)=>contour(values, value)
        );
    }
    // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
    function contour(values, value) {
        var polygons = [], holes = [];
        isorings(values, value, function(ring) {
            smooth(ring, values, value);
            if (_areaJsDefault.default(ring) > 0) polygons.push([
                ring
            ]);
            else holes.push(ring);
        });
        holes.forEach(function(hole) {
            for(var i = 0, n = polygons.length, polygon; i < n; ++i)if (_containsJsDefault.default((polygon = polygons[i])[0], hole) !== -1) {
                polygon.push(hole);
                return;
            }
        });
        return {
            type: "MultiPolygon",
            value: value,
            coordinates: polygons
        };
    }
    // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
    function isorings(values, value, callback) {
        var fragmentByStart = new Array, fragmentByEnd = new Array, x, y, t0, t1, t2, t3;
        // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = values[0] >= value;
        cases[t1 << 1].forEach(stitch);
        while(++x < dx - 1){
            t0 = t1, t1 = values[x + 1] >= value;
            cases[t0 | t1 << 1].forEach(stitch);
        }
        cases[t1 << 0].forEach(stitch);
        // General case for the intermediate rows.
        while(++y < dy - 1){
            x = -1;
            t1 = values[y * dx + dx] >= value;
            t2 = values[y * dx] >= value;
            cases[t1 << 1 | t2 << 2].forEach(stitch);
            while(++x < dx - 1){
                t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
                t3 = t2, t2 = values[y * dx + x + 1] >= value;
                cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
            }
            cases[t1 | t2 << 3].forEach(stitch);
        }
        // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        cases[t2 << 2].forEach(stitch);
        while(++x < dx - 1){
            t3 = t2, t2 = values[y * dx + x + 1] >= value;
            cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t2 << 3].forEach(stitch);
        function stitch(line) {
            var start = [
                line[0][0] + x,
                line[0][1] + y
            ], end = [
                line[1][0] + x,
                line[1][1] + y
            ], startIndex = index(start), endIndex = index(end), f, g;
            if (f = fragmentByEnd[startIndex]) {
                if (g = fragmentByStart[endIndex]) {
                    delete fragmentByEnd[f.end];
                    delete fragmentByStart[g.start];
                    if (f === g) {
                        f.ring.push(end);
                        callback(f.ring);
                    } else fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                        start: f.start,
                        end: g.end,
                        ring: f.ring.concat(g.ring)
                    };
                } else {
                    delete fragmentByEnd[f.end];
                    f.ring.push(end);
                    fragmentByEnd[f.end = endIndex] = f;
                }
            } else if (f = fragmentByStart[endIndex]) {
                if (g = fragmentByEnd[startIndex]) {
                    delete fragmentByStart[f.start];
                    delete fragmentByEnd[g.end];
                    if (f === g) {
                        f.ring.push(end);
                        callback(f.ring);
                    } else fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                        start: g.start,
                        end: f.end,
                        ring: g.ring.concat(f.ring)
                    };
                } else {
                    delete fragmentByStart[f.start];
                    f.ring.unshift(start);
                    fragmentByStart[f.start = startIndex] = f;
                }
            } else fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
                start: startIndex,
                end: endIndex,
                ring: [
                    start,
                    end
                ]
            };
        }
    }
    function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
    }
    function smoothLinear(ring, values, value) {
        ring.forEach(function(point) {
            var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v0, v1 = values[yt * dx + xt];
            if (x > 0 && x < dx && xt === x) {
                v0 = values[yt * dx + xt - 1];
                point[0] = x + (value - v0) / (v1 - v0) - 0.5;
            }
            if (y > 0 && y < dy && yt === y) {
                v0 = values[(yt - 1) * dx + xt];
                point[1] = y + (value - v0) / (v1 - v0) - 0.5;
            }
        });
    }
    contours.contour = contour;
    contours.size = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, contours;
    };
    contours.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? _constantJsDefault.default(_arrayJs.slice.call(_)) : _constantJsDefault.default(_), contours) : threshold;
    };
    contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : _noopJsDefault.default, contours) : smooth === smoothLinear;
    };
    return contours;
};

},{"d3-array":"1yX2W","./array.js":"cTTg2","./ascending.js":"12QEH","./area.js":"giDHO","./constant.js":"analX","./contains.js":"hnvZ5","./noop.js":"l7gSP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTTg2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice
);
var array = Array.prototype;
var slice = array.slice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12QEH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return a - b;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giDHO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(ring) {
    var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while(++i < n)area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    return area;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"analX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnvZ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(ring, hole) {
    var i = -1, n = hole.length, c;
    while(++i < n)if (c = ringContains(ring, hole[i])) return c;
    return 0;
};
function ringContains(ring, point) {
    var x = point[0], y = point[1], contains = -1;
    for(var i = 0, n = ring.length, j = n - 1; i < n; j = i++){
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }
    return contains;
}
function segmentContains(a, b, c) {
    var i;
    return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}
function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}
function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7gSP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"DY8zZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _arrayJs = require("./array.js");
var _blurJs = require("./blur.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _contoursJs = require("./contours.js");
var _contoursJsDefault = parcelHelpers.interopDefault(_contoursJs);
function defaultX(d) {
    return d[0];
}
function defaultY(d) {
    return d[1];
}
function defaultWeight() {
    return 1;
}
exports.default = function() {
    var x = defaultX, y = defaultY, weight = defaultWeight, dx = 960, dy = 500, r = 20, k = 2, o = r * 3, n = dx + o * 2 >> k, m = dy + o * 2 >> k, threshold = _constantJsDefault.default(20);
    function density(data1) {
        var values0 = new Float32Array(n * m), values1 = new Float32Array(n * m), pow2k = Math.pow(2, -k);
        data1.forEach(function(d, i, data) {
            var xi = (x(d, i, data) + o) * pow2k, yi = (y(d, i, data) + o) * pow2k, wi = +weight(d, i, data);
            if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
                var x0 = Math.floor(xi), y0 = Math.floor(yi), xt = xi - x0 - 0.5, yt = yi - y0 - 0.5;
                values0[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;
                values0[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;
                values0[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;
                values0[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;
            }
        });
        // TODO Optimize.
        _blurJs.blurX({
            width: n,
            height: m,
            data: values0
        }, {
            width: n,
            height: m,
            data: values1
        }, r >> k);
        _blurJs.blurY({
            width: n,
            height: m,
            data: values1
        }, {
            width: n,
            height: m,
            data: values0
        }, r >> k);
        _blurJs.blurX({
            width: n,
            height: m,
            data: values0
        }, {
            width: n,
            height: m,
            data: values1
        }, r >> k);
        _blurJs.blurY({
            width: n,
            height: m,
            data: values1
        }, {
            width: n,
            height: m,
            data: values0
        }, r >> k);
        _blurJs.blurX({
            width: n,
            height: m,
            data: values0
        }, {
            width: n,
            height: m,
            data: values1
        }, r >> k);
        _blurJs.blurY({
            width: n,
            height: m,
            data: values1
        }, {
            width: n,
            height: m,
            data: values0
        }, r >> k);
        var tz = threshold(values0);
        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
            var stop = _d3Array.max(values0);
            tz = _d3Array.tickStep(0, stop, tz);
            tz = _d3Array.range(0, Math.floor(stop / tz) * tz, tz);
            tz.shift();
        }
        return _contoursJsDefault.default().thresholds(tz).size([
            n,
            m
        ])(values0).map(transform);
    }
    function transform(geometry) {
        geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
    }
    function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
    }
    function transformRing(coordinates) {
        coordinates.forEach(transformPoint);
    }
    // TODO Optimize.
    function transformPoint(coordinates) {
        coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
        coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
    }
    function resize() {
        o = r * 3;
        n = dx + o * 2 >> k;
        m = dy + o * 2 >> k;
        return density;
    }
    density.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : _constantJsDefault.default(+_), density) : x;
    };
    density.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : _constantJsDefault.default(+_), density) : y;
    };
    density.weight = function(_) {
        return arguments.length ? (weight = typeof _ === "function" ? _ : _constantJsDefault.default(+_), density) : weight;
    };
    density.size = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        var _0 = +_[0], _1 = +_[1];
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, resize();
    };
    density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
        return k = Math.floor(Math.log(_) / Math.LN2), resize();
    };
    density.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? _constantJsDefault.default(_arrayJs.slice.call(_)) : _constantJsDefault.default(_), density) : threshold;
    };
    density.bandwidth = function(_) {
        if (!arguments.length) return Math.sqrt(r * (r + 1));
        if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
        return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
    };
    return density;
};

},{"d3-array":"1yX2W","./array.js":"cTTg2","./blur.js":"XFdle","./constant.js":"analX","./contours.js":"7N8hX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XFdle":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
parcelHelpers.export(exports, "blurX", ()=>blurX
);
// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
parcelHelpers.export(exports, "blurY", ()=>blurY
);
function blurX(source, target, r) {
    var n = source.width, m = source.height, w = (r << 1) + 1;
    for(var j = 0; j < m; ++j)for(var i = 0, sr = 0; i < n + r; ++i){
        if (i < n) sr += source.data[i + j * n];
        if (i >= r) {
            if (i >= w) sr -= source.data[i - w + j * n];
            target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
        }
    }
}
function blurY(source, target, r) {
    var n = source.width, m = source.height, w = (r << 1) + 1;
    for(var i = 0; i < n; ++i)for(var j = 0, sr = 0; j < m + r; ++j){
        if (j < m) sr += source.data[i + j * n];
        if (j >= r) {
            if (j >= w) sr -= source.data[i + (j - w) * n];
            target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aJhty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Delaunay", ()=>_delaunayJsDefault.default
);
parcelHelpers.export(exports, "Voronoi", ()=>_voronoiJsDefault.default
);
var _delaunayJs = require("./delaunay.js");
var _delaunayJsDefault = parcelHelpers.interopDefault(_delaunayJs);
var _voronoiJs = require("./voronoi.js");
var _voronoiJsDefault = parcelHelpers.interopDefault(_voronoiJs);

},{"./delaunay.js":"1OBAg","./voronoi.js":"h3ABT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1OBAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _delaunator = require("delaunator");
var _delaunatorDefault = parcelHelpers.interopDefault(_delaunator);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _polygonJs = require("./polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
var _voronoiJs = require("./voronoi.js");
var _voronoiJsDefault = parcelHelpers.interopDefault(_voronoiJs);
const tau = 2 * Math.PI, pow = Math.pow;
function pointX(p) {
    return p[0];
}
function pointY(p) {
    return p[1];
}
// A triangulation is collinear if all its triangles have a non-null area
function collinear(d) {
    const { triangles , coords  } = d;
    for(let i = 0; i < triangles.length; i += 3){
        const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 0.0000000001) return false;
    }
    return true;
}
function jitter(x, y, r) {
    return [
        x + Math.sin(x + y) * r,
        y + Math.cos(x - y) * r
    ];
}
class Delaunay {
    static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
    }
    constructor(points){
        this._delaunator = new _delaunatorDefault.default(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
    }
    update() {
        this._delaunator.update();
        this._init();
        return this;
    }
    _init() {
        const d = this._delaunator, points = this.points;
        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear(d)) {
            this.collinear = Int32Array.from({
                length: points.length / 2
            }, (_, i)=>i
            ).sort((i, j)=>points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]
            ); // for exact neighbors
            const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [
                points[2 * e],
                points[2 * e + 1],
                points[2 * f],
                points[2 * f + 1]
            ], r = 0.00000001 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
            for(let i1 = 0, n = points.length / 2; i1 < n; ++i1){
                const p = jitter(points[2 * i1], points[2 * i1 + 1], r);
                points[2 * i1] = p[0];
                points[2 * i1 + 1] = p[1];
            }
            this._delaunator = new _delaunatorDefault.default(points);
        } else delete this.collinear;
        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);
        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for(let e = 0, n = halfedges.length; e < n; ++e){
            const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
            if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for(let i2 = 0, n1 = hull.length; i2 < n1; ++i2)hullIndex[hull[i2]] = i2;
        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
            this.triangles = new Int32Array(3).fill(-1);
            this.halfedges = new Int32Array(3).fill(-1);
            this.triangles[0] = hull[0];
            inedges[hull[0]] = 1;
            if (hull.length === 2) {
                inedges[hull[1]] = 0;
                this.triangles[1] = hull[1];
                this.triangles[2] = hull[1];
            }
        }
    }
    voronoi(bounds) {
        return new _voronoiJsDefault.default(this, bounds);
    }
    *neighbors(i) {
        const { inedges , hull , _hullIndex , halfedges , triangles , collinear: collinear1  } = this;
        // degenerate case with several collinear points
        if (collinear1) {
            const l = collinear1.indexOf(i);
            if (l > 0) yield collinear1[l - 1];
            if (l < collinear1.length - 1) yield collinear1[l + 1];
            return;
        }
        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
            yield p0 = triangles[e];
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) return; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                const p = hull[(_hullIndex[i] + 1) % hull.length];
                if (p !== p0) yield p;
                return;
            }
        }while (e !== e0)
    }
    find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)i = c;
        return c;
    }
    _step(i, x, y) {
        const { inedges , hull , _hullIndex , halfedges , triangles , points  } = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
            let t = triangles[e];
            const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
            if (dt < dc) dc = dt, c = t;
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                e = hull[(_hullIndex[i] + 1) % hull.length];
                if (e !== t) {
                    if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;
                }
                break;
            }
        }while (e !== e0)
        return c;
    }
    render(context) {
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        const { points , halfedges , triangles  } = this;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = triangles[i] * 2;
            const tj = triangles[j] * 2;
            context.moveTo(points[ti], points[ti + 1]);
            context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
    }
    renderPoints(context, r) {
        if (r === undefined && (!context || typeof context.moveTo !== "function")) r = context, context = null;
        r = r == undefined ? 2 : +r;
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        const { points  } = this;
        for(let i = 0, n = points.length; i < n; i += 2){
            const x = points[i], y = points[i + 1];
            context.moveTo(x + r, y);
            context.arc(x, y, r, 0, tau);
        }
        return buffer && buffer.value();
    }
    renderHull(context) {
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        const { hull , points  } = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for(let i = 1; i < n; ++i){
            const h = 2 * hull[i];
            context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
    }
    hullPolygon() {
        const polygon = new _polygonJsDefault.default;
        this.renderHull(polygon);
        return polygon.value();
    }
    renderTriangle(i, context) {
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        const { points , triangles  } = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *trianglePolygons() {
        const { triangles  } = this;
        for(let i = 0, n = triangles.length / 3; i < n; ++i)yield this.trianglePolygon(i);
    }
    trianglePolygon(i) {
        const polygon = new _polygonJsDefault.default;
        this.renderTriangle(i, polygon);
        return polygon.value();
    }
}
exports.default = Delaunay;
function flatArray(points, fx, fy, that) {
    const n = points.length;
    const array = new Float64Array(n * 2);
    for(let i = 0; i < n; ++i){
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
    }
    return array;
}
function* flatIterable(points, fx, fy, that) {
    let i = 0;
    for (const p of points){
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
    }
}

},{"delaunator":"1U5NA","./path.js":"j1aS4","./polygon.js":"1mwL9","./voronoi.js":"h3ABT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1U5NA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _robustPredicates = require("robust-predicates");
const EPSILON = Math.pow(2, -52);
const EDGE_STACK = new Uint32Array(512);
class Delaunator {
    static from(points, getX = defaultGetX, getY = defaultGetY) {
        const n = points.length;
        const coords = new Float64Array(n * 2);
        for(let i = 0; i < n; i++){
            const p = points[i];
            coords[2 * i] = getX(p);
            coords[2 * i + 1] = getY(p);
        }
        return new Delaunator(coords);
    }
    constructor(coords){
        const n = coords.length >> 1;
        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');
        this.coords = coords;
        // arrays that will store the triangulation graph
        const maxTriangles = Math.max(2 * n - 5, 0);
        this._triangles = new Uint32Array(maxTriangles * 3);
        this._halfedges = new Int32Array(maxTriangles * 3);
        // temporary arrays for tracking the edges of the advancing convex hull
        this._hashSize = Math.ceil(Math.sqrt(n));
        this._hullPrev = new Uint32Array(n); // edge to prev edge
        this._hullNext = new Uint32Array(n); // edge to next edge
        this._hullTri = new Uint32Array(n); // edge to adjacent triangle
        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash
        // temporary arrays for sorting points
        this._ids = new Uint32Array(n);
        this._dists = new Float64Array(n);
        this.update();
    }
    update() {
        const { coords , _hullPrev: hullPrev , _hullNext: hullNext , _hullTri: hullTri , _hullHash: hullHash  } = this;
        const n = coords.length >> 1;
        // populate an array of point indices; calculate input data bbox
        let minX = Infinity;
        let minY = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        for(let i = 0; i < n; i++){
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            this._ids[i] = i;
        }
        const cx = (minX + maxX) / 2;
        const cy = (minY + maxY) / 2;
        let minDist = Infinity;
        let i0, i1, i2;
        // pick a seed point close to the center
        for(let i3 = 0; i3 < n; i3++){
            const d = dist(cx, cy, coords[2 * i3], coords[2 * i3 + 1]);
            if (d < minDist) {
                i0 = i3;
                minDist = d;
            }
        }
        const i0x = coords[2 * i0];
        const i0y = coords[2 * i0 + 1];
        minDist = Infinity;
        // find the point closest to the seed
        for(let i4 = 0; i4 < n; i4++){
            if (i4 === i0) continue;
            const d = dist(i0x, i0y, coords[2 * i4], coords[2 * i4 + 1]);
            if (d < minDist && d > 0) {
                i1 = i4;
                minDist = d;
            }
        }
        let i1x = coords[2 * i1];
        let i1y = coords[2 * i1 + 1];
        let minRadius = Infinity;
        // find the third point which forms the smallest circumcircle with the first two
        for(let i5 = 0; i5 < n; i5++){
            if (i5 === i0 || i5 === i1) continue;
            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i5], coords[2 * i5 + 1]);
            if (r < minRadius) {
                i2 = i5;
                minRadius = r;
            }
        }
        let i2x = coords[2 * i2];
        let i2y = coords[2 * i2 + 1];
        if (minRadius === Infinity) {
            // order collinear points by dx (or dy if all x are identical)
            // and return the list as a hull
            for(let i = 0; i < n; i++)this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
            quicksort(this._ids, this._dists, 0, n - 1);
            const hull = new Uint32Array(n);
            let j = 0;
            for(let i8 = 0, d0 = -Infinity; i8 < n; i8++){
                const id = this._ids[i8];
                if (this._dists[id] > d0) {
                    hull[j++] = id;
                    d0 = this._dists[id];
                }
            }
            this.hull = hull.subarray(0, j);
            this.triangles = new Uint32Array(0);
            this.halfedges = new Uint32Array(0);
            return;
        }
        // swap the order of the seed points for counter-clockwise orientation
        if (_robustPredicates.orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
            const i = i1;
            const x = i1x;
            const y = i1y;
            i1 = i2;
            i1x = i2x;
            i1y = i2y;
            i2 = i;
            i2x = x;
            i2y = y;
        }
        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
        this._cx = center.x;
        this._cy = center.y;
        for(let i6 = 0; i6 < n; i6++)this._dists[i6] = dist(coords[2 * i6], coords[2 * i6 + 1], center.x, center.y);
        // sort the points by distance from the seed triangle circumcenter
        quicksort(this._ids, this._dists, 0, n - 1);
        // set up the seed triangle as the starting hull
        this._hullStart = i0;
        let hullSize = 3;
        hullNext[i0] = hullPrev[i2] = i1;
        hullNext[i1] = hullPrev[i0] = i2;
        hullNext[i2] = hullPrev[i1] = i0;
        hullTri[i0] = 0;
        hullTri[i1] = 1;
        hullTri[i2] = 2;
        hullHash.fill(-1);
        hullHash[this._hashKey(i0x, i0y)] = i0;
        hullHash[this._hashKey(i1x, i1y)] = i1;
        hullHash[this._hashKey(i2x, i2y)] = i2;
        this.trianglesLen = 0;
        this._addTriangle(i0, i1, i2, -1, -1, -1);
        for(let k = 0, xp, yp; k < this._ids.length; k++){
            const i = this._ids[k];
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            // skip near-duplicate points
            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
            xp = x;
            yp = y;
            // skip seed triangle points
            if (i === i0 || i === i1 || i === i2) continue;
            // find a visible edge on the convex hull using edge hash
            let start = 0;
            for(let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++){
                start = hullHash[(key + j) % this._hashSize];
                if (start !== -1 && start !== hullNext[start]) break;
            }
            start = hullPrev[start];
            let e = start, q;
            while(q = hullNext[e], _robustPredicates.orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0){
                e = q;
                if (e === start) {
                    e = -1;
                    break;
                }
            }
            if (e === -1) continue; // likely a near-duplicate point; skip it
            // add the first triangle from the point
            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
            // recursively flip triangles from the point until they satisfy the Delaunay condition
            hullTri[i] = this._legalize(t + 2);
            hullTri[e] = t; // keep track of boundary triangles on the hull
            hullSize++;
            // walk forward through the hull, adding more triangles and flipping recursively
            let n = hullNext[e];
            while(q = hullNext[n], _robustPredicates.orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0){
                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                hullTri[i] = this._legalize(t + 2);
                hullNext[n] = n; // mark as removed
                hullSize--;
                n = q;
            }
            // walk backward from the other side, adding more triangles and flipping
            if (e === start) while(q = hullPrev[e], _robustPredicates.orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0){
                t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                this._legalize(t + 2);
                hullTri[q] = t;
                hullNext[e] = e; // mark as removed
                hullSize--;
                e = q;
            }
            // update the hull indices
            this._hullStart = hullPrev[i] = e;
            hullNext[e] = hullPrev[n] = i;
            hullNext[i] = n;
            // save the two new edges in the hash table
            hullHash[this._hashKey(x, y)] = i;
            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
        }
        this.hull = new Uint32Array(hullSize);
        for(let i7 = 0, e = this._hullStart; i7 < hullSize; i7++){
            this.hull[i7] = e;
            e = hullNext[e];
        }
        // trim typed triangle mesh arrays
        this.triangles = this._triangles.subarray(0, this.trianglesLen);
        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x, y) {
        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a) {
        const { _triangles: triangles , _halfedges: halfedges , coords  } = this;
        let i = 0;
        let ar = 0;
        // recursion eliminated with a fixed-size stack
        while(true){
            const b = halfedges[a];
            /* if the pair of triangles doesn't satisfy the Delaunay condition
             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
             * then do the same check/flip recursively for the new pair of triangles
             *
             *           pl                    pl
             *          /||\                  /  \
             *       al/ || \bl            al/    \a
             *        /  ||  \              /      \
             *       /  a||b  \    flip    /___ar___\
             *     p0\   ||   /p1   =>   p0\---bl---/p1
             *        \  ||  /              \      /
             *       ar\ || /br             b\    /br
             *          \||/                  \  /
             *           pr                    pr
             */ const a0 = a - a % 3;
            ar = a0 + (a + 2) % 3;
            if (b === -1) {
                if (i === 0) break;
                a = EDGE_STACK[--i];
                continue;
            }
            const b0 = b - b % 3;
            const al = a0 + (a + 1) % 3;
            const bl = b0 + (b + 2) % 3;
            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];
            const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
            if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;
                const hbl = halfedges[bl];
                // edge swapped on the other side of the hull (rare); fix the halfedge reference
                if (hbl === -1) {
                    let e = this._hullStart;
                    do {
                        if (this._hullTri[e] === bl) {
                            this._hullTri[e] = a;
                            break;
                        }
                        e = this._hullPrev[e];
                    }while (e !== this._hullStart)
                }
                this._link(a, hbl);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);
                const br = b0 + (b + 1) % 3;
                // don't worry about hitting the cap: it can only happen on extremely degenerate input
                if (i < EDGE_STACK.length) EDGE_STACK[i++] = br;
            } else {
                if (i === 0) break;
                a = EDGE_STACK[--i];
            }
        }
        return ar;
    }
    _link(a, b) {
        this._halfedges[a] = b;
        if (b !== -1) this._halfedges[b] = a;
    }
    // add a new triangle given vertex indices and adjacent half-edge ids
    _addTriangle(i0, i1, i2, a, b, c) {
        const t = this.trianglesLen;
        this._triangles[t] = i0;
        this._triangles[t + 1] = i1;
        this._triangles[t + 2] = i2;
        this._link(t, a);
        this._link(t + 1, b);
        this._link(t + 2, c);
        this.trianglesLen += 3;
        return t;
    }
}
exports.default = Delaunator;
// monotonically increases with real angle, but doesn't need expensive trigonometry
function pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
}
function dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = (ey * bl - dy * cl) * d;
    const y = (dx * cl - ex * bl) * d;
    return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = ax + (ey * bl - dy * cl) * d;
    const y = ay + (dx * cl - ex * bl) * d;
    return {
        x,
        y
    };
}
function quicksort(ids, dists, left, right) {
    if (right - left <= 20) for(let i = left + 1; i <= right; i++){
        const temp = ids[i];
        const tempDist = dists[temp];
        let j = i - 1;
        while(j >= left && dists[ids[j]] > tempDist)ids[j + 1] = ids[j--];
        ids[j + 1] = temp;
    }
    else {
        const median = left + right >> 1;
        let i = left + 1;
        let j = right;
        swap(ids, median, i);
        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
        const temp = ids[i];
        const tempDist = dists[temp];
        while(true){
            do i++;
            while (dists[ids[i]] < tempDist)
            do j--;
            while (dists[ids[j]] > tempDist)
            if (j < i) break;
            swap(ids, i, j);
        }
        ids[left + 1] = ids[j];
        ids[j] = temp;
        if (right - i + 1 >= j - left) {
            quicksort(ids, dists, i, right);
            quicksort(ids, dists, left, j - 1);
        } else {
            quicksort(ids, dists, left, j - 1);
            quicksort(ids, dists, i, right);
        }
    }
}
function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
function defaultGetX(p) {
    return p[0];
}
function defaultGetY(p) {
    return p[1];
}

},{"robust-predicates":"7e0QE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7e0QE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orient2d", ()=>_orient2DJs.orient2d
);
parcelHelpers.export(exports, "orient2dfast", ()=>_orient2DJs.orient2dfast
);
parcelHelpers.export(exports, "orient3d", ()=>_orient3DJs.orient3d
);
parcelHelpers.export(exports, "orient3dfast", ()=>_orient3DJs.orient3dfast
);
parcelHelpers.export(exports, "incircle", ()=>_incircleJs.incircle
);
parcelHelpers.export(exports, "incirclefast", ()=>_incircleJs.incirclefast
);
parcelHelpers.export(exports, "insphere", ()=>_insphereJs.insphere
);
parcelHelpers.export(exports, "inspherefast", ()=>_insphereJs.inspherefast
);
var _orient2DJs = require("./esm/orient2d.js");
var _orient3DJs = require("./esm/orient3d.js");
var _incircleJs = require("./esm/incircle.js");
var _insphereJs = require("./esm/insphere.js");

},{"./esm/orient2d.js":"gHqC4","./esm/orient3d.js":"dt5pN","./esm/incircle.js":"6yBsv","./esm/insphere.js":"6qjhA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHqC4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orient2d", ()=>orient2d
);
parcelHelpers.export(exports, "orient2dfast", ()=>orient2dfast
);
var _utilJs = require("./util.js");
const ccwerrboundA = (3 + 16 * _utilJs.epsilon) * _utilJs.epsilon;
const ccwerrboundB = (2 + 12 * _utilJs.epsilon) * _utilJs.epsilon;
const ccwerrboundC = (9 + 64 * _utilJs.epsilon) * _utilJs.epsilon * _utilJs.epsilon;
const B = _utilJs.vec(4);
const C1 = _utilJs.vec(8);
const C2 = _utilJs.vec(12);
const D = _utilJs.vec(16);
const u = _utilJs.vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    let acxtail, acytail, bcxtail, bcytail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    const acx = ax - cx;
    const bcx = bx - cx;
    const acy = ay - cy;
    const bcy = by - cy;
    s1 = acx * bcy;
    c = _utilJs.splitter * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = _utilJs.splitter * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcx;
    c = _utilJs.splitter * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = _utilJs.splitter * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    B[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    B[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    B[2] = _j - (u3 - bvirt) + (_i - bvirt);
    B[3] = u3;
    let det = _utilJs.estimate(4, B);
    let errbound = ccwerrboundB * detsum;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);
    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) return det;
    errbound = ccwerrboundC * detsum + _utilJs.resulterrbound * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
    if (det >= errbound || -det >= errbound) return det;
    s1 = acxtail * bcy;
    c = _utilJs.splitter * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = _utilJs.splitter * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcx;
    c = _utilJs.splitter * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = _utilJs.splitter * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const C1len = _utilJs.sum(4, B, 4, u, C1);
    s1 = acx * bcytail;
    c = _utilJs.splitter * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = _utilJs.splitter * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcxtail;
    c = _utilJs.splitter * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = _utilJs.splitter * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const C2len = _utilJs.sum(C1len, C1, 4, u, C2);
    s1 = acxtail * bcytail;
    c = _utilJs.splitter * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = _utilJs.splitter * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcxtail;
    c = _utilJs.splitter * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = _utilJs.splitter * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const Dlen = _utilJs.sum(C2len, C2, 4, u, D);
    return D[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
    const detleft = (ay - cy) * (bx - cx);
    const detright = (ax - cx) * (by - cy);
    const det = detleft - detright;
    if (detleft === 0 || detright === 0 || detleft > 0 !== detright > 0) return det;
    const detsum = Math.abs(detleft + detright);
    if (Math.abs(det) >= ccwerrboundA * detsum) return det;
    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}
function orient2dfast(ax, ay, bx, by, cx, cy) {
    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3OxkP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "epsilon", ()=>epsilon
);
parcelHelpers.export(exports, "splitter", ()=>splitter
);
parcelHelpers.export(exports, "resulterrbound", ()=>resulterrbound
);
// fast_expansion_sum_zeroelim routine from oritinal code
parcelHelpers.export(exports, "sum", ()=>sum
);
parcelHelpers.export(exports, "sum_three", ()=>sum_three
);
// scale_expansion_zeroelim routine from oritinal code
parcelHelpers.export(exports, "scale", ()=>scale
);
parcelHelpers.export(exports, "negate", ()=>negate
);
parcelHelpers.export(exports, "estimate", ()=>estimate
);
parcelHelpers.export(exports, "vec", ()=>vec
);
const epsilon = 0.00000000000000011102230246251565;
const splitter = 134217729;
const resulterrbound = (3 + 8 * epsilon) * epsilon;
function sum(elen, e, flen, f, h) {
    let Q, Qnew, hh, bvirt;
    let enow = e[0];
    let fnow = f[0];
    let eindex = 0;
    let findex = 0;
    if (fnow > enow === fnow > -enow) {
        Q = enow;
        enow = e[++eindex];
    } else {
        Q = fnow;
        fnow = f[++findex];
    }
    let hindex = 0;
    if (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
            Qnew = enow + Q;
            hh = Q - (Qnew - enow);
            enow = e[++eindex];
        } else {
            Qnew = fnow + Q;
            hh = Q - (Qnew - fnow);
            fnow = f[++findex];
        }
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
        while(eindex < elen && findex < flen){
            if (fnow > enow === fnow > -enow) {
                Qnew = Q + enow;
                bvirt = Qnew - Q;
                hh = Q - (Qnew - bvirt) + (enow - bvirt);
                enow = e[++eindex];
            } else {
                Qnew = Q + fnow;
                bvirt = Qnew - Q;
                hh = Q - (Qnew - bvirt) + (fnow - bvirt);
                fnow = f[++findex];
            }
            Q = Qnew;
            if (hh !== 0) h[hindex++] = hh;
        }
    }
    while(eindex < elen){
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
    }
    while(findex < flen){
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
    }
    if (Q !== 0 || hindex === 0) h[hindex++] = Q;
    return hindex;
}
function sum_three(alen, a, blen, b, clen, c, tmp, out) {
    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);
}
function scale(elen, e, b, h) {
    let Q, sum1, hh, product1, product0;
    let bvirt, c, ahi, alo, bhi, blo;
    c = splitter * b;
    bhi = c - (c - b);
    blo = b - bhi;
    let enow = e[0];
    Q = enow * b;
    c = splitter * enow;
    ahi = c - (c - enow);
    alo = enow - ahi;
    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);
    let hindex = 0;
    if (hh !== 0) h[hindex++] = hh;
    for(let i = 1; i < elen; i++){
        enow = e[i];
        product1 = enow * b;
        c = splitter * enow;
        ahi = c - (c - enow);
        alo = enow - ahi;
        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);
        sum1 = Q + product0;
        bvirt = sum1 - Q;
        hh = Q - (sum1 - bvirt) + (product0 - bvirt);
        if (hh !== 0) h[hindex++] = hh;
        Q = product1 + sum1;
        hh = sum1 - (Q - product1);
        if (hh !== 0) h[hindex++] = hh;
    }
    if (Q !== 0 || hindex === 0) h[hindex++] = Q;
    return hindex;
}
function negate(elen, e) {
    for(let i = 0; i < elen; i++)e[i] = -e[i];
    return elen;
}
function estimate(elen, e) {
    let Q = e[0];
    for(let i = 1; i < elen; i++)Q += e[i];
    return Q;
}
function vec(n) {
    return new Float64Array(n);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dt5pN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orient3d", ()=>orient3d
);
parcelHelpers.export(exports, "orient3dfast", ()=>orient3dfast
);
var _utilJs = require("./util.js");
const o3derrboundA = (7 + 56 * _utilJs.epsilon) * _utilJs.epsilon;
const o3derrboundB = (3 + 28 * _utilJs.epsilon) * _utilJs.epsilon;
const o3derrboundC = (26 + 288 * _utilJs.epsilon) * _utilJs.epsilon * _utilJs.epsilon;
const bc = _utilJs.vec(4);
const ca = _utilJs.vec(4);
const ab = _utilJs.vec(4);
const at_b = _utilJs.vec(4);
const at_c = _utilJs.vec(4);
const bt_c = _utilJs.vec(4);
const bt_a = _utilJs.vec(4);
const ct_a = _utilJs.vec(4);
const ct_b = _utilJs.vec(4);
const bct = _utilJs.vec(8);
const cat = _utilJs.vec(8);
const abt = _utilJs.vec(8);
const u = _utilJs.vec(4);
const _8 = _utilJs.vec(8);
const _8b = _utilJs.vec(8);
const _16 = _utilJs.vec(8);
const _12 = _utilJs.vec(12);
let fin = _utilJs.vec(192);
let fin2 = _utilJs.vec(192);
function finadd(finlen, alen, a) {
    finlen = _utilJs.sum(finlen, fin, alen, a, fin2);
    const tmp = fin;
    fin = fin2;
    fin2 = tmp;
    return finlen;
}
function tailinit(xtail, ytail, ax, ay, bx, by, a, b) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;
    if (xtail === 0) {
        if (ytail === 0) {
            a[0] = 0;
            b[0] = 0;
            return 1;
        } else {
            negate = -ytail;
            s1 = negate * ax;
            c = _utilJs.splitter * negate;
            ahi = c - (c - negate);
            alo = negate - ahi;
            c = _utilJs.splitter * ax;
            bhi = c - (c - ax);
            blo = ax - bhi;
            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            a[1] = s1;
            s1 = ytail * bx;
            c = _utilJs.splitter * ytail;
            ahi = c - (c - ytail);
            alo = ytail - ahi;
            c = _utilJs.splitter * bx;
            bhi = c - (c - bx);
            blo = bx - bhi;
            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            b[1] = s1;
            return 2;
        }
    } else if (ytail === 0) {
        s1 = xtail * ay;
        c = _utilJs.splitter * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = _utilJs.splitter * ay;
        bhi = c - (c - ay);
        blo = ay - bhi;
        a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        a[1] = s1;
        negate = -xtail;
        s1 = negate * by;
        c = _utilJs.splitter * negate;
        ahi = c - (c - negate);
        alo = negate - ahi;
        c = _utilJs.splitter * by;
        bhi = c - (c - by);
        blo = by - bhi;
        b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        b[1] = s1;
        return 2;
    } else {
        s1 = xtail * ay;
        c = _utilJs.splitter * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = _utilJs.splitter * ay;
        bhi = c - (c - ay);
        blo = ay - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = ytail * ax;
        c = _utilJs.splitter * ytail;
        ahi = c - (c - ytail);
        alo = ytail - ahi;
        c = _utilJs.splitter * ax;
        bhi = c - (c - ax);
        blo = ax - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        a[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        a[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        a[2] = _j - (u3 - bvirt) + (_i - bvirt);
        a[3] = u3;
        s1 = ytail * bx;
        c = _utilJs.splitter * ytail;
        ahi = c - (c - ytail);
        alo = ytail - ahi;
        c = _utilJs.splitter * bx;
        bhi = c - (c - bx);
        blo = bx - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = xtail * by;
        c = _utilJs.splitter * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = _utilJs.splitter * by;
        bhi = c - (c - by);
        blo = by - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        b[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        b[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        b[2] = _j - (u3 - bvirt) + (_i - bvirt);
        b[3] = u3;
        return 4;
    }
}
function tailadd(finlen, a, b, k, z) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;
    s1 = a * b;
    c = _utilJs.splitter * a;
    ahi = c - (c - a);
    alo = a - ahi;
    c = _utilJs.splitter * b;
    bhi = c - (c - b);
    blo = b - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    c = _utilJs.splitter * k;
    bhi = c - (c - k);
    blo = k - bhi;
    _i = s0 * k;
    c = _utilJs.splitter * s0;
    ahi = c - (c - s0);
    alo = s0 - ahi;
    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);
    _j = s1 * k;
    c = _utilJs.splitter * s1;
    ahi = c - (c - s1);
    alo = s1 - ahi;
    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);
    _k = _i + _0;
    bvirt = _k - _i;
    u[1] = _i - (_k - bvirt) + (_0 - bvirt);
    u3 = _j + _k;
    u[2] = _k - (u3 - _j);
    u[3] = u3;
    finlen = finadd(finlen, 4, u);
    if (z !== 0) {
        c = _utilJs.splitter * z;
        bhi = c - (c - z);
        blo = z - bhi;
        _i = s0 * z;
        c = _utilJs.splitter * s0;
        ahi = c - (c - s0);
        alo = s0 - ahi;
        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);
        _j = s1 * z;
        c = _utilJs.splitter * s1;
        ahi = c - (c - s1);
        alo = s1 - ahi;
        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);
        _k = _i + _0;
        bvirt = _k - _i;
        u[1] = _i - (_k - bvirt) + (_0 - bvirt);
        u3 = _j + _k;
        u[2] = _k - (u3 - _j);
        u[3] = u3;
        finlen = finadd(finlen, 4, u);
    }
    return finlen;
}
function orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {
    let finlen;
    let adxtail, bdxtail, cdxtail;
    let adytail, bdytail, cdytail;
    let adztail, bdztail, cdztail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    s1 = bdx * cdy;
    c = _utilJs.splitter * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = _utilJs.splitter * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cdx * bdy;
    c = _utilJs.splitter * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = _utilJs.splitter * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bc[3] = u3;
    s1 = cdx * ady;
    c = _utilJs.splitter * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = _utilJs.splitter * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = adx * cdy;
    c = _utilJs.splitter * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = _utilJs.splitter * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ca[3] = u3;
    s1 = adx * bdy;
    c = _utilJs.splitter * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = _utilJs.splitter * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bdx * ady;
    c = _utilJs.splitter * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = _utilJs.splitter * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ab[3] = u3;
    finlen = _utilJs.sum(_utilJs.sum(_utilJs.scale(4, bc, adz, _8), _8, _utilJs.scale(4, ca, bdz, _8b), _8b, _16), _16, _utilJs.scale(4, ab, cdz, _8), _8, fin);
    let det = _utilJs.estimate(finlen, fin);
    let errbound = o3derrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - adx;
    adxtail = ax - (adx + bvirt) + (bvirt - dx);
    bvirt = bx - bdx;
    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);
    bvirt = cx - cdx;
    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);
    bvirt = ay - ady;
    adytail = ay - (ady + bvirt) + (bvirt - dy);
    bvirt = by - bdy;
    bdytail = by - (bdy + bvirt) + (bvirt - dy);
    bvirt = cy - cdy;
    cdytail = cy - (cdy + bvirt) + (bvirt - dy);
    bvirt = az - adz;
    adztail = az - (adz + bvirt) + (bvirt - dz);
    bvirt = bz - bdz;
    bdztail = bz - (bdz + bvirt) + (bvirt - dz);
    bvirt = cz - cdz;
    cdztail = cz - (cdz + bvirt) + (bvirt - dz);
    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0 && adztail === 0 && bdztail === 0 && cdztail === 0) return det;
    errbound = o3derrboundC * permanent + _utilJs.resulterrbound * Math.abs(det);
    det += adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) + bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) + cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);
    if (det >= errbound || -det >= errbound) return det;
    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);
    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);
    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);
    const bctlen = _utilJs.sum(bt_len, bt_c, ct_len, ct_b, bct);
    finlen = finadd(finlen, _utilJs.scale(bctlen, bct, adz, _16), _16);
    const catlen = _utilJs.sum(ct_len, ct_a, at_len, at_c, cat);
    finlen = finadd(finlen, _utilJs.scale(catlen, cat, bdz, _16), _16);
    const abtlen = _utilJs.sum(at_len, at_b, bt_len, bt_a, abt);
    finlen = finadd(finlen, _utilJs.scale(abtlen, abt, cdz, _16), _16);
    if (adztail !== 0) {
        finlen = finadd(finlen, _utilJs.scale(4, bc, adztail, _12), _12);
        finlen = finadd(finlen, _utilJs.scale(bctlen, bct, adztail, _16), _16);
    }
    if (bdztail !== 0) {
        finlen = finadd(finlen, _utilJs.scale(4, ca, bdztail, _12), _12);
        finlen = finadd(finlen, _utilJs.scale(catlen, cat, bdztail, _16), _16);
    }
    if (cdztail !== 0) {
        finlen = finadd(finlen, _utilJs.scale(4, ab, cdztail, _12), _12);
        finlen = finadd(finlen, _utilJs.scale(abtlen, abt, cdztail, _16), _16);
    }
    if (adxtail !== 0) {
        if (bdytail !== 0) finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);
        if (cdytail !== 0) finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);
    }
    if (bdxtail !== 0) {
        if (cdytail !== 0) finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);
        if (adytail !== 0) finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);
    }
    if (cdxtail !== 0) {
        if (adytail !== 0) finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);
        if (bdytail !== 0) finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);
    }
    return fin[finlen - 1];
}
function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    const bdxcdy = bdx * cdy;
    const cdxbdy = cdx * bdy;
    const cdxady = cdx * ady;
    const adxcdy = adx * cdy;
    const adxbdy = adx * bdy;
    const bdxady = bdx * ady;
    const det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady);
    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);
    const errbound = o3derrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);
}
function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    return adx * (bdy * cdz - bdz * cdy) + bdx * (cdy * adz - cdz * ady) + cdx * (ady * bdz - adz * bdy);
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6yBsv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "incircle", ()=>incircle
);
parcelHelpers.export(exports, "incirclefast", ()=>incirclefast
);
var _utilJs = require("./util.js");
const iccerrboundA = (10 + 96 * _utilJs.epsilon) * _utilJs.epsilon;
const iccerrboundB = (4 + 48 * _utilJs.epsilon) * _utilJs.epsilon;
const iccerrboundC = (44 + 576 * _utilJs.epsilon) * _utilJs.epsilon * _utilJs.epsilon;
const bc = _utilJs.vec(4);
const ca = _utilJs.vec(4);
const ab = _utilJs.vec(4);
const aa = _utilJs.vec(4);
const bb = _utilJs.vec(4);
const cc = _utilJs.vec(4);
const u = _utilJs.vec(4);
const v = _utilJs.vec(4);
const axtbc = _utilJs.vec(8);
const aytbc = _utilJs.vec(8);
const bxtca = _utilJs.vec(8);
const bytca = _utilJs.vec(8);
const cxtab = _utilJs.vec(8);
const cytab = _utilJs.vec(8);
const abt = _utilJs.vec(8);
const bct = _utilJs.vec(8);
const cat = _utilJs.vec(8);
const abtt = _utilJs.vec(4);
const bctt = _utilJs.vec(4);
const catt = _utilJs.vec(4);
const _8 = _utilJs.vec(8);
const _16 = _utilJs.vec(16);
const _16b = _utilJs.vec(16);
const _16c = _utilJs.vec(16);
const _32 = _utilJs.vec(32);
const _32b = _utilJs.vec(32);
const _48 = _utilJs.vec(48);
const _64 = _utilJs.vec(64);
let fin = _utilJs.vec(1152);
let fin2 = _utilJs.vec(1152);
function finadd(finlen, a, alen) {
    finlen = _utilJs.sum(finlen, fin, a, alen, fin2);
    const tmp = fin;
    fin = fin2;
    fin2 = tmp;
    return finlen;
}
function incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {
    let finlen;
    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;
    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;
    let abtlen, bctlen, catlen;
    let abttlen, bcttlen, cattlen;
    let n1, n0;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    s1 = bdx * cdy;
    c = _utilJs.splitter * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = _utilJs.splitter * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cdx * bdy;
    c = _utilJs.splitter * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = _utilJs.splitter * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bc[3] = u3;
    s1 = cdx * ady;
    c = _utilJs.splitter * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = _utilJs.splitter * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = adx * cdy;
    c = _utilJs.splitter * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = _utilJs.splitter * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ca[3] = u3;
    s1 = adx * bdy;
    c = _utilJs.splitter * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = _utilJs.splitter * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bdx * ady;
    c = _utilJs.splitter * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = _utilJs.splitter * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ab[3] = u3;
    finlen = _utilJs.sum(_utilJs.sum(_utilJs.sum(_utilJs.scale(_utilJs.scale(4, bc, adx, _8), _8, adx, _16), _16, _utilJs.scale(_utilJs.scale(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32, _utilJs.sum(_utilJs.scale(_utilJs.scale(4, ca, bdx, _8), _8, bdx, _16), _16, _utilJs.scale(_utilJs.scale(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64, _utilJs.sum(_utilJs.scale(_utilJs.scale(4, ab, cdx, _8), _8, cdx, _16), _16, _utilJs.scale(_utilJs.scale(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);
    let det = _utilJs.estimate(finlen, fin);
    let errbound = iccerrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - adx;
    adxtail = ax - (adx + bvirt) + (bvirt - dx);
    bvirt = ay - ady;
    adytail = ay - (ady + bvirt) + (bvirt - dy);
    bvirt = bx - bdx;
    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);
    bvirt = by - bdy;
    bdytail = by - (bdy + bvirt) + (bvirt - dy);
    bvirt = cx - cdx;
    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);
    bvirt = cy - cdy;
    cdytail = cy - (cdy + bvirt) + (bvirt - dy);
    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) return det;
    errbound = iccerrboundC * permanent + _utilJs.resulterrbound * Math.abs(det);
    det += (adx * adx + ady * ady) * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + 2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx) + ((bdx * bdx + bdy * bdy) * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + 2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) + ((cdx * cdx + cdy * cdy) * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + 2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));
    if (det >= errbound || -det >= errbound) return det;
    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {
        s1 = adx * adx;
        c = _utilJs.splitter * adx;
        ahi = c - (c - adx);
        alo = adx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = ady * ady;
        c = _utilJs.splitter * ady;
        ahi = c - (c - ady);
        alo = ady - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);
        aa[3] = u3;
    }
    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {
        s1 = bdx * bdx;
        c = _utilJs.splitter * bdx;
        ahi = c - (c - bdx);
        alo = bdx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = bdy * bdy;
        c = _utilJs.splitter * bdy;
        ahi = c - (c - bdy);
        alo = bdy - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);
        bb[3] = u3;
    }
    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {
        s1 = cdx * cdx;
        c = _utilJs.splitter * cdx;
        ahi = c - (c - cdx);
        alo = cdx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = cdy * cdy;
        c = _utilJs.splitter * cdy;
        ahi = c - (c - cdy);
        alo = cdy - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);
        cc[3] = u3;
    }
    if (adxtail !== 0) {
        axtbclen = _utilJs.scale(4, bc, adxtail, axtbc);
        finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(axtbclen, axtbc, 2 * adx, _16), _16, _utilJs.scale(_utilJs.scale(4, cc, adxtail, _8), _8, bdy, _16b), _16b, _utilJs.scale(_utilJs.scale(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);
    }
    if (adytail !== 0) {
        aytbclen = _utilJs.scale(4, bc, adytail, aytbc);
        finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(aytbclen, aytbc, 2 * ady, _16), _16, _utilJs.scale(_utilJs.scale(4, bb, adytail, _8), _8, cdx, _16b), _16b, _utilJs.scale(_utilJs.scale(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);
    }
    if (bdxtail !== 0) {
        bxtcalen = _utilJs.scale(4, ca, bdxtail, bxtca);
        finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(bxtcalen, bxtca, 2 * bdx, _16), _16, _utilJs.scale(_utilJs.scale(4, aa, bdxtail, _8), _8, cdy, _16b), _16b, _utilJs.scale(_utilJs.scale(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);
    }
    if (bdytail !== 0) {
        bytcalen = _utilJs.scale(4, ca, bdytail, bytca);
        finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(bytcalen, bytca, 2 * bdy, _16), _16, _utilJs.scale(_utilJs.scale(4, cc, bdytail, _8), _8, adx, _16b), _16b, _utilJs.scale(_utilJs.scale(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);
    }
    if (cdxtail !== 0) {
        cxtablen = _utilJs.scale(4, ab, cdxtail, cxtab);
        finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(cxtablen, cxtab, 2 * cdx, _16), _16, _utilJs.scale(_utilJs.scale(4, bb, cdxtail, _8), _8, ady, _16b), _16b, _utilJs.scale(_utilJs.scale(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);
    }
    if (cdytail !== 0) {
        cytablen = _utilJs.scale(4, ab, cdytail, cytab);
        finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(cytablen, cytab, 2 * cdy, _16), _16, _utilJs.scale(_utilJs.scale(4, aa, cdytail, _8), _8, bdx, _16b), _16b, _utilJs.scale(_utilJs.scale(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);
    }
    if (adxtail !== 0 || adytail !== 0) {
        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {
            s1 = bdxtail * cdy;
            c = _utilJs.splitter * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = _utilJs.splitter * cdy;
            bhi = c - (c - cdy);
            blo = cdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdx * cdytail;
            c = _utilJs.splitter * bdx;
            ahi = c - (c - bdx);
            alo = bdx - ahi;
            c = _utilJs.splitter * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            u[3] = u3;
            s1 = cdxtail * -bdy;
            c = _utilJs.splitter * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = _utilJs.splitter * -bdy;
            bhi = c - (c - -bdy);
            blo = -bdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdx * -bdytail;
            c = _utilJs.splitter * cdx;
            ahi = c - (c - cdx);
            alo = cdx - ahi;
            c = _utilJs.splitter * -bdytail;
            bhi = c - (c - -bdytail);
            blo = -bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            v[3] = u3;
            bctlen = _utilJs.sum(4, u, 4, v, bct);
            s1 = bdxtail * cdytail;
            c = _utilJs.splitter * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = _utilJs.splitter * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdxtail * bdytail;
            c = _utilJs.splitter * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = _utilJs.splitter * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            bctt[3] = u3;
            bcttlen = 4;
        } else {
            bct[0] = 0;
            bctlen = 1;
            bctt[0] = 0;
            bcttlen = 1;
        }
        if (adxtail !== 0) {
            const len = _utilJs.scale(bctlen, bct, adxtail, _16c);
            finlen = finadd(finlen, _utilJs.sum(_utilJs.scale(axtbclen, axtbc, adxtail, _16), _16, _utilJs.scale(len, _16c, 2 * adx, _32), _32, _48), _48);
            const len2 = _utilJs.scale(bcttlen, bctt, adxtail, _8);
            finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(len2, _8, 2 * adx, _16), _16, _utilJs.scale(len2, _8, adxtail, _16b), _16b, _utilJs.scale(len, _16c, adxtail, _32), _32, _32b, _64), _64);
            if (bdytail !== 0) finlen = finadd(finlen, _utilJs.scale(_utilJs.scale(4, cc, adxtail, _8), _8, bdytail, _16), _16);
            if (cdytail !== 0) finlen = finadd(finlen, _utilJs.scale(_utilJs.scale(4, bb, -adxtail, _8), _8, cdytail, _16), _16);
        }
        if (adytail !== 0) {
            const len = _utilJs.scale(bctlen, bct, adytail, _16c);
            finlen = finadd(finlen, _utilJs.sum(_utilJs.scale(aytbclen, aytbc, adytail, _16), _16, _utilJs.scale(len, _16c, 2 * ady, _32), _32, _48), _48);
            const len2 = _utilJs.scale(bcttlen, bctt, adytail, _8);
            finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(len2, _8, 2 * ady, _16), _16, _utilJs.scale(len2, _8, adytail, _16b), _16b, _utilJs.scale(len, _16c, adytail, _32), _32, _32b, _64), _64);
        }
    }
    if (bdxtail !== 0 || bdytail !== 0) {
        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {
            s1 = cdxtail * ady;
            c = _utilJs.splitter * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = _utilJs.splitter * ady;
            bhi = c - (c - ady);
            blo = ady - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdx * adytail;
            c = _utilJs.splitter * cdx;
            ahi = c - (c - cdx);
            alo = cdx - ahi;
            c = _utilJs.splitter * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            u[3] = u3;
            n1 = -cdy;
            n0 = -cdytail;
            s1 = adxtail * n1;
            c = _utilJs.splitter * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = _utilJs.splitter * n1;
            bhi = c - (c - n1);
            blo = n1 - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adx * n0;
            c = _utilJs.splitter * adx;
            ahi = c - (c - adx);
            alo = adx - ahi;
            c = _utilJs.splitter * n0;
            bhi = c - (c - n0);
            blo = n0 - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            v[3] = u3;
            catlen = _utilJs.sum(4, u, 4, v, cat);
            s1 = cdxtail * adytail;
            c = _utilJs.splitter * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = _utilJs.splitter * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adxtail * cdytail;
            c = _utilJs.splitter * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = _utilJs.splitter * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            catt[3] = u3;
            cattlen = 4;
        } else {
            cat[0] = 0;
            catlen = 1;
            catt[0] = 0;
            cattlen = 1;
        }
        if (bdxtail !== 0) {
            const len = _utilJs.scale(catlen, cat, bdxtail, _16c);
            finlen = finadd(finlen, _utilJs.sum(_utilJs.scale(bxtcalen, bxtca, bdxtail, _16), _16, _utilJs.scale(len, _16c, 2 * bdx, _32), _32, _48), _48);
            const len2 = _utilJs.scale(cattlen, catt, bdxtail, _8);
            finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(len2, _8, 2 * bdx, _16), _16, _utilJs.scale(len2, _8, bdxtail, _16b), _16b, _utilJs.scale(len, _16c, bdxtail, _32), _32, _32b, _64), _64);
            if (cdytail !== 0) finlen = finadd(finlen, _utilJs.scale(_utilJs.scale(4, aa, bdxtail, _8), _8, cdytail, _16), _16);
            if (adytail !== 0) finlen = finadd(finlen, _utilJs.scale(_utilJs.scale(4, cc, -bdxtail, _8), _8, adytail, _16), _16);
        }
        if (bdytail !== 0) {
            const len = _utilJs.scale(catlen, cat, bdytail, _16c);
            finlen = finadd(finlen, _utilJs.sum(_utilJs.scale(bytcalen, bytca, bdytail, _16), _16, _utilJs.scale(len, _16c, 2 * bdy, _32), _32, _48), _48);
            const len2 = _utilJs.scale(cattlen, catt, bdytail, _8);
            finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(len2, _8, 2 * bdy, _16), _16, _utilJs.scale(len2, _8, bdytail, _16b), _16b, _utilJs.scale(len, _16c, bdytail, _32), _32, _32b, _64), _64);
        }
    }
    if (cdxtail !== 0 || cdytail !== 0) {
        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {
            s1 = adxtail * bdy;
            c = _utilJs.splitter * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = _utilJs.splitter * bdy;
            bhi = c - (c - bdy);
            blo = bdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adx * bdytail;
            c = _utilJs.splitter * adx;
            ahi = c - (c - adx);
            alo = adx - ahi;
            c = _utilJs.splitter * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            u[3] = u3;
            n1 = -ady;
            n0 = -adytail;
            s1 = bdxtail * n1;
            c = _utilJs.splitter * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = _utilJs.splitter * n1;
            bhi = c - (c - n1);
            blo = n1 - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdx * n0;
            c = _utilJs.splitter * bdx;
            ahi = c - (c - bdx);
            alo = bdx - ahi;
            c = _utilJs.splitter * n0;
            bhi = c - (c - n0);
            blo = n0 - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            v[3] = u3;
            abtlen = _utilJs.sum(4, u, 4, v, abt);
            s1 = adxtail * bdytail;
            c = _utilJs.splitter * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = _utilJs.splitter * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdxtail * adytail;
            c = _utilJs.splitter * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = _utilJs.splitter * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            abtt[3] = u3;
            abttlen = 4;
        } else {
            abt[0] = 0;
            abtlen = 1;
            abtt[0] = 0;
            abttlen = 1;
        }
        if (cdxtail !== 0) {
            const len = _utilJs.scale(abtlen, abt, cdxtail, _16c);
            finlen = finadd(finlen, _utilJs.sum(_utilJs.scale(cxtablen, cxtab, cdxtail, _16), _16, _utilJs.scale(len, _16c, 2 * cdx, _32), _32, _48), _48);
            const len2 = _utilJs.scale(abttlen, abtt, cdxtail, _8);
            finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(len2, _8, 2 * cdx, _16), _16, _utilJs.scale(len2, _8, cdxtail, _16b), _16b, _utilJs.scale(len, _16c, cdxtail, _32), _32, _32b, _64), _64);
            if (adytail !== 0) finlen = finadd(finlen, _utilJs.scale(_utilJs.scale(4, bb, cdxtail, _8), _8, adytail, _16), _16);
            if (bdytail !== 0) finlen = finadd(finlen, _utilJs.scale(_utilJs.scale(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);
        }
        if (cdytail !== 0) {
            const len = _utilJs.scale(abtlen, abt, cdytail, _16c);
            finlen = finadd(finlen, _utilJs.sum(_utilJs.scale(cytablen, cytab, cdytail, _16), _16, _utilJs.scale(len, _16c, 2 * cdy, _32), _32, _48), _48);
            const len2 = _utilJs.scale(abttlen, abtt, cdytail, _8);
            finlen = finadd(finlen, _utilJs.sum_three(_utilJs.scale(len2, _8, 2 * cdy, _16), _16, _utilJs.scale(len2, _8, cdytail, _16b), _16b, _utilJs.scale(len, _16c, cdytail, _32), _32, _32b, _64), _64);
        }
    }
    return fin[finlen - 1];
}
function incircle(ax, ay, bx, by, cx, cy, dx, dy) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const bdxcdy = bdx * cdy;
    const cdxbdy = cdx * bdy;
    const alift = adx * adx + ady * ady;
    const cdxady = cdx * ady;
    const adxcdy = adx * cdy;
    const blift = bdx * bdx + bdy * bdy;
    const adxbdy = adx * bdy;
    const bdxady = bdx * ady;
    const clift = cdx * cdx + cdy * cdy;
    const det = alift * (bdxcdy - cdxbdy) + blift * (cdxady - adxcdy) + clift * (adxbdy - bdxady);
    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift + (Math.abs(cdxady) + Math.abs(adxcdy)) * blift + (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;
    const errbound = iccerrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);
}
function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {
    const adx = ax - dx;
    const ady = ay - dy;
    const bdx = bx - dx;
    const bdy = by - dy;
    const cdx = cx - dx;
    const cdy = cy - dy;
    const abdet = adx * bdy - bdx * ady;
    const bcdet = bdx * cdy - cdx * bdy;
    const cadet = cdx * ady - adx * cdy;
    const alift = adx * adx + ady * ady;
    const blift = bdx * bdx + bdy * bdy;
    const clift = cdx * cdx + cdy * cdy;
    return alift * bcdet + blift * cadet + clift * abdet;
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6qjhA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "insphere", ()=>insphere
);
parcelHelpers.export(exports, "inspherefast", ()=>inspherefast
);
var _utilJs = require("./util.js");
const isperrboundA = (16 + 224 * _utilJs.epsilon) * _utilJs.epsilon;
const isperrboundB = (5 + 72 * _utilJs.epsilon) * _utilJs.epsilon;
const isperrboundC = (71 + 1408 * _utilJs.epsilon) * _utilJs.epsilon * _utilJs.epsilon;
const ab = _utilJs.vec(4);
const bc = _utilJs.vec(4);
const cd = _utilJs.vec(4);
const de = _utilJs.vec(4);
const ea = _utilJs.vec(4);
const ac = _utilJs.vec(4);
const bd = _utilJs.vec(4);
const ce = _utilJs.vec(4);
const da = _utilJs.vec(4);
const eb = _utilJs.vec(4);
const abc = _utilJs.vec(24);
const bcd = _utilJs.vec(24);
const cde = _utilJs.vec(24);
const dea = _utilJs.vec(24);
const eab = _utilJs.vec(24);
const abd = _utilJs.vec(24);
const bce = _utilJs.vec(24);
const cda = _utilJs.vec(24);
const deb = _utilJs.vec(24);
const eac = _utilJs.vec(24);
const adet = _utilJs.vec(1152);
const bdet = _utilJs.vec(1152);
const cdet = _utilJs.vec(1152);
const ddet = _utilJs.vec(1152);
const edet = _utilJs.vec(1152);
const abdet = _utilJs.vec(2304);
const cddet = _utilJs.vec(2304);
const cdedet = _utilJs.vec(3456);
const deter = _utilJs.vec(5760);
const _8 = _utilJs.vec(8);
const _8b = _utilJs.vec(8);
const _8c = _utilJs.vec(8);
const _16 = _utilJs.vec(16);
const _24 = _utilJs.vec(24);
const _48 = _utilJs.vec(48);
const _48b = _utilJs.vec(48);
const _96 = _utilJs.vec(96);
const _192 = _utilJs.vec(192);
const _384x = _utilJs.vec(384);
const _384y = _utilJs.vec(384);
const _384z = _utilJs.vec(384);
const _768 = _utilJs.vec(768);
function sum_three_scale(a, b, c, az, bz, cz, out) {
    return _utilJs.sum_three(_utilJs.scale(4, a, az, _8), _8, _utilJs.scale(4, b, bz, _8b), _8b, _utilJs.scale(4, c, cz, _8c), _8c, _16, out);
}
function liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {
    const len = _utilJs.sum(_utilJs.sum(alen, a, blen, b, _48), _48, _utilJs.negate(_utilJs.sum(clen, c, dlen, d, _48b), _48b), _48b, _96);
    return _utilJs.sum_three(_utilJs.scale(_utilJs.scale(len, _96, x, _192), _192, x, _384x), _384x, _utilJs.scale(_utilJs.scale(len, _96, y, _192), _192, y, _384y), _384y, _utilJs.scale(_utilJs.scale(len, _96, z, _192), _192, z, _384z), _384z, _768, out);
}
function insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    s1 = ax * by;
    c = _utilJs.splitter * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = _utilJs.splitter * by;
    bhi = c - (c - by);
    blo = by - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bx * ay;
    c = _utilJs.splitter * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = _utilJs.splitter * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ab[3] = u3;
    s1 = bx * cy;
    c = _utilJs.splitter * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = _utilJs.splitter * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cx * by;
    c = _utilJs.splitter * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = _utilJs.splitter * by;
    bhi = c - (c - by);
    blo = by - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bc[3] = u3;
    s1 = cx * dy;
    c = _utilJs.splitter * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = _utilJs.splitter * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dx * cy;
    c = _utilJs.splitter * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = _utilJs.splitter * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);
    cd[3] = u3;
    s1 = dx * ey;
    c = _utilJs.splitter * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = _utilJs.splitter * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ex * dy;
    c = _utilJs.splitter * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = _utilJs.splitter * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    de[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    de[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    de[2] = _j - (u3 - bvirt) + (_i - bvirt);
    de[3] = u3;
    s1 = ex * ay;
    c = _utilJs.splitter * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = _utilJs.splitter * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ax * ey;
    c = _utilJs.splitter * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = _utilJs.splitter * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ea[3] = u3;
    s1 = ax * cy;
    c = _utilJs.splitter * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = _utilJs.splitter * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cx * ay;
    c = _utilJs.splitter * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = _utilJs.splitter * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ac[3] = u3;
    s1 = bx * dy;
    c = _utilJs.splitter * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = _utilJs.splitter * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dx * by;
    c = _utilJs.splitter * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = _utilJs.splitter * by;
    bhi = c - (c - by);
    blo = by - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bd[3] = u3;
    s1 = cx * ey;
    c = _utilJs.splitter * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = _utilJs.splitter * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ex * cy;
    c = _utilJs.splitter * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = _utilJs.splitter * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ce[3] = u3;
    s1 = dx * ay;
    c = _utilJs.splitter * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = _utilJs.splitter * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ax * dy;
    c = _utilJs.splitter * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = _utilJs.splitter * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    da[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    da[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    da[2] = _j - (u3 - bvirt) + (_i - bvirt);
    da[3] = u3;
    s1 = ex * by;
    c = _utilJs.splitter * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = _utilJs.splitter * by;
    bhi = c - (c - by);
    blo = by - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bx * ey;
    c = _utilJs.splitter * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = _utilJs.splitter * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);
    eb[3] = u3;
    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);
    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);
    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);
    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);
    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);
    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);
    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);
    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);
    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);
    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);
    const deterlen = _utilJs.sum_three(liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet, liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet, _utilJs.sum_three(liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet, liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet, liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);
    return deter[deterlen - 1];
}
const xdet = _utilJs.vec(96);
const ydet = _utilJs.vec(96);
const zdet = _utilJs.vec(96);
const fin = _utilJs.vec(1152);
function liftadapt(a, b, c, az, bz, cz, x, y, z, out) {
    const len = sum_three_scale(a, b, c, az, bz, cz, _24);
    return _utilJs.sum_three(_utilJs.scale(_utilJs.scale(len, _24, x, _48), _48, x, xdet), xdet, _utilJs.scale(_utilJs.scale(len, _24, y, _48), _48, y, ydet), ydet, _utilJs.scale(_utilJs.scale(len, _24, z, _48), _48, z, zdet), zdet, _192, out);
}
function insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {
    let ab3, bc3, cd3, da3, ac3, bd3;
    let aextail, bextail, cextail, dextail;
    let aeytail, beytail, ceytail, deytail;
    let aeztail, beztail, ceztail, deztail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;
    const aex = ax - ex;
    const bex = bx - ex;
    const cex = cx - ex;
    const dex = dx - ex;
    const aey = ay - ey;
    const bey = by - ey;
    const cey = cy - ey;
    const dey = dy - ey;
    const aez = az - ez;
    const bez = bz - ez;
    const cez = cz - ez;
    const dez = dz - ez;
    s1 = aex * bey;
    c = _utilJs.splitter * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = _utilJs.splitter * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bex * aey;
    c = _utilJs.splitter * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = _utilJs.splitter * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    ab3 = _j + _i;
    bvirt = ab3 - _j;
    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);
    ab[3] = ab3;
    s1 = bex * cey;
    c = _utilJs.splitter * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = _utilJs.splitter * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cex * bey;
    c = _utilJs.splitter * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = _utilJs.splitter * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    bc3 = _j + _i;
    bvirt = bc3 - _j;
    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);
    bc[3] = bc3;
    s1 = cex * dey;
    c = _utilJs.splitter * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = _utilJs.splitter * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dex * cey;
    c = _utilJs.splitter * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = _utilJs.splitter * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    cd3 = _j + _i;
    bvirt = cd3 - _j;
    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);
    cd[3] = cd3;
    s1 = dex * aey;
    c = _utilJs.splitter * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = _utilJs.splitter * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = aex * dey;
    c = _utilJs.splitter * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = _utilJs.splitter * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    da[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    da[1] = _0 - (_i + bvirt) + (bvirt - t1);
    da3 = _j + _i;
    bvirt = da3 - _j;
    da[2] = _j - (da3 - bvirt) + (_i - bvirt);
    da[3] = da3;
    s1 = aex * cey;
    c = _utilJs.splitter * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = _utilJs.splitter * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cex * aey;
    c = _utilJs.splitter * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = _utilJs.splitter * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);
    ac3 = _j + _i;
    bvirt = ac3 - _j;
    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);
    ac[3] = ac3;
    s1 = bex * dey;
    c = _utilJs.splitter * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = _utilJs.splitter * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dex * bey;
    c = _utilJs.splitter * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = _utilJs.splitter * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    bd3 = _j + _i;
    bvirt = bd3 - _j;
    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);
    bd[3] = bd3;
    const finlen = _utilJs.sum(_utilJs.sum(_utilJs.negate(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet, liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet, _utilJs.sum(_utilJs.negate(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet, liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);
    let det = _utilJs.estimate(finlen, fin);
    let errbound = isperrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - aex;
    aextail = ax - (aex + bvirt) + (bvirt - ex);
    bvirt = ay - aey;
    aeytail = ay - (aey + bvirt) + (bvirt - ey);
    bvirt = az - aez;
    aeztail = az - (aez + bvirt) + (bvirt - ez);
    bvirt = bx - bex;
    bextail = bx - (bex + bvirt) + (bvirt - ex);
    bvirt = by - bey;
    beytail = by - (bey + bvirt) + (bvirt - ey);
    bvirt = bz - bez;
    beztail = bz - (bez + bvirt) + (bvirt - ez);
    bvirt = cx - cex;
    cextail = cx - (cex + bvirt) + (bvirt - ex);
    bvirt = cy - cey;
    ceytail = cy - (cey + bvirt) + (bvirt - ey);
    bvirt = cz - cez;
    ceztail = cz - (cez + bvirt) + (bvirt - ez);
    bvirt = dx - dex;
    dextail = dx - (dex + bvirt) + (bvirt - ex);
    bvirt = dy - dey;
    deytail = dy - (dey + bvirt) + (bvirt - ey);
    bvirt = dz - dez;
    deztail = dz - (dez + bvirt) + (bvirt - ez);
    if (aextail === 0 && aeytail === 0 && aeztail === 0 && bextail === 0 && beytail === 0 && beztail === 0 && cextail === 0 && ceytail === 0 && ceztail === 0 && dextail === 0 && deytail === 0 && deztail === 0) return det;
    errbound = isperrboundC * permanent + _utilJs.resulterrbound * Math.abs(det);
    const abeps = aex * beytail + bey * aextail - (aey * bextail + bex * aeytail);
    const bceps = bex * ceytail + cey * bextail - (bey * cextail + cex * beytail);
    const cdeps = cex * deytail + dey * cextail - (cey * dextail + dex * ceytail);
    const daeps = dex * aeytail + aey * dextail - (dey * aextail + aex * deytail);
    const aceps = aex * ceytail + cey * aextail - (aey * cextail + cex * aeytail);
    const bdeps = bex * deytail + dey * bextail - (bey * dextail + dex * beytail);
    det += (bex * bex + bey * bey + bez * bez) * (cez * daeps + dez * aceps + aez * cdeps + (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) * (aez * bceps - bez * aceps + cez * abeps + (aeztail * bc3 - beztail * ac3 + ceztail * ab3)) - ((aex * aex + aey * aey + aez * aez) * (bez * cdeps - cez * bdeps + dez * bceps + (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) * (dez * abeps + aez * bdeps + bez * daeps + (deztail * ab3 + aeztail * bd3 + beztail * da3))) + 2 * ((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) + (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3) - ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) + (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));
    if (det >= errbound || -det >= errbound) return det;
    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
}
function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {
    const aex = ax - ex;
    const bex = bx - ex;
    const cex = cx - ex;
    const dex = dx - ex;
    const aey = ay - ey;
    const bey = by - ey;
    const cey = cy - ey;
    const dey = dy - ey;
    const aez = az - ez;
    const bez = bz - ez;
    const cez = cz - ez;
    const dez = dz - ez;
    const aexbey = aex * bey;
    const bexaey = bex * aey;
    const ab1 = aexbey - bexaey;
    const bexcey = bex * cey;
    const cexbey = cex * bey;
    const bc1 = bexcey - cexbey;
    const cexdey = cex * dey;
    const dexcey = dex * cey;
    const cd1 = cexdey - dexcey;
    const dexaey = dex * aey;
    const aexdey = aex * dey;
    const da1 = dexaey - aexdey;
    const aexcey = aex * cey;
    const cexaey = cex * aey;
    const ac1 = aexcey - cexaey;
    const bexdey = bex * dey;
    const dexbey = dex * bey;
    const bd1 = bexdey - dexbey;
    const abc1 = aez * bc1 - bez * ac1 + cez * ab1;
    const bcd1 = bez * cd1 - cez * bd1 + dez * bc1;
    const cda1 = cez * da1 + dez * ac1 + aez * cd1;
    const dab = dez * ab1 + aez * bd1 + bez * da1;
    const alift = aex * aex + aey * aey + aez * aez;
    const blift = bex * bex + bey * bey + bez * bez;
    const clift = cex * cex + cey * cey + cez * cez;
    const dlift = dex * dex + dey * dey + dez * dez;
    const det = clift * dab - dlift * abc1 + (alift * bcd1 - blift * cda1);
    const aezplus = Math.abs(aez);
    const bezplus = Math.abs(bez);
    const cezplus = Math.abs(cez);
    const dezplus = Math.abs(dez);
    const aexbeyplus = Math.abs(aexbey);
    const bexaeyplus = Math.abs(bexaey);
    const bexceyplus = Math.abs(bexcey);
    const cexbeyplus = Math.abs(cexbey);
    const cexdeyplus = Math.abs(cexdey);
    const dexceyplus = Math.abs(dexcey);
    const dexaeyplus = Math.abs(dexaey);
    const aexdeyplus = Math.abs(aexdey);
    const aexceyplus = Math.abs(aexcey);
    const cexaeyplus = Math.abs(cexaey);
    const bexdeyplus = Math.abs(bexdey);
    const dexbeyplus = Math.abs(dexbey);
    const permanent = ((cexdeyplus + dexceyplus) * bezplus + (dexbeyplus + bexdeyplus) * cezplus + (bexceyplus + cexbeyplus) * dezplus) * alift + ((dexaeyplus + aexdeyplus) * cezplus + (aexceyplus + cexaeyplus) * dezplus + (cexdeyplus + dexceyplus) * aezplus) * blift + ((aexbeyplus + bexaeyplus) * dezplus + (bexdeyplus + dexbeyplus) * aezplus + (dexaeyplus + aexdeyplus) * bezplus) * clift + ((bexceyplus + cexbeyplus) * aezplus + (cexaeyplus + aexceyplus) * bezplus + (aexbeyplus + bexaeyplus) * cezplus) * dlift;
    const errbound = isperrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);
}
function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {
    const aex = pax - pex;
    const bex = pbx - pex;
    const cex = pcx - pex;
    const dex = pdx - pex;
    const aey = pay - pey;
    const bey = pby - pey;
    const cey = pcy - pey;
    const dey = pdy - pey;
    const aez = paz - pez;
    const bez = pbz - pez;
    const cez = pcz - pez;
    const dez = pdz - pez;
    const ab2 = aex * bey - bex * aey;
    const bc2 = bex * cey - cex * bey;
    const cd2 = cex * dey - dex * cey;
    const da2 = dex * aey - aex * dey;
    const ac2 = aex * cey - cex * aey;
    const bd2 = bex * dey - dex * bey;
    const abc2 = aez * bc2 - bez * ac2 + cez * ab2;
    const bcd2 = bez * cd2 - cez * bd2 + dez * bc2;
    const cda2 = cez * da2 + dez * ac2 + aez * cd2;
    const dab = dez * ab2 + aez * bd2 + bez * da2;
    const alift = aex * aex + aey * aey + aez * aez;
    const blift = bex * bex + bey * bey + bez * bez;
    const clift = cex * cex + cey * cey + cez * cez;
    const dlift = dex * dex + dey * dey + dez * dez;
    return clift * dab - dlift * abc2 + (alift * bcd2 - blift * cda2);
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j1aS4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const epsilon = 0.000001;
class Path {
    constructor(){
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
    }
    moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    }
    lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
    }
    arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
    }
    rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
    }
    value() {
        return this._ || null;
    }
}
exports.default = Path;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1mwL9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Polygon {
    constructor(){
        this._ = [];
    }
    moveTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    closePath() {
        this._.push(this._[0].slice());
    }
    lineTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    value() {
        return this._.length ? this._ : null;
    }
}
exports.default = Polygon;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h3ABT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _polygonJs = require("./polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
class Voronoi {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [
        0,
        0,
        960,
        500
    ]){
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
    }
    update() {
        this.delaunay.update();
        this._init();
        return this;
    }
    _init() {
        const { delaunay: { points , hull , triangles  } , vectors  } = this;
        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for(let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2){
            const t1 = triangles[i] * 2;
            const t2 = triangles[i + 1] * 2;
            const t3 = triangles[i + 2] * 2;
            const x1 = points[t1];
            const y1 = points[t1 + 1];
            const x2 = points[t2];
            const y2 = points[t2 + 1];
            const x3 = points[t3];
            const y3 = points[t3 + 1];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const ex = x3 - x1;
            const ey = y3 - y1;
            const ab = (dx * ey - dy * ex) * 2;
            if (Math.abs(ab) < 0.000000001) {
                // degenerate case (collinear diagram)
                // almost equal points (degenerate triangle)
                // the circumcenter is at the infinity, in a
                // direction that is:
                // 1. orthogonal to the halfedge.
                let a = 1000000000;
                // 2. points away from the center; since the list of triangles starts
                // in the center, the first point of the first triangle
                // will be our reference
                const r = triangles[0] * 2;
                a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);
                x = (x1 + x3) / 2 - a * ey;
                y = (y1 + y3) / 2 + a * ex;
            } else {
                const d = 1 / ab;
                const bl = dx * dx + dy * dy;
                const cl = ex * ex + ey * ey;
                x = x1 + (ey * bl - dy * cl) * d;
                y = y1 + (dx * cl - ex * bl) * d;
            }
            circumcenters[j] = x;
            circumcenters[j + 1] = y;
        }
        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for(let i1 = 0; i1 < hull.length; ++i1){
            h = hull[i1];
            p0 = p1, x0 = x1, y0 = y1;
            p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
            vectors[p0 + 2] = vectors[p1] = y0 - y1;
            vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
    }
    render(context) {
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        const { delaunay: { halfedges , inedges , hull  } , circumcenters , vectors  } = this;
        if (hull.length <= 1) return null;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = Math.floor(i / 3) * 2;
            const tj = Math.floor(j / 3) * 2;
            const xi = circumcenters[ti];
            const yi = circumcenters[ti + 1];
            const xj = circumcenters[tj];
            const yj = circumcenters[tj + 1];
            this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for(let i2 = 0; i2 < hull.length; ++i2){
            h0 = h1, h1 = hull[i2];
            const t = Math.floor(inedges[h1] / 3) * 2;
            const x = circumcenters[t];
            const y = circumcenters[t + 1];
            const v = h0 * 4;
            const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
            if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
    }
    renderBounds(context) {
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
    }
    renderCell(i, context) {
        const buffer = context == null ? context = new _pathJsDefault.default : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while(points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)n -= 2;
        for(let i3 = 2; i3 < n; i3 += 2)if (points[i3] !== points[i3 - 2] || points[i3 + 1] !== points[i3 - 1]) context.lineTo(points[i3], points[i3 + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *cellPolygons() {
        const { delaunay: { points  }  } = this;
        for(let i = 0, n = points.length / 2; i < n; ++i){
            const cell = this.cellPolygon(i);
            if (cell) cell.index = i, yield cell;
        }
    }
    cellPolygon(i) {
        const polygon = new _polygonJsDefault.default;
        this.renderCell(i, polygon);
        return polygon.value();
    }
    _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
            context.moveTo(S[0], S[1]);
            context.lineTo(S[2], S[3]);
        }
    }
    contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
    }
    *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)){
            const cj = this._clip(j);
            // find the common edge
            if (cj) loop: for(let ai = 0, li = ci.length; ai < li; ai += 2){
                for(let aj = 0, lj = cj.length; aj < lj; aj += 2)if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                    yield j;
                    break loop;
                }
            }
        }
    }
    _cell(i) {
        const { circumcenters , delaunay: { inedges , halfedges , triangles  }  } = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
            const t = Math.floor(e / 3);
            points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
        }while (e !== e0 && e !== -1)
        return points;
    }
    _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        const points = this._cell(i);
        if (points === null) return null;
        const { vectors: V  } = this;
        const v = i * 4;
        return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
    }
    _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1 = 0;
        for(let j = 0; j < n; j += 2){
            x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
            c0 = c1, c1 = this._regioncode(x1, y1);
            if (c0 === 0 && c1 === 0) {
                e0 = e1, e1 = 0;
                if (P) P.push(x1, y1);
                else P = [
                    x1,
                    y1
                ];
            } else {
                let S, sx0, sy0, sx1, sy1;
                if (c0 === 0) {
                    if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
                    [sx0, sy0, sx1, sy1] = S;
                } else {
                    if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
                    [sx1, sy1, sx0, sy0] = S;
                    e0 = e1, e1 = this._edgecode(sx0, sy0);
                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                    if (P) P.push(sx0, sy0);
                    else P = [
                        sx0,
                        sy0
                    ];
                }
                e0 = e1, e1 = this._edgecode(sx1, sy1);
                if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                if (P) P.push(sx1, sy1);
                else P = [
                    sx1,
                    sy1
                ];
            }
        }
        if (P) {
            e0 = e1, e1 = this._edgecode(P[0], P[1]);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        return P;
    }
    _clipSegment(x0, y0, x1, y1, c0, c1) {
        while(true){
            if (c0 === 0 && c1 === 0) return [
                x0,
                y0,
                x1,
                y1
            ];
            if (c0 & c1) return null;
            let x, y, c = c0 || c1;
            if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
            else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
            else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
            else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
            if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
            else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
    }
    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) for(let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2){
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
        }
        else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) P = [
            this.xmin,
            this.ymin,
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax
        ];
        return P;
    }
    _edge(i, e0, e1, P, j) {
        while(e0 !== e1){
            let x, y;
            switch(e0){
                case 5:
                    e0 = 4;
                    continue; // top-left
                case 4:
                    e0 = 6, x = this.xmax, y = this.ymin;
                    break; // top
                case 6:
                    e0 = 2;
                    continue; // top-right
                case 2:
                    e0 = 10, x = this.xmax, y = this.ymax;
                    break; // right
                case 10:
                    e0 = 8;
                    continue; // bottom-right
                case 8:
                    e0 = 9, x = this.xmin, y = this.ymax;
                    break; // bottom
                case 9:
                    e0 = 1;
                    continue; // bottom-left
                case 1:
                    e0 = 5, x = this.xmin, y = this.ymin;
                    break; // left
            }
            // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are
            // undefined, the conditional statement will be executed.
            if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) P.splice(j, 0, x, y), j += 2;
        }
        if (P.length > 4) for(let i4 = 0; i4 < P.length; i4 += 2){
            const j = (i4 + 2) % P.length, k = (i4 + 4) % P.length;
            if (P[i4] === P[j] && P[j] === P[k] || P[i4 + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i4 -= 2;
        }
        return j;
    }
    _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) {
            if (y0 <= this.ymin) return null;
            if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) {
            if (y0 >= this.ymax) return null;
            if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) {
            if (x0 >= this.xmax) return null;
            if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) {
            if (x0 <= this.xmin) return null;
            if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [
            x,
            y
        ];
    }
    _edgecode(x, y) {
        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
    }
    _regioncode(x, y) {
        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
    }
}
exports.default = Voronoi;

},{"./path.js":"j1aS4","./polygon.js":"1mwL9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Jb1j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dsvFormat", ()=>_dsvJsDefault.default
);
parcelHelpers.export(exports, "csvParse", ()=>_csvJs.csvParse
);
parcelHelpers.export(exports, "csvParseRows", ()=>_csvJs.csvParseRows
);
parcelHelpers.export(exports, "csvFormat", ()=>_csvJs.csvFormat
);
parcelHelpers.export(exports, "csvFormatBody", ()=>_csvJs.csvFormatBody
);
parcelHelpers.export(exports, "csvFormatRows", ()=>_csvJs.csvFormatRows
);
parcelHelpers.export(exports, "csvFormatRow", ()=>_csvJs.csvFormatRow
);
parcelHelpers.export(exports, "csvFormatValue", ()=>_csvJs.csvFormatValue
);
parcelHelpers.export(exports, "tsvParse", ()=>_tsvJs.tsvParse
);
parcelHelpers.export(exports, "tsvParseRows", ()=>_tsvJs.tsvParseRows
);
parcelHelpers.export(exports, "tsvFormat", ()=>_tsvJs.tsvFormat
);
parcelHelpers.export(exports, "tsvFormatBody", ()=>_tsvJs.tsvFormatBody
);
parcelHelpers.export(exports, "tsvFormatRows", ()=>_tsvJs.tsvFormatRows
);
parcelHelpers.export(exports, "tsvFormatRow", ()=>_tsvJs.tsvFormatRow
);
parcelHelpers.export(exports, "tsvFormatValue", ()=>_tsvJs.tsvFormatValue
);
parcelHelpers.export(exports, "autoType", ()=>_autoTypeJsDefault.default
);
var _dsvJs = require("./dsv.js");
var _dsvJsDefault = parcelHelpers.interopDefault(_dsvJs);
var _csvJs = require("./csv.js");
var _tsvJs = require("./tsv.js");
var _autoTypeJs = require("./autoType.js");
var _autoTypeJsDefault = parcelHelpers.interopDefault(_autoTypeJs);

},{"./dsv.js":"25KIW","./csv.js":"ejKBg","./tsv.js":"82h96","./autoType.js":"ihhwo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25KIW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var EOL = {}, EOF = {}, QUOTE = 34, NEWLINE = 10, RETURN = 13;
function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "] || \"\"";
    }).join(",") + "}");
}
function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function(row, i) {
        return f(object(row), i, columns);
    };
}
// Compute unique columns in order of discovery.
function inferColumns(rows) {
    var columnSet = Object.create(null), columns = [];
    rows.forEach(function(row) {
        for(var column in row)if (!(column in columnSet)) columns.push(columnSet[column] = column);
    });
    return columns;
}
function pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
}
function formatYear(year) {
    return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
}
function formatDate(date) {
    var hours = date.getUTCHours(), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds(), milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
}
exports.default = function(delimiter) {
    var reFormat = new RegExp("[\"" + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
    function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
            if (convert) return convert(row, i - 1);
            columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
    }
    function parseRows(text, f) {
        var rows = [], N = text.length, I = 0, n = 0, t, eof = N <= 0, eol = false; // current token followed by EOL?
        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;
        function token() {
            if (eof) return EOF;
            if (eol) return eol = false, EOL;
            // Unescape quotes.
            var i, j = I, c;
            if (text.charCodeAt(j) === QUOTE) {
                while((I++) < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
                if ((i = I) >= N) eof = true;
                else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
                else if (c === RETURN) {
                    eol = true;
                    if (text.charCodeAt(I) === NEWLINE) ++I;
                }
                return text.slice(j + 1, i - 1).replace(/""/g, "\"");
            }
            // Find next delimiter or newline.
            while(I < N){
                if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
                else if (c === RETURN) {
                    eol = true;
                    if (text.charCodeAt(I) === NEWLINE) ++I;
                } else if (c !== DELIMITER) continue;
                return text.slice(j, i);
            }
            // Return last token before EOF.
            return eof = true, text.slice(j, N);
        }
        while((t = token()) !== EOF){
            var row = [];
            while(t !== EOL && t !== EOF)row.push(t), t = token();
            if (f && (row = f(row, n++)) == null) continue;
            rows.push(row);
        }
        return rows;
    }
    function preformatBody(rows, columns) {
        return rows.map(function(row) {
            return columns.map(function(column) {
                return formatValue(row[column]);
            }).join(delimiter);
        });
    }
    function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [
            columns.map(formatValue).join(delimiter)
        ].concat(preformatBody(rows, columns)).join("\n");
    }
    function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
    }
    function formatRows(rows) {
        return rows.map(formatRow).join("\n");
    }
    function formatRow(row) {
        return row.map(formatValue).join(delimiter);
    }
    function formatValue(value) {
        return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\"" : value;
    }
    return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ejKBg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "csvParse", ()=>csvParse
);
parcelHelpers.export(exports, "csvParseRows", ()=>csvParseRows
);
parcelHelpers.export(exports, "csvFormat", ()=>csvFormat
);
parcelHelpers.export(exports, "csvFormatBody", ()=>csvFormatBody
);
parcelHelpers.export(exports, "csvFormatRows", ()=>csvFormatRows
);
parcelHelpers.export(exports, "csvFormatRow", ()=>csvFormatRow
);
parcelHelpers.export(exports, "csvFormatValue", ()=>csvFormatValue
);
var _dsvJs = require("./dsv.js");
var _dsvJsDefault = parcelHelpers.interopDefault(_dsvJs);
var csv = _dsvJsDefault.default(",");
var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatBody = csv.formatBody;
var csvFormatRows = csv.formatRows;
var csvFormatRow = csv.formatRow;
var csvFormatValue = csv.formatValue;

},{"./dsv.js":"25KIW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82h96":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tsvParse", ()=>tsvParse
);
parcelHelpers.export(exports, "tsvParseRows", ()=>tsvParseRows
);
parcelHelpers.export(exports, "tsvFormat", ()=>tsvFormat
);
parcelHelpers.export(exports, "tsvFormatBody", ()=>tsvFormatBody
);
parcelHelpers.export(exports, "tsvFormatRows", ()=>tsvFormatRows
);
parcelHelpers.export(exports, "tsvFormatRow", ()=>tsvFormatRow
);
parcelHelpers.export(exports, "tsvFormatValue", ()=>tsvFormatValue
);
var _dsvJs = require("./dsv.js");
var _dsvJsDefault = parcelHelpers.interopDefault(_dsvJs);
var tsv = _dsvJsDefault.default("\t");
var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatBody = tsv.formatBody;
var tsvFormatRows = tsv.formatRows;
var tsvFormatRow = tsv.formatRow;
var tsvFormatValue = tsv.formatValue;

},{"./dsv.js":"25KIW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihhwo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function autoType(object) {
    for(var key in object){
        var value = object[key].trim(), number, m;
        if (!value) value = null;
        else if (value === "true") value = true;
        else if (value === "false") value = false;
        else if (value === "NaN") value = NaN;
        else if (!isNaN(number = +value)) value = number;
        else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
            if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
            value = new Date(value);
        } else continue;
        object[key] = value;
    }
    return object;
}
exports.default = autoType;
// https://github.com/d3/d3-dsv/issues/45
const fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvQ3c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blob", ()=>_blobJsDefault.default
);
parcelHelpers.export(exports, "buffer", ()=>_bufferJsDefault.default
);
parcelHelpers.export(exports, "dsv", ()=>_dsvJsDefault.default
);
parcelHelpers.export(exports, "csv", ()=>_dsvJs.csv
);
parcelHelpers.export(exports, "tsv", ()=>_dsvJs.tsv
);
parcelHelpers.export(exports, "image", ()=>_imageJsDefault.default
);
parcelHelpers.export(exports, "json", ()=>_jsonJsDefault.default
);
parcelHelpers.export(exports, "text", ()=>_textJsDefault.default
);
parcelHelpers.export(exports, "xml", ()=>_xmlJsDefault.default
);
parcelHelpers.export(exports, "html", ()=>_xmlJs.html
);
parcelHelpers.export(exports, "svg", ()=>_xmlJs.svg
);
var _blobJs = require("./blob.js");
var _blobJsDefault = parcelHelpers.interopDefault(_blobJs);
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _dsvJs = require("./dsv.js");
var _dsvJsDefault = parcelHelpers.interopDefault(_dsvJs);
var _imageJs = require("./image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _jsonJs = require("./json.js");
var _jsonJsDefault = parcelHelpers.interopDefault(_jsonJs);
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _xmlJs = require("./xml.js");
var _xmlJsDefault = parcelHelpers.interopDefault(_xmlJs);

},{"./blob.js":"ixhSp","./buffer.js":"hDtT1","./dsv.js":"itClG","./image.js":"icCeW","./json.js":"bP2DD","./text.js":"gA1Rh","./xml.js":"kdoqs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixhSp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function responseBlob(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.blob();
}
exports.default = function(input, init) {
    return fetch(input, init).then(responseBlob);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hDtT1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function responseArrayBuffer(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.arrayBuffer();
}
exports.default = function(input, init) {
    return fetch(input, init).then(responseArrayBuffer);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"itClG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "csv", ()=>csv
);
parcelHelpers.export(exports, "tsv", ()=>tsv
);
var _d3Dsv = require("d3-dsv");
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
function dsvParse(parse) {
    return function(input, init, row) {
        if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
        return _textJsDefault.default(input, init).then(function(response) {
            return parse(response, row);
        });
    };
}
function dsv(delimiter, input, init, row) {
    if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
    var format = _d3Dsv.dsvFormat(delimiter);
    return _textJsDefault.default(input, init).then(function(response) {
        return format.parse(response, row);
    });
}
exports.default = dsv;
var csv = dsvParse(_d3Dsv.csvParse);
var tsv = dsvParse(_d3Dsv.tsvParse);

},{"d3-dsv":"4Jb1j","./text.js":"gA1Rh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gA1Rh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function responseText(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    return response.text();
}
exports.default = function(input, init) {
    return fetch(input, init).then(responseText);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"icCeW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(input, init) {
    return new Promise(function(resolve, reject) {
        var image = new Image;
        for(var key in init)image[key] = init[key];
        image.onerror = reject;
        image.onload = function() {
            resolve(image);
        };
        image.src = input;
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bP2DD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function responseJson(response) {
    if (!response.ok) throw new Error(response.status + " " + response.statusText);
    if (response.status === 204 || response.status === 205) return;
    return response.json();
}
exports.default = function(input, init) {
    return fetch(input, init).then(responseJson);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kdoqs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "html", ()=>html
);
parcelHelpers.export(exports, "svg", ()=>svg
);
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
function parser(type) {
    return (input, init)=>_textJsDefault.default(input, init).then((text)=>(new DOMParser).parseFromString(text, type)
        )
    ;
}
exports.default = parser("application/xml");
var html = parser("text/html");
var svg = parser("image/svg+xml");

},{"./text.js":"gA1Rh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"helua":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forceCenter", ()=>_centerJsDefault.default
);
parcelHelpers.export(exports, "forceCollide", ()=>_collideJsDefault.default
);
parcelHelpers.export(exports, "forceLink", ()=>_linkJsDefault.default
);
parcelHelpers.export(exports, "forceManyBody", ()=>_manyBodyJsDefault.default
);
parcelHelpers.export(exports, "forceRadial", ()=>_radialJsDefault.default
);
parcelHelpers.export(exports, "forceSimulation", ()=>_simulationJsDefault.default
);
parcelHelpers.export(exports, "forceX", ()=>_xJsDefault.default
);
parcelHelpers.export(exports, "forceY", ()=>_yJsDefault.default
);
var _centerJs = require("./center.js");
var _centerJsDefault = parcelHelpers.interopDefault(_centerJs);
var _collideJs = require("./collide.js");
var _collideJsDefault = parcelHelpers.interopDefault(_collideJs);
var _linkJs = require("./link.js");
var _linkJsDefault = parcelHelpers.interopDefault(_linkJs);
var _manyBodyJs = require("./manyBody.js");
var _manyBodyJsDefault = parcelHelpers.interopDefault(_manyBodyJs);
var _radialJs = require("./radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _simulationJs = require("./simulation.js");
var _simulationJsDefault = parcelHelpers.interopDefault(_simulationJs);
var _xJs = require("./x.js");
var _xJsDefault = parcelHelpers.interopDefault(_xJs);
var _yJs = require("./y.js");
var _yJsDefault = parcelHelpers.interopDefault(_yJs);

},{"./center.js":"VtxOg","./collide.js":"34dOa","./link.js":"dXjw5","./manyBody.js":"60qew","./radial.js":"47INq","./simulation.js":"FYZiY","./x.js":"g7Dub","./y.js":"84MbS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"VtxOg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x, y) {
    var nodes, strength = 1;
    if (x == null) x = 0;
    if (y == null) y = 0;
    function force() {
        var i, n = nodes.length, node, sx = 0, sy = 0;
        for(i = 0; i < n; ++i)node = nodes[i], sx += node.x, sy += node.y;
        for(sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i)node = nodes[i], node.x -= sx, node.y -= sy;
    }
    force.initialize = function(_) {
        nodes = _;
    };
    force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
    };
    force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    return force;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"34dOa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Quadtree = require("d3-quadtree");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _jiggleJs = require("./jiggle.js");
var _jiggleJsDefault = parcelHelpers.interopDefault(_jiggleJs);
function x(d) {
    return d.x + d.vx;
}
function y(d) {
    return d.y + d.vy;
}
exports.default = function(radius) {
    var nodes, radii, random, strength = 1, iterations = 1;
    if (typeof radius !== "function") radius = _constantJsDefault.default(radius == null ? 1 : +radius);
    function force() {
        var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
        for(var k = 0; k < iterations; ++k){
            tree = _d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
            for(i = 0; i < n; ++i){
                node = nodes[i];
                ri = radii[node.index], ri2 = ri * ri;
                xi = node.x + node.vx;
                yi = node.y + node.vy;
                tree.visit(apply);
            }
        }
        function apply(quad, x0, y0, x1, y1) {
            var data = quad.data, rj = quad.r, r = ri + rj;
            if (data) {
                if (data.index > node.index) {
                    var x2 = xi - data.x - data.vx, y2 = yi - data.y - data.vy, l = x2 * x2 + y2 * y2;
                    if (l < r * r) {
                        if (x2 === 0) x2 = _jiggleJsDefault.default(random), l += x2 * x2;
                        if (y2 === 0) y2 = _jiggleJsDefault.default(random), l += y2 * y2;
                        l = (r - (l = Math.sqrt(l))) / l * strength;
                        node.vx += (x2 *= l) * (r = (rj *= rj) / (ri2 + rj));
                        node.vy += (y2 *= l) * r;
                        data.vx -= x2 * (r = 1 - r);
                        data.vy -= y2 * r;
                    }
                }
                return;
            }
            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
    }
    function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for(var i = quad.r = 0; i < 4; ++i)if (quad[i] && quad[i].r > quad.r) quad.r = quad[i].r;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for(i = 0; i < n; ++i)node = nodes[i], radii[node.index] = +radius(node, i, nodes);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : radius;
    };
    return force;
};

},{"d3-quadtree":"ep5gF","./constant.js":"bqryx","./jiggle.js":"72pY7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ep5gF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "quadtree", ()=>_quadtreeJsDefault.default
);
var _quadtreeJs = require("./quadtree.js");
var _quadtreeJsDefault = parcelHelpers.interopDefault(_quadtreeJs);

},{"./quadtree.js":"iV7KR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iV7KR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addJs = require("./add.js");
var _addJsDefault = parcelHelpers.interopDefault(_addJs);
var _coverJs = require("./cover.js");
var _coverJsDefault = parcelHelpers.interopDefault(_coverJs);
var _dataJs = require("./data.js");
var _dataJsDefault = parcelHelpers.interopDefault(_dataJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _rootJs = require("./root.js");
var _rootJsDefault = parcelHelpers.interopDefault(_rootJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _visitJs = require("./visit.js");
var _visitJsDefault = parcelHelpers.interopDefault(_visitJs);
var _visitAfterJs = require("./visitAfter.js");
var _visitAfterJsDefault = parcelHelpers.interopDefault(_visitAfterJs);
var _xJs = require("./x.js");
var _xJsDefault = parcelHelpers.interopDefault(_xJs);
var _yJs = require("./y.js");
var _yJsDefault = parcelHelpers.interopDefault(_yJs);
function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? _xJs.defaultX : x, y == null ? _yJs.defaultY : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
}
exports.default = quadtree;
function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
}
function leaf_copy(leaf) {
    var copy = {
        data: leaf.data
    }, next = copy;
    while(leaf = leaf.next)next = next.next = {
        data: leaf.data
    };
    return copy;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
    if (!node) return copy;
    if (!node.length) return copy._root = leaf_copy(node), copy;
    nodes = [
        {
            source: node,
            target: copy._root = new Array(4)
        }
    ];
    while(node = nodes.pop()){
        for(var i = 0; i < 4; ++i)if (child = node.source[i]) {
            if (child.length) nodes.push({
                source: child,
                target: node.target[i] = new Array(4)
            });
            else node.target[i] = leaf_copy(child);
        }
    }
    return copy;
};
treeProto.add = _addJsDefault.default;
treeProto.addAll = _addJs.addAll;
treeProto.cover = _coverJsDefault.default;
treeProto.data = _dataJsDefault.default;
treeProto.extent = _extentJsDefault.default;
treeProto.find = _findJsDefault.default;
treeProto.remove = _removeJsDefault.default;
treeProto.removeAll = _removeJs.removeAll;
treeProto.root = _rootJsDefault.default;
treeProto.size = _sizeJsDefault.default;
treeProto.visit = _visitJsDefault.default;
treeProto.visitAfter = _visitAfterJsDefault.default;
treeProto.x = _xJsDefault.default;
treeProto.y = _yJsDefault.default;

},{"./add.js":"bsac5","./cover.js":"gENfN","./data.js":"2uGAx","./extent.js":"9ojS1","./find.js":"4K0hP","./remove.js":"5QHxT","./root.js":"ggTIx","./size.js":"eQnwx","./visit.js":"6DZG9","./visitAfter.js":"c8U2L","./x.js":"iNLfi","./y.js":"8yxIq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsac5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addAll", ()=>addAll
);
exports.default = function(d) {
    const x = +this._x.call(null, d), y = +this._y.call(null, d);
    return add(this.cover(x, y), x, y, d);
};
function add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
    var parent, node = tree._root, leaf = {
        data: d
    }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;
    // Find the existing leaf for the new point, or add it.
    while(node.length){
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    }
    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
    // Otherwise, split the leaf node until the old and new point are separated.
    do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
    }while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm))
    return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    // Compute the points and their extent.
    for(i = 0; i < n; ++i){
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
    }
    // If there were no (valid) points, abort.
    if (x0 > x1 || y0 > y1) return this;
    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);
    // Add the new points.
    for(i = 0; i < n; ++i)add(this, xz[i], yz[i], data[i]);
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gENfN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
    } else {
        var z = x1 - x0 || 1, node = this._root, parent, i;
        while(x0 > x || x >= x1 || y0 > y || y >= y1){
            i = (y < y0) << 1 | x < x0;
            parent = new Array(4), parent[i] = node, node = parent, z *= 2;
            switch(i){
                case 0:
                    x1 = x0 + z, y1 = y0 + z;
                    break;
                case 1:
                    x0 = x1 - z, y1 = y0 + z;
                    break;
                case 2:
                    x1 = x0 + z, y0 = y1 - z;
                    break;
                case 3:
                    x0 = x1 - z, y0 = y1 - z;
                    break;
            }
        }
        if (this._root && this._root.length) this._root = node;
    }
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uGAx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var data = [];
    this.visit(function(node) {
        if (!node.length) do data.push(node.data);
        while (node = node.next)
    });
    return data;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ojS1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
        [
            this._x0,
            this._y0
        ],
        [
            this._x1,
            this._y1
        ]
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4K0hP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadJs = require("./quad.js");
var _quadJsDefault = parcelHelpers.interopDefault(_quadJs);
exports.default = function(x, y, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
    if (node) quads.push(new _quadJsDefault.default(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;
    else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
    }
    while(q = quads.pop()){
        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;
        // Bisect the current quadrant.
        if (node.length) {
            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
            quads.push(new _quadJsDefault.default(node[3], xm, ym, x2, y2), new _quadJsDefault.default(node[2], x1, ym, xm, y2), new _quadJsDefault.default(node[1], xm, y1, x2, ym), new _quadJsDefault.default(node[0], x1, y1, xm, ym));
            // Visit the closest quadrant first.
            if (i = (y >= ym) << 1 | x >= xm) {
                q = quads[quads.length - 1];
                quads[quads.length - 1] = quads[quads.length - 1 - i];
                quads[quads.length - 1 - i] = q;
            }
        } else {
            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
            if (d2 < radius) {
                var d = Math.sqrt(radius = d2);
                x0 = x - d, y0 = y - d;
                x3 = x + d, y3 = y + d;
                data = node.data;
            }
        }
    }
    return data;
};

},{"./quad.js":"9uc40","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9uc40":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5QHxT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "removeAll", ()=>removeAll
);
exports.default = function(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;
    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while(true){
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
        else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
        else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
    }
    // Find the point to remove.
    while(node.data !== d)if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;
    // If there are multiple coincident points, remove just the point.
    if (previous) return next ? previous.next = next : delete previous.next, this;
    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;
    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];
    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
    }
    return this;
};
function removeAll(data) {
    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ggTIx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return this._root;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQnwx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var size = 0;
    this.visit(function(node) {
        if (!node.length) do ++size;
        while (node = node.next)
    });
    return size;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6DZG9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadJs = require("./quad.js");
var _quadJsDefault = parcelHelpers.interopDefault(_quadJs);
exports.default = function(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new _quadJsDefault.default(node, this._x0, this._y0, this._x1, this._y1));
    while(q = quads.pop())if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new _quadJsDefault.default(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new _quadJsDefault.default(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new _quadJsDefault.default(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new _quadJsDefault.default(child, x0, y0, xm, ym));
    }
    return this;
};

},{"./quad.js":"9uc40","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c8U2L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadJs = require("./quad.js");
var _quadJsDefault = parcelHelpers.interopDefault(_quadJs);
exports.default = function(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new _quadJsDefault.default(this._root, this._x0, this._y0, this._x1, this._y1));
    while(q = quads.pop()){
        var node = q.node;
        if (node.length) {
            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[0]) quads.push(new _quadJsDefault.default(child, x0, y0, xm, ym));
            if (child = node[1]) quads.push(new _quadJsDefault.default(child, xm, y0, x1, ym));
            if (child = node[2]) quads.push(new _quadJsDefault.default(child, x0, ym, xm, y1));
            if (child = node[3]) quads.push(new _quadJsDefault.default(child, xm, ym, x1, y1));
        }
        next.push(q);
    }
    while(q = next.pop())callback(q.node, q.x0, q.y0, q.x1, q.y1);
    return this;
};

},{"./quad.js":"9uc40","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNLfi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultX", ()=>defaultX
);
function defaultX(d) {
    return d[0];
}
exports.default = function(_) {
    return arguments.length ? (this._x = _, this) : this._x;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8yxIq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultY", ()=>defaultY
);
function defaultY(d) {
    return d[1];
}
exports.default = function(_) {
    return arguments.length ? (this._y = _, this) : this._y;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqryx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72pY7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(random) {
    return (random() - 0.5) * 0.000001;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dXjw5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _jiggleJs = require("./jiggle.js");
var _jiggleJsDefault = parcelHelpers.interopDefault(_jiggleJs);
function index(d) {
    return d.index;
}
function find(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node) throw new Error("node not found: " + nodeId);
    return node;
}
exports.default = function(links) {
    var id = index, strength = defaultStrength, strengths, distance = _constantJsDefault.default(30), distances, nodes, count, bias, random, iterations = 1;
    if (links == null) links = [];
    function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }
    function force(alpha) {
        for(var k = 0, n = links.length; k < iterations; ++k)for(var i = 0, link, source, target, x, y, l, b; i < n; ++i){
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || _jiggleJsDefault.default(random);
            y = target.y + target.vy - source.y - source.vy || _jiggleJsDefault.default(random);
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
        }
    }
    function initialize() {
        if (!nodes) return;
        var i1, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i)=>[
                id(d, i, nodes),
                d
            ]
        )), link;
        for(i1 = 0, count = new Array(n); i1 < m; ++i1){
            link = links[i1], link.index = i1;
            if (typeof link.source !== "object") link.source = find(nodeById, link.source);
            if (typeof link.target !== "object") link.target = find(nodeById, link.target);
            count[link.source.index] = (count[link.source.index] || 0) + 1;
            count[link.target.index] = (count[link.target.index] || 0) + 1;
        }
        for(i1 = 0, bias = new Array(m); i1 < m; ++i1)link = links[i1], bias[i1] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
    }
    function initializeStrength() {
        if (!nodes) return;
        for(var i = 0, n = links.length; i < n; ++i)strengths[i] = +strength(links[i], i, links);
    }
    function initializeDistance() {
        if (!nodes) return;
        for(var i = 0, n = links.length; i < n; ++i)distances[i] = +distance(links[i], i, links);
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
    };
    force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
    };
    force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initializeStrength(), force) : strength;
    };
    force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initializeDistance(), force) : distance;
    };
    return force;
};

},{"./constant.js":"bqryx","./jiggle.js":"72pY7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60qew":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Quadtree = require("d3-quadtree");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _jiggleJs = require("./jiggle.js");
var _jiggleJsDefault = parcelHelpers.interopDefault(_jiggleJs);
var _simulationJs = require("./simulation.js");
exports.default = function() {
    var nodes, node1, random, alpha, strength1 = _constantJsDefault.default(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
        var i, n = nodes.length, tree = _d3Quadtree.quadtree(nodes, _simulationJs.x, _simulationJs.y).visitAfter(accumulate);
        for(alpha = _, i = 0; i < n; ++i)node1 = nodes[i], tree.visit(apply);
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for(i = 0; i < n; ++i)node = nodes[i], strengths[node.index] = +strength1(node, i, nodes);
    }
    function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;
        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
            for(x = y = i = 0; i < 4; ++i)if ((q = quad[i]) && (c = Math.abs(q.value))) strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            quad.x = x / weight;
            quad.y = y / weight;
        } else {
            q = quad;
            q.x = q.data.x;
            q.y = q.data.y;
            do strength += strengths[q.data.index];
            while (q = q.next)
        }
        quad.value = strength;
    }
    function apply(quad, x1, _, x2) {
        if (!quad.value) return true;
        var x = quad.x - node1.x, y = quad.y - node1.y, w = x2 - x1, l = x * x + y * y;
        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
            if (l < distanceMax2) {
                if (x === 0) x = _jiggleJsDefault.default(random), l += x * x;
                if (y === 0) y = _jiggleJsDefault.default(random), l += y * y;
                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
                node1.vx += x * quad.value * alpha / l;
                node1.vy += y * quad.value * alpha / l;
            }
            return true;
        } else if (quad.length || l >= distanceMax2) return;
        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node1 || quad.next) {
            if (x === 0) x = _jiggleJsDefault.default(random), l += x * x;
            if (y === 0) y = _jiggleJsDefault.default(random), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }
        do if (quad.data !== node1) {
            w = strengths[quad.data.index] * alpha / l;
            node1.vx += x * w;
            node1.vy += y * w;
        }
        while (quad = quad.next)
    }
    force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength1 = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : strength1;
    };
    force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
};

},{"d3-quadtree":"ep5gF","./constant.js":"bqryx","./jiggle.js":"72pY7","./simulation.js":"FYZiY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"FYZiY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "x", ()=>x
);
parcelHelpers.export(exports, "y", ()=>y
);
var _d3Dispatch = require("d3-dispatch");
var _d3Timer = require("d3-timer");
var _lcgJs = require("./lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);
function x(d) {
    return d.x;
}
function y(d) {
    return d.y;
}
var initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
exports.default = function(nodes) {
    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = _d3Timer.timer(step), event = _d3Dispatch.dispatch("tick", "end"), random = _lcgJsDefault.default();
    if (nodes == null) nodes = [];
    function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
            stepper.stop();
            event.call("end", simulation);
        }
    }
    function tick(iterations) {
        var i, n = nodes.length, node;
        if (iterations === undefined) iterations = 1;
        for(var k = 0; k < iterations; ++k){
            alpha += (alphaTarget - alpha) * alphaDecay;
            forces.forEach(function(force) {
                force(alpha);
            });
            for(i = 0; i < n; ++i){
                node = nodes[i];
                if (node.fx == null) node.x += node.vx *= velocityDecay;
                else node.x = node.fx, node.vx = 0;
                if (node.fy == null) node.y += node.vy *= velocityDecay;
                else node.y = node.fy, node.vy = 0;
            }
        }
        return simulation;
    }
    function initializeNodes() {
        for(var i = 0, n = nodes.length, node; i < n; ++i){
            node = nodes[i], node.index = i;
            if (node.fx != null) node.x = node.fx;
            if (node.fy != null) node.y = node.fy;
            if (isNaN(node.x) || isNaN(node.y)) {
                var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
                node.x = radius * Math.cos(angle);
                node.y = radius * Math.sin(angle);
            }
            if (isNaN(node.vx) || isNaN(node.vy)) node.vx = node.vy = 0;
        }
    }
    function initializeForce(force) {
        if (force.initialize) force.initialize(nodes, random);
        return force;
    }
    initializeNodes();
    return simulation = {
        tick: tick,
        restart: function() {
            return stepper.restart(step), simulation;
        },
        stop: function() {
            return stepper.stop(), simulation;
        },
        nodes: function(_) {
            return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },
        alpha: function(_) {
            return arguments.length ? (alpha = +_, simulation) : alpha;
        },
        alphaMin: function(_) {
            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },
        alphaDecay: function(_) {
            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },
        alphaTarget: function(_) {
            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },
        velocityDecay: function(_) {
            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },
        randomSource: function(_) {
            return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
        },
        force: function(name, _) {
            return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
        },
        find: function(x1, y1, radius) {
            var i = 0, n = nodes.length, dx, dy, d2, node, closest;
            if (radius == null) radius = Infinity;
            else radius *= radius;
            for(i = 0; i < n; ++i){
                node = nodes[i];
                dx = x1 - node.x;
                dy = y1 - node.y;
                d2 = dx * dx + dy * dy;
                if (d2 < radius) closest = node, radius = d2;
            }
            return closest;
        },
        on: function(name, _) {
            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
    };
};

},{"d3-dispatch":"5WtHO","d3-timer":"7TEss","./lcg.js":"6H1cG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6H1cG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const a = 1664525;
const c = 1013904223;
const m = 4294967296; // 2^32
exports.default = function() {
    let s = 1;
    return ()=>(s = (a * s + c) % m) / m
    ;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47INq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function(radius, x, y) {
    var nodes, strength = _constantJsDefault.default(0.1), strengths, radiuses;
    if (typeof radius !== "function") radius = _constantJsDefault.default(+radius);
    if (x == null) x = 0;
    if (y == null) y = 0;
    function force(alpha) {
        for(var i = 0, n = nodes.length; i < n; ++i){
            var node = nodes[i], dx = node.x - x || 0.000001, dy = node.y - y || 0.000001, r = Math.sqrt(dx * dx + dy * dy), k = (radiuses[i] - r) * strengths[i] * alpha / r;
            node.vx += dx * k;
            node.vy += dy * k;
        }
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        radiuses = new Array(n);
        for(i = 0; i < n; ++i){
            radiuses[i] = +radius(nodes[i], i, nodes);
            strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
        }
    }
    force.initialize = function(_) {
        nodes = _, initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : strength;
    };
    force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : radius;
    };
    force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
    };
    force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
    };
    return force;
};

},{"./constant.js":"bqryx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7Dub":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function(x) {
    var strength = _constantJsDefault.default(0.1), nodes, strengths, xz;
    if (typeof x !== "function") x = _constantJsDefault.default(x == null ? 0 : +x);
    function force(alpha) {
        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for(i = 0; i < n; ++i)strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
    force.initialize = function(_) {
        nodes = _;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : strength;
    };
    force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : x;
    };
    return force;
};

},{"./constant.js":"bqryx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84MbS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function(y) {
    var strength = _constantJsDefault.default(0.1), nodes, strengths, yz;
    if (typeof y !== "function") y = _constantJsDefault.default(y == null ? 0 : +y);
    function force(alpha) {
        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
    function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for(i = 0; i < n; ++i)strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
    force.initialize = function(_) {
        nodes = _;
        initialize();
    };
    force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : strength;
    };
    force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : _constantJsDefault.default(+_), initialize(), force) : y;
    };
    return force;
};

},{"./constant.js":"bqryx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4XOv2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatDefaultLocale", ()=>_defaultLocaleJsDefault.default
);
parcelHelpers.export(exports, "format", ()=>_defaultLocaleJs.format
);
parcelHelpers.export(exports, "formatPrefix", ()=>_defaultLocaleJs.formatPrefix
);
parcelHelpers.export(exports, "formatLocale", ()=>_localeJsDefault.default
);
parcelHelpers.export(exports, "formatSpecifier", ()=>_formatSpecifierJsDefault.default
);
parcelHelpers.export(exports, "FormatSpecifier", ()=>_formatSpecifierJs.FormatSpecifier
);
parcelHelpers.export(exports, "precisionFixed", ()=>_precisionFixedJsDefault.default
);
parcelHelpers.export(exports, "precisionPrefix", ()=>_precisionPrefixJsDefault.default
);
parcelHelpers.export(exports, "precisionRound", ()=>_precisionRoundJsDefault.default
);
var _defaultLocaleJs = require("./defaultLocale.js");
var _defaultLocaleJsDefault = parcelHelpers.interopDefault(_defaultLocaleJs);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var _formatSpecifierJs = require("./formatSpecifier.js");
var _formatSpecifierJsDefault = parcelHelpers.interopDefault(_formatSpecifierJs);
var _precisionFixedJs = require("./precisionFixed.js");
var _precisionFixedJsDefault = parcelHelpers.interopDefault(_precisionFixedJs);
var _precisionPrefixJs = require("./precisionPrefix.js");
var _precisionPrefixJsDefault = parcelHelpers.interopDefault(_precisionPrefixJs);
var _precisionRoundJs = require("./precisionRound.js");
var _precisionRoundJsDefault = parcelHelpers.interopDefault(_precisionRoundJs);

},{"./defaultLocale.js":"g4Ai7","./locale.js":"8sic5","./formatSpecifier.js":"4gfsY","./precisionFixed.js":"kCBOH","./precisionPrefix.js":"anfJX","./precisionRound.js":"djznD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4Ai7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "format", ()=>format
);
parcelHelpers.export(exports, "formatPrefix", ()=>formatPrefix
);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var locale;
var format;
var formatPrefix;
defaultLocale({
    thousands: ",",
    grouping: [
        3
    ],
    currency: [
        "$",
        ""
    ]
});
function defaultLocale(definition) {
    locale = _localeJsDefault.default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
}
exports.default = defaultLocale;

},{"./locale.js":"8sic5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8sic5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
var _formatGroupJs = require("./formatGroup.js");
var _formatGroupJsDefault = parcelHelpers.interopDefault(_formatGroupJs);
var _formatNumeralsJs = require("./formatNumerals.js");
var _formatNumeralsJsDefault = parcelHelpers.interopDefault(_formatNumeralsJs);
var _formatSpecifierJs = require("./formatSpecifier.js");
var _formatSpecifierJsDefault = parcelHelpers.interopDefault(_formatSpecifierJs);
var _formatTrimJs = require("./formatTrim.js");
var _formatTrimJsDefault = parcelHelpers.interopDefault(_formatTrimJs);
var _formatTypesJs = require("./formatTypes.js");
var _formatTypesJsDefault = parcelHelpers.interopDefault(_formatTypesJs);
var _formatPrefixAutoJs = require("./formatPrefixAuto.js");
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var map = Array.prototype.map, prefixes = [
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "µ",
    "m",
    "",
    "k",
    "M",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
];
exports.default = function(locale) {
    var group = locale.grouping === undefined || locale.thousands === undefined ? _identityJsDefault.default : _formatGroupJsDefault.default(map.call(locale.grouping, Number), locale.thousands + ""), currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "", currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "", decimal = locale.decimal === undefined ? "." : locale.decimal + "", numerals = locale.numerals === undefined ? _identityJsDefault.default : _formatNumeralsJsDefault.default(map.call(locale.numerals, String)), percent = locale.percent === undefined ? "%" : locale.percent + "", minus = locale.minus === undefined ? "−" : locale.minus + "", nan = locale.nan === undefined ? "NaN" : locale.nan + "";
    function newFormat(specifier) {
        specifier = _formatSpecifierJsDefault.default(specifier);
        var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";
        else if (!_formatTypesJsDefault.default[type]) precision === undefined && (precision = 12), trim = true, type = "g";
        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = _formatTypesJsDefault.default[type], maybeSuffix = /[defgprs%]/.test(type);
        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format(value) {
            var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
            if (type === "c") {
                valueSuffix = formatType(value) + valueSuffix;
                value = "";
            } else {
                value = +value;
                // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                var valueNegative = value < 0 || 1 / value < 0;
                // Perform the initial formatting.
                value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
                // Trim insignificant zeros.
                if (trim) value = _formatTrimJsDefault.default(value);
                // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
                // Compute the prefix and suffix.
                valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAutoJs.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
                // Break the formatted value into the integer “value” part that can be
                // grouped, and fractional or exponential “suffix” part that is not.
                if (maybeSuffix) {
                    i = -1, n = value.length;
                    while(++i < n)if (c = value.charCodeAt(i), 48 > c || c > 57) {
                        valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                        value = value.slice(0, i);
                        break;
                    }
                }
            }
            // If the fill character is not "0", grouping is applied before padding.
            if (comma && !zero) value = group(value, Infinity);
            // Compute the padding.
            var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
            // If the fill character is "0", grouping is applied after padding.
            if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
            // Reconstruct the final output based on the desired alignment.
            switch(align){
                case "<":
                    value = valuePrefix + value + valueSuffix + padding;
                    break;
                case "=":
                    value = valuePrefix + padding + value + valueSuffix;
                    break;
                case "^":
                    value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                    break;
                default:
                    value = padding + valuePrefix + value + valueSuffix;
                    break;
            }
            return numerals(value);
        }
        format.toString = function() {
            return specifier + "";
        };
        return format;
    }
    function formatPrefix(specifier, value1) {
        var f = newFormat((specifier = _formatSpecifierJsDefault.default(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(_exponentJsDefault.default(value1) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
        return function(value) {
            return f(k * value) + prefix;
        };
    }
    return {
        format: newFormat,
        formatPrefix: formatPrefix
    };
};

},{"./exponent.js":"7L05r","./formatGroup.js":"97wNI","./formatNumerals.js":"bnEku","./formatSpecifier.js":"4gfsY","./formatTrim.js":"cGiOx","./formatTypes.js":"aVp9c","./formatPrefixAuto.js":"lOwtK","./identity.js":"9nHXj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7L05r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
exports.default = function(x) {
    return x = _formatDecimalJs.formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
};

},{"./formatDecimal.js":"fkS16","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkS16":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
parcelHelpers.export(exports, "formatDecimalParts", ()=>formatDecimalParts
);
exports.default = function(x) {
    return Math.abs(x = Math.round(x)) >= 1000000000000000000000 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
};
function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);
    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97wNI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(grouping, thousands) {
    return function(value, width) {
        var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while(i > 0 && g > 0){
            if (length + g + 1 > width) g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width) break;
            g = grouping[j = (j + 1) % grouping.length];
        }
        return t.reverse().join(thousands);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnEku":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(numerals) {
    return function(value) {
        return value.replace(/[0-9]/g, function(i) {
            return numerals[+i];
        });
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gfsY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormatSpecifier", ()=>FormatSpecifier
);
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
    });
}
exports.default = formatSpecifier;
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGiOx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
exports.default = function(s) {
    out: for(var n = s.length, i = 1, i0 = -1, i1; i < n; ++i)switch(s[i]){
        case ".":
            i0 = i1 = i;
            break;
        case "0":
            if (i0 === 0) i0 = i;
            i1 = i;
            break;
        default:
            if (!+s[i]) break out;
            if (i0 > 0) i0 = 0;
            break;
    }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVp9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
var _formatDecimalJsDefault = parcelHelpers.interopDefault(_formatDecimalJs);
var _formatPrefixAutoJs = require("./formatPrefixAuto.js");
var _formatPrefixAutoJsDefault = parcelHelpers.interopDefault(_formatPrefixAutoJs);
var _formatRoundedJs = require("./formatRounded.js");
var _formatRoundedJsDefault = parcelHelpers.interopDefault(_formatRoundedJs);
exports.default = {
    "%": (x, p)=>(x * 100).toFixed(p)
    ,
    "b": (x)=>Math.round(x).toString(2)
    ,
    "c": (x)=>x + ""
    ,
    "d": _formatDecimalJsDefault.default,
    "e": (x, p)=>x.toExponential(p)
    ,
    "f": (x, p)=>x.toFixed(p)
    ,
    "g": (x, p)=>x.toPrecision(p)
    ,
    "o": (x)=>Math.round(x).toString(8)
    ,
    "p": (x, p)=>_formatRoundedJsDefault.default(x * 100, p)
    ,
    "r": _formatRoundedJsDefault.default,
    "s": _formatPrefixAutoJsDefault.default,
    "X": (x)=>Math.round(x).toString(16).toUpperCase()
    ,
    "x": (x)=>Math.round(x).toString(16)
};

},{"./formatDecimal.js":"fkS16","./formatPrefixAuto.js":"lOwtK","./formatRounded.js":"gq71u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lOwtK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prefixExponent", ()=>prefixExponent
);
var _formatDecimalJs = require("./formatDecimal.js");
var prefixExponent;
exports.default = function(x, p) {
    var d = _formatDecimalJs.formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + _formatDecimalJs.formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
};

},{"./formatDecimal.js":"fkS16","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gq71u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
exports.default = function(x, p) {
    var d = _formatDecimalJs.formatDecimalParts(x, p);
    if (!d) return x + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
};

},{"./formatDecimal.js":"fkS16","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nHXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return x;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCBOH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
exports.default = function(step) {
    return Math.max(0, -_exponentJsDefault.default(Math.abs(step)));
};

},{"./exponent.js":"7L05r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anfJX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
exports.default = function(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(_exponentJsDefault.default(value) / 3))) * 3 - _exponentJsDefault.default(Math.abs(step)));
};

},{"./exponent.js":"7L05r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djznD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
exports.default = function(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, _exponentJsDefault.default(max) - _exponentJsDefault.default(step)) + 1;
};

},{"./exponent.js":"7L05r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"01Z75":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "geoArea", ()=>_areaJsDefault.default
);
parcelHelpers.export(exports, "geoBounds", ()=>_boundsJsDefault.default
);
parcelHelpers.export(exports, "geoCentroid", ()=>_centroidJsDefault.default
);
parcelHelpers.export(exports, "geoCircle", ()=>_circleJsDefault.default
);
parcelHelpers.export(exports, "geoClipAntimeridian", ()=>_antimeridianJsDefault.default
);
parcelHelpers.export(exports, "geoClipCircle", ()=>_circleJsDefault1.default
);
parcelHelpers.export(exports, "geoClipExtent", ()=>_extentJsDefault.default
) // DEPRECATED! Use d3.geoIdentity().clipExtent(…).
;
parcelHelpers.export(exports, "geoClipRectangle", ()=>_rectangleJsDefault.default
);
parcelHelpers.export(exports, "geoContains", ()=>_containsJsDefault.default
);
parcelHelpers.export(exports, "geoDistance", ()=>_distanceJsDefault.default
);
parcelHelpers.export(exports, "geoGraticule", ()=>_graticuleJsDefault.default
);
parcelHelpers.export(exports, "geoGraticule10", ()=>_graticuleJs.graticule10
);
parcelHelpers.export(exports, "geoInterpolate", ()=>_interpolateJsDefault.default
);
parcelHelpers.export(exports, "geoLength", ()=>_lengthJsDefault.default
);
parcelHelpers.export(exports, "geoPath", ()=>_indexJsDefault.default
);
parcelHelpers.export(exports, "geoAlbers", ()=>_albersJsDefault.default
);
parcelHelpers.export(exports, "geoAlbersUsa", ()=>_albersUsaJsDefault.default
);
parcelHelpers.export(exports, "geoAzimuthalEqualArea", ()=>_azimuthalEqualAreaJsDefault.default
);
parcelHelpers.export(exports, "geoAzimuthalEqualAreaRaw", ()=>_azimuthalEqualAreaJs.azimuthalEqualAreaRaw
);
parcelHelpers.export(exports, "geoAzimuthalEquidistant", ()=>_azimuthalEquidistantJsDefault.default
);
parcelHelpers.export(exports, "geoAzimuthalEquidistantRaw", ()=>_azimuthalEquidistantJs.azimuthalEquidistantRaw
);
parcelHelpers.export(exports, "geoConicConformal", ()=>_conicConformalJsDefault.default
);
parcelHelpers.export(exports, "geoConicConformalRaw", ()=>_conicConformalJs.conicConformalRaw
);
parcelHelpers.export(exports, "geoConicEqualArea", ()=>_conicEqualAreaJsDefault.default
);
parcelHelpers.export(exports, "geoConicEqualAreaRaw", ()=>_conicEqualAreaJs.conicEqualAreaRaw
);
parcelHelpers.export(exports, "geoConicEquidistant", ()=>_conicEquidistantJsDefault.default
);
parcelHelpers.export(exports, "geoConicEquidistantRaw", ()=>_conicEquidistantJs.conicEquidistantRaw
);
parcelHelpers.export(exports, "geoEqualEarth", ()=>_equalEarthJsDefault.default
);
parcelHelpers.export(exports, "geoEqualEarthRaw", ()=>_equalEarthJs.equalEarthRaw
);
parcelHelpers.export(exports, "geoEquirectangular", ()=>_equirectangularJsDefault.default
);
parcelHelpers.export(exports, "geoEquirectangularRaw", ()=>_equirectangularJs.equirectangularRaw
);
parcelHelpers.export(exports, "geoGnomonic", ()=>_gnomonicJsDefault.default
);
parcelHelpers.export(exports, "geoGnomonicRaw", ()=>_gnomonicJs.gnomonicRaw
);
parcelHelpers.export(exports, "geoIdentity", ()=>_identityJsDefault.default
);
parcelHelpers.export(exports, "geoProjection", ()=>_indexJsDefault1.default
);
parcelHelpers.export(exports, "geoProjectionMutator", ()=>_indexJs1.projectionMutator
);
parcelHelpers.export(exports, "geoMercator", ()=>_mercatorJsDefault.default
);
parcelHelpers.export(exports, "geoMercatorRaw", ()=>_mercatorJs.mercatorRaw
);
parcelHelpers.export(exports, "geoNaturalEarth1", ()=>_naturalEarth1JsDefault.default
);
parcelHelpers.export(exports, "geoNaturalEarth1Raw", ()=>_naturalEarth1Js.naturalEarth1Raw
);
parcelHelpers.export(exports, "geoOrthographic", ()=>_orthographicJsDefault.default
);
parcelHelpers.export(exports, "geoOrthographicRaw", ()=>_orthographicJs.orthographicRaw
);
parcelHelpers.export(exports, "geoStereographic", ()=>_stereographicJsDefault.default
);
parcelHelpers.export(exports, "geoStereographicRaw", ()=>_stereographicJs.stereographicRaw
);
parcelHelpers.export(exports, "geoTransverseMercator", ()=>_transverseMercatorJsDefault.default
);
parcelHelpers.export(exports, "geoTransverseMercatorRaw", ()=>_transverseMercatorJs.transverseMercatorRaw
);
parcelHelpers.export(exports, "geoRotation", ()=>_rotationJsDefault.default
);
parcelHelpers.export(exports, "geoStream", ()=>_streamJsDefault.default
);
parcelHelpers.export(exports, "geoTransform", ()=>_transformJsDefault.default
);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _boundsJs = require("./bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _circleJs = require("./circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _antimeridianJs = require("./clip/antimeridian.js");
var _antimeridianJsDefault = parcelHelpers.interopDefault(_antimeridianJs);
var _circleJs1 = require("./clip/circle.js");
var _circleJsDefault1 = parcelHelpers.interopDefault(_circleJs1);
var _extentJs = require("./clip/extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _rectangleJs = require("./clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _distanceJs = require("./distance.js");
var _distanceJsDefault = parcelHelpers.interopDefault(_distanceJs);
var _graticuleJs = require("./graticule.js");
var _graticuleJsDefault = parcelHelpers.interopDefault(_graticuleJs);
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
var _lengthJs = require("./length.js");
var _lengthJsDefault = parcelHelpers.interopDefault(_lengthJs);
var _indexJs = require("./path/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _albersJs = require("./projection/albers.js");
var _albersJsDefault = parcelHelpers.interopDefault(_albersJs);
var _albersUsaJs = require("./projection/albersUsa.js");
var _albersUsaJsDefault = parcelHelpers.interopDefault(_albersUsaJs);
var _azimuthalEqualAreaJs = require("./projection/azimuthalEqualArea.js");
var _azimuthalEqualAreaJsDefault = parcelHelpers.interopDefault(_azimuthalEqualAreaJs);
var _azimuthalEquidistantJs = require("./projection/azimuthalEquidistant.js");
var _azimuthalEquidistantJsDefault = parcelHelpers.interopDefault(_azimuthalEquidistantJs);
var _conicConformalJs = require("./projection/conicConformal.js");
var _conicConformalJsDefault = parcelHelpers.interopDefault(_conicConformalJs);
var _conicEqualAreaJs = require("./projection/conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
var _conicEquidistantJs = require("./projection/conicEquidistant.js");
var _conicEquidistantJsDefault = parcelHelpers.interopDefault(_conicEquidistantJs);
var _equalEarthJs = require("./projection/equalEarth.js");
var _equalEarthJsDefault = parcelHelpers.interopDefault(_equalEarthJs);
var _equirectangularJs = require("./projection/equirectangular.js");
var _equirectangularJsDefault = parcelHelpers.interopDefault(_equirectangularJs);
var _gnomonicJs = require("./projection/gnomonic.js");
var _gnomonicJsDefault = parcelHelpers.interopDefault(_gnomonicJs);
var _identityJs = require("./projection/identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _indexJs1 = require("./projection/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _mercatorJs = require("./projection/mercator.js");
var _mercatorJsDefault = parcelHelpers.interopDefault(_mercatorJs);
var _naturalEarth1Js = require("./projection/naturalEarth1.js");
var _naturalEarth1JsDefault = parcelHelpers.interopDefault(_naturalEarth1Js);
var _orthographicJs = require("./projection/orthographic.js");
var _orthographicJsDefault = parcelHelpers.interopDefault(_orthographicJs);
var _stereographicJs = require("./projection/stereographic.js");
var _stereographicJsDefault = parcelHelpers.interopDefault(_stereographicJs);
var _transverseMercatorJs = require("./projection/transverseMercator.js");
var _transverseMercatorJsDefault = parcelHelpers.interopDefault(_transverseMercatorJs);
var _rotationJs = require("./rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);

},{"./area.js":"apOqO","./bounds.js":"jQdpz","./centroid.js":"l7phM","./circle.js":"b6BNx","./clip/antimeridian.js":"5Pn7h","./clip/circle.js":"6JGCr","./clip/extent.js":"5toB0","./clip/rectangle.js":"5auAi","./contains.js":"9cijq","./distance.js":"iRVFB","./graticule.js":"4rtBH","./interpolate.js":"30Ap4","./length.js":"6mhBA","./path/index.js":"lnhfi","./projection/albers.js":"bvQZA","./projection/albersUsa.js":"5OqWl","./projection/azimuthalEqualArea.js":"7sbiV","./projection/azimuthalEquidistant.js":"3Cc8n","./projection/conicConformal.js":"33sbR","./projection/conicEqualArea.js":"cfI84","./projection/conicEquidistant.js":"fOM7Z","./projection/equalEarth.js":"67lWy","./projection/equirectangular.js":"5qip6","./projection/gnomonic.js":"auBfP","./projection/identity.js":"g5yTX","./projection/index.js":"gSlbx","./projection/mercator.js":"eCRDH","./projection/naturalEarth1.js":"7E16T","./projection/orthographic.js":"1rxyV","./projection/stereographic.js":"lsi6D","./projection/transverseMercator.js":"6KvxX","./rotation.js":"g2pLL","./stream.js":"lpKxD","./transform.js":"AaiPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"apOqO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "areaRingSum", ()=>areaRingSum
);
parcelHelpers.export(exports, "areaStream", ()=>areaStream
);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var areaRingSum = new _d3Array.Adder();
// hello?
var areaSum = new _d3Array.Adder(), lambda00, phi00, lambda0, cosPhi0, sinPhi0;
var areaStream = {
    point: _noopJsDefault.default,
    lineStart: _noopJsDefault.default,
    lineEnd: _noopJsDefault.default,
    polygonStart: function() {
        areaRingSum = new _d3Array.Adder();
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
        var areaRing = +areaRingSum;
        areaSum.add(areaRing < 0 ? _mathJs.tau + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = _noopJsDefault.default;
    },
    sphere: function() {
        areaSum.add(_mathJs.tau);
    }
};
function areaRingStart() {
    areaStream.point = areaPointFirst;
}
function areaRingEnd() {
    areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    lambda00 = lambda, phi00 = phi;
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    lambda0 = lambda, cosPhi0 = _mathJs.cos(phi = phi / 2 + _mathJs.quarterPi), sinPhi0 = _mathJs.sin(phi);
}
function areaPoint(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    phi = phi / 2 + _mathJs.quarterPi; // half the angular distance from south pole
    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = _mathJs.cos(phi), sinPhi = _mathJs.sin(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * _mathJs.cos(adLambda), v = k * sdLambda * _mathJs.sin(adLambda);
    areaRingSum.add(_mathJs.atan2(v, u));
    // Advance the previous points.
    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}
exports.default = function(object) {
    areaSum = new _d3Array.Adder();
    _streamJsDefault.default(object, areaStream);
    return areaSum * 2;
};

},{"d3-array":"1yX2W","./math.js":"8TMeU","./noop.js":"bROOt","./stream.js":"lpKxD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8TMeU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "epsilon", ()=>epsilon
);
parcelHelpers.export(exports, "epsilon2", ()=>epsilon2
);
parcelHelpers.export(exports, "pi", ()=>pi
);
parcelHelpers.export(exports, "halfPi", ()=>halfPi
);
parcelHelpers.export(exports, "quarterPi", ()=>quarterPi
);
parcelHelpers.export(exports, "tau", ()=>tau
);
parcelHelpers.export(exports, "degrees", ()=>degrees
);
parcelHelpers.export(exports, "radians", ()=>radians
);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "atan", ()=>atan
);
parcelHelpers.export(exports, "atan2", ()=>atan2
);
parcelHelpers.export(exports, "cos", ()=>cos
);
parcelHelpers.export(exports, "ceil", ()=>ceil
);
parcelHelpers.export(exports, "exp", ()=>exp
);
parcelHelpers.export(exports, "floor", ()=>floor
);
parcelHelpers.export(exports, "hypot", ()=>hypot
);
parcelHelpers.export(exports, "log", ()=>log
);
parcelHelpers.export(exports, "pow", ()=>pow
);
parcelHelpers.export(exports, "sin", ()=>sin
);
parcelHelpers.export(exports, "sign", ()=>sign
);
parcelHelpers.export(exports, "sqrt", ()=>sqrt
);
parcelHelpers.export(exports, "tan", ()=>tan
);
parcelHelpers.export(exports, "acos", ()=>acos
);
parcelHelpers.export(exports, "asin", ()=>asin
);
parcelHelpers.export(exports, "haversin", ()=>haversin
);
var epsilon = 0.000001;
var epsilon2 = 0.000000000001;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var floor = Math.floor;
var hypot = Math.hypot;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}
function haversin(x) {
    return (x = sin(x / 2)) * x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bROOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function noop() {}
exports.default = noop;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpKxD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) streamGeometryType[geometry.type](geometry, stream);
}
var streamObjectType = {
    Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while(++i < n)streamGeometry(features[i].geometry, stream);
    }
};
var streamGeometryType = {
    Sphere: function(object, stream) {
        stream.sphere();
    },
    Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while(++i < n)streamGeometry(geometries[i], stream);
    }
};
function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while(++i < n)coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
}
function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while(++i < n)streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
}
exports.default = function(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) streamObjectType[object.type](object, stream);
    else streamGeometry(object, stream);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQdpz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _areaJs = require("./area.js");
var _cartesianJs = require("./cartesian.js");
var _mathJs = require("./math.js");
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var lambda0, phi0, lambda1, phi1, lambda2, lambda00, phi00, p0, deltaSum, ranges, range;
var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function() {
        boundsStream.point = boundsRingPoint;
        boundsStream.lineStart = boundsRingStart;
        boundsStream.lineEnd = boundsRingEnd;
        deltaSum = new _d3Array.Adder();
        _areaJs.areaStream.polygonStart();
    },
    polygonEnd: function() {
        _areaJs.areaStream.polygonEnd();
        boundsStream.point = boundsPoint;
        boundsStream.lineStart = boundsLineStart;
        boundsStream.lineEnd = boundsLineEnd;
        if (_areaJs.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > _mathJs.epsilon) phi1 = 90;
        else if (deltaSum < -_mathJs.epsilon) phi0 = -90;
        range[0] = lambda0, range[1] = lambda1;
    },
    sphere: function() {
        lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    }
};
function boundsPoint(lambda, phi) {
    ranges.push(range = [
        lambda0 = lambda,
        lambda1 = lambda
    ]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
}
function linePoint(lambda, phi) {
    var p = _cartesianJs.cartesian([
        lambda * _mathJs.radians,
        phi * _mathJs.radians
    ]);
    if (p0) {
        var normal = _cartesianJs.cartesianCross(p0, p), equatorial = [
            normal[1],
            -normal[0],
            0
        ], inflection = _cartesianJs.cartesianCross(equatorial, normal);
        _cartesianJs.cartesianNormalizeInPlace(inflection);
        inflection = _cartesianJs.spherical(inflection);
        var delta = lambda - lambda2, sign = delta > 0 ? 1 : -1, lambdai = inflection[0] * _mathJs.degrees * sign, phii, antimeridian = _mathJs.abs(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = inflection[1] * _mathJs.degrees;
            if (phii > phi1) phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = -inflection[1] * _mathJs.degrees;
            if (phii < phi0) phi0 = phii;
        } else {
            if (phi < phi0) phi0 = phi;
            if (phi > phi1) phi1 = phi;
        }
        if (antimeridian) {
            if (lambda < lambda2) {
                if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
            } else if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        } else if (lambda1 >= lambda0) {
            if (lambda < lambda0) lambda0 = lambda;
            if (lambda > lambda1) lambda1 = lambda;
        } else {
            if (lambda > lambda2) {
                if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
            } else if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
    } else ranges.push(range = [
        lambda0 = lambda,
        lambda1 = lambda
    ]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
    p0 = p, lambda2 = lambda;
}
function boundsLineStart() {
    boundsStream.point = linePoint;
}
function boundsLineEnd() {
    range[0] = lambda0, range[1] = lambda1;
    boundsStream.point = boundsPoint;
    p0 = null;
}
function boundsRingPoint(lambda, phi) {
    if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add(_mathJs.abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else lambda00 = lambda, phi00 = phi;
    _areaJs.areaStream.point(lambda, phi);
    linePoint(lambda, phi);
}
function boundsRingStart() {
    _areaJs.areaStream.lineStart();
}
function boundsRingEnd() {
    boundsRingPoint(lambda00, phi00);
    _areaJs.areaStream.lineEnd();
    if (_mathJs.abs(deltaSum) > _mathJs.epsilon) lambda0 = -(lambda1 = 180);
    range[0] = lambda0, range[1] = lambda1;
    p0 = null;
}
// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda01, lambda11) {
    return (lambda11 -= lambda01) < 0 ? lambda11 + 360 : lambda11;
}
function rangeCompare(a, b) {
    return a[0] - b[0];
}
function rangeContains(range1, x) {
    return range1[0] <= range1[1] ? range1[0] <= x && x <= range1[1] : x < range1[0] || range1[1] < x;
}
exports.default = function(feature) {
    var i, n, a, b, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
    ranges = [];
    _streamJsDefault.default(feature, boundsStream);
    // First, sort ranges by their minimum longitudes.
    if (n = ranges.length) {
        ranges.sort(rangeCompare);
        // Then, merge any ranges that overlap.
        for(i = 1, a = ranges[0], merged = [
            a
        ]; i < n; ++i){
            b = ranges[i];
            if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
                if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
            } else merged.push(a = b);
        }
        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for(deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i){
            b = merged[i];
            if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
        }
    }
    ranges = range = null;
    return lambda0 === Infinity || phi0 === Infinity ? [
        [
            NaN,
            NaN
        ],
        [
            NaN,
            NaN
        ]
    ] : [
        [
            lambda0,
            phi0
        ],
        [
            lambda1,
            phi1
        ]
    ];
};

},{"d3-array":"1yX2W","./area.js":"apOqO","./cartesian.js":"4Lw8W","./math.js":"8TMeU","./stream.js":"lpKxD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Lw8W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spherical", ()=>spherical
);
parcelHelpers.export(exports, "cartesian", ()=>cartesian
);
parcelHelpers.export(exports, "cartesianDot", ()=>cartesianDot
);
parcelHelpers.export(exports, "cartesianCross", ()=>cartesianCross
);
// TODO return a
parcelHelpers.export(exports, "cartesianAddInPlace", ()=>cartesianAddInPlace
);
parcelHelpers.export(exports, "cartesianScale", ()=>cartesianScale
);
// TODO return d
parcelHelpers.export(exports, "cartesianNormalizeInPlace", ()=>cartesianNormalizeInPlace
);
var _mathJs = require("./math.js");
function spherical(cartesian1) {
    return [
        _mathJs.atan2(cartesian1[1], cartesian1[0]),
        _mathJs.asin(cartesian1[2])
    ];
}
function cartesian(spherical1) {
    var lambda = spherical1[0], phi = spherical1[1], cosPhi = _mathJs.cos(phi);
    return [
        cosPhi * _mathJs.cos(lambda),
        cosPhi * _mathJs.sin(lambda),
        _mathJs.sin(phi)
    ];
}
function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0]
    ];
}
function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
    return [
        vector[0] * k,
        vector[1] * k,
        vector[2] * k
    ];
}
function cartesianNormalizeInPlace(d) {
    var l = _mathJs.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
}

},{"./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7phM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, x0, y0, z0; // previous point
var centroidStream = {
    sphere: _noopJsDefault.default,
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    }
};
// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    var cosPhi = _mathJs.cos(phi);
    centroidPointCartesian(cosPhi * _mathJs.cos(lambda), cosPhi * _mathJs.sin(lambda), _mathJs.sin(phi));
}
function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    var cosPhi = _mathJs.cos(phi);
    x0 = cosPhi * _mathJs.cos(lambda);
    y0 = cosPhi * _mathJs.sin(lambda);
    z0 = _mathJs.sin(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    var cosPhi = _mathJs.cos(phi), x = cosPhi * _mathJs.cos(lambda), y = cosPhi * _mathJs.sin(lambda), z = _mathJs.sin(phi), w = _mathJs.atan2(_mathJs.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
    centroidStream.point = centroidPoint;
}
// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
    centroidRingPoint(lambda00, phi00);
    centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
    lambda00 = lambda, phi00 = phi;
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    centroidStream.point = centroidRingPoint;
    var cosPhi = _mathJs.cos(phi);
    x0 = cosPhi * _mathJs.cos(lambda);
    y0 = cosPhi * _mathJs.sin(lambda);
    z0 = _mathJs.sin(phi);
    centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    var cosPhi = _mathJs.cos(phi), x = cosPhi * _mathJs.cos(lambda), y = cosPhi * _mathJs.sin(lambda), z = _mathJs.sin(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = _mathJs.hypot(cx, cy, cz), w = _mathJs.asin(m), v = m && -w / m; // area weight multiplier
    X2.add(v * cx);
    Y2.add(v * cy);
    Z2.add(v * cz);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
}
exports.default = function(object) {
    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
    X2 = new _d3Array.Adder();
    Y2 = new _d3Array.Adder();
    Z2 = new _d3Array.Adder();
    _streamJsDefault.default(object, centroidStream);
    var x = +X2, y = +Y2, z = +Z2, m = _mathJs.hypot(x, y, z);
    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
    if (m < _mathJs.epsilon2) {
        x = X1, y = Y1, z = Z1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if (W1 < _mathJs.epsilon) x = X0, y = Y0, z = Z0;
        m = _mathJs.hypot(x, y, z);
        // If the feature still has an undefined ccentroid, then return.
        if (m < _mathJs.epsilon2) return [
            NaN,
            NaN
        ];
    }
    return [
        _mathJs.atan2(y, x) * _mathJs.degrees,
        _mathJs.asin(z / m) * _mathJs.degrees
    ];
};

},{"d3-array":"1yX2W","./math.js":"8TMeU","./noop.js":"bROOt","./stream.js":"lpKxD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6BNx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Generates a circle centered at [0°, 0°], with a given radius and precision.
parcelHelpers.export(exports, "circleStream", ()=>circleStream
);
var _cartesianJs = require("./cartesian.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _mathJs = require("./math.js");
var _rotationJs = require("./rotation.js");
function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = _mathJs.cos(radius), sinRadius = _mathJs.sin(radius), step = direction * delta;
    if (t0 == null) {
        t0 = radius + direction * _mathJs.tau;
        t1 = radius - step / 2;
    } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _mathJs.tau;
    }
    for(var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step){
        point = _cartesianJs.spherical([
            cosRadius,
            -sinRadius * _mathJs.cos(t),
            -sinRadius * _mathJs.sin(t)
        ]);
        stream.point(point[0], point[1]);
    }
}
// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
    point = _cartesianJs.cartesian(point), point[0] -= cosRadius;
    _cartesianJs.cartesianNormalizeInPlace(point);
    var radius = _mathJs.acos(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + _mathJs.tau - _mathJs.epsilon) % _mathJs.tau;
}
exports.default = function() {
    var center = _constantJsDefault.default([
        0,
        0
    ]), radius = _constantJsDefault.default(90), precision = _constantJsDefault.default(6), ring, rotate, stream = {
        point: point
    };
    function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= _mathJs.degrees, x[1] *= _mathJs.degrees;
    }
    function circle() {
        var c = center.apply(this, arguments), r = radius.apply(this, arguments) * _mathJs.radians, p = precision.apply(this, arguments) * _mathJs.radians;
        ring = [];
        rotate = _rotationJs.rotateRadians(-c[0] * _mathJs.radians, -c[1] * _mathJs.radians, 0).invert;
        circleStream(stream, r, p, 1);
        c = {
            type: "Polygon",
            coordinates: [
                ring
            ]
        };
        ring = rotate = null;
        return c;
    }
    circle.center = function(_) {
        return arguments.length ? (center = typeof _ === "function" ? _ : _constantJsDefault.default([
            +_[0],
            +_[1]
        ]), circle) : center;
    };
    circle.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), circle) : radius;
    };
    circle.precision = function(_) {
        return arguments.length ? (precision = typeof _ === "function" ? _ : _constantJsDefault.default(+_), circle) : precision;
    };
    return circle;
};

},{"./cartesian.js":"4Lw8W","./constant.js":"1uZ9u","./math.js":"8TMeU","./rotation.js":"g2pLL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1uZ9u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2pLL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateRadians", ()=>rotateRadians
);
var _composeJs = require("./compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _mathJs = require("./math.js");
function rotationIdentity(lambda, phi) {
    return [
        _mathJs.abs(lambda) > _mathJs.pi ? lambda + Math.round(-lambda / _mathJs.tau) * _mathJs.tau : lambda,
        phi
    ];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= _mathJs.tau) ? deltaPhi || deltaGamma ? _composeJsDefault.default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
        return lambda += deltaLambda, [
            lambda > _mathJs.pi ? lambda - _mathJs.tau : lambda < -_mathJs.pi ? lambda + _mathJs.tau : lambda,
            phi
        ];
    };
}
function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = _mathJs.cos(deltaPhi), sinDeltaPhi = _mathJs.sin(deltaPhi), cosDeltaGamma = _mathJs.cos(deltaGamma), sinDeltaGamma = _mathJs.sin(deltaGamma);
    function rotation(lambda, phi) {
        var cosPhi = _mathJs.cos(phi), x = _mathJs.cos(lambda) * cosPhi, y = _mathJs.sin(lambda) * cosPhi, z = _mathJs.sin(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
            _mathJs.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
            _mathJs.asin(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
    }
    rotation.invert = function(lambda, phi) {
        var cosPhi = _mathJs.cos(phi), x = _mathJs.cos(lambda) * cosPhi, y = _mathJs.sin(lambda) * cosPhi, z = _mathJs.sin(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
            _mathJs.atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
            _mathJs.asin(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
    };
    return rotation;
}
exports.default = function(rotate) {
    rotate = rotateRadians(rotate[0] * _mathJs.radians, rotate[1] * _mathJs.radians, rotate.length > 2 ? rotate[2] * _mathJs.radians : 0);
    function forward(coordinates) {
        coordinates = rotate(coordinates[0] * _mathJs.radians, coordinates[1] * _mathJs.radians);
        return coordinates[0] *= _mathJs.degrees, coordinates[1] *= _mathJs.degrees, coordinates;
    }
    forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * _mathJs.radians, coordinates[1] * _mathJs.radians);
        return coordinates[0] *= _mathJs.degrees, coordinates[1] *= _mathJs.degrees, coordinates;
    };
    return forward;
};

},{"./compose.js":"lJD5n","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJD5n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Pn7h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
exports.default = _indexJsDefault.default(function() {
    return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [
    -_mathJs.pi,
    -_mathJs.halfPi
]);
// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
    var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean; // no intersections
    return {
        lineStart: function() {
            stream.lineStart();
            clean = 1;
        },
        point: function(lambda1, phi1) {
            var sign1 = lambda1 > 0 ? _mathJs.pi : -_mathJs.pi, delta = _mathJs.abs(lambda1 - lambda0);
            if (_mathJs.abs(delta - _mathJs.pi) < _mathJs.epsilon) {
                stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _mathJs.halfPi : -_mathJs.halfPi);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                stream.point(lambda1, phi0);
                clean = 0;
            } else if (sign0 !== sign1 && delta >= _mathJs.pi) {
                if (_mathJs.abs(lambda0 - sign0) < _mathJs.epsilon) lambda0 -= sign0 * _mathJs.epsilon; // handle degeneracies
                if (_mathJs.abs(lambda1 - sign1) < _mathJs.epsilon) lambda1 -= sign1 * _mathJs.epsilon;
                phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                clean = 0;
            }
            stream.point(lambda0 = lambda1, phi0 = phi1);
            sign0 = sign1;
        },
        lineEnd: function() {
            stream.lineEnd();
            lambda0 = phi0 = NaN;
        },
        clean: function() {
            return 2 - clean; // if intersections, rejoin first and last segments
        }
    };
}
function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0, cosPhi1, sinLambda0Lambda1 = _mathJs.sin(lambda0 - lambda1);
    return _mathJs.abs(sinLambda0Lambda1) > _mathJs.epsilon ? _mathJs.atan((_mathJs.sin(phi0) * (cosPhi1 = _mathJs.cos(phi1)) * _mathJs.sin(lambda1) - _mathJs.sin(phi1) * (cosPhi0 = _mathJs.cos(phi0)) * _mathJs.sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
        phi = direction * _mathJs.halfPi;
        stream.point(-_mathJs.pi, phi);
        stream.point(0, phi);
        stream.point(_mathJs.pi, phi);
        stream.point(_mathJs.pi, 0);
        stream.point(_mathJs.pi, -phi);
        stream.point(0, -phi);
        stream.point(-_mathJs.pi, -phi);
        stream.point(-_mathJs.pi, 0);
        stream.point(-_mathJs.pi, phi);
    } else if (_mathJs.abs(from[0] - to[0]) > _mathJs.epsilon) {
        var lambda = from[0] < to[0] ? _mathJs.pi : -_mathJs.pi;
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
    } else stream.point(to[0], to[1]);
}

},{"./index.js":"bCtcN","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bCtcN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _rejoinJs = require("./rejoin.js");
var _rejoinJsDefault = parcelHelpers.interopDefault(_rejoinJs);
var _mathJs = require("../math.js");
var _polygonContainsJs = require("../polygonContains.js");
var _polygonContainsJsDefault = parcelHelpers.interopDefault(_polygonContainsJs);
var _d3Array = require("d3-array");
exports.default = function(pointVisible, clipLine, interpolate, start) {
    return function(sink) {
        var line = clipLine(sink), ringBuffer = _bufferJsDefault.default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
        var clip = {
            point: point1,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                clip.point = pointRing;
                clip.lineStart = ringStart;
                clip.lineEnd = ringEnd;
                segments = [];
                polygon = [];
            },
            polygonEnd: function() {
                clip.point = point1;
                clip.lineStart = lineStart;
                clip.lineEnd = lineEnd;
                segments = _d3Array.merge(segments);
                var startInside = _polygonContainsJsDefault.default(polygon, start);
                if (segments.length) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    _rejoinJsDefault.default(segments, compareIntersection, startInside, interpolate, sink);
                } else if (startInside) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                }
                if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                segments = polygon = null;
            },
            sphere: function() {
                sink.polygonStart();
                sink.lineStart();
                interpolate(null, null, 1, sink);
                sink.lineEnd();
                sink.polygonEnd();
            }
        };
        function point1(lambda, phi) {
            if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }
        function pointLine(lambda, phi) {
            line.point(lambda, phi);
        }
        function lineStart() {
            clip.point = pointLine;
            line.lineStart();
        }
        function lineEnd() {
            clip.point = point1;
            line.lineEnd();
        }
        function pointRing(lambda, phi) {
            ring.push([
                lambda,
                phi
            ]);
            ringSink.point(lambda, phi);
        }
        function ringStart() {
            ringSink.lineStart();
            ring = [];
        }
        function ringEnd() {
            pointRing(ring[0][0], ring[0][1]);
            ringSink.lineEnd();
            var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
            ring.pop();
            polygon.push(ring);
            ring = null;
            if (!n) return;
            // No intersections.
            if (clean & 1) {
                segment = ringSegments[0];
                if ((m = segment.length - 1) > 0) {
                    if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    for(i = 0; i < m; ++i)sink.point((point = segment[i])[0], point[1]);
                    sink.lineEnd();
                }
                return;
            }
            // Rejoin connected segments.
            // TODO reuse ringBuffer.rejoin()?
            if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
            segments.push(ringSegments.filter(validSegment));
        }
        return clip;
    };
};
function validSegment(segment) {
    return segment.length > 1;
}
// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - _mathJs.halfPi - _mathJs.epsilon : _mathJs.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _mathJs.halfPi - _mathJs.epsilon : _mathJs.halfPi - b[1]);
}

},{"./buffer.js":"6MwC2","./rejoin.js":"4Cpqb","../math.js":"8TMeU","../polygonContains.js":"k8u1G","d3-array":"1yX2W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6MwC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
exports.default = function() {
    var lines = [], line;
    return {
        point: function(x, y, m) {
            line.push([
                x,
                y,
                m
            ]);
        },
        lineStart: function() {
            lines.push(line = []);
        },
        lineEnd: _noopJsDefault.default,
        rejoin: function() {
            if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
            var result = lines;
            lines = [];
            line = null;
            return result;
        }
    };
};

},{"../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Cpqb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pointEqualJs = require("../pointEqual.js");
var _pointEqualJsDefault = parcelHelpers.interopDefault(_pointEqualJs);
var _mathJs = require("../math.js");
function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection
    this.e = entry; // is an entry?
    this.v = false; // visited
    this.n = this.p = null; // next & previous
}
// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
exports.default = function(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [], clip = [], i, n1;
    segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;
        if (_pointEqualJsDefault.default(p0, p1)) {
            if (!p0[2] && !p1[2]) {
                stream.lineStart();
                for(i = 0; i < n; ++i)stream.point((p0 = segment[i])[0], p0[1]);
                stream.lineEnd();
                return;
            }
            // handle degenerate cases by moving the point
            p1[0] += 2 * _mathJs.epsilon;
        }
        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    link(subject);
    link(clip);
    for(i = 0, n1 = clip.length; i < n1; ++i)clip[i].e = startInside = !startInside;
    var start = subject[0], points, point;
    while(true){
        // Find first unvisited intersection.
        var current = start, isSubject = true;
        while(current.v)if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
            current.v = current.o.v = true;
            if (current.e) {
                if (isSubject) for(i = 0, n1 = points.length; i < n1; ++i)stream.point((point = points[i])[0], point[1]);
                else interpolate(current.x, current.n.x, 1, stream);
                current = current.n;
            } else {
                if (isSubject) {
                    points = current.p.z;
                    for(i = points.length - 1; i >= 0; --i)stream.point((point = points[i])[0], point[1]);
                } else interpolate(current.x, current.p.x, -1, stream);
                current = current.p;
            }
            current = current.o;
            points = current.z;
            isSubject = !isSubject;
        }while (!current.v)
        stream.lineEnd();
    }
};
function link(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while(++i < n){
        a.n = b = array[i];
        b.p = a;
        a = b;
    }
    a.n = b = array[0];
    b.p = a;
}

},{"../pointEqual.js":"5FEbl","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FEbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("./math.js");
exports.default = function(a, b) {
    return _mathJs.abs(a[0] - b[0]) < _mathJs.epsilon && _mathJs.abs(a[1] - b[1]) < _mathJs.epsilon;
};

},{"./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8u1G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _cartesianJs = require("./cartesian.js");
var _mathJs = require("./math.js");
function longitude(point) {
    return _mathJs.abs(point[0]) <= _mathJs.pi ? point[0] : _mathJs.sign(point[0]) * ((_mathJs.abs(point[0]) + _mathJs.pi) % _mathJs.tau - _mathJs.pi);
}
exports.default = function(polygon, point) {
    var lambda = longitude(point), phi = point[1], sinPhi = _mathJs.sin(phi), normal = [
        _mathJs.sin(lambda),
        -_mathJs.cos(lambda),
        0
    ], angle = 0, winding = 0;
    var sum = new _d3Array.Adder();
    if (sinPhi === 1) phi = _mathJs.halfPi + _mathJs.epsilon;
    else if (sinPhi === -1) phi = -_mathJs.halfPi - _mathJs.epsilon;
    for(var i = 0, n = polygon.length; i < n; ++i){
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring, m, point0 = ring[m - 1], lambda0 = longitude(point0), phi0 = point0[1] / 2 + _mathJs.quarterPi, sinPhi0 = _mathJs.sin(phi0), cosPhi0 = _mathJs.cos(phi0);
        for(var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1){
            var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + _mathJs.quarterPi, sinPhi1 = _mathJs.sin(phi1), cosPhi1 = _mathJs.cos(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > _mathJs.pi, k = sinPhi0 * sinPhi1;
            sum.add(_mathJs.atan2(k * sign * _mathJs.sin(absDelta), cosPhi0 * cosPhi1 + k * _mathJs.cos(absDelta)));
            angle += antimeridian ? delta + sign * _mathJs.tau : delta;
            // Are the longitudes either side of the point’s meridian (lambda),
            // and are the latitudes smaller than the parallel (phi)?
            if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                var arc = _cartesianJs.cartesianCross(_cartesianJs.cartesian(point0), _cartesianJs.cartesian(point1));
                _cartesianJs.cartesianNormalizeInPlace(arc);
                var intersection = _cartesianJs.cartesianCross(normal, arc);
                _cartesianJs.cartesianNormalizeInPlace(intersection);
                var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * _mathJs.asin(intersection[2]);
                if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
        }
    }
    // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.
    return (angle < -_mathJs.epsilon || angle < _mathJs.epsilon && sum < -_mathJs.epsilon2) ^ winding & 1;
};

},{"d3-array":"1yX2W","./cartesian.js":"4Lw8W","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6JGCr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cartesianJs = require("../cartesian.js");
var _circleJs = require("../circle.js");
var _mathJs = require("../math.js");
var _pointEqualJs = require("../pointEqual.js");
var _pointEqualJsDefault = parcelHelpers.interopDefault(_pointEqualJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
exports.default = function(radius) {
    var cr = _mathJs.cos(radius), delta1 = 6 * _mathJs.radians, smallRadius = cr > 0, notHemisphere = _mathJs.abs(cr) > _mathJs.epsilon; // TODO optimise for this common case
    function interpolate(from, to, direction, stream) {
        _circleJs.circleStream(stream, radius, delta1, direction, from, to);
    }
    function visible(lambda, phi) {
        return _mathJs.cos(lambda) * _mathJs.cos(phi) > cr;
    }
    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    function clipLine(stream) {
        var point0, c0, v0, v00, clean; // no intersections
        return {
            lineStart: function() {
                v00 = v0 = false;
                clean = 1;
            },
            point: function(lambda, phi) {
                var point1 = [
                    lambda,
                    phi
                ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code1(lambda, phi) : v ? code1(lambda + (lambda < 0 ? _mathJs.pi : -_mathJs.pi), phi) : 0;
                if (!point0 && (v00 = v0 = v)) stream.lineStart();
                if (v !== v0) {
                    point2 = intersect(point0, point1);
                    if (!point2 || _pointEqualJsDefault.default(point0, point2) || _pointEqualJsDefault.default(point1, point2)) point1[2] = 1;
                }
                if (v !== v0) {
                    clean = 0;
                    if (v) {
                        // outside going in
                        stream.lineStart();
                        point2 = intersect(point1, point0);
                        stream.point(point2[0], point2[1]);
                    } else {
                        // inside going out
                        point2 = intersect(point0, point1);
                        stream.point(point2[0], point2[1], 2);
                        stream.lineEnd();
                    }
                    point0 = point2;
                } else if (notHemisphere && point0 && smallRadius ^ v) {
                    var t;
                    // If the codes for two points are different, or are both zero,
                    // and there this segment intersects with the small circle.
                    if (!(c & c0) && (t = intersect(point1, point0, true))) {
                        clean = 0;
                        if (smallRadius) {
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1]);
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                        } else {
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1], 3);
                        }
                    }
                }
                if (v && (!point0 || !_pointEqualJsDefault.default(point0, point1))) stream.point(point1[0], point1[1]);
                point0 = point1, v0 = v, c0 = c;
            },
            lineEnd: function() {
                if (v0) stream.lineEnd();
                point0 = null;
            },
            // Rejoin first and last segments if there were intersections and the first
            // and last points were visible.
            clean: function() {
                return clean | (v00 && v0) << 1;
            }
        };
    }
    // Intersects the great circle between a and b with the clip circle.
    function intersect(a, b, two) {
        var pa = _cartesianJs.cartesian(a), pb = _cartesianJs.cartesian(b);
        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [
            1,
            0,
            0
        ], n2 = _cartesianJs.cartesianCross(pa, pb), n2n2 = _cartesianJs.cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
        // Two polar points.
        if (!determinant) return !two && a;
        var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = _cartesianJs.cartesianCross(n1, n2), A = _cartesianJs.cartesianScale(n1, c1), B = _cartesianJs.cartesianScale(n2, c2);
        _cartesianJs.cartesianAddInPlace(A, B);
        // Solve |p(t)|^2 = 1.
        var u = n1xn2, w = _cartesianJs.cartesianDot(A, u), uu = _cartesianJs.cartesianDot(u, u), t2 = w * w - uu * (_cartesianJs.cartesianDot(A, A) - 1);
        if (t2 < 0) return;
        var t = _mathJs.sqrt(t2), q = _cartesianJs.cartesianScale(u, (-w - t) / uu);
        _cartesianJs.cartesianAddInPlace(q, A);
        q = _cartesianJs.spherical(q);
        if (!two) return q;
        // Two intersection points.
        var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
        var delta = lambda1 - lambda0, polar = _mathJs.abs(delta - _mathJs.pi) < _mathJs.epsilon, meridian = polar || delta < _mathJs.epsilon;
        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
        // Check that the first point is between a and b.
        if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (_mathJs.abs(q[0] - lambda0) < _mathJs.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _mathJs.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
            var q1 = _cartesianJs.cartesianScale(u, (-w + t) / uu);
            _cartesianJs.cartesianAddInPlace(q1, A);
            return [
                q,
                _cartesianJs.spherical(q1)
            ];
        }
    }
    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    function code1(lambda, phi) {
        var r = smallRadius ? radius : _mathJs.pi - radius, code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
    }
    return _indexJsDefault.default(visible, clipLine, interpolate, smallRadius ? [
        0,
        -radius
    ] : [
        -_mathJs.pi,
        radius - _mathJs.pi
    ]);
};

},{"../cartesian.js":"4Lw8W","../circle.js":"b6BNx","../math.js":"8TMeU","../pointEqual.js":"5FEbl","./index.js":"bCtcN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5toB0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rectangleJs = require("./rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
exports.default = function() {
    var x0 = 0, y0 = 0, x1 = 960, y1 = 500, cache, cacheStream, clip;
    return clip = {
        stream: function(stream) {
            return cache && cacheStream === stream ? cache : cache = _rectangleJsDefault.default(x0, y0, x1, y1)(cacheStream = stream);
        },
        extent: function(_) {
            return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [
                [
                    x0,
                    y0
                ],
                [
                    x1,
                    y1
                ]
            ];
        }
    };
};

},{"./rectangle.js":"5auAi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5auAi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _rejoinJs = require("./rejoin.js");
var _rejoinJsDefault = parcelHelpers.interopDefault(_rejoinJs);
var _d3Array = require("d3-array");
var clipMax = 1000000000, clipMin = -clipMax;
function clipRectangle(x0, y0, x1, y1) {
    function visible1(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }
    function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1)
        else stream.point(to[0], to[1]);
    }
    function corner(p, direction) {
        return _mathJs.abs(p[0] - x0) < _mathJs.epsilon ? direction > 0 ? 0 : 3 : _mathJs.abs(p[0] - x1) < _mathJs.epsilon ? direction > 0 ? 2 : 1 : _mathJs.abs(p[1] - y0) < _mathJs.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }
    function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
    }
    function comparePoint(a, b) {
        var ca = corner(a, 1), cb = corner(b, 1);
        return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    return function(stream) {
        var activeStream = stream, bufferStream = _bufferJsDefault.default(), segments, polygon, ring1, x__, y__, v__, x_, y_, v_, first, clean;
        var clipStream = {
            point: point1,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: polygonStart,
            polygonEnd: polygonEnd
        };
        function point1(x, y) {
            if (visible1(x, y)) activeStream.point(x, y);
        }
        function polygonInside() {
            var winding = 0;
            for(var i = 0, n = polygon.length; i < n; ++i)for(var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j){
                a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                if (a1 <= y1) {
                    if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                } else if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
            return winding;
        }
        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
            activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }
        function polygonEnd() {
            var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = _d3Array.merge(segments)).length;
            if (cleanInside || visible) {
                stream.polygonStart();
                if (cleanInside) {
                    stream.lineStart();
                    interpolate(null, null, 1, stream);
                    stream.lineEnd();
                }
                if (visible) _rejoinJsDefault.default(segments, compareIntersection, startInside, interpolate, stream);
                stream.polygonEnd();
            }
            activeStream = stream, segments = polygon = ring1 = null;
        }
        function lineStart() {
            clipStream.point = linePoint;
            if (polygon) polygon.push(ring1 = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN;
        }
        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
            if (segments) {
                linePoint(x__, y__);
                if (v__ && v_) bufferStream.rejoin();
                segments.push(bufferStream.result());
            }
            clipStream.point = point1;
            if (v_) activeStream.lineEnd();
        }
        function linePoint(x, y) {
            var v = visible1(x, y);
            if (polygon) ring1.push([
                x,
                y
            ]);
            if (first) {
                x__ = x, y__ = y, v__ = v;
                first = false;
                if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                }
            } else if (v && v_) activeStream.point(x, y);
            else {
                var a = [
                    x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                    y_ = Math.max(clipMin, Math.min(clipMax, y_))
                ], b = [
                    x = Math.max(clipMin, Math.min(clipMax, x)),
                    y = Math.max(clipMin, Math.min(clipMax, y))
                ];
                if (_lineJsDefault.default(a, b, x0, y0, x1, y1)) {
                    if (!v_) {
                        activeStream.lineStart();
                        activeStream.point(a[0], a[1]);
                    }
                    activeStream.point(b[0], b[1]);
                    if (!v) activeStream.lineEnd();
                    clean = false;
                } else if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                    clean = false;
                }
            }
            x_ = x, y_ = y, v_ = v;
        }
        return clipStream;
    };
}
exports.default = clipRectangle;

},{"../math.js":"8TMeU","./buffer.js":"6MwC2","./line.js":"kBMdG","./rejoin.js":"4Cpqb","d3-array":"1yX2W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBMdG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b, x0, y0, x1, y1) {
    var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    }
    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    }
    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    }
    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
    } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
    }
    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cijq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _polygonContainsJs = require("./polygonContains.js");
var _polygonContainsJsDefault = parcelHelpers.interopDefault(_polygonContainsJs);
var _distanceJs = require("./distance.js");
var _distanceJsDefault = parcelHelpers.interopDefault(_distanceJs);
var _mathJs = require("./math.js");
var containsObjectType = {
    Feature: function(object, point) {
        return containsGeometry(object.geometry, point);
    },
    FeatureCollection: function(object, point) {
        var features = object.features, i = -1, n = features.length;
        while(++i < n)if (containsGeometry(features[i].geometry, point)) return true;
        return false;
    }
};
var containsGeometryType = {
    Sphere: function() {
        return true;
    },
    Point: function(object, point) {
        return containsPoint(object.coordinates, point);
    },
    MultiPoint: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)if (containsPoint(coordinates[i], point)) return true;
        return false;
    },
    LineString: function(object, point) {
        return containsLine(object.coordinates, point);
    },
    MultiLineString: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)if (containsLine(coordinates[i], point)) return true;
        return false;
    },
    Polygon: function(object, point) {
        return containsPolygon(object.coordinates, point);
    },
    MultiPolygon: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)if (containsPolygon(coordinates[i], point)) return true;
        return false;
    },
    GeometryCollection: function(object, point) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while(++i < n)if (containsGeometry(geometries[i], point)) return true;
        return false;
    }
};
function containsGeometry(geometry, point) {
    return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}
function containsPoint(coordinates, point) {
    return _distanceJsDefault.default(coordinates, point) === 0;
}
function containsLine(coordinates, point) {
    var ao, bo, ab;
    for(var i = 0, n = coordinates.length; i < n; i++){
        bo = _distanceJsDefault.default(coordinates[i], point);
        if (bo === 0) return true;
        if (i > 0) {
            ab = _distanceJsDefault.default(coordinates[i], coordinates[i - 1]);
            if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < _mathJs.epsilon2 * ab) return true;
        }
        ao = bo;
    }
    return false;
}
function containsPolygon(coordinates, point) {
    return !!_polygonContainsJsDefault.default(coordinates.map(ringRadians), pointRadians(point));
}
function ringRadians(ring) {
    return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point) {
    return [
        point[0] * _mathJs.radians,
        point[1] * _mathJs.radians
    ];
}
exports.default = function(object, point) {
    return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
};

},{"./polygonContains.js":"k8u1G","./distance.js":"iRVFB","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRVFB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lengthJs = require("./length.js");
var _lengthJsDefault = parcelHelpers.interopDefault(_lengthJs);
var coordinates = [
    null,
    null
], object = {
    type: "LineString",
    coordinates: coordinates
};
exports.default = function(a, b) {
    coordinates[0] = a;
    coordinates[1] = b;
    return _lengthJsDefault.default(object);
};

},{"./length.js":"6mhBA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mhBA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var lengthSum, lambda0, sinPhi0, cosPhi0;
var lengthStream = {
    sphere: _noopJsDefault.default,
    point: _noopJsDefault.default,
    lineStart: lengthLineStart,
    lineEnd: _noopJsDefault.default,
    polygonStart: _noopJsDefault.default,
    polygonEnd: _noopJsDefault.default
};
function lengthLineStart() {
    lengthStream.point = lengthPointFirst;
    lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
    lengthStream.point = lengthStream.lineEnd = _noopJsDefault.default;
}
function lengthPointFirst(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    lambda0 = lambda, sinPhi0 = _mathJs.sin(phi), cosPhi0 = _mathJs.cos(phi);
    lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi) {
    lambda *= _mathJs.radians, phi *= _mathJs.radians;
    var sinPhi = _mathJs.sin(phi), cosPhi = _mathJs.cos(phi), delta = _mathJs.abs(lambda - lambda0), cosDelta = _mathJs.cos(delta), sinDelta = _mathJs.sin(delta), x = cosPhi * sinDelta, y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta, z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
    lengthSum.add(_mathJs.atan2(_mathJs.sqrt(x * x + y * y), z));
    lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}
exports.default = function(object) {
    lengthSum = new _d3Array.Adder();
    _streamJsDefault.default(object, lengthStream);
    return +lengthSum;
};

},{"d3-array":"1yX2W","./math.js":"8TMeU","./noop.js":"bROOt","./stream.js":"lpKxD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rtBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "graticule10", ()=>graticule10
);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
function graticuleX(y0, y1, dy) {
    var y2 = _d3Array.range(y0, y1 - _mathJs.epsilon, dy).concat(y1);
    return function(x) {
        return y2.map(function(y) {
            return [
                x,
                y
            ];
        });
    };
}
function graticuleY(x0, x1, dx) {
    var x2 = _d3Array.range(x0, x1 - _mathJs.epsilon, dx).concat(x1);
    return function(y) {
        return x2.map(function(x) {
            return [
                x,
                y
            ];
        });
    };
}
function graticule() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x3, y3, X, Y, precision = 2.5;
    function graticule1() {
        return {
            type: "MultiLineString",
            coordinates: lines()
        };
    }
    function lines() {
        return _d3Array.range(_mathJs.ceil(X0 / DX) * DX, X1, DX).map(X).concat(_d3Array.range(_mathJs.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(_d3Array.range(_mathJs.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
            return _mathJs.abs(x % DX) > _mathJs.epsilon;
        }).map(x3)).concat(_d3Array.range(_mathJs.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
            return _mathJs.abs(y % DY) > _mathJs.epsilon;
        }).map(y3));
    }
    graticule1.lines = function() {
        return lines().map(function(coordinates) {
            return {
                type: "LineString",
                coordinates: coordinates
            };
        });
    };
    graticule1.outline = function() {
        return {
            type: "Polygon",
            coordinates: [
                X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))
            ]
        };
    };
    graticule1.extent = function(_) {
        if (!arguments.length) return graticule1.extentMinor();
        return graticule1.extentMajor(_).extentMinor(_);
    };
    graticule1.extentMajor = function(_) {
        if (!arguments.length) return [
            [
                X0,
                Y0
            ],
            [
                X1,
                Y1
            ]
        ];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule1.precision(precision);
    };
    graticule1.extentMinor = function(_) {
        if (!arguments.length) return [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule1.precision(precision);
    };
    graticule1.step = function(_) {
        if (!arguments.length) return graticule1.stepMinor();
        return graticule1.stepMajor(_).stepMinor(_);
    };
    graticule1.stepMajor = function(_) {
        if (!arguments.length) return [
            DX,
            DY
        ];
        DX = +_[0], DY = +_[1];
        return graticule1;
    };
    graticule1.stepMinor = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        dx = +_[0], dy = +_[1];
        return graticule1;
    };
    graticule1.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x3 = graticuleX(y0, y1, 90);
        y3 = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule1;
    };
    return graticule1.extentMajor([
        [
            -180,
            -90 + _mathJs.epsilon
        ],
        [
            180,
            90 - _mathJs.epsilon
        ]
    ]).extentMinor([
        [
            -180,
            -80 - _mathJs.epsilon
        ],
        [
            180,
            80 + _mathJs.epsilon
        ]
    ]);
}
exports.default = graticule;
function graticule10() {
    return graticule()();
}

},{"d3-array":"1yX2W","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"30Ap4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("./math.js");
exports.default = function(a, b) {
    var x0 = a[0] * _mathJs.radians, y0 = a[1] * _mathJs.radians, x1 = b[0] * _mathJs.radians, y1 = b[1] * _mathJs.radians, cy0 = _mathJs.cos(y0), sy0 = _mathJs.sin(y0), cy1 = _mathJs.cos(y1), sy1 = _mathJs.sin(y1), kx0 = cy0 * _mathJs.cos(x0), ky0 = cy0 * _mathJs.sin(x0), kx1 = cy1 * _mathJs.cos(x1), ky1 = cy1 * _mathJs.sin(x1), d = 2 * _mathJs.asin(_mathJs.sqrt(_mathJs.haversin(y1 - y0) + cy0 * cy1 * _mathJs.haversin(x1 - x0))), k = _mathJs.sin(d);
    var interpolate = d ? function(t) {
        var B = _mathJs.sin(t *= d) / k, A = _mathJs.sin(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
        return [
            _mathJs.atan2(y, x) * _mathJs.degrees,
            _mathJs.atan2(z, _mathJs.sqrt(x * x + y * y)) * _mathJs.degrees
        ];
    } : function() {
        return [
            x0 * _mathJs.degrees,
            y0 * _mathJs.degrees
        ];
    };
    interpolate.distance = d;
    return interpolate;
};

},{"./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnhfi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _streamJs = require("../stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _boundsJs = require("./bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _contextJs = require("./context.js");
var _contextJsDefault = parcelHelpers.interopDefault(_contextJs);
var _measureJs = require("./measure.js");
var _measureJsDefault = parcelHelpers.interopDefault(_measureJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
exports.default = function(projection, context) {
    var pointRadius = 4.5, projectionStream, contextStream;
    function path(object) {
        if (object) {
            if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
            _streamJsDefault.default(object, projectionStream(contextStream));
        }
        return contextStream.result();
    }
    path.area = function(object) {
        _streamJsDefault.default(object, projectionStream(_areaJsDefault.default));
        return _areaJsDefault.default.result();
    };
    path.measure = function(object) {
        _streamJsDefault.default(object, projectionStream(_measureJsDefault.default));
        return _measureJsDefault.default.result();
    };
    path.bounds = function(object) {
        _streamJsDefault.default(object, projectionStream(_boundsJsDefault.default));
        return _boundsJsDefault.default.result();
    };
    path.centroid = function(object) {
        _streamJsDefault.default(object, projectionStream(_centroidJsDefault.default));
        return _centroidJsDefault.default.result();
    };
    path.projection = function(_) {
        return arguments.length ? (projectionStream = _ == null ? (projection = null, _identityJsDefault.default) : (projection = _).stream, path) : projection;
    };
    path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new _stringJsDefault.default) : new _contextJsDefault.default(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
    };
    path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
    };
    return path.projection(projection).context(context);
};

},{"../identity.js":"buAWG","../stream.js":"lpKxD","./area.js":"esEys","./bounds.js":"6inQS","./centroid.js":"hWsH1","./context.js":"bBEPS","./measure.js":"kxo1f","./string.js":"7QFxp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"buAWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>x
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"esEys":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var areaSum = new _d3Array.Adder(), areaRingSum = new _d3Array.Adder(), x00, y00, x0, y0;
var areaStream = {
    point: _noopJsDefault.default,
    lineStart: _noopJsDefault.default,
    lineEnd: _noopJsDefault.default,
    polygonStart: function() {
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
        areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noopJsDefault.default;
        areaSum.add(_mathJs.abs(areaRingSum));
        areaRingSum = new _d3Array.Adder();
    },
    result: function() {
        var area = areaSum / 2;
        areaSum = new _d3Array.Adder();
        return area;
    }
};
function areaRingStart() {
    areaStream.point = areaPointFirst;
}
function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00 = x0 = x, y00 = y0 = y;
}
function areaPoint(x, y) {
    areaRingSum.add(y0 * x - x0 * y);
    x0 = x, y0 = y;
}
function areaRingEnd() {
    areaPoint(x00, y00);
}
exports.default = areaStream;

},{"d3-array":"1yX2W","../math.js":"8TMeU","../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6inQS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var x0 = Infinity, y0 = x0, x1 = -x0, y1 = x1;
var boundsStream = {
    point: boundsPoint,
    lineStart: _noopJsDefault.default,
    lineEnd: _noopJsDefault.default,
    polygonStart: _noopJsDefault.default,
    polygonEnd: _noopJsDefault.default,
    result: function() {
        var bounds = [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x1 = y1 = -(y0 = x0 = Infinity);
        return bounds;
    }
};
function boundsPoint(x, y) {
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
}
exports.default = boundsStream;

},{"../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWsH1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0, Y0 = 0, Z0 = 0, X1 = 0, Y1 = 0, Z1 = 0, X2 = 0, Y2 = 0, Z2 = 0, x00, y00, x0, y0;
var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
        centroidStream.point = centroidPoint;
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
        var centroid = Z2 ? [
            X2 / Z2,
            Y2 / Z2
        ] : Z1 ? [
            X1 / Z1,
            Y1 / Z1
        ] : Z0 ? [
            X0 / Z0,
            Y0 / Z0
        ] : [
            NaN,
            NaN
        ];
        X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
        return centroid;
    }
};
function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
}
function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0 = x, y0 = y);
}
function centroidPointLine(x, y) {
    var dx = x - x0, dy = y - y0, z = _mathJs.sqrt(dx * dx + dy * dy);
    X1 += z * (x0 + x) / 2;
    Y1 += z * (y0 + y) / 2;
    Z1 += z;
    centroidPoint(x0 = x, y0 = y);
}
function centroidLineEnd() {
    centroidStream.point = centroidPoint;
}
function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
    centroidPointRing(x00, y00);
}
function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00 = x0 = x, y00 = y0 = y);
}
function centroidPointRing(x, y) {
    var dx = x - x0, dy = y - y0, z = _mathJs.sqrt(dx * dx + dy * dy);
    X1 += z * (x0 + x) / 2;
    Y1 += z * (y0 + y) / 2;
    Z1 += z;
    z = y0 * x - x0 * y;
    X2 += z * (x0 + x);
    Y2 += z * (y0 + y);
    Z2 += z * 3;
    centroidPoint(x0 = x, y0 = y);
}
exports.default = centroidStream;

},{"../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBEPS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
function PathContext(context) {
    this._context = context;
}
exports.default = PathContext;
PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
        return this._radius = _, this;
    },
    polygonStart: function() {
        this._line = 0;
    },
    polygonEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
    },
    point: function(x, y) {
        switch(this._point){
            case 0:
                this._context.moveTo(x, y);
                this._point = 1;
                break;
            case 1:
                this._context.lineTo(x, y);
                break;
            default:
                this._context.moveTo(x + this._radius, y);
                this._context.arc(x, y, this._radius, 0, _mathJs.tau);
                break;
        }
    },
    result: _noopJsDefault.default
};

},{"../math.js":"8TMeU","../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxo1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var lengthSum = new _d3Array.Adder(), lengthRing, x00, y00, x0, y0;
var lengthStream = {
    point: _noopJsDefault.default,
    lineStart: function() {
        lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
        if (lengthRing) lengthPoint(x00, y00);
        lengthStream.point = _noopJsDefault.default;
    },
    polygonStart: function() {
        lengthRing = true;
    },
    polygonEnd: function() {
        lengthRing = null;
    },
    result: function() {
        var length = +lengthSum;
        lengthSum = new _d3Array.Adder();
        return length;
    }
};
function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00 = x0 = x, y00 = y0 = y;
}
function lengthPoint(x, y) {
    x0 -= x, y0 -= y;
    lengthSum.add(_mathJs.sqrt(x0 * x0 + y0 * y0));
    x0 = x, y0 = y;
}
exports.default = lengthStream;

},{"d3-array":"1yX2W","../math.js":"8TMeU","../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7QFxp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function PathString() {
    this._string = [];
}
exports.default = PathString;
PathString.prototype = {
    _radius: 4.5,
    _circle: circle(4.5),
    pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
    },
    polygonStart: function() {
        this._line = 0;
    },
    polygonEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
    },
    point: function(x, y) {
        switch(this._point){
            case 0:
                this._string.push("M", x, ",", y);
                this._point = 1;
                break;
            case 1:
                this._string.push("L", x, ",", y);
                break;
            default:
                if (this._circle == null) this._circle = circle(this._radius);
                this._string.push("M", x, ",", y, this._circle);
                break;
        }
    },
    result: function() {
        if (this._string.length) {
            var result = this._string.join("");
            this._string = [];
            return result;
        } else return null;
    }
};
function circle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvQZA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _conicEqualAreaJs = require("./conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
exports.default = function() {
    return _conicEqualAreaJsDefault.default().parallels([
        29.5,
        45.5
    ]).scale(1070).translate([
        480,
        250
    ]).rotate([
        96,
        0
    ]).center([
        -0.6,
        38.7
    ]);
};

},{"./conicEqualArea.js":"cfI84","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cfI84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicEqualAreaRaw", ()=>conicEqualAreaRaw
);
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _cylindricalEqualAreaJs = require("./cylindricalEqualArea.js");
function conicEqualAreaRaw(y0, y1) {
    var sy0 = _mathJs.sin(y0), n = (sy0 + _mathJs.sin(y1)) / 2;
    // Are the parallels symmetrical around the Equator?
    if (_mathJs.abs(n) < _mathJs.epsilon) return _cylindricalEqualAreaJs.cylindricalEqualAreaRaw(y0);
    var c = 1 + sy0 * (2 * n - sy0), r0 = _mathJs.sqrt(c) / n;
    function project(x, y) {
        var r = _mathJs.sqrt(c - 2 * n * _mathJs.sin(y)) / n;
        return [
            r * _mathJs.sin(x *= n),
            r0 - r * _mathJs.cos(x)
        ];
    }
    project.invert = function(x, y) {
        var r0y = r0 - y, l = _mathJs.atan2(x, _mathJs.abs(r0y)) * _mathJs.sign(r0y);
        if (r0y * n < 0) l -= _mathJs.pi * _mathJs.sign(x) * _mathJs.sign(r0y);
        return [
            l / n,
            _mathJs.asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))
        ];
    };
    return project;
}
exports.default = function() {
    return _conicJs.conicProjection(conicEqualAreaRaw).scale(155.424).center([
        0,
        33.6442
    ]);
};

},{"../math.js":"8TMeU","./conic.js":"alzWk","./cylindricalEqualArea.js":"dlobY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"alzWk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicProjection", ()=>conicProjection
);
var _mathJs = require("../math.js");
var _indexJs = require("./index.js");
function conicProjection(projectAt) {
    var phi0 = 0, phi1 = _mathJs.pi / 3, m = _indexJs.projectionMutator(projectAt), p = m(phi0, phi1);
    p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * _mathJs.radians, phi1 = _[1] * _mathJs.radians) : [
            phi0 * _mathJs.degrees,
            phi1 * _mathJs.degrees
        ];
    };
    return p;
}

},{"../math.js":"8TMeU","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gSlbx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "projectionMutator", ()=>projectionMutator
);
var _antimeridianJs = require("../clip/antimeridian.js");
var _antimeridianJsDefault = parcelHelpers.interopDefault(_antimeridianJs);
var _circleJs = require("../clip/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _rectangleJs = require("../clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _composeJs = require("../compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _mathJs = require("../math.js");
var _rotationJs = require("../rotation.js");
var _transformJs = require("../transform.js");
var _fitJs = require("./fit.js");
var _resampleJs = require("./resample.js");
var _resampleJsDefault = parcelHelpers.interopDefault(_resampleJs);
var transformRadians = _transformJs.transformer({
    point: function(x, y) {
        this.stream.point(x * _mathJs.radians, y * _mathJs.radians);
    }
});
function transformRotate(rotate) {
    return _transformJs.transformer({
        point: function(x, y) {
            var r = rotate(x, y);
            return this.stream.point(r[0], r[1]);
        }
    });
}
function scaleTranslate(k, dx, dy, sx, sy) {
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            dx + k * x,
            dy - k * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            (x - dx) / k * sx,
            (dy - y) / k * sy
        ];
    };
    return transform;
}
function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = _mathJs.cos(alpha), sinAlpha = _mathJs.sin(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            a * x - b * y + dx,
            dy - b * x - a * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            sx * (ai * x - bi * y + ci),
            sy * (fi - bi * x - ai * y)
        ];
    };
    return transform;
}
function projection(project) {
    return projectionMutator(function() {
        return project;
    })();
}
exports.default = projection;
function projectionMutator(projectAt) {
    var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = _antimeridianJsDefault.default, x0 = null, y0, x1, y1, postclip = _identityJsDefault.default, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
    function projection1(point) {
        return projectRotateTransform(point[0] * _mathJs.radians, point[1] * _mathJs.radians);
    }
    function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [
            point[0] * _mathJs.degrees,
            point[1] * _mathJs.degrees
        ];
    }
    projection1.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };
    projection1.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };
    projection1.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection1.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? _circleJsDefault.default(theta = _ * _mathJs.radians) : (theta = null, _antimeridianJsDefault.default), reset()) : theta * _mathJs.degrees;
    };
    projection1.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identityJsDefault.default) : _rectangleJsDefault.default(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection1.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
    };
    projection1.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
            x,
            y
        ];
    };
    projection1.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * _mathJs.radians, phi = _[1] % 360 * _mathJs.radians, recenter()) : [
            lambda * _mathJs.degrees,
            phi * _mathJs.degrees
        ];
    };
    projection1.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * _mathJs.radians, deltaPhi = _[1] % 360 * _mathJs.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _mathJs.radians : 0, recenter()) : [
            deltaLambda * _mathJs.degrees,
            deltaPhi * _mathJs.degrees,
            deltaGamma * _mathJs.degrees
        ];
    };
    projection1.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * _mathJs.radians, recenter()) : alpha * _mathJs.degrees;
    };
    projection1.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };
    projection1.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };
    projection1.precision = function(_) {
        return arguments.length ? (projectResample = _resampleJsDefault.default(projectTransform, delta2 = _ * _), reset()) : _mathJs.sqrt(delta2);
    };
    projection1.fitExtent = function(extent, object) {
        return _fitJs.fitExtent(projection1, extent, object);
    };
    projection1.fitSize = function(size, object) {
        return _fitJs.fitSize(projection1, size, object);
    };
    projection1.fitWidth = function(width, object) {
        return _fitJs.fitWidth(projection1, width, object);
    };
    projection1.fitHeight = function(height, object) {
        return _fitJs.fitHeight(projection1, height, object);
    };
    function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = _rotationJs.rotateRadians(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = _composeJsDefault.default(project, transform);
        projectRotateTransform = _composeJsDefault.default(rotate, projectTransform);
        projectResample = _resampleJsDefault.default(projectTransform, delta2);
        return reset();
    }
    function reset() {
        cache = cacheStream = null;
        return projection1;
    }
    return function() {
        project = projectAt.apply(this, arguments);
        projection1.invert = project.invert && invert;
        return recenter();
    };
}

},{"../clip/antimeridian.js":"5Pn7h","../clip/circle.js":"6JGCr","../clip/rectangle.js":"5auAi","../compose.js":"lJD5n","../identity.js":"buAWG","../math.js":"8TMeU","../rotation.js":"g2pLL","../transform.js":"AaiPA","./fit.js":"fNXsS","./resample.js":"l8WqU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"AaiPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transformer", ()=>transformer
);
exports.default = function(methods) {
    return {
        stream: transformer(methods)
    };
};
function transformer(methods) {
    return function(stream) {
        var s = new TransformStream;
        for(var key in methods)s[key] = methods[key];
        s.stream = stream;
        return s;
    };
}
function TransformStream() {}
TransformStream.prototype = {
    constructor: TransformStream,
    point: function(x, y) {
        this.stream.point(x, y);
    },
    sphere: function() {
        this.stream.sphere();
    },
    lineStart: function() {
        this.stream.lineStart();
    },
    lineEnd: function() {
        this.stream.lineEnd();
    },
    polygonStart: function() {
        this.stream.polygonStart();
    },
    polygonEnd: function() {
        this.stream.polygonEnd();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNXsS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fitExtent", ()=>fitExtent
);
parcelHelpers.export(exports, "fitSize", ()=>fitSize
);
parcelHelpers.export(exports, "fitWidth", ()=>fitWidth
);
parcelHelpers.export(exports, "fitHeight", ()=>fitHeight
);
var _streamJs = require("../stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _boundsJs = require("../path/bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([
        0,
        0
    ]);
    if (clip != null) projection.clipExtent(null);
    _streamJsDefault.default(object, projection.stream(_boundsJsDefault.default));
    fitBounds(_boundsJsDefault.default.result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
}
function fitExtent(projection, extent, object) {
    return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function fitSize(projection, size, object) {
    return fitExtent(projection, [
        [
            0,
            0
        ],
        size
    ], object);
}
function fitWidth(projection, width, object) {
    return fit(projection, function(b) {
        var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function fitHeight(projection, height, object) {
    return fit(projection, function(b) {
        var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}

},{"../stream.js":"lpKxD","../path/bounds.js":"6inQS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8WqU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cartesianJs = require("../cartesian.js");
var _mathJs = require("../math.js");
var _transformJs = require("../transform.js");
var maxDepth = 16, cosMinDistance = _mathJs.cos(30 * _mathJs.radians); // cos(minimum angular distance)
exports.default = function(project, delta2) {
    return +delta2 ? resample(project, delta2) : resampleNone(project);
};
function resampleNone(project) {
    return _transformJs.transformer({
        point: function(x, y) {
            x = project(x, y);
            this.stream.point(x[0], x[1]);
        }
    });
}
function resample(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
            var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = _mathJs.sqrt(a * a + b * b + c * c), phi2 = _mathJs.asin(c /= m), lambda2 = _mathJs.abs(_mathJs.abs(c) - 1) < _mathJs.epsilon || _mathJs.abs(lambda0 - lambda1) < _mathJs.epsilon ? (lambda0 + lambda1) / 2 : _mathJs.atan2(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > delta2 // perpendicular projected distance
             || _mathJs.abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
             || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                stream.point(x2, y2);
                resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
            }
        }
    }
    return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0; // previous point
        var resampleStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.polygonStart();
                resampleStream.lineStart = ringStart;
            },
            polygonEnd: function() {
                stream.polygonEnd();
                resampleStream.lineStart = lineStart;
            }
        };
        function point(x, y) {
            x = project(x, y);
            stream.point(x[0], x[1]);
        }
        function lineStart() {
            x0 = NaN;
            resampleStream.point = linePoint;
            stream.lineStart();
        }
        function linePoint(lambda, phi) {
            var c = _cartesianJs.cartesian([
                lambda,
                phi
            ]), p = project(lambda, phi);
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
            stream.point(x0, y0);
        }
        function lineEnd() {
            resampleStream.point = point;
            stream.lineEnd();
        }
        function ringStart() {
            lineStart();
            resampleStream.point = ringPoint;
            resampleStream.lineEnd = ringEnd;
        }
        function ringPoint(lambda, phi) {
            linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resampleStream.point = linePoint;
        }
        function ringEnd() {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
            resampleStream.lineEnd = lineEnd;
            lineEnd();
        }
        return resampleStream;
    };
}

},{"../cartesian.js":"4Lw8W","../math.js":"8TMeU","../transform.js":"AaiPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dlobY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cylindricalEqualAreaRaw", ()=>cylindricalEqualAreaRaw
);
var _mathJs = require("../math.js");
function cylindricalEqualAreaRaw(phi0) {
    var cosPhi0 = _mathJs.cos(phi0);
    function forward(lambda, phi) {
        return [
            lambda * cosPhi0,
            _mathJs.sin(phi) / cosPhi0
        ];
    }
    forward.invert = function(x, y) {
        return [
            x / cosPhi0,
            _mathJs.asin(y * cosPhi0)
        ];
    };
    return forward;
}

},{"../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5OqWl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
var _albersJs = require("./albers.js");
var _albersJsDefault = parcelHelpers.interopDefault(_albersJs);
var _conicEqualAreaJs = require("./conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
var _fitJs = require("./fit.js");
// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
    var n = streams.length;
    return {
        point: function(x, y) {
            var i = -1;
            while(++i < n)streams[i].point(x, y);
        },
        sphere: function() {
            var i = -1;
            while(++i < n)streams[i].sphere();
        },
        lineStart: function() {
            var i = -1;
            while(++i < n)streams[i].lineStart();
        },
        lineEnd: function() {
            var i = -1;
            while(++i < n)streams[i].lineEnd();
        },
        polygonStart: function() {
            var i = -1;
            while(++i < n)streams[i].polygonStart();
        },
        polygonEnd: function() {
            var i = -1;
            while(++i < n)streams[i].polygonEnd();
        }
    };
}
// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
exports.default = function() {
    var cache, cacheStream, lower48 = _albersJsDefault.default(), lower48Point, alaska = _conicEqualAreaJsDefault.default().rotate([
        154,
        0
    ]).center([
        -2,
        58.5
    ]).parallels([
        55,
        65
    ]), alaskaPoint, hawaii = _conicEqualAreaJsDefault.default().rotate([
        157,
        0
    ]).center([
        -3,
        19.9
    ]).parallels([
        8,
        18
    ]), hawaiiPoint, point, pointStream = {
        point: function(x, y) {
            point = [
                x,
                y
            ];
        }
    };
    function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
    }
    albersUsa.invert = function(coordinates) {
        var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
        return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([
            lower48.stream(cacheStream = stream),
            alaska.stream(stream),
            hawaii.stream(stream)
        ]);
    };
    albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
    };
    albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];
        lower48Point = lower48.translate(_).clipExtent([
            [
                x - 0.455 * k,
                y - 0.238 * k
            ],
            [
                x + 0.455 * k,
                y + 0.238 * k
            ]
        ]).stream(pointStream);
        alaskaPoint = alaska.translate([
            x - 0.307 * k,
            y + 0.201 * k
        ]).clipExtent([
            [
                x - 0.425 * k + _mathJs.epsilon,
                y + 0.12 * k + _mathJs.epsilon
            ],
            [
                x - 0.214 * k - _mathJs.epsilon,
                y + 0.234 * k - _mathJs.epsilon
            ]
        ]).stream(pointStream);
        hawaiiPoint = hawaii.translate([
            x - 0.205 * k,
            y + 0.212 * k
        ]).clipExtent([
            [
                x - 0.214 * k + _mathJs.epsilon,
                y + 0.166 * k + _mathJs.epsilon
            ],
            [
                x - 0.115 * k - _mathJs.epsilon,
                y + 0.234 * k - _mathJs.epsilon
            ]
        ]).stream(pointStream);
        return reset();
    };
    albersUsa.fitExtent = function(extent, object) {
        return _fitJs.fitExtent(albersUsa, extent, object);
    };
    albersUsa.fitSize = function(size, object) {
        return _fitJs.fitSize(albersUsa, size, object);
    };
    albersUsa.fitWidth = function(width, object) {
        return _fitJs.fitWidth(albersUsa, width, object);
    };
    albersUsa.fitHeight = function(height, object) {
        return _fitJs.fitHeight(albersUsa, height, object);
    };
    function reset() {
        cache = cacheStream = null;
        return albersUsa;
    }
    return albersUsa.scale(1070);
};

},{"../math.js":"8TMeU","./albers.js":"bvQZA","./conicEqualArea.js":"cfI84","./fit.js":"fNXsS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sbiV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalEqualAreaRaw", ()=>azimuthalEqualAreaRaw
);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var azimuthalEqualAreaRaw = _azimuthalJs.azimuthalRaw(function(cxcy) {
    return _mathJs.sqrt(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = _azimuthalJs.azimuthalInvert(function(z) {
    return 2 * _mathJs.asin(z / 2);
});
exports.default = function() {
    return _indexJsDefault.default(azimuthalEqualAreaRaw).scale(124.75).clipAngle(179.999);
};

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fB58X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalRaw", ()=>azimuthalRaw
);
parcelHelpers.export(exports, "azimuthalInvert", ()=>azimuthalInvert
);
var _mathJs = require("../math.js");
function azimuthalRaw(scale) {
    return function(x, y) {
        var cx = _mathJs.cos(x), cy = _mathJs.cos(y), k = scale(cx * cy);
        if (k === Infinity) return [
            2,
            0
        ];
        return [
            k * cy * _mathJs.sin(x),
            k * _mathJs.sin(y)
        ];
    };
}
function azimuthalInvert(angle) {
    return function(x, y) {
        var z = _mathJs.sqrt(x * x + y * y), c = angle(z), sc = _mathJs.sin(c), cc = _mathJs.cos(c);
        return [
            _mathJs.atan2(x * sc, z * cc),
            _mathJs.asin(z && y * sc / z)
        ];
    };
}

},{"../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Cc8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalEquidistantRaw", ()=>azimuthalEquidistantRaw
);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var azimuthalEquidistantRaw = _azimuthalJs.azimuthalRaw(function(c) {
    return (c = _mathJs.acos(c)) && c / _mathJs.sin(c);
});
azimuthalEquidistantRaw.invert = _azimuthalJs.azimuthalInvert(function(z) {
    return z;
});
exports.default = function() {
    return _indexJsDefault.default(azimuthalEquidistantRaw).scale(79.4188).clipAngle(179.999);
};

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33sbR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicConformalRaw", ()=>conicConformalRaw
);
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _mercatorJs = require("./mercator.js");
function tany(y) {
    return _mathJs.tan((_mathJs.halfPi + y) / 2);
}
function conicConformalRaw(y0, y1) {
    var cy0 = _mathJs.cos(y0), n = y0 === y1 ? _mathJs.sin(y0) : _mathJs.log(cy0 / _mathJs.cos(y1)) / _mathJs.log(tany(y1) / tany(y0)), f = cy0 * _mathJs.pow(tany(y0), n) / n;
    if (!n) return _mercatorJs.mercatorRaw;
    function project(x, y) {
        if (f > 0) {
            if (y < -_mathJs.halfPi + _mathJs.epsilon) y = -_mathJs.halfPi + _mathJs.epsilon;
        } else if (y > _mathJs.halfPi - _mathJs.epsilon) y = _mathJs.halfPi - _mathJs.epsilon;
        var r = f / _mathJs.pow(tany(y), n);
        return [
            r * _mathJs.sin(n * x),
            f - r * _mathJs.cos(n * x)
        ];
    }
    project.invert = function(x, y) {
        var fy = f - y, r = _mathJs.sign(n) * _mathJs.sqrt(x * x + fy * fy), l = _mathJs.atan2(x, _mathJs.abs(fy)) * _mathJs.sign(fy);
        if (fy * n < 0) l -= _mathJs.pi * _mathJs.sign(x) * _mathJs.sign(fy);
        return [
            l / n,
            2 * _mathJs.atan(_mathJs.pow(f / r, 1 / n)) - _mathJs.halfPi
        ];
    };
    return project;
}
exports.default = function() {
    return _conicJs.conicProjection(conicConformalRaw).scale(109.5).parallels([
        30,
        30
    ]);
};

},{"../math.js":"8TMeU","./conic.js":"alzWk","./mercator.js":"eCRDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCRDH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mercatorRaw", ()=>mercatorRaw
);
parcelHelpers.export(exports, "mercatorProjection", ()=>mercatorProjection
);
var _mathJs = require("../math.js");
var _rotationJs = require("../rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function mercatorRaw(lambda, phi) {
    return [
        lambda,
        _mathJs.log(_mathJs.tan((_mathJs.halfPi + phi) / 2))
    ];
}
mercatorRaw.invert = function(x, y) {
    return [
        x,
        2 * _mathJs.atan(_mathJs.exp(y)) - _mathJs.halfPi
    ];
};
exports.default = function() {
    return mercatorProjection(mercatorRaw).scale(961 / _mathJs.tau);
};
function mercatorProjection(project) {
    var m = _indexJsDefault.default(project), center = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x0 = null, y0, x1, y1; // clip extent
    m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
    };
    m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
    };
    m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
    };
    m.clipExtent = function(_) {
        return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    function reclip() {
        var k = _mathJs.pi * scale(), t = m(_rotationJsDefault.default(m.rotate()).invert([
            0,
            0
        ]));
        return clipExtent(x0 == null ? [
            [
                t[0] - k,
                t[1] - k
            ],
            [
                t[0] + k,
                t[1] + k
            ]
        ] : project === mercatorRaw ? [
            [
                Math.max(t[0] - k, x0),
                y0
            ],
            [
                Math.min(t[0] + k, x1),
                y1
            ]
        ] : [
            [
                x0,
                Math.max(t[1] - k, y0)
            ],
            [
                x1,
                Math.min(t[1] + k, y1)
            ]
        ]);
    }
    return reclip();
}

},{"../math.js":"8TMeU","../rotation.js":"g2pLL","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fOM7Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicEquidistantRaw", ()=>conicEquidistantRaw
);
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _equirectangularJs = require("./equirectangular.js");
function conicEquidistantRaw(y0, y1) {
    var cy0 = _mathJs.cos(y0), n = y0 === y1 ? _mathJs.sin(y0) : (cy0 - _mathJs.cos(y1)) / (y1 - y0), g = cy0 / n + y0;
    if (_mathJs.abs(n) < _mathJs.epsilon) return _equirectangularJs.equirectangularRaw;
    function project(x, y) {
        var gy = g - y, nx = n * x;
        return [
            gy * _mathJs.sin(nx),
            g - gy * _mathJs.cos(nx)
        ];
    }
    project.invert = function(x, y) {
        var gy = g - y, l = _mathJs.atan2(x, _mathJs.abs(gy)) * _mathJs.sign(gy);
        if (gy * n < 0) l -= _mathJs.pi * _mathJs.sign(x) * _mathJs.sign(gy);
        return [
            l / n,
            g - _mathJs.sign(n) * _mathJs.sqrt(x * x + gy * gy)
        ];
    };
    return project;
}
exports.default = function() {
    return _conicJs.conicProjection(conicEquidistantRaw).scale(131.154).center([
        0,
        13.9389
    ]);
};

},{"../math.js":"8TMeU","./conic.js":"alzWk","./equirectangular.js":"5qip6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5qip6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equirectangularRaw", ()=>equirectangularRaw
);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function equirectangularRaw(lambda, phi) {
    return [
        lambda,
        phi
    ];
}
equirectangularRaw.invert = equirectangularRaw;
exports.default = function() {
    return _indexJsDefault.default(equirectangularRaw).scale(152.63);
};

},{"./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67lWy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalEarthRaw", ()=>equalEarthRaw
);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
var A1 = 1.340264, A2 = -0.081106, A3 = 0.000893, A4 = 0.003796, M = _mathJs.sqrt(3) / 2, iterations = 12;
function equalEarthRaw(lambda, phi) {
    var l = _mathJs.asin(M * _mathJs.sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
    return [
        lambda * _mathJs.cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
        l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
    ];
}
equalEarthRaw.invert = function(x, y) {
    var l = y, l2 = l * l, l6 = l2 * l2 * l2;
    for(var i = 0, delta, fy, fpy; i < iterations; ++i){
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if (_mathJs.abs(delta) < _mathJs.epsilon2) break;
    }
    return [
        M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / _mathJs.cos(l),
        _mathJs.asin(_mathJs.sin(l) / M)
    ];
};
exports.default = function() {
    return _indexJsDefault.default(equalEarthRaw).scale(177.158);
};

},{"./index.js":"gSlbx","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"auBfP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gnomonicRaw", ()=>gnomonicRaw
);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function gnomonicRaw(x, y) {
    var cy = _mathJs.cos(y), k = _mathJs.cos(x) * cy;
    return [
        cy * _mathJs.sin(x) / k,
        _mathJs.sin(y) / k
    ];
}
gnomonicRaw.invert = _azimuthalJs.azimuthalInvert(_mathJs.atan);
exports.default = function() {
    return _indexJsDefault.default(gnomonicRaw).scale(144.049).clipAngle(60);
};

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5yTX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rectangleJs = require("../clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _transformJs = require("../transform.js");
var _fitJs = require("./fit.js");
var _mathJs = require("../math.js");
exports.default = function() {
    var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x0 = null, y0, x1, y1, kx = 1, ky = 1, transform = _transformJs.transformer({
        point: function(x, y) {
            var p = projection([
                x,
                y
            ]);
            this.stream.point(p[0], p[1]);
        }
    }), postclip = _identityJsDefault.default, cache, cacheStream;
    function reset() {
        kx = k * sx;
        ky = k * sy;
        cache = cacheStream = null;
        return projection;
    }
    function projection(p) {
        var x = p[0] * kx, y = p[1] * ky;
        if (alpha) {
            var t = y * ca - x * sa;
            x = x * ca + y * sa;
            y = t;
        }
        return [
            x + tx,
            y + ty
        ];
    }
    projection.invert = function(p) {
        var x = p[0] - tx, y = p[1] - ty;
        if (alpha) {
            var t = y * ca + x * sa;
            x = x * ca - y * sa;
            y = t;
        }
        return [
            x / kx,
            y / ky
        ];
    };
    projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    };
    projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identityJsDefault.default) : _rectangleJsDefault.default(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function(_) {
        return arguments.length ? (k = +_, reset()) : k;
    };
    projection.translate = function(_) {
        return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [
            tx,
            ty
        ];
    };
    projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * _mathJs.radians, sa = _mathJs.sin(alpha), ca = _mathJs.cos(alpha), reset()) : alpha * _mathJs.degrees;
    };
    projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
    };
    projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
    };
    projection.fitExtent = function(extent, object) {
        return _fitJs.fitExtent(projection, extent, object);
    };
    projection.fitSize = function(size, object) {
        return _fitJs.fitSize(projection, size, object);
    };
    projection.fitWidth = function(width, object) {
        return _fitJs.fitWidth(projection, width, object);
    };
    projection.fitHeight = function(height, object) {
        return _fitJs.fitHeight(projection, height, object);
    };
    return projection;
};

},{"../clip/rectangle.js":"5auAi","../identity.js":"buAWG","../transform.js":"AaiPA","./fit.js":"fNXsS","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7E16T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "naturalEarth1Raw", ()=>naturalEarth1Raw
);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
function naturalEarth1Raw(lambda, phi) {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
    ];
}
naturalEarth1Raw.invert = function(x, y) {
    var phi = y, i = 25, delta;
    do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.045255 + phi4 * (-0.311325 + 0.259866 * phi2 - 0.005916 * 11 * phi4)));
    }while (_mathJs.abs(delta) > _mathJs.epsilon && --i > 0)
    return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
    ];
};
exports.default = function() {
    return _indexJsDefault.default(naturalEarth1Raw).scale(175.295);
};

},{"./index.js":"gSlbx","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1rxyV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orthographicRaw", ()=>orthographicRaw
);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function orthographicRaw(x, y) {
    return [
        _mathJs.cos(y) * _mathJs.sin(x),
        _mathJs.sin(y)
    ];
}
orthographicRaw.invert = _azimuthalJs.azimuthalInvert(_mathJs.asin);
exports.default = function() {
    return _indexJsDefault.default(orthographicRaw).scale(249.5).clipAngle(90 + _mathJs.epsilon);
};

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lsi6D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stereographicRaw", ()=>stereographicRaw
);
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function stereographicRaw(x, y) {
    var cy = _mathJs.cos(y), k = 1 + _mathJs.cos(x) * cy;
    return [
        cy * _mathJs.sin(x) / k,
        _mathJs.sin(y) / k
    ];
}
stereographicRaw.invert = _azimuthalJs.azimuthalInvert(function(z) {
    return 2 * _mathJs.atan(z);
});
exports.default = function() {
    return _indexJsDefault.default(stereographicRaw).scale(250).clipAngle(142);
};

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6KvxX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transverseMercatorRaw", ()=>transverseMercatorRaw
);
var _mathJs = require("../math.js");
var _mercatorJs = require("./mercator.js");
function transverseMercatorRaw(lambda, phi) {
    return [
        _mathJs.log(_mathJs.tan((_mathJs.halfPi + phi) / 2)),
        -lambda
    ];
}
transverseMercatorRaw.invert = function(x, y) {
    return [
        -y,
        2 * _mathJs.atan(_mathJs.exp(x)) - _mathJs.halfPi
    ];
};
exports.default = function() {
    var m = _mercatorJs.mercatorProjection(transverseMercatorRaw), center = m.center, rotate = m.rotate;
    m.center = function(_) {
        return arguments.length ? center([
            -_[1],
            _[0]
        ]) : (_ = center(), [
            _[1],
            -_[0]
        ]);
    };
    m.rotate = function(_) {
        return arguments.length ? rotate([
            _[0],
            _[1],
            _.length > 2 ? _[2] + 90 : 90
        ]) : (_ = rotate(), [
            _[0],
            _[1],
            _[2] - 90
        ]);
    };
    return rotate([
        0,
        0,
        90
    ]).scale(159.155);
};

},{"../math.js":"8TMeU","./mercator.js":"eCRDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffs4h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cluster", ()=>_clusterJsDefault.default
);
parcelHelpers.export(exports, "hierarchy", ()=>_indexJsDefault.default
);
parcelHelpers.export(exports, "Node", ()=>_indexJs.Node
);
parcelHelpers.export(exports, "pack", ()=>_indexJsDefault1.default
);
parcelHelpers.export(exports, "packSiblings", ()=>_siblingsJsDefault.default
);
parcelHelpers.export(exports, "packEnclose", ()=>_encloseJsDefault.default
);
parcelHelpers.export(exports, "partition", ()=>_partitionJsDefault.default
);
parcelHelpers.export(exports, "stratify", ()=>_stratifyJsDefault.default
);
parcelHelpers.export(exports, "tree", ()=>_treeJsDefault.default
);
parcelHelpers.export(exports, "treemap", ()=>_indexJsDefault2.default
);
parcelHelpers.export(exports, "treemapBinary", ()=>_binaryJsDefault.default
);
parcelHelpers.export(exports, "treemapDice", ()=>_diceJsDefault.default
);
parcelHelpers.export(exports, "treemapSlice", ()=>_sliceJsDefault.default
);
parcelHelpers.export(exports, "treemapSliceDice", ()=>_sliceDiceJsDefault.default
);
parcelHelpers.export(exports, "treemapSquarify", ()=>_squarifyJsDefault.default
);
parcelHelpers.export(exports, "treemapResquarify", ()=>_resquarifyJsDefault.default
);
var _clusterJs = require("./cluster.js");
var _clusterJsDefault = parcelHelpers.interopDefault(_clusterJs);
var _indexJs = require("./hierarchy/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./pack/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _siblingsJs = require("./pack/siblings.js");
var _siblingsJsDefault = parcelHelpers.interopDefault(_siblingsJs);
var _encloseJs = require("./pack/enclose.js");
var _encloseJsDefault = parcelHelpers.interopDefault(_encloseJs);
var _partitionJs = require("./partition.js");
var _partitionJsDefault = parcelHelpers.interopDefault(_partitionJs);
var _stratifyJs = require("./stratify.js");
var _stratifyJsDefault = parcelHelpers.interopDefault(_stratifyJs);
var _treeJs = require("./tree.js");
var _treeJsDefault = parcelHelpers.interopDefault(_treeJs);
var _indexJs2 = require("./treemap/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _binaryJs = require("./treemap/binary.js");
var _binaryJsDefault = parcelHelpers.interopDefault(_binaryJs);
var _diceJs = require("./treemap/dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./treemap/slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _sliceDiceJs = require("./treemap/sliceDice.js");
var _sliceDiceJsDefault = parcelHelpers.interopDefault(_sliceDiceJs);
var _squarifyJs = require("./treemap/squarify.js");
var _squarifyJsDefault = parcelHelpers.interopDefault(_squarifyJs);
var _resquarifyJs = require("./treemap/resquarify.js");
var _resquarifyJsDefault = parcelHelpers.interopDefault(_resquarifyJs);

},{"./cluster.js":"fCBIC","./hierarchy/index.js":"dhu0L","./pack/index.js":"3cNIE","./pack/siblings.js":"hTK6q","./pack/enclose.js":"4wEuB","./partition.js":"63hoR","./stratify.js":"hMDLq","./tree.js":"11Uqb","./treemap/index.js":"ctDPr","./treemap/binary.js":"hUJ2M","./treemap/dice.js":"k7Rgs","./treemap/slice.js":"iVdqy","./treemap/sliceDice.js":"jPZrw","./treemap/squarify.js":"k9MP1","./treemap/resquarify.js":"6BMoS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCBIC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
}
function meanXReduce(x, c) {
    return x + c.x;
}
function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
}
function maxYReduce(y, c) {
    return Math.max(y, c.y);
}
function leafLeft(node) {
    var children;
    while(children = node.children)node = children[0];
    return node;
}
function leafRight(node) {
    var children;
    while(children = node.children)node = children[children.length - 1];
    return node;
}
exports.default = function() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
    function cluster(root) {
        var previousNode, x = 0;
        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
            var children = node.children;
            if (children) {
                node.x = meanX(children);
                node.y = maxY(children);
            } else {
                node.x = previousNode ? x += separation(node, previousNode) : 0;
                node.y = 0;
                previousNode = node;
            }
        });
        var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
            node.x = (node.x - root.x) * dx;
            node.y = (root.y - node.y) * dy;
        } : function(node) {
            node.x = (node.x - x0) / (x1 - x0) * dx;
            node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
    }
    cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
    };
    cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return cluster;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dhu0L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "computeHeight", ()=>computeHeight
);
parcelHelpers.export(exports, "Node", ()=>Node
);
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _eachBeforeJs = require("./eachBefore.js");
var _eachBeforeJsDefault = parcelHelpers.interopDefault(_eachBeforeJs);
var _eachAfterJs = require("./eachAfter.js");
var _eachAfterJsDefault = parcelHelpers.interopDefault(_eachAfterJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _ancestorsJs = require("./ancestors.js");
var _ancestorsJsDefault = parcelHelpers.interopDefault(_ancestorsJs);
var _descendantsJs = require("./descendants.js");
var _descendantsJsDefault = parcelHelpers.interopDefault(_descendantsJs);
var _leavesJs = require("./leaves.js");
var _leavesJsDefault = parcelHelpers.interopDefault(_leavesJs);
var _linksJs = require("./links.js");
var _linksJsDefault = parcelHelpers.interopDefault(_linksJs);
var _iteratorJs = require("./iterator.js");
var _iteratorJsDefault = parcelHelpers.interopDefault(_iteratorJs);
function hierarchy(data, children) {
    if (data instanceof Map) {
        data = [
            undefined,
            data
        ];
        if (children === undefined) children = mapChildren;
    } else if (children === undefined) children = objectChildren;
    var root = new Node(data), node, nodes = [
        root
    ], child, childs, i, n;
    while(node = nodes.pop())if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = childs[i] = new Node(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
        }
    }
    return root.eachBefore(computeHeight);
}
exports.default = hierarchy;
function node_copy() {
    return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
    return d.children;
}
function mapChildren(d) {
    return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
    if (node.data.value !== undefined) node.value = node.data.value;
    node.data = node.data.data;
}
function computeHeight(node) {
    var height = 0;
    do node.height = height;
    while ((node = node.parent) && node.height < ++height)
}
function Node(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
}
Node.prototype = hierarchy.prototype = {
    constructor: Node,
    count: _countJsDefault.default,
    each: _eachJsDefault.default,
    eachAfter: _eachAfterJsDefault.default,
    eachBefore: _eachBeforeJsDefault.default,
    find: _findJsDefault.default,
    sum: _sumJsDefault.default,
    sort: _sortJsDefault.default,
    path: _pathJsDefault.default,
    ancestors: _ancestorsJsDefault.default,
    descendants: _descendantsJsDefault.default,
    leaves: _leavesJsDefault.default,
    links: _linksJsDefault.default,
    copy: node_copy,
    [Symbol.iterator]: _iteratorJsDefault.default
};

},{"./count.js":"d2mnh","./each.js":"6syzK","./eachBefore.js":"gyWQ5","./eachAfter.js":"9cRTr","./find.js":"jqiE6","./sum.js":"1vi3r","./sort.js":"f2orR","./path.js":"5UvUd","./ancestors.js":"61qy3","./descendants.js":"gUlPE","./leaves.js":"czIpN","./links.js":"65v1r","./iterator.js":"cBZOh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d2mnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function count(node) {
    var sum = 0, children = node.children, i = children && children.length;
    if (!i) sum = 1;
    else while(--i >= 0)sum += children[i].value;
    node.value = sum;
}
exports.default = function() {
    return this.eachAfter(count);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6syzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    let index = -1;
    for (const node of this)callback.call(that, node, ++index, this);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gyWQ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    var node = this, nodes = [
        node
    ], children, i, index = -1;
    while(node = nodes.pop()){
        callback.call(that, node, ++index, this);
        if (children = node.children) for(i = children.length - 1; i >= 0; --i)nodes.push(children[i]);
    }
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cRTr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    var node = this, nodes = [
        node
    ], next = [], children, i, n, index = -1;
    while(node = nodes.pop()){
        next.push(node);
        if (children = node.children) for(i = 0, n = children.length; i < n; ++i)nodes.push(children[i]);
    }
    while(node = next.pop())callback.call(that, node, ++index, this);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqiE6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback, that) {
    let index = -1;
    for (const node of this){
        if (callback.call(that, node, ++index, this)) return node;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1vi3r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(value) {
    return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
        while(--i >= 0)sum += children[i].value;
        node.value = sum;
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2orR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(compare) {
    return this.eachBefore(function(node) {
        if (node.children) node.children.sort(compare);
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5UvUd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(end) {
    var start = this, ancestor = leastCommonAncestor(start, end), nodes = [
        start
    ];
    while(start !== ancestor){
        start = start.parent;
        nodes.push(start);
    }
    var k = nodes.length;
    while(end !== ancestor){
        nodes.splice(k, 0, end);
        end = end.parent;
    }
    return nodes;
};
function leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while(a === b){
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
    }
    return c;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61qy3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var node = this, nodes = [
        node
    ];
    while(node = node.parent)nodes.push(node);
    return nodes;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUlPE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return Array.from(this);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czIpN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var leaves = [];
    this.eachBefore(function(node) {
        if (!node.children) leaves.push(node);
    });
    return leaves;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65v1r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var root = this, links = [];
    root.each(function(node) {
        if (node !== root) links.push({
            source: node.parent,
            target: node
        });
    });
    return links;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBZOh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function*() {
    var node = this, current, next = [
        node
    ], children, i, n;
    do {
        current = next.reverse(), next = [];
        while(node = current.pop()){
            yield node;
            if (children = node.children) for(i = 0, n = children.length; i < n; ++i)next.push(children[i]);
        }
    }while (next.length)
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cNIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _accessorsJs = require("../accessors.js");
var _constantJs = require("../constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _lcgJs = require("../lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);
var _siblingsJs = require("./siblings.js");
function defaultRadius(d) {
    return Math.sqrt(d.value);
}
exports.default = function() {
    var radius = null, dx = 1, dy = 1, padding = _constantJs.constantZero;
    function pack(root) {
        const random = _lcgJsDefault.default();
        root.x = dx / 2, root.y = dy / 2;
        if (radius) root.eachBefore(radiusLeaf(radius)).eachAfter(packChildrenRandom(padding, 0.5, random)).eachBefore(translateChild(1));
        else root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildrenRandom(_constantJs.constantZero, 1, random)).eachAfter(packChildrenRandom(padding, root.r / Math.min(dx, dy), random)).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        return root;
    }
    pack.radius = function(x) {
        return arguments.length ? (radius = _accessorsJs.optional(x), pack) : radius;
    };
    pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
            dx,
            dy
        ];
    };
    pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : _constantJsDefault.default(+x), pack) : padding;
    };
    return pack;
};
function radiusLeaf(radius) {
    return function(node) {
        if (!node.children) node.r = Math.max(0, +radius(node) || 0);
    };
}
function packChildrenRandom(padding, k, random) {
    return function(node) {
        if (children = node.children) {
            var children, i, n = children.length, r = padding(node) * k || 0, e;
            if (r) for(i = 0; i < n; ++i)children[i].r += r;
            e = _siblingsJs.packSiblingsRandom(children, random);
            if (r) for(i = 0; i < n; ++i)children[i].r -= r;
            node.r = e + r;
        }
    };
}
function translateChild(k) {
    return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
            node.x = parent.x + k * node.x;
            node.y = parent.y + k * node.y;
        }
    };
}

},{"../accessors.js":"6pg0v","../constant.js":"lEKIl","../lcg.js":"8dS5V","./siblings.js":"hTK6q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pg0v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "optional", ()=>optional
);
parcelHelpers.export(exports, "required", ()=>required
);
function optional(f) {
    return f == null ? null : required(f);
}
function required(f) {
    if (typeof f !== "function") throw new Error;
    return f;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lEKIl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constantZero", ()=>constantZero
);
function constantZero() {
    return 0;
}
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8dS5V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const a = 1664525;
const c = 1013904223;
const m = 4294967296; // 2^32
exports.default = function() {
    let s = 1;
    return ()=>(s = (a * s + c) % m) / m
    ;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hTK6q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packSiblingsRandom", ()=>packSiblingsRandom
);
var _arrayJs = require("../array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _lcgJs = require("../lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);
var _encloseJs = require("./enclose.js");
function place(b, a, c) {
    var dx = b.x - a.x, x, a2, dy = b.y - a.y, y, b2, d2 = dx * dx + dy * dy;
    if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
            x = (d2 + b2 - a2) / (2 * d2);
            y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
            c.x = b.x - x * dx - y * dy;
            c.y = b.y - x * dy + y * dx;
        } else {
            x = (d2 + a2 - b2) / (2 * d2);
            y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
            c.x = a.x + x * dx - y * dy;
            c.y = a.y + x * dy + y * dx;
        }
    } else {
        c.x = a.x + c.r;
        c.y = a.y;
    }
}
function intersects(a, b) {
    var dr = a.r + b.r - 0.000001, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function score(node) {
    var a = node._, b = node.next._, ab = a.r + b.r, dx = (a.x * b.r + b.x * a.r) / ab, dy = (a.y * b.r + b.y * a.r) / ab;
    return dx * dx + dy * dy;
}
function Node(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
}
function packSiblingsRandom(circles, random) {
    if (!(n = (circles = _arrayJsDefault.default(circles)).length)) return 0;
    var a, b, c, n, aa, ca, i, j, k, sj, sk;
    // Place the first circle.
    a = circles[0], a.x = 0, a.y = 0;
    if (!(n > 1)) return a.r;
    // Place the second circle.
    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
    if (!(n > 2)) return a.r + b.r;
    // Place the third circle.
    place(b, a, c = circles[2]);
    // Initialize the front-chain using the first three circles a, b and c.
    a = new Node(a), b = new Node(b), c = new Node(c);
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a;
    // Attempt to place each remaining circle…
    pack: for(i = 3; i < n; ++i){
        place(a._, b._, c = circles[i]), c = new Node(c);
        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do if (sj <= sk) {
            if (intersects(j._, c._)) {
                b = j, a.next = b, b.previous = a, --i;
                continue pack;
            }
            sj += j._.r, j = j.next;
        } else {
            if (intersects(k._, c._)) {
                a = k, a.next = b, b.previous = a, --i;
                continue pack;
            }
            sk += k._.r, k = k.previous;
        }
        while (j !== k.next)
        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;
        // Compute the new closest circle pair to the centroid.
        aa = score(a);
        while((c = c.next) !== b)if ((ca = score(c)) < aa) a = c, aa = ca;
        b = a.next;
    }
    // Compute the enclosing circle of the front chain.
    a = [
        b._
    ], c = b;
    while((c = c.next) !== b)a.push(c._);
    c = _encloseJs.packEncloseRandom(a, random);
    // Translate the circles to put the enclosing circle around the origin.
    for(i = 0; i < n; ++i)a = circles[i], a.x -= c.x, a.y -= c.y;
    return c.r;
}
exports.default = function(circles) {
    packSiblingsRandom(circles, _lcgJsDefault.default());
    return circles;
};

},{"../array.js":"k3irk","../lcg.js":"8dS5V","./enclose.js":"4wEuB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k3irk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shuffle", ()=>shuffle
);
exports.default = function(x) {
    return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
     : Array.from(x); // Map, Set, iterable, string, or anything else
};
function shuffle(array, random) {
    let m = array.length, t, i;
    while(m){
        i = random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
    }
    return array;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4wEuB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "packEncloseRandom", ()=>packEncloseRandom
);
var _arrayJs = require("../array.js");
var _lcgJs = require("../lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);
exports.default = function(circles) {
    return packEncloseRandom(circles, _lcgJsDefault.default());
};
function packEncloseRandom(circles, random) {
    var i = 0, n = (circles = _arrayJs.shuffle(Array.from(circles), random)).length, B = [], p, e;
    while(i < n){
        p = circles[i];
        if (e && enclosesWeak(e, p)) ++i;
        else e = encloseBasis(B = extendBasis(B, p)), i = 0;
    }
    return e;
}
function extendBasis(B, p) {
    var i, j;
    if (enclosesWeakAll(p, B)) return [
        p
    ];
    // If we get here then B must have at least one element.
    for(i = 0; i < B.length; ++i){
        if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) return [
            B[i],
            p
        ];
    }
    // If we get here then B must have at least two elements.
    for(i = 0; i < B.length - 1; ++i)for(j = i + 1; j < B.length; ++j){
        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) return [
            B[i],
            B[j],
            p
        ];
    }
    // If we get here then something is very wrong.
    throw new Error;
}
function enclosesNot(a, b) {
    var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
    return dr < 0 || dr * dr < dx * dx + dy * dy;
}
function enclosesWeak(a, b) {
    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 0.000000001, dx = b.x - a.x, dy = b.y - a.y;
    return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function enclosesWeakAll(a, B) {
    for(var i = 0; i < B.length; ++i){
        if (!enclosesWeak(a, B[i])) return false;
    }
    return true;
}
function encloseBasis(B) {
    switch(B.length){
        case 1:
            return encloseBasis1(B[0]);
        case 2:
            return encloseBasis2(B[0], B[1]);
        case 3:
            return encloseBasis3(B[0], B[1], B[2]);
    }
}
function encloseBasis1(a) {
    return {
        x: a.x,
        y: a.y,
        r: a.r
    };
}
function encloseBasis2(a, b) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
    };
}
function encloseBasis3(a, b, c) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = x1 - x2, a3 = x1 - x3, b2 = y1 - y2, b3 = y1 - y3, c2 = r2 - r1, c3 = r3 - r1, d1 = x1 * x1 + y1 * y1 - r1 * r1, d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2, d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (r1 + xa * xb + ya * yb), C = xa * xa + ya * ya - r1 * r1, r = -(Math.abs(A) > 0.000001 ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
    return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
    };
}

},{"../array.js":"k3irk","../lcg.js":"8dS5V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63hoR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundJs = require("./treemap/round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _diceJs = require("./treemap/dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
exports.default = function() {
    var dx = 1, dy1 = 1, padding = 0, round = false;
    function partition(root) {
        var n = root.height + 1;
        root.x0 = root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy1 / n;
        root.eachBefore(positionNode(dy1, n));
        if (round) root.eachBefore(_roundJsDefault.default);
        return root;
    }
    function positionNode(dy, n) {
        return function(node) {
            if (node.children) _diceJsDefault.default(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
            var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1;
        };
    }
    partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
    };
    partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy1 = +x[1], partition) : [
            dx,
            dy1
        ];
    };
    partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
    };
    return partition;
};

},{"./treemap/round.js":"8pZ7K","./treemap/dice.js":"k7Rgs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8pZ7K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k7Rgs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
    while(++i < n){
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hMDLq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _accessorsJs = require("./accessors.js");
var _indexJs = require("./hierarchy/index.js");
var preroot = {
    depth: -1
}, ambiguous = {}, imputed = {};
function defaultId(d) {
    return d.id;
}
function defaultParentId(d) {
    return d.parentId;
}
exports.default = function() {
    var id = defaultId, parentId = defaultParentId, path;
    function stratify(data) {
        var nodes = Array.from(data), currentId = id, currentParentId = parentId, n, d1, i2, root, parent, node1, nodeId, nodeKey, nodeByKey = new Map;
        if (path != null) {
            const I = nodes.map((d, i)=>normalize(path(d, i, data))
            );
            const P = I.map(parentof);
            const S = new Set(I).add("");
            for (const i1 of P)if (!S.has(i1)) {
                S.add(i1);
                I.push(i1);
                P.push(parentof(i1));
                nodes.push(imputed);
            }
            currentId = (_, i)=>I[i]
            ;
            currentParentId = (_, i)=>P[i]
            ;
        }
        for(i2 = 0, n = nodes.length; i2 < n; ++i2){
            d1 = nodes[i2], node1 = nodes[i2] = new _indexJs.Node(d1);
            if ((nodeId = currentId(d1, i2, data)) != null && (nodeId += "")) {
                nodeKey = node1.id = nodeId;
                nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node1);
            }
            if ((nodeId = currentParentId(d1, i2, data)) != null && (nodeId += "")) node1.parent = nodeId;
        }
        for(i2 = 0; i2 < n; ++i2){
            node1 = nodes[i2];
            if (nodeId = node1.parent) {
                parent = nodeByKey.get(nodeId);
                if (!parent) throw new Error("missing: " + nodeId);
                if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
                if (parent.children) parent.children.push(node1);
                else parent.children = [
                    node1
                ];
                node1.parent = parent;
            } else {
                if (root) throw new Error("multiple roots");
                root = node1;
            }
        }
        if (!root) throw new Error("no root");
        // When imputing internal nodes, only introduce roots if needed.
        // Then replace the imputed marker data with null.
        if (path != null) {
            while(root.data === imputed && root.children.length === 1)root = root.children[0], --n;
            for(let i = nodes.length - 1; i >= 0; --i){
                node1 = nodes[i];
                if (node1.data !== imputed) break;
                node1.data = null;
            }
        }
        root.parent = preroot;
        root.eachBefore(function(node) {
            node.depth = node.parent.depth + 1;
            --n;
        }).eachBefore(_indexJs.computeHeight);
        root.parent = null;
        if (n > 0) throw new Error("cycle");
        return root;
    }
    stratify.id = function(x) {
        return arguments.length ? (id = _accessorsJs.optional(x), stratify) : id;
    };
    stratify.parentId = function(x) {
        return arguments.length ? (parentId = _accessorsJs.optional(x), stratify) : parentId;
    };
    stratify.path = function(x) {
        return arguments.length ? (path = _accessorsJs.optional(x), stratify) : path;
    };
    return stratify;
};
// To normalize a path, we coerce to a string, strip the trailing slash if any
// (as long as the trailing slash is not immediately preceded by another slash),
// and add leading slash if missing.
function normalize(path) {
    path = `${path}`;
    let i = path.length;
    if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);
    return path[0] === "/" ? path : `/${path}`;
}
// Walk backwards to find the first slash that is not the leading slash, e.g.:
// "/foo/bar" ⇥ "/foo", "/foo" ⇥ "/", "/" ↦ "". (The root is special-cased
// because the id of the root must be a truthy value.)
function parentof(path) {
    let i = path.length;
    if (i < 2) return "";
    while(--i > 1)if (slash(path, i)) break;
    return path.slice(0, i);
}
// Slashes can be escaped; to determine whether a slash is a path delimiter, we
// count the number of preceding backslashes escaping the forward slash: an odd
// number indicates an escaped forward slash.
function slash(path, i) {
    if (path[i] === "/") {
        let k = 0;
        while(i > 0 && path[--i] === "\\")++k;
        if ((k & 1) === 0) return true;
    }
    return false;
}

},{"./accessors.js":"6pg0v","./hierarchy/index.js":"dhu0L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11Uqb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./hierarchy/index.js");
function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
}
// This function works analogously to nextLeft.
function nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
}
// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
}
// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while(--i >= 0){
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
    }
}
// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
}
function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null; // default ancestor
    this.a = this; // ancestor
    this.z = 0; // prelim
    this.m = 0; // mod
    this.c = 0; // change
    this.s = 0; // shift
    this.t = null; // thread
    this.i = i; // number
}
TreeNode.prototype = Object.create(_indexJs.Node.prototype);
function treeRoot(root) {
    var tree = new TreeNode(root, 0), node, nodes = [
        tree
    ], child, children, i, n;
    while(node = nodes.pop())if (children = node._.children) {
        node.children = new Array(n = children.length);
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
        }
    }
    (tree.parent = new TreeNode(null, 0)).children = [
        tree
    ];
    return tree;
}
// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
exports.default = function() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = null;
    function tree(root) {
        var t = treeRoot(root);
        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);
        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);
        else {
            var left = root, right = root, bottom = root;
            root.eachBefore(function(node) {
                if (node.x < left.x) left = node;
                if (node.x > right.x) right = node;
                if (node.depth > bottom.depth) bottom = node;
            });
            var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
            root.eachBefore(function(node) {
                node.x = (node.x + tx) * kx;
                node.y = node.depth * ky;
            });
        }
        return root;
    }
    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.
    function firstWalk(v) {
        var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
        if (children) {
            executeShifts(v);
            var midpoint = (children[0].z + children[children.length - 1].z) / 2;
            if (w) {
                v.z = w.z + separation(v._, w._);
                v.m = v.z - midpoint;
            } else v.z = midpoint;
        } else if (w) v.z = w.z + separation(v._, w._);
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    // Computes all real x-coordinates by summing up the modifiers recursively.
    function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
    }
    // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).
    function apportion(v, w, ancestor) {
        if (w) {
            var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
            while(vim = nextRight(vim), vip = nextLeft(vip), vim && vip){
                vom = nextLeft(vom);
                vop = nextRight(vop);
                vop.a = v;
                shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                if (shift > 0) {
                    moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                    sip += shift;
                    sop += shift;
                }
                sim += vim.m;
                sip += vip.m;
                som += vom.m;
                sop += vop.m;
            }
            if (vim && !nextRight(vop)) {
                vop.t = vim;
                vop.m += sim - sop;
            }
            if (vip && !nextLeft(vom)) {
                vom.t = vip;
                vom.m += sip - som;
                ancestor = v;
            }
        }
        return ancestor;
    }
    function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
    }
    tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
    };
    tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return tree;
};

},{"./hierarchy/index.js":"dhu0L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctDPr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _squarifyJs = require("./squarify.js");
var _squarifyJsDefault = parcelHelpers.interopDefault(_squarifyJs);
var _accessorsJs = require("../accessors.js");
var _constantJs = require("../constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
exports.default = function() {
    var tile = _squarifyJsDefault.default, round = false, dx = 1, dy = 1, paddingStack = [
        0
    ], paddingInner = _constantJs.constantZero, paddingTop = _constantJs.constantZero, paddingRight = _constantJs.constantZero, paddingBottom = _constantJs.constantZero, paddingLeft = _constantJs.constantZero;
    function treemap(root) {
        root.x0 = root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [
            0
        ];
        if (round) root.eachBefore(_roundJsDefault.default);
        return root;
    }
    function positionNode(node) {
        var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
            p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
            x0 += paddingLeft(node) - p;
            y0 += paddingTop(node) - p;
            x1 -= paddingRight(node) - p;
            y1 -= paddingBottom(node) - p;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            tile(node, x0, y0, x1, y1);
        }
    }
    treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
    };
    treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
            dx,
            dy
        ];
    };
    treemap.tile = function(x) {
        return arguments.length ? (tile = _accessorsJs.required(x), treemap) : tile;
    };
    treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };
    treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : _constantJsDefault.default(+x), treemap) : paddingInner;
    };
    treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };
    treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : _constantJsDefault.default(+x), treemap) : paddingTop;
    };
    treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : _constantJsDefault.default(+x), treemap) : paddingRight;
    };
    treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : _constantJsDefault.default(+x), treemap) : paddingBottom;
    };
    treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : _constantJsDefault.default(+x), treemap) : paddingLeft;
    };
    return treemap;
};

},{"./round.js":"8pZ7K","./squarify.js":"k9MP1","../accessors.js":"6pg0v","../constant.js":"lEKIl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9MP1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "phi", ()=>phi
);
parcelHelpers.export(exports, "squarifyRatio", ()=>squarifyRatio
);
var _diceJs = require("./dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var phi = (1 + Math.sqrt(5)) / 2;
function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
    while(i0 < n){
        dx = x1 - x0, dy = y1 - y0;
        // Find the next non-empty node.
        do sumValue = nodes[i1++].value;
        while (!sumValue && i1 < n)
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);
        // Keep adding nodes while the aspect ratio maintains or improves.
        for(; i1 < n; ++i1){
            sumValue += nodeValue = nodes[i1].value;
            if (nodeValue < minValue) minValue = nodeValue;
            if (nodeValue > maxValue) maxValue = nodeValue;
            beta = sumValue * sumValue * alpha;
            newRatio = Math.max(maxValue / beta, beta / minValue);
            if (newRatio > minRatio) {
                sumValue -= nodeValue;
                break;
            }
            minRatio = newRatio;
        }
        // Position and record the row orientation.
        rows.push(row = {
            value: sumValue,
            dice: dx < dy,
            children: nodes.slice(i0, i1)
        });
        if (row.dice) _diceJsDefault.default(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else _sliceJsDefault.default(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
    }
    return rows;
}
exports.default = function custom(ratio) {
    function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
    }
    squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return squarify;
}(phi);

},{"./dice.js":"k7Rgs","./slice.js":"iVdqy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVdqy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
    while(++i < n){
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUJ2M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(parent, x01, y01, x11, y11) {
    var nodes = parent.children, i1, n = nodes.length, sum, sums = new Array(n + 1);
    for(sums[0] = sum = i1 = 0; i1 < n; ++i1)sums[i1 + 1] = sum += nodes[i1].value;
    partition(0, n, parent.value, x01, y01, x11, y11);
    function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
            var node = nodes[i];
            node.x0 = x0, node.y0 = y0;
            node.x1 = x1, node.y1 = y1;
            return;
        }
        var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
        while(k < hi){
            var mid = k + hi >>> 1;
            if (sums[mid] < valueTarget) k = mid + 1;
            else hi = mid;
        }
        if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
        var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
        if (x1 - x0 > y1 - y0) {
            var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
            partition(i, k, valueLeft, x0, y0, xk, y1);
            partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
            var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
            partition(i, k, valueLeft, x0, y0, x1, yk);
            partition(k, j, valueRight, x0, yk, x1, y1);
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jPZrw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _diceJs = require("./dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
exports.default = function(parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? _sliceJsDefault.default : _diceJsDefault.default)(parent, x0, y0, x1, y1);
};

},{"./dice.js":"k7Rgs","./slice.js":"iVdqy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6BMoS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _diceJs = require("./dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _squarifyJs = require("./squarify.js");
exports.default = function custom(ratio) {
    function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && rows.ratio === ratio) {
            var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
            while(++j < m){
                row = rows[j], nodes = row.children;
                for(i = row.value = 0, n = nodes.length; i < n; ++i)row.value += nodes[i].value;
                if (row.dice) _diceJsDefault.default(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
                else _sliceJsDefault.default(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
                value -= row.value;
            }
        } else {
            parent._squarify = rows = _squarifyJs.squarifyRatio(ratio, parent, x0, y0, x1, y1);
            rows.ratio = ratio;
        }
    }
    resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return resquarify;
}(_squarifyJs.phi);

},{"./dice.js":"k7Rgs","./slice.js":"iVdqy","./squarify.js":"k9MP1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e80Vt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "polygonArea", ()=>_areaJsDefault.default
);
parcelHelpers.export(exports, "polygonCentroid", ()=>_centroidJsDefault.default
);
parcelHelpers.export(exports, "polygonHull", ()=>_hullJsDefault.default
);
parcelHelpers.export(exports, "polygonContains", ()=>_containsJsDefault.default
);
parcelHelpers.export(exports, "polygonLength", ()=>_lengthJsDefault.default
);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _hullJs = require("./hull.js");
var _hullJsDefault = parcelHelpers.interopDefault(_hullJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _lengthJs = require("./length.js");
var _lengthJsDefault = parcelHelpers.interopDefault(_lengthJs);

},{"./area.js":"lLTwT","./centroid.js":"iYl4S","./hull.js":"2koGX","./contains.js":"dH4k9","./length.js":"gl53L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lLTwT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(polygon) {
    var i = -1, n = polygon.length, a, b = polygon[n - 1], area = 0;
    while(++i < n){
        a = b;
        b = polygon[i];
        area += a[1] * b[0] - a[0] * b[1];
    }
    return area / 2;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iYl4S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(polygon) {
    var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;
    while(++i < n){
        a = b;
        b = polygon[i];
        k += c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
    }
    return k *= 3, [
        x / k,
        y / k
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2koGX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _crossJs = require("./cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
function lexicographicOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
}
// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
function computeUpperHullIndexes(points) {
    const n = points.length, indexes = [
        0,
        1
    ];
    let size = 2, i;
    for(i = 2; i < n; ++i){
        while(size > 1 && _crossJsDefault.default(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0)--size;
        indexes[size++] = i;
    }
    return indexes.slice(0, size); // remove popped points
}
exports.default = function(points) {
    if ((n = points.length) < 3) return null;
    var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
    for(i = 0; i < n; ++i)sortedPoints[i] = [
        +points[i][0],
        +points[i][1],
        i
    ];
    sortedPoints.sort(lexicographicOrder);
    for(i = 0; i < n; ++i)flippedPoints[i] = [
        sortedPoints[i][0],
        -sortedPoints[i][1]
    ];
    var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
    // Construct the hull polygon, removing possible duplicate endpoints.
    var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
    // Add upper hull in right-to-l order.
    // Then add lower hull in left-to-right order.
    for(i = upperIndexes.length - 1; i >= 0; --i)hull.push(points[sortedPoints[upperIndexes[i]][2]]);
    for(i = +skipLeft; i < lowerIndexes.length - skipRight; ++i)hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
    return hull;
};

},{"./cross.js":"bBMJB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBMJB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
exports.default = function(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dH4k9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(polygon, point) {
    var n = polygon.length, p = polygon[n - 1], x = point[0], y = point[1], x0 = p[0], y0 = p[1], x1, y1, inside = false;
    for(var i = 0; i < n; ++i){
        p = polygon[i], x1 = p[0], y1 = p[1];
        if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
        x0 = x1, y0 = y1;
    }
    return inside;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gl53L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(polygon) {
    var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
    while(++i < n){
        xa = xb;
        ya = yb;
        b = polygon[i];
        xb = b[0];
        yb = b[1];
        xa -= xb;
        ya -= yb;
        perimeter += Math.hypot(xa, ya);
    }
    return perimeter;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60d0K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomUniform", ()=>_uniformJsDefault.default
);
parcelHelpers.export(exports, "randomInt", ()=>_intJsDefault.default
);
parcelHelpers.export(exports, "randomNormal", ()=>_normalJsDefault.default
);
parcelHelpers.export(exports, "randomLogNormal", ()=>_logNormalJsDefault.default
);
parcelHelpers.export(exports, "randomBates", ()=>_batesJsDefault.default
);
parcelHelpers.export(exports, "randomIrwinHall", ()=>_irwinHallJsDefault.default
);
parcelHelpers.export(exports, "randomExponential", ()=>_exponentialJsDefault.default
);
parcelHelpers.export(exports, "randomPareto", ()=>_paretoJsDefault.default
);
parcelHelpers.export(exports, "randomBernoulli", ()=>_bernoulliJsDefault.default
);
parcelHelpers.export(exports, "randomGeometric", ()=>_geometricJsDefault.default
);
parcelHelpers.export(exports, "randomBinomial", ()=>_binomialJsDefault.default
);
parcelHelpers.export(exports, "randomGamma", ()=>_gammaJsDefault.default
);
parcelHelpers.export(exports, "randomBeta", ()=>_betaJsDefault.default
);
parcelHelpers.export(exports, "randomWeibull", ()=>_weibullJsDefault.default
);
parcelHelpers.export(exports, "randomCauchy", ()=>_cauchyJsDefault.default
);
parcelHelpers.export(exports, "randomLogistic", ()=>_logisticJsDefault.default
);
parcelHelpers.export(exports, "randomPoisson", ()=>_poissonJsDefault.default
);
parcelHelpers.export(exports, "randomLcg", ()=>_lcgJsDefault.default
);
var _uniformJs = require("./uniform.js");
var _uniformJsDefault = parcelHelpers.interopDefault(_uniformJs);
var _intJs = require("./int.js");
var _intJsDefault = parcelHelpers.interopDefault(_intJs);
var _normalJs = require("./normal.js");
var _normalJsDefault = parcelHelpers.interopDefault(_normalJs);
var _logNormalJs = require("./logNormal.js");
var _logNormalJsDefault = parcelHelpers.interopDefault(_logNormalJs);
var _batesJs = require("./bates.js");
var _batesJsDefault = parcelHelpers.interopDefault(_batesJs);
var _irwinHallJs = require("./irwinHall.js");
var _irwinHallJsDefault = parcelHelpers.interopDefault(_irwinHallJs);
var _exponentialJs = require("./exponential.js");
var _exponentialJsDefault = parcelHelpers.interopDefault(_exponentialJs);
var _paretoJs = require("./pareto.js");
var _paretoJsDefault = parcelHelpers.interopDefault(_paretoJs);
var _bernoulliJs = require("./bernoulli.js");
var _bernoulliJsDefault = parcelHelpers.interopDefault(_bernoulliJs);
var _geometricJs = require("./geometric.js");
var _geometricJsDefault = parcelHelpers.interopDefault(_geometricJs);
var _binomialJs = require("./binomial.js");
var _binomialJsDefault = parcelHelpers.interopDefault(_binomialJs);
var _gammaJs = require("./gamma.js");
var _gammaJsDefault = parcelHelpers.interopDefault(_gammaJs);
var _betaJs = require("./beta.js");
var _betaJsDefault = parcelHelpers.interopDefault(_betaJs);
var _weibullJs = require("./weibull.js");
var _weibullJsDefault = parcelHelpers.interopDefault(_weibullJs);
var _cauchyJs = require("./cauchy.js");
var _cauchyJsDefault = parcelHelpers.interopDefault(_cauchyJs);
var _logisticJs = require("./logistic.js");
var _logisticJsDefault = parcelHelpers.interopDefault(_logisticJs);
var _poissonJs = require("./poisson.js");
var _poissonJsDefault = parcelHelpers.interopDefault(_poissonJs);
var _lcgJs = require("./lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);

},{"./uniform.js":"4qliV","./int.js":"2uQjm","./normal.js":"hStnP","./logNormal.js":"x9yCA","./bates.js":"kOvln","./irwinHall.js":"dG2UC","./exponential.js":"6GPz0","./pareto.js":"eKItY","./bernoulli.js":"3hFEt","./geometric.js":"cH4Ax","./binomial.js":"dadaR","./gamma.js":"efzrv","./beta.js":"G2NGx","./weibull.js":"iCnxP","./cauchy.js":"igCUQ","./logistic.js":"f0NDh","./poisson.js":"hYs2C","./lcg.js":"3WQiP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qliV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomUniform(source) {
    function randomUniform(min, max) {
        min = min == null ? 0 : +min;
        max = max == null ? 1 : +max;
        if (arguments.length === 1) max = min, min = 0;
        else max -= min;
        return function() {
            return source() * max + min;
        };
    }
    randomUniform.source = sourceRandomUniform;
    return randomUniform;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fVJ5Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = Math.random;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uQjm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomInt(source) {
    function randomInt(min, max) {
        if (arguments.length < 2) max = min, min = 0;
        min = Math.floor(min);
        max = Math.floor(max) - min;
        return function() {
            return Math.floor(source() * max + min);
        };
    }
    randomInt.source = sourceRandomInt;
    return randomInt;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hStnP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomNormal(source) {
    function randomNormal(mu, sigma) {
        var x, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
            var y;
            // If available, use the second previously-generated uniform random.
            if (x != null) y = x, x = null;
            else do {
                x = source() * 2 - 1;
                y = source() * 2 - 1;
                r = x * x + y * y;
            }while (!r || r > 1)
            return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
        };
    }
    randomNormal.source = sourceRandomNormal;
    return randomNormal;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"x9yCA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
var _normalJs = require("./normal.js");
var _normalJsDefault = parcelHelpers.interopDefault(_normalJs);
exports.default = function sourceRandomLogNormal(source) {
    var N = _normalJsDefault.default.source(source);
    function randomLogNormal() {
        var randomNormal = N.apply(this, arguments);
        return function() {
            return Math.exp(randomNormal());
        };
    }
    randomLogNormal.source = sourceRandomLogNormal;
    return randomLogNormal;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","./normal.js":"hStnP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kOvln":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
var _irwinHallJs = require("./irwinHall.js");
var _irwinHallJsDefault = parcelHelpers.interopDefault(_irwinHallJs);
exports.default = function sourceRandomBates(source) {
    var I = _irwinHallJsDefault.default.source(source);
    function randomBates(n) {
        // use limiting distribution at n === 0
        if ((n = +n) === 0) return source;
        var randomIrwinHall = I(n);
        return function() {
            return randomIrwinHall() / n;
        };
    }
    randomBates.source = sourceRandomBates;
    return randomBates;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","./irwinHall.js":"dG2UC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dG2UC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomIrwinHall(source) {
    function randomIrwinHall(n) {
        if ((n = +n) <= 0) return ()=>0
        ;
        return function() {
            for(var sum = 0, i = n; i > 1; --i)sum += source();
            return sum + i * source();
        };
    }
    randomIrwinHall.source = sourceRandomIrwinHall;
    return randomIrwinHall;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GPz0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomExponential(source) {
    function randomExponential(lambda) {
        return function() {
            return -Math.log1p(-source()) / lambda;
        };
    }
    randomExponential.source = sourceRandomExponential;
    return randomExponential;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKItY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomPareto(source) {
    function randomPareto(alpha) {
        if ((alpha = +alpha) < 0) throw new RangeError("invalid alpha");
        alpha = 1 / -alpha;
        return function() {
            return Math.pow(1 - source(), alpha);
        };
    }
    randomPareto.source = sourceRandomPareto;
    return randomPareto;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hFEt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomBernoulli(source) {
    function randomBernoulli(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        return function() {
            return Math.floor(source() + p);
        };
    }
    randomBernoulli.source = sourceRandomBernoulli;
    return randomBernoulli;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cH4Ax":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomGeometric(source) {
    function randomGeometric(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        if (p === 0) return ()=>Infinity
        ;
        if (p === 1) return ()=>1
        ;
        p = Math.log1p(-p);
        return function() {
            return 1 + Math.floor(Math.log1p(-source()) / p);
        };
    }
    randomGeometric.source = sourceRandomGeometric;
    return randomGeometric;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dadaR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
var _betaJs = require("./beta.js");
var _betaJsDefault = parcelHelpers.interopDefault(_betaJs);
var _geometricJs = require("./geometric.js");
var _geometricJsDefault = parcelHelpers.interopDefault(_geometricJs);
exports.default = function sourceRandomBinomial(source) {
    var G = _geometricJsDefault.default.source(source), B = _betaJsDefault.default.source(source);
    function randomBinomial(n, p) {
        n = +n;
        if ((p = +p) >= 1) return ()=>n
        ;
        if (p <= 0) return ()=>0
        ;
        return function() {
            var acc = 0, nn = n, pp = p;
            while(nn * pp > 16 && nn * (1 - pp) > 16){
                var i = Math.floor((nn + 1) * pp), y = B(i, nn - i + 1)();
                if (y <= pp) {
                    acc += i;
                    nn -= i;
                    pp = (pp - y) / (1 - y);
                } else {
                    nn = i - 1;
                    pp /= y;
                }
            }
            var sign = pp < 0.5, pFinal = sign ? pp : 1 - pp, g = G(pFinal);
            for(var s = g(), k = 0; s <= nn; ++k)s += g();
            return acc + (sign ? k : nn - k);
        };
    }
    randomBinomial.source = sourceRandomBinomial;
    return randomBinomial;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","./beta.js":"G2NGx","./geometric.js":"cH4Ax","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"G2NGx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
var _gammaJs = require("./gamma.js");
var _gammaJsDefault = parcelHelpers.interopDefault(_gammaJs);
exports.default = function sourceRandomBeta(source) {
    var G = _gammaJsDefault.default.source(source);
    function randomBeta(alpha, beta) {
        var X = G(alpha), Y = G(beta);
        return function() {
            var x = X();
            return x === 0 ? 0 : x / (x + Y());
        };
    }
    randomBeta.source = sourceRandomBeta;
    return randomBeta;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","./gamma.js":"efzrv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efzrv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
var _normalJs = require("./normal.js");
var _normalJsDefault = parcelHelpers.interopDefault(_normalJs);
exports.default = function sourceRandomGamma(source) {
    var randomNormal = _normalJsDefault.default.source(source)();
    function randomGamma(k, theta) {
        if ((k = +k) < 0) throw new RangeError("invalid k");
        // degenerate distribution if k === 0
        if (k === 0) return ()=>0
        ;
        theta = theta == null ? 1 : +theta;
        // exponential distribution if k === 1
        if (k === 1) return ()=>-Math.log1p(-source()) * theta
        ;
        var d = (k < 1 ? k + 1 : k) - 1 / 3, c = 1 / (3 * Math.sqrt(d)), multiplier = k < 1 ? ()=>Math.pow(source(), 1 / k)
         : ()=>1
        ;
        return function() {
            do {
                do var x = randomNormal(), v = 1 + c * x;
                while (v <= 0)
                v *= v * v;
                var u = 1 - source();
            }while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)))
            return d * v * multiplier() * theta;
        };
    }
    randomGamma.source = sourceRandomGamma;
    return randomGamma;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","./normal.js":"hStnP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iCnxP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomWeibull(source) {
    function randomWeibull(k, a, b) {
        var outerFunc;
        if ((k = +k) === 0) outerFunc = (x)=>-Math.log(x)
        ;
        else {
            k = 1 / k;
            outerFunc = (x)=>Math.pow(x, k)
            ;
        }
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
            return a + b * outerFunc(-Math.log1p(-source()));
        };
    }
    randomWeibull.source = sourceRandomWeibull;
    return randomWeibull;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igCUQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomCauchy(source) {
    function randomCauchy(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
            return a + b * Math.tan(Math.PI * source());
        };
    }
    randomCauchy.source = sourceRandomCauchy;
    return randomCauchy;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f0NDh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
exports.default = function sourceRandomLogistic(source) {
    function randomLogistic(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
            var u = source();
            return a + b * Math.log(u / (1 - u));
        };
    }
    randomLogistic.source = sourceRandomLogistic;
    return randomLogistic;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hYs2C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultSourceJs = require("./defaultSource.js");
var _defaultSourceJsDefault = parcelHelpers.interopDefault(_defaultSourceJs);
var _binomialJs = require("./binomial.js");
var _binomialJsDefault = parcelHelpers.interopDefault(_binomialJs);
var _gammaJs = require("./gamma.js");
var _gammaJsDefault = parcelHelpers.interopDefault(_gammaJs);
exports.default = function sourceRandomPoisson(source) {
    var G = _gammaJsDefault.default.source(source), B = _binomialJsDefault.default.source(source);
    function randomPoisson(lambda) {
        return function() {
            var acc = 0, l = lambda;
            while(l > 16){
                var n = Math.floor(0.875 * l), t = G(n)();
                if (t > l) return acc + B(n - 1, l / t)();
                acc += n;
                l -= t;
            }
            for(var s = -Math.log1p(-source()), k = 0; s <= l; ++k)s -= Math.log1p(-source());
            return acc + k;
        };
    }
    randomPoisson.source = sourceRandomPoisson;
    return randomPoisson;
}(_defaultSourceJsDefault.default);

},{"./defaultSource.js":"fVJ5Y","./binomial.js":"dadaR","./gamma.js":"efzrv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3WQiP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
const mul = 1664525;
const inc = 1013904223;
const eps = 1 / 4294967296;
function lcg(seed = Math.random()) {
    let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
    return ()=>(state = mul * state + inc | 0, eps * (state >>> 0))
    ;
}
exports.default = lcg;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"UQ8g3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scaleBand", ()=>_bandJsDefault.default
);
parcelHelpers.export(exports, "scalePoint", ()=>_bandJs.point
);
parcelHelpers.export(exports, "scaleIdentity", ()=>_identityJsDefault.default
);
parcelHelpers.export(exports, "scaleLinear", ()=>_linearJsDefault.default
);
parcelHelpers.export(exports, "scaleLog", ()=>_logJsDefault.default
);
parcelHelpers.export(exports, "scaleSymlog", ()=>_symlogJsDefault.default
);
parcelHelpers.export(exports, "scaleOrdinal", ()=>_ordinalJsDefault.default
);
parcelHelpers.export(exports, "scaleImplicit", ()=>_ordinalJs.implicit
);
parcelHelpers.export(exports, "scalePow", ()=>_powJsDefault.default
);
parcelHelpers.export(exports, "scaleSqrt", ()=>_powJs.sqrt
);
parcelHelpers.export(exports, "scaleRadial", ()=>_radialJsDefault.default
);
parcelHelpers.export(exports, "scaleQuantile", ()=>_quantileJsDefault.default
);
parcelHelpers.export(exports, "scaleQuantize", ()=>_quantizeJsDefault.default
);
parcelHelpers.export(exports, "scaleThreshold", ()=>_thresholdJsDefault.default
);
parcelHelpers.export(exports, "scaleTime", ()=>_timeJsDefault.default
);
parcelHelpers.export(exports, "scaleUtc", ()=>_utcTimeJsDefault.default
);
parcelHelpers.export(exports, "scaleSequential", ()=>_sequentialJsDefault.default
);
parcelHelpers.export(exports, "scaleSequentialLog", ()=>_sequentialJs.sequentialLog
);
parcelHelpers.export(exports, "scaleSequentialPow", ()=>_sequentialJs.sequentialPow
);
parcelHelpers.export(exports, "scaleSequentialSqrt", ()=>_sequentialJs.sequentialSqrt
);
parcelHelpers.export(exports, "scaleSequentialSymlog", ()=>_sequentialJs.sequentialSymlog
);
parcelHelpers.export(exports, "scaleSequentialQuantile", ()=>_sequentialQuantileJsDefault.default
);
parcelHelpers.export(exports, "scaleDiverging", ()=>_divergingJsDefault.default
);
parcelHelpers.export(exports, "scaleDivergingLog", ()=>_divergingJs.divergingLog
);
parcelHelpers.export(exports, "scaleDivergingPow", ()=>_divergingJs.divergingPow
);
parcelHelpers.export(exports, "scaleDivergingSqrt", ()=>_divergingJs.divergingSqrt
);
parcelHelpers.export(exports, "scaleDivergingSymlog", ()=>_divergingJs.divergingSymlog
);
parcelHelpers.export(exports, "tickFormat", ()=>_tickFormatJsDefault.default
);
var _bandJs = require("./band.js");
var _bandJsDefault = parcelHelpers.interopDefault(_bandJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _linearJs = require("./linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _logJs = require("./log.js");
var _logJsDefault = parcelHelpers.interopDefault(_logJs);
var _symlogJs = require("./symlog.js");
var _symlogJsDefault = parcelHelpers.interopDefault(_symlogJs);
var _ordinalJs = require("./ordinal.js");
var _ordinalJsDefault = parcelHelpers.interopDefault(_ordinalJs);
var _powJs = require("./pow.js");
var _powJsDefault = parcelHelpers.interopDefault(_powJs);
var _radialJs = require("./radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);
var _thresholdJs = require("./threshold.js");
var _thresholdJsDefault = parcelHelpers.interopDefault(_thresholdJs);
var _timeJs = require("./time.js");
var _timeJsDefault = parcelHelpers.interopDefault(_timeJs);
var _utcTimeJs = require("./utcTime.js");
var _utcTimeJsDefault = parcelHelpers.interopDefault(_utcTimeJs);
var _sequentialJs = require("./sequential.js");
var _sequentialJsDefault = parcelHelpers.interopDefault(_sequentialJs);
var _sequentialQuantileJs = require("./sequentialQuantile.js");
var _sequentialQuantileJsDefault = parcelHelpers.interopDefault(_sequentialQuantileJs);
var _divergingJs = require("./diverging.js");
var _divergingJsDefault = parcelHelpers.interopDefault(_divergingJs);
var _tickFormatJs = require("./tickFormat.js");
var _tickFormatJsDefault = parcelHelpers.interopDefault(_tickFormatJs);

},{"./band.js":"4oI5T","./identity.js":"4MvzB","./linear.js":"lob4K","./log.js":"z4t8s","./symlog.js":"4KiG8","./ordinal.js":"hNjKg","./pow.js":"jVG8A","./radial.js":"8e44u","./quantile.js":"cZUY5","./quantize.js":"6tbld","./threshold.js":"f8NNx","./time.js":"7UVid","./utcTime.js":"6ufv7","./sequential.js":"aMNy9","./sequentialQuantile.js":"esKgz","./diverging.js":"3BN2V","./tickFormat.js":"ahQef","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oI5T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point
);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
var _ordinalJs = require("./ordinal.js");
var _ordinalJsDefault = parcelHelpers.interopDefault(_ordinalJs);
function band() {
    var scale = _ordinalJsDefault.default().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
        var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = _d3Array.range(n).map(function(i) {
            return start + step * i;
        });
        return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [
            r0,
            r1
        ];
    };
    scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
    };
    scale.bandwidth = function() {
        return bandwidth;
    };
    scale.step = function() {
        return step;
    };
    scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
        return band(domain(), [
            r0,
            r1
        ]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return _initJs.initRange.apply(rescale(), arguments);
}
exports.default = band;
function pointish(scale) {
    var copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
        return pointish(copy());
    };
    return scale;
}
function point() {
    return pointish(band.apply(null, arguments).paddingInner(1));
}

},{"d3-array":"1yX2W","./init.js":"kp8lc","./ordinal.js":"hNjKg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kp8lc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initRange", ()=>initRange
);
parcelHelpers.export(exports, "initInterpolator", ()=>initInterpolator
);
function initRange(domain, range) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            this.range(domain);
            break;
        default:
            this.range(range).domain(domain);
            break;
    }
    return this;
}
function initInterpolator(domain, interpolator) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            if (typeof domain === "function") this.interpolator(domain);
            else this.range(domain);
            break;
        default:
            this.domain(domain);
            if (typeof interpolator === "function") this.interpolator(interpolator);
            else this.range(interpolator);
            break;
    }
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hNjKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "implicit", ()=>implicit
);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
const implicit = Symbol("implicit");
function ordinal() {
    var index = new _d3Array.InternMap(), domain = [], range = [], unknown = implicit;
    function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
            if (unknown !== implicit) return unknown;
            index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
    }
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new _d3Array.InternMap();
        for (const value of _){
            if (index.has(value)) continue;
            index.set(value, domain.push(value) - 1);
        }
        return scale;
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
    };
    _initJs.initRange.apply(scale, arguments);
    return scale;
}
exports.default = ordinal;

},{"d3-array":"1yX2W","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4MvzB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _linearJs = require("./linear.js");
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
function identity(domain) {
    var unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, _numberJsDefault.default), scale) : domain.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return identity(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, _numberJsDefault.default) : [
        0,
        1
    ];
    return _linearJs.linearish(scale);
}
exports.default = identity;

},{"./linear.js":"lob4K","./number.js":"k9Lyx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lob4K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linearish", ()=>linearish
);
var _d3Array = require("d3-array");
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _tickFormatJs = require("./tickFormat.js");
var _tickFormatJsDefault = parcelHelpers.interopDefault(_tickFormatJs);
function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
        var d = domain();
        return _d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
        var d = domain();
        return _tickFormatJsDefault.default(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
        if (count == null) count = 10;
        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
            step = start, start = stop, stop = step;
            step = i0, i0 = i1, i1 = step;
        }
        while(maxIter-- > 0){
            step = _d3Array.tickIncrement(start, stop, count);
            if (step === prestep) {
                d[i0] = start;
                d[i1] = stop;
                return domain(d);
            } else if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
            } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
            } else break;
            prestep = step;
        }
        return scale;
    };
    return scale;
}
function linear() {
    var scale = _continuousJsDefault.default();
    scale.copy = function() {
        return _continuousJs.copy(scale, linear());
    };
    _initJs.initRange.apply(scale, arguments);
    return linearish(scale);
}
exports.default = linear;

},{"d3-array":"1yX2W","./continuous.js":"1LsCM","./init.js":"kp8lc","./tickFormat.js":"ahQef","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1LsCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity
);
parcelHelpers.export(exports, "copy", ()=>copy
);
parcelHelpers.export(exports, "transformer", ()=>transformer
);
var _d3Array = require("d3-array");
var _d3Interpolate = require("d3-interpolate");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var unit = [
    0,
    1
];
function identity(x) {
    return x;
}
function normalize(a, b) {
    return (b -= a = +a) ? function(x) {
        return (x - a) / b;
    } : _constantJsDefault.default(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function(x) {
        return Math.max(a, Math.min(b, x));
    };
}
// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x) {
        return r0(d0(x));
    };
}
function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i1 = -1;
    // Reverse descending domains.
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
    }
    while(++i1 < j){
        d[i1] = normalize(domain[i1], domain[i1 + 1]);
        r[i1] = interpolate(range[i1], range[i1 + 1]);
    }
    return function(x) {
        var i = _d3Array.bisect(domain, x, 1, j) - 1;
        return r[i](d[i](x));
    };
}
function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
    var domain = unit, range = unit, interpolate = _d3Interpolate.interpolate, transform, untransform, unknown, clamp = identity, piecewise, output, input;
    function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }
    scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _d3Interpolate.interpolateNumber)))(y)));
    };
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, _numberJsDefault.default), rescale()) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = _d3Interpolate.interpolateRound, rescale();
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
    };
    scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u) {
        transform = t, untransform = u;
        return rescale();
    };
}
function continuous() {
    return transformer()(identity, identity);
}
exports.default = continuous;

},{"d3-array":"1yX2W","d3-interpolate":"6jJyi","./constant.js":"kIv0D","./number.js":"k9Lyx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kIv0D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function constants(x) {
    return function() {
        return x;
    };
}
exports.default = constants;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9Lyx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function number(x) {
    return +x;
}
exports.default = number;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ahQef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
function tickFormat(start, stop, count, specifier) {
    var step = _d3Array.tickStep(start, stop, count), precision;
    specifier = _d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
    switch(specifier.type){
        case "s":
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = _d3Format.precisionPrefix(step, value))) specifier.precision = precision;
            return _d3Format.formatPrefix(specifier, value);
        case "":
        case "e":
        case "g":
        case "p":
        case "r":
            if (specifier.precision == null && !isNaN(precision = _d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
            break;
        case "f":
        case "%":
            if (specifier.precision == null && !isNaN(precision = _d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
            break;
    }
    return _d3Format.format(specifier);
}
exports.default = tickFormat;

},{"d3-array":"1yX2W","d3-format":"4XOv2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"z4t8s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggish", ()=>loggish
);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformLog(x) {
    return Math.log(x);
}
function transformExp(x) {
    return Math.exp(x);
}
function transformLogn(x) {
    return -Math.log(-x);
}
function transformExpn(x) {
    return -Math.exp(-x);
}
function pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x)=>Math.pow(base, x)
    ;
}
function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x)=>Math.log(x) / base
    );
}
function reflect(f) {
    return (x, k)=>-f(-x, k)
    ;
}
function loggish(transform) {
    const scale = transform(transformLog, transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
            logs = reflect(logs), pows = reflect(pows);
            transform(transformLogn, transformExpn);
        } else transform(transformLog, transformExp);
        return scale;
    }
    scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count)=>{
        const d = domain();
        let u = d[0];
        let v = d[d.length - 1];
        const r = v < u;
        if (r) [u, v] = [
            v,
            u
        ];
        let i = logs(u);
        let j = logs(v);
        let k;
        let t;
        const n = count == null ? 10 : +count;
        let z = [];
        if (!(base % 1) && j - i < n) {
            i = Math.floor(i), j = Math.ceil(j);
            if (u > 0) for(; i <= j; ++i)for(k = 1; k < base; ++k){
                t = i < 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            else for(; i <= j; ++i)for(k = base - 1; k >= 1; --k){
                t = i > 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            if (z.length * 2 < n) z = _d3Array.ticks(u, v, n);
        } else z = _d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
        return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier)=>{
        if (count == null) count = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
            if (!(base % 1) && (specifier = _d3Format.formatSpecifier(specifier)).precision == null) specifier.trim = true;
            specifier = _d3Format.format(specifier);
        }
        if (count === Infinity) return specifier;
        const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return (d)=>{
            let i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5) i *= base;
            return i <= k ? specifier(d) : "";
        };
    };
    scale.nice = ()=>{
        return domain(_niceJsDefault.default(domain(), {
            floor: (x)=>pows(Math.floor(logs(x)))
            ,
            ceil: (x)=>pows(Math.ceil(logs(x)))
        }));
    };
    return scale;
}
function log() {
    const scale = loggish(_continuousJs.transformer()).domain([
        1,
        10
    ]);
    scale.copy = ()=>_continuousJs.copy(scale, log()).base(scale.base())
    ;
    _initJs.initRange.apply(scale, arguments);
    return scale;
}
exports.default = log;

},{"d3-array":"1yX2W","d3-format":"4XOv2","./nice.js":"kAVeE","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kAVeE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
}
exports.default = nice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4KiG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symlogish", ()=>symlogish
);
var _linearJs = require("./linear.js");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformSymlog(c) {
    return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
}
function transformSymexp(c) {
    return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
}
function symlogish(transform) {
    var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
    scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
    };
    return _linearJs.linearish(scale);
}
function symlog() {
    var scale = symlogish(_continuousJs.transformer());
    scale.copy = function() {
        return _continuousJs.copy(scale, symlog()).constant(scale.constant());
    };
    return _initJs.initRange.apply(scale, arguments);
}
exports.default = symlog;

},{"./linear.js":"lob4K","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVG8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powish", ()=>powish
);
parcelHelpers.export(exports, "sqrt", ()=>sqrt
);
var _linearJs = require("./linear.js");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformPow(exponent) {
    return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
}
function transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function transformSquare(x) {
    return x < 0 ? -x * x : x * x;
}
function powish(transform) {
    var scale = transform(_continuousJs.identity, _continuousJs.identity), exponent = 1;
    function rescale() {
        return exponent === 1 ? transform(_continuousJs.identity, _continuousJs.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return _linearJs.linearish(scale);
}
function pow() {
    var scale = powish(_continuousJs.transformer());
    scale.copy = function() {
        return _continuousJs.copy(scale, pow()).exponent(scale.exponent());
    };
    _initJs.initRange.apply(scale, arguments);
    return scale;
}
exports.default = pow;
function sqrt() {
    return pow.apply(null, arguments).exponent(0.5);
}

},{"./linear.js":"lob4K","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8e44u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
function square(x) {
    return Math.sign(x) * x * x;
}
function unsquare(x) {
    return Math.sign(x) * Math.sqrt(Math.abs(x));
}
function radial() {
    var squared = _continuousJsDefault.default(), range = [
        0,
        1
    ], round = false, unknown;
    function scale(x) {
        var y = unsquare(squared(x));
        return isNaN(y) ? unknown : round ? Math.round(y) : y;
    }
    scale.invert = function(y) {
        return squared.invert(square(y));
    };
    scale.domain = function(_) {
        return arguments.length ? (squared.domain(_), scale) : squared.domain();
    };
    scale.range = function(_) {
        return arguments.length ? (squared.range((range = Array.from(_, _numberJsDefault.default)).map(square)), scale) : range.slice();
    };
    scale.rangeRound = function(_) {
        return scale.range(_).round(true);
    };
    scale.round = function(_) {
        return arguments.length ? (round = !!_, scale) : round;
    };
    scale.clamp = function(_) {
        return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return radial(squared.domain(), range).round(round).clamp(squared.clamp()).unknown(unknown);
    };
    _initJs.initRange.apply(scale, arguments);
    return _linearJs.linearish(scale);
}
exports.default = radial;

},{"./continuous.js":"1LsCM","./init.js":"kp8lc","./linear.js":"lob4K","./number.js":"k9Lyx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZUY5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
function quantile() {
    var domain = [], range = [], thresholds = [], unknown;
    function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while(++i < n)thresholds[i - 1] = _d3Array.quantileSorted(domain, i / n);
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : range[_d3Array.bisect(thresholds, x)];
    }
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : [
            i > 0 ? thresholds[i - 1] : domain[0],
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
    };
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _)if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(_d3Array.ascending);
        return rescale();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
        return thresholds.slice();
    };
    scale.copy = function() {
        return quantile().domain(domain).range(range).unknown(unknown);
    };
    return _initJs.initRange.apply(scale, arguments);
}
exports.default = quantile;

},{"d3-array":"1yX2W","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6tbld":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _linearJs = require("./linear.js");
var _initJs = require("./init.js");
function quantize() {
    var x0 = 0, x1 = 1, n = 1, domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown;
    function scale(x) {
        return x != null && x <= x ? range[_d3Array.bisect(domain, x, 0, n)] : unknown;
    }
    function rescale() {
        var i = -1;
        domain = new Array(n);
        while(++i < n)domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [
            x0,
            x1
        ];
    };
    scale.range = function(_) {
        return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : i < 1 ? [
            x0,
            domain[0]
        ] : i >= n ? [
            domain[n - 1],
            x1
        ] : [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function() {
        return domain.slice();
    };
    scale.copy = function() {
        return quantize().domain([
            x0,
            x1
        ]).range(range).unknown(unknown);
    };
    return _initJs.initRange.apply(_linearJs.linearish(scale), arguments);
}
exports.default = quantize;

},{"d3-array":"1yX2W","./linear.js":"lob4K","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f8NNx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
function threshold() {
    var domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown, n = 1;
    function scale(x) {
        return x != null && x <= x ? range[_d3Array.bisect(domain, x, 0, n)] : unknown;
    }
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return threshold().domain(domain).range(range).unknown(unknown);
    };
    return _initJs.initRange.apply(scale, arguments);
}
exports.default = threshold;

},{"d3-array":"1yX2W","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UVid":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calendar", ()=>calendar
);
var _d3Time = require("d3-time");
var _d3TimeFormat = require("d3-time-format");
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
function date(t) {
    return new Date(t);
}
function number(t) {
    return t instanceof Date ? +t : +new Date(+t);
}
function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
    var scale = _continuousJsDefault.default(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear = format("%Y");
    function tickFormat(date1) {
        return (second(date1) < date1 ? formatMillisecond : minute(date1) < date1 ? formatSecond : hour(date1) < date1 ? formatMinute : day(date1) < date1 ? formatHour : month(date1) < date1 ? week(date1) < date1 ? formatDay : formatWeek : year(date1) < date1 ? formatMonth : formatYear)(date1);
    }
    scale.invert = function(y) {
        return new Date(invert(y));
    };
    scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
    };
    scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
    };
    scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain(_niceJsDefault.default(d, interval)) : scale;
    };
    scale.copy = function() {
        return _continuousJs.copy(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
    };
    return scale;
}
function time() {
    return _initJs.initRange.apply(calendar(_d3Time.timeTicks, _d3Time.timeTickInterval, _d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3TimeFormat.timeFormat).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2)
    ]), arguments);
}
exports.default = time;

},{"d3-time":"1UOEe","d3-time-format":"4FtNS","./continuous.js":"1LsCM","./init.js":"kp8lc","./nice.js":"kAVeE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1UOEe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeInterval", ()=>_intervalJsDefault.default
);
parcelHelpers.export(exports, "timeMillisecond", ()=>_millisecondJsDefault.default
);
parcelHelpers.export(exports, "timeMilliseconds", ()=>_millisecondJs.milliseconds
);
parcelHelpers.export(exports, "utcMillisecond", ()=>_millisecondJsDefault.default
);
parcelHelpers.export(exports, "utcMilliseconds", ()=>_millisecondJs.milliseconds
);
parcelHelpers.export(exports, "timeSecond", ()=>_secondJsDefault.default
);
parcelHelpers.export(exports, "timeSeconds", ()=>_secondJs.seconds
);
parcelHelpers.export(exports, "utcSecond", ()=>_secondJsDefault.default
);
parcelHelpers.export(exports, "utcSeconds", ()=>_secondJs.seconds
);
parcelHelpers.export(exports, "timeMinute", ()=>_minuteJsDefault.default
);
parcelHelpers.export(exports, "timeMinutes", ()=>_minuteJs.minutes
);
parcelHelpers.export(exports, "timeHour", ()=>_hourJsDefault.default
);
parcelHelpers.export(exports, "timeHours", ()=>_hourJs.hours
);
parcelHelpers.export(exports, "timeDay", ()=>_dayJsDefault.default
);
parcelHelpers.export(exports, "timeDays", ()=>_dayJs.days
);
parcelHelpers.export(exports, "timeWeek", ()=>_weekJs.sunday
);
parcelHelpers.export(exports, "timeWeeks", ()=>_weekJs.sundays
);
parcelHelpers.export(exports, "timeSunday", ()=>_weekJs.sunday
);
parcelHelpers.export(exports, "timeSundays", ()=>_weekJs.sundays
);
parcelHelpers.export(exports, "timeMonday", ()=>_weekJs.monday
);
parcelHelpers.export(exports, "timeMondays", ()=>_weekJs.mondays
);
parcelHelpers.export(exports, "timeTuesday", ()=>_weekJs.tuesday
);
parcelHelpers.export(exports, "timeTuesdays", ()=>_weekJs.tuesdays
);
parcelHelpers.export(exports, "timeWednesday", ()=>_weekJs.wednesday
);
parcelHelpers.export(exports, "timeWednesdays", ()=>_weekJs.wednesdays
);
parcelHelpers.export(exports, "timeThursday", ()=>_weekJs.thursday
);
parcelHelpers.export(exports, "timeThursdays", ()=>_weekJs.thursdays
);
parcelHelpers.export(exports, "timeFriday", ()=>_weekJs.friday
);
parcelHelpers.export(exports, "timeFridays", ()=>_weekJs.fridays
);
parcelHelpers.export(exports, "timeSaturday", ()=>_weekJs.saturday
);
parcelHelpers.export(exports, "timeSaturdays", ()=>_weekJs.saturdays
);
parcelHelpers.export(exports, "timeMonth", ()=>_monthJsDefault.default
);
parcelHelpers.export(exports, "timeMonths", ()=>_monthJs.months
);
parcelHelpers.export(exports, "timeYear", ()=>_yearJsDefault.default
);
parcelHelpers.export(exports, "timeYears", ()=>_yearJs.years
);
parcelHelpers.export(exports, "utcMinute", ()=>_utcMinuteJsDefault.default
);
parcelHelpers.export(exports, "utcMinutes", ()=>_utcMinuteJs.utcMinutes
);
parcelHelpers.export(exports, "utcHour", ()=>_utcHourJsDefault.default
);
parcelHelpers.export(exports, "utcHours", ()=>_utcHourJs.utcHours
);
parcelHelpers.export(exports, "utcDay", ()=>_utcDayJsDefault.default
);
parcelHelpers.export(exports, "utcDays", ()=>_utcDayJs.utcDays
);
parcelHelpers.export(exports, "utcWeek", ()=>_utcWeekJs.utcSunday
);
parcelHelpers.export(exports, "utcWeeks", ()=>_utcWeekJs.utcSundays
);
parcelHelpers.export(exports, "utcSunday", ()=>_utcWeekJs.utcSunday
);
parcelHelpers.export(exports, "utcSundays", ()=>_utcWeekJs.utcSundays
);
parcelHelpers.export(exports, "utcMonday", ()=>_utcWeekJs.utcMonday
);
parcelHelpers.export(exports, "utcMondays", ()=>_utcWeekJs.utcMondays
);
parcelHelpers.export(exports, "utcTuesday", ()=>_utcWeekJs.utcTuesday
);
parcelHelpers.export(exports, "utcTuesdays", ()=>_utcWeekJs.utcTuesdays
);
parcelHelpers.export(exports, "utcWednesday", ()=>_utcWeekJs.utcWednesday
);
parcelHelpers.export(exports, "utcWednesdays", ()=>_utcWeekJs.utcWednesdays
);
parcelHelpers.export(exports, "utcThursday", ()=>_utcWeekJs.utcThursday
);
parcelHelpers.export(exports, "utcThursdays", ()=>_utcWeekJs.utcThursdays
);
parcelHelpers.export(exports, "utcFriday", ()=>_utcWeekJs.utcFriday
);
parcelHelpers.export(exports, "utcFridays", ()=>_utcWeekJs.utcFridays
);
parcelHelpers.export(exports, "utcSaturday", ()=>_utcWeekJs.utcSaturday
);
parcelHelpers.export(exports, "utcSaturdays", ()=>_utcWeekJs.utcSaturdays
);
parcelHelpers.export(exports, "utcMonth", ()=>_utcMonthJsDefault.default
);
parcelHelpers.export(exports, "utcMonths", ()=>_utcMonthJs.utcMonths
);
parcelHelpers.export(exports, "utcYear", ()=>_utcYearJsDefault.default
);
parcelHelpers.export(exports, "utcYears", ()=>_utcYearJs.utcYears
);
parcelHelpers.export(exports, "utcTicks", ()=>_ticksJs.utcTicks
);
parcelHelpers.export(exports, "utcTickInterval", ()=>_ticksJs.utcTickInterval
);
parcelHelpers.export(exports, "timeTicks", ()=>_ticksJs.timeTicks
);
parcelHelpers.export(exports, "timeTickInterval", ()=>_ticksJs.timeTickInterval
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _millisecondJs = require("./millisecond.js");
var _millisecondJsDefault = parcelHelpers.interopDefault(_millisecondJs);
var _secondJs = require("./second.js");
var _secondJsDefault = parcelHelpers.interopDefault(_secondJs);
var _minuteJs = require("./minute.js");
var _minuteJsDefault = parcelHelpers.interopDefault(_minuteJs);
var _hourJs = require("./hour.js");
var _hourJsDefault = parcelHelpers.interopDefault(_hourJs);
var _dayJs = require("./day.js");
var _dayJsDefault = parcelHelpers.interopDefault(_dayJs);
var _weekJs = require("./week.js");
var _monthJs = require("./month.js");
var _monthJsDefault = parcelHelpers.interopDefault(_monthJs);
var _yearJs = require("./year.js");
var _yearJsDefault = parcelHelpers.interopDefault(_yearJs);
var _utcMinuteJs = require("./utcMinute.js");
var _utcMinuteJsDefault = parcelHelpers.interopDefault(_utcMinuteJs);
var _utcHourJs = require("./utcHour.js");
var _utcHourJsDefault = parcelHelpers.interopDefault(_utcHourJs);
var _utcDayJs = require("./utcDay.js");
var _utcDayJsDefault = parcelHelpers.interopDefault(_utcDayJs);
var _utcWeekJs = require("./utcWeek.js");
var _utcMonthJs = require("./utcMonth.js");
var _utcMonthJsDefault = parcelHelpers.interopDefault(_utcMonthJs);
var _utcYearJs = require("./utcYear.js");
var _utcYearJsDefault = parcelHelpers.interopDefault(_utcYearJs);
var _ticksJs = require("./ticks.js");

},{"./interval.js":"jfgl3","./millisecond.js":"aa2qY","./second.js":"iJtQu","./minute.js":"2Elkb","./hour.js":"jJqLM","./day.js":"1U9Pq","./week.js":"lmrQt","./month.js":"fSASr","./year.js":"d9SS9","./utcMinute.js":"6WR76","./utcHour.js":"jki3b","./utcDay.js":"liE20","./utcWeek.js":"gAbkz","./utcMonth.js":"ltWaa","./utcYear.js":"9p6NU","./ticks.js":"bl0Km","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfgl3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var t0 = new Date, t1 = new Date;
function newInterval(floori, offseti, count, field) {
    function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
    }
    interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
    };
    interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval.round = function(date) {
        var d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop)
        return range;
    };
    interval.filter = function(test) {
        return newInterval(function(date) {
            if (date >= date) while(floori(date), !test(date))date.setTime(date - 1);
        }, function(date, step) {
            if (date >= date) {
                if (step < 0) while(++step <= 0){
                    while(offseti(date, -1), !test(date)); // eslint-disable-line no-empty
                }
                else while(--step >= 0){
                    while(offseti(date, 1), !test(date)); // eslint-disable-line no-empty
                }
            }
        });
    };
    if (count) {
        interval.count = function(start, end) {
            t0.setTime(+start), t1.setTime(+end);
            floori(t0), floori(t1);
            return Math.floor(count(t0, t1));
        };
        interval.every = function(step) {
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
                return field(d) % step === 0;
            } : function(d) {
                return interval.count(0, d) % step === 0;
            });
        };
    }
    return interval;
}
exports.default = newInterval;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aa2qY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "milliseconds", ()=>milliseconds
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var millisecond = _intervalJsDefault.default(function() {
// noop
}, function(date, step) {
    date.setTime(+date + step);
}, function(start, end) {
    return end - start;
});
// An optimized implementation for this simple case.
millisecond.every = function(k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return _intervalJsDefault.default(function(date) {
        date.setTime(Math.floor(date / k) * k);
    }, function(date, step) {
        date.setTime(+date + step * k);
    }, function(start, end) {
        return (end - start) / k;
    });
};
exports.default = millisecond;
var milliseconds = millisecond.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJtQu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "seconds", ()=>seconds
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var second = _intervalJsDefault.default(function(date) {
    date.setTime(date - date.getMilliseconds());
}, function(date, step) {
    date.setTime(+date + step * _durationJs.durationSecond);
}, function(start, end) {
    return (end - start) / _durationJs.durationSecond;
}, function(date) {
    return date.getUTCSeconds();
});
exports.default = second;
var seconds = second.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iEiGQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "durationSecond", ()=>durationSecond
);
parcelHelpers.export(exports, "durationMinute", ()=>durationMinute
);
parcelHelpers.export(exports, "durationHour", ()=>durationHour
);
parcelHelpers.export(exports, "durationDay", ()=>durationDay
);
parcelHelpers.export(exports, "durationWeek", ()=>durationWeek
);
parcelHelpers.export(exports, "durationMonth", ()=>durationMonth
);
parcelHelpers.export(exports, "durationYear", ()=>durationYear
);
const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;
const durationWeek = durationDay * 7;
const durationMonth = durationDay * 30;
const durationYear = durationDay * 365;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Elkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minutes", ()=>minutes
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var minute = _intervalJsDefault.default(function(date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * _durationJs.durationSecond);
}, function(date, step) {
    date.setTime(+date + step * _durationJs.durationMinute);
}, function(start, end) {
    return (end - start) / _durationJs.durationMinute;
}, function(date) {
    return date.getMinutes();
});
exports.default = minute;
var minutes = minute.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJqLM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hours", ()=>hours
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var hour = _intervalJsDefault.default(function(date) {
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * _durationJs.durationSecond - date.getMinutes() * _durationJs.durationMinute);
}, function(date, step) {
    date.setTime(+date + step * _durationJs.durationHour);
}, function(start, end) {
    return (end - start) / _durationJs.durationHour;
}, function(date) {
    return date.getHours();
});
exports.default = hour;
var hours = hour.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1U9Pq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "days", ()=>days
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var day = _intervalJsDefault.default((date)=>date.setHours(0, 0, 0, 0)
, (date, step)=>date.setDate(date.getDate() + step)
, (start, end)=>(end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _durationJs.durationMinute) / _durationJs.durationDay
, (date)=>date.getDate() - 1
);
exports.default = day;
var days = day.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmrQt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sunday", ()=>sunday
);
parcelHelpers.export(exports, "monday", ()=>monday
);
parcelHelpers.export(exports, "tuesday", ()=>tuesday
);
parcelHelpers.export(exports, "wednesday", ()=>wednesday
);
parcelHelpers.export(exports, "thursday", ()=>thursday
);
parcelHelpers.export(exports, "friday", ()=>friday
);
parcelHelpers.export(exports, "saturday", ()=>saturday
);
parcelHelpers.export(exports, "sundays", ()=>sundays
);
parcelHelpers.export(exports, "mondays", ()=>mondays
);
parcelHelpers.export(exports, "tuesdays", ()=>tuesdays
);
parcelHelpers.export(exports, "wednesdays", ()=>wednesdays
);
parcelHelpers.export(exports, "thursdays", ()=>thursdays
);
parcelHelpers.export(exports, "fridays", ()=>fridays
);
parcelHelpers.export(exports, "saturdays", ()=>saturdays
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
function weekday(i) {
    return _intervalJsDefault.default(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
    }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _durationJs.durationMinute) / _durationJs.durationWeek;
    });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSASr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "months", ()=>months
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var month = _intervalJsDefault.default(function(date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
}, function(date, step) {
    date.setMonth(date.getMonth() + step);
}, function(start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
    return date.getMonth();
});
exports.default = month;
var months = month.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9SS9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "years", ()=>years
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var year = _intervalJsDefault.default(function(date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
}, function(date, step) {
    date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
    return end.getFullYear() - start.getFullYear();
}, function(date) {
    return date.getFullYear();
});
// An optimized implementation for this simple case.
year.every = function(k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : _intervalJsDefault.default(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
    });
};
exports.default = year;
var years = year.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6WR76":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcMinutes", ()=>utcMinutes
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var utcMinute = _intervalJsDefault.default(function(date) {
    date.setUTCSeconds(0, 0);
}, function(date, step) {
    date.setTime(+date + step * _durationJs.durationMinute);
}, function(start, end) {
    return (end - start) / _durationJs.durationMinute;
}, function(date) {
    return date.getUTCMinutes();
});
exports.default = utcMinute;
var utcMinutes = utcMinute.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jki3b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcHours", ()=>utcHours
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var utcHour = _intervalJsDefault.default(function(date) {
    date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
    date.setTime(+date + step * _durationJs.durationHour);
}, function(start, end) {
    return (end - start) / _durationJs.durationHour;
}, function(date) {
    return date.getUTCHours();
});
exports.default = utcHour;
var utcHours = utcHour.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"liE20":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcDays", ()=>utcDays
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
var utcDay = _intervalJsDefault.default(function(date) {
    date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
    return (end - start) / _durationJs.durationDay;
}, function(date) {
    return date.getUTCDate() - 1;
});
exports.default = utcDay;
var utcDays = utcDay.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gAbkz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcSunday", ()=>utcSunday
);
parcelHelpers.export(exports, "utcMonday", ()=>utcMonday
);
parcelHelpers.export(exports, "utcTuesday", ()=>utcTuesday
);
parcelHelpers.export(exports, "utcWednesday", ()=>utcWednesday
);
parcelHelpers.export(exports, "utcThursday", ()=>utcThursday
);
parcelHelpers.export(exports, "utcFriday", ()=>utcFriday
);
parcelHelpers.export(exports, "utcSaturday", ()=>utcSaturday
);
parcelHelpers.export(exports, "utcSundays", ()=>utcSundays
);
parcelHelpers.export(exports, "utcMondays", ()=>utcMondays
);
parcelHelpers.export(exports, "utcTuesdays", ()=>utcTuesdays
);
parcelHelpers.export(exports, "utcWednesdays", ()=>utcWednesdays
);
parcelHelpers.export(exports, "utcThursdays", ()=>utcThursdays
);
parcelHelpers.export(exports, "utcFridays", ()=>utcFridays
);
parcelHelpers.export(exports, "utcSaturdays", ()=>utcSaturdays
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var _durationJs = require("./duration.js");
function utcWeekday(i) {
    return _intervalJsDefault.default(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
    }, function(start, end) {
        return (end - start) / _durationJs.durationWeek;
    });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltWaa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcMonths", ()=>utcMonths
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var utcMonth = _intervalJsDefault.default(function(date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
    return date.getUTCMonth();
});
exports.default = utcMonth;
var utcMonths = utcMonth.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9p6NU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcYears", ()=>utcYears
);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);
var utcYear = _intervalJsDefault.default(function(date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
    return date.getUTCFullYear();
});
// An optimized implementation for this simple case.
utcYear.every = function(k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : _intervalJsDefault.default(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
};
exports.default = utcYear;
var utcYears = utcYear.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bl0Km":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcTicks", ()=>utcTicks
);
parcelHelpers.export(exports, "utcTickInterval", ()=>utcTickInterval
);
parcelHelpers.export(exports, "timeTicks", ()=>timeTicks
);
parcelHelpers.export(exports, "timeTickInterval", ()=>timeTickInterval
);
var _d3Array = require("d3-array");
var _durationJs = require("./duration.js");
var _millisecondJs = require("./millisecond.js");
var _millisecondJsDefault = parcelHelpers.interopDefault(_millisecondJs);
var _secondJs = require("./second.js");
var _secondJsDefault = parcelHelpers.interopDefault(_secondJs);
var _minuteJs = require("./minute.js");
var _minuteJsDefault = parcelHelpers.interopDefault(_minuteJs);
var _hourJs = require("./hour.js");
var _hourJsDefault = parcelHelpers.interopDefault(_hourJs);
var _dayJs = require("./day.js");
var _dayJsDefault = parcelHelpers.interopDefault(_dayJs);
var _weekJs = require("./week.js");
var _monthJs = require("./month.js");
var _monthJsDefault = parcelHelpers.interopDefault(_monthJs);
var _yearJs = require("./year.js");
var _yearJsDefault = parcelHelpers.interopDefault(_yearJs);
var _utcMinuteJs = require("./utcMinute.js");
var _utcMinuteJsDefault = parcelHelpers.interopDefault(_utcMinuteJs);
var _utcHourJs = require("./utcHour.js");
var _utcHourJsDefault = parcelHelpers.interopDefault(_utcHourJs);
var _utcDayJs = require("./utcDay.js");
var _utcDayJsDefault = parcelHelpers.interopDefault(_utcDayJs);
var _utcWeekJs = require("./utcWeek.js");
var _utcMonthJs = require("./utcMonth.js");
var _utcMonthJsDefault = parcelHelpers.interopDefault(_utcMonthJs);
var _utcYearJs = require("./utcYear.js");
var _utcYearJsDefault = parcelHelpers.interopDefault(_utcYearJs);
function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
        [
            _secondJsDefault.default,
            1,
            _durationJs.durationSecond
        ],
        [
            _secondJsDefault.default,
            5,
            5 * _durationJs.durationSecond
        ],
        [
            _secondJsDefault.default,
            15,
            15 * _durationJs.durationSecond
        ],
        [
            _secondJsDefault.default,
            30,
            30 * _durationJs.durationSecond
        ],
        [
            minute,
            1,
            _durationJs.durationMinute
        ],
        [
            minute,
            5,
            5 * _durationJs.durationMinute
        ],
        [
            minute,
            15,
            15 * _durationJs.durationMinute
        ],
        [
            minute,
            30,
            30 * _durationJs.durationMinute
        ],
        [
            hour,
            1,
            _durationJs.durationHour
        ],
        [
            hour,
            3,
            3 * _durationJs.durationHour
        ],
        [
            hour,
            6,
            6 * _durationJs.durationHour
        ],
        [
            hour,
            12,
            12 * _durationJs.durationHour
        ],
        [
            day,
            1,
            _durationJs.durationDay
        ],
        [
            day,
            2,
            2 * _durationJs.durationDay
        ],
        [
            week,
            1,
            _durationJs.durationWeek
        ],
        [
            month,
            1,
            _durationJs.durationMonth
        ],
        [
            month,
            3,
            3 * _durationJs.durationMonth
        ],
        [
            year,
            1,
            _durationJs.durationYear
        ]
    ];
    function ticks1(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [
            stop,
            start
        ];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
    }
    function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = _d3Array.bisector(([, , step])=>step
        ).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every(_d3Array.tickStep(start / _durationJs.durationYear, stop / _durationJs.durationYear, count));
        if (i === 0) return _millisecondJsDefault.default.every(Math.max(_d3Array.tickStep(start, stop, count), 1));
        const [t, step1] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step1);
    }
    return [
        ticks1,
        tickInterval
    ];
}
const [utcTicks, utcTickInterval] = ticker(_utcYearJsDefault.default, _utcMonthJsDefault.default, _utcWeekJs.utcSunday, _utcDayJsDefault.default, _utcHourJsDefault.default, _utcMinuteJsDefault.default);
const [timeTicks, timeTickInterval] = ticker(_yearJsDefault.default, _monthJsDefault.default, _weekJs.sunday, _dayJsDefault.default, _hourJsDefault.default, _minuteJsDefault.default);

},{"d3-array":"1yX2W","./duration.js":"iEiGQ","./millisecond.js":"aa2qY","./second.js":"iJtQu","./minute.js":"2Elkb","./hour.js":"jJqLM","./day.js":"1U9Pq","./week.js":"lmrQt","./month.js":"fSASr","./year.js":"d9SS9","./utcMinute.js":"6WR76","./utcHour.js":"jki3b","./utcDay.js":"liE20","./utcWeek.js":"gAbkz","./utcMonth.js":"ltWaa","./utcYear.js":"9p6NU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FtNS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeFormatDefaultLocale", ()=>_defaultLocaleJsDefault.default
);
parcelHelpers.export(exports, "timeFormat", ()=>_defaultLocaleJs.timeFormat
);
parcelHelpers.export(exports, "timeParse", ()=>_defaultLocaleJs.timeParse
);
parcelHelpers.export(exports, "utcFormat", ()=>_defaultLocaleJs.utcFormat
);
parcelHelpers.export(exports, "utcParse", ()=>_defaultLocaleJs.utcParse
);
parcelHelpers.export(exports, "timeFormatLocale", ()=>_localeJsDefault.default
);
parcelHelpers.export(exports, "isoFormat", ()=>_isoFormatJsDefault.default
);
parcelHelpers.export(exports, "isoParse", ()=>_isoParseJsDefault.default
);
var _defaultLocaleJs = require("./defaultLocale.js");
var _defaultLocaleJsDefault = parcelHelpers.interopDefault(_defaultLocaleJs);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var _isoFormatJs = require("./isoFormat.js");
var _isoFormatJsDefault = parcelHelpers.interopDefault(_isoFormatJs);
var _isoParseJs = require("./isoParse.js");
var _isoParseJsDefault = parcelHelpers.interopDefault(_isoParseJs);

},{"./defaultLocale.js":"6OjO5","./locale.js":"4m5qt","./isoFormat.js":"hR1xp","./isoParse.js":"i5wyy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OjO5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeFormat", ()=>timeFormat
);
parcelHelpers.export(exports, "timeParse", ()=>timeParse
);
parcelHelpers.export(exports, "utcFormat", ()=>utcFormat
);
parcelHelpers.export(exports, "utcParse", ()=>utcParse
);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: [
        "AM",
        "PM"
    ],
    days: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ],
    shortDays: [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ],
    shortMonths: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ]
});
function defaultLocale(definition) {
    locale = _localeJsDefault.default(definition);
    timeFormat = locale.format;
    timeParse = locale.parse;
    utcFormat = locale.utcFormat;
    utcParse = locale.utcParse;
    return locale;
}
exports.default = defaultLocale;

},{"./locale.js":"4m5qt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4m5qt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Time = require("d3-time");
function localDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m, d) {
    return {
        y: y,
        m: m,
        d: d,
        H: 0,
        M: 0,
        S: 0,
        L: 0
    };
}
function formatLocale(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats1 = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
    };
    var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
    };
    var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
    };
    // These recursive directive definitions must be deferred.
    formats1.x = newFormat(locale_date, formats1);
    formats1.X = newFormat(locale_time, formats1);
    formats1.c = newFormat(locale_dateTime, formats1);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats) {
        return function(date) {
            var string = [], i = -1, j = 0, n = specifier.length, c, pad1, format;
            if (!(date instanceof Date)) date = new Date(+date);
            while(++i < n)if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad1 = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
                else pad1 = c === "e" ? " " : "0";
                if (format = formats[c]) c = format(date, pad1);
                string.push(c);
                j = i + 1;
            }
            string.push(specifier.slice(j, i));
            return string.join("");
        };
    }
    function newParse(specifier, Z) {
        return function(string) {
            var d = newDate(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
            if (i != string.length) return null;
            // If a UNIX timestamp is specified, return it.
            if ("Q" in d) return new Date(d.Q);
            if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
            // If this is utcParse, never use the local timezone.
            if (Z && !("Z" in d)) d.Z = 0;
            // The am-pm flag is 0 for AM, and 1 for PM.
            if ("p" in d) d.H = d.H % 12 + d.p * 12;
            // If the month was not specified, inherit from the quarter.
            if (d.m === undefined) d.m = "q" in d ? d.q : 0;
            // Convert day-of-week and week-of-year to day-of-year.
            if ("V" in d) {
                if (d.V < 1 || d.V > 53) return null;
                if (!("w" in d)) d.w = 1;
                if ("Z" in d) {
                    week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
                    week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : _d3Time.utcMonday(week);
                    week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
                    d.y = week.getUTCFullYear();
                    d.m = week.getUTCMonth();
                    d.d = week.getUTCDate() + (d.w + 6) % 7;
                } else {
                    week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
                    week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : _d3Time.timeMonday(week);
                    week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
                    d.y = week.getFullYear();
                    d.m = week.getMonth();
                    d.d = week.getDate() + (d.w + 6) % 7;
                }
            } else if ("W" in d || "U" in d) {
                if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
                d.m = 0;
                d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
            }
            // If a time zone is specified, all fields are interpreted as UTC and then
            // offset according to the specified time zone.
            if ("Z" in d) {
                d.H += d.Z / 100 | 0;
                d.M += d.Z % 100;
                return utcDate(d);
            }
            // Otherwise, all fields are in local time.
            return localDate(d);
        };
    }
    function parseSpecifier(d, specifier, string, j) {
        var i = 0, n = specifier.length, m = string.length, c, parse;
        while(i < n){
            if (j >= m) return -1;
            c = specifier.charCodeAt(i++);
            if (c === 37) {
                c = specifier.charAt(i++);
                parse = parses[c in pads ? specifier.charAt(i++) : c];
                if (!parse || (j = parse(d, string, j)) < 0) return -1;
            } else if (c != string.charCodeAt(j++)) return -1;
        }
        return j;
    }
    function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
        return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
        format: function(specifier) {
            var f = newFormat(specifier += "", formats1);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        parse: function(specifier) {
            var p = newParse(specifier += "", false);
            p.toString = function() {
                return specifier;
            };
            return p;
        },
        utcFormat: function(specifier) {
            var f = newFormat(specifier += "", utcFormats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        utcParse: function(specifier) {
            var p = newParse(specifier += "", true);
            p.toString = function() {
                return specifier;
            };
            return p;
        }
    };
}
exports.default = formatLocale;
var pads = {
    "-": "",
    "_": " ",
    "0": "0"
}, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
    return s.replace(requoteRe, "\\$&");
}
function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
    return new Map(names.map((name, i)=>[
            name.toLowerCase(),
            i
        ]
    ));
}
function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
    return pad(1 + _d3Time.timeDay.count(_d3Time.timeYear(d), d), p, 3);
}
function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
    return pad(_d3Time.timeSunday.count(_d3Time.timeYear(d) - 1, d), p, 2);
}
function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? _d3Time.timeThursday(d) : _d3Time.timeThursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad(_d3Time.timeThursday.count(_d3Time.timeYear(d), d) + (_d3Time.timeYear(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
    return d.getDay();
}
function formatWeekNumberMonday(d, p) {
    return pad(_d3Time.timeMonday.count(_d3Time.timeYear(d) - 1, d), p, 2);
}
function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
}
function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? _d3Time.timeThursday(d) : _d3Time.timeThursday.ceil(d);
    return pad(d.getFullYear() % 10000, p, 4);
}
function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
    return pad(1 + _d3Time.utcDay.count(_d3Time.utcYear(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
    return pad(_d3Time.utcSunday.count(_d3Time.utcYear(d) - 1, d), p, 2);
}
function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? _d3Time.utcThursday(d) : _d3Time.utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad(_d3Time.utcThursday.count(_d3Time.utcYear(d), d) + (_d3Time.utcYear(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
    return pad(_d3Time.utcMonday.count(_d3Time.utcYear(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
}
function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? _d3Time.utcThursday(d) : _d3Time.utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 10000, p, 4);
}
function formatUTCZone() {
    return "+0000";
}
function formatLiteralPercent() {
    return "%";
}
function formatUnixTimestamp(d) {
    return +d;
}
function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
}

},{"d3-time":"1UOEe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hR1xp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isoSpecifier", ()=>isoSpecifier
);
var _defaultLocaleJs = require("./defaultLocale.js");
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
    return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : _defaultLocaleJs.utcFormat(isoSpecifier);
exports.default = formatIso;

},{"./defaultLocale.js":"6OjO5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i5wyy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isoFormatJs = require("./isoFormat.js");
var _defaultLocaleJs = require("./defaultLocale.js");
function parseIsoNative(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
}
var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : _defaultLocaleJs.utcParse(_isoFormatJs.isoSpecifier);
exports.default = parseIso;

},{"./isoFormat.js":"hR1xp","./defaultLocale.js":"6OjO5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ufv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Time = require("d3-time");
var _d3TimeFormat = require("d3-time-format");
var _timeJs = require("./time.js");
var _initJs = require("./init.js");
function utcTime() {
    return _initJs.initRange.apply(_timeJs.calendar(_d3Time.utcTicks, _d3Time.utcTickInterval, _d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3TimeFormat.utcFormat).domain([
        Date.UTC(2000, 0, 1),
        Date.UTC(2000, 0, 2)
    ]), arguments);
}
exports.default = utcTime;

},{"d3-time":"1UOEe","d3-time-format":"4FtNS","./time.js":"7UVid","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMNy9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copy", ()=>copy
);
parcelHelpers.export(exports, "sequentialLog", ()=>sequentialLog
);
parcelHelpers.export(exports, "sequentialSymlog", ()=>sequentialSymlog
);
parcelHelpers.export(exports, "sequentialPow", ()=>sequentialPow
);
parcelHelpers.export(exports, "sequentialSqrt", ()=>sequentialSqrt
);
var _d3Interpolate = require("d3-interpolate");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _logJs = require("./log.js");
var _symlogJs = require("./symlog.js");
var _powJs = require("./pow.js");
function transformer() {
    var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = _continuousJs.identity, clamp = false, unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [
            x0,
            x1
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1;
            return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [
                interpolator(0),
                interpolator(1)
            ];
        };
    }
    scale.range = range(_d3Interpolate.interpolate);
    scale.rangeRound = range(_d3Interpolate.interpolateRound);
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
    };
}
function copy(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
    var scale = _linearJs.linearish(transformer()(_continuousJs.identity));
    scale.copy = function() {
        return copy(scale, sequential());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
exports.default = sequential;
function sequentialLog() {
    var scale = _logJs.loggish(transformer()).domain([
        1,
        10
    ]);
    scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
function sequentialSymlog() {
    var scale = _symlogJs.symlogish(transformer());
    scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
function sequentialPow() {
    var scale = _powJs.powish(transformer());
    scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
}

},{"d3-interpolate":"6jJyi","./continuous.js":"1LsCM","./init.js":"kp8lc","./linear.js":"lob4K","./log.js":"z4t8s","./symlog.js":"4KiG8","./pow.js":"jVG8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"esKgz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function sequentialQuantile() {
    var domain = [], interpolator = _continuousJs.identity;
    function scale(x) {
        if (x != null && !isNaN(x = +x)) return interpolator((_d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));
    }
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _)if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(_d3Array.ascending);
        return scale;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    scale.range = function() {
        return domain.map((d, i)=>interpolator(i / (domain.length - 1))
        );
    };
    scale.quantiles = function(n) {
        return Array.from({
            length: n + 1
        }, (_, i)=>_d3Array.quantile(domain, i / n)
        );
    };
    scale.copy = function() {
        return sequentialQuantile(interpolator).domain(domain);
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
exports.default = sequentialQuantile;

},{"d3-array":"1yX2W","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3BN2V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "divergingLog", ()=>divergingLog
);
parcelHelpers.export(exports, "divergingSymlog", ()=>divergingSymlog
);
parcelHelpers.export(exports, "divergingPow", ()=>divergingPow
);
parcelHelpers.export(exports, "divergingSqrt", ()=>divergingSqrt
);
var _d3Interpolate = require("d3-interpolate");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _logJs = require("./log.js");
var _sequentialJs = require("./sequential.js");
var _symlogJs = require("./symlog.js");
var _powJs = require("./pow.js");
function transformer() {
    var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t0, t1, t2, k10, k21, interpolator = _continuousJs.identity, transform, clamp = false, unknown;
    function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [
            x0,
            x1,
            x2
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1, r2;
            return arguments.length ? ([r0, r1, r2] = _, interpolator = _d3Interpolate.piecewise(interpolate, [
                r0,
                r1,
                r2
            ]), scale) : [
                interpolator(0),
                interpolator(0.5),
                interpolator(1)
            ];
        };
    }
    scale.range = range(_d3Interpolate.interpolate);
    scale.rangeRound = range(_d3Interpolate.interpolateRound);
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
    };
}
function diverging() {
    var scale = _linearJs.linearish(transformer()(_continuousJs.identity));
    scale.copy = function() {
        return _sequentialJs.copy(scale, diverging());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
exports.default = diverging;
function divergingLog() {
    var scale = _logJs.loggish(transformer()).domain([
        0.1,
        1,
        10
    ]);
    scale.copy = function() {
        return _sequentialJs.copy(scale, divergingLog()).base(scale.base());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
function divergingSymlog() {
    var scale = _symlogJs.symlogish(transformer());
    scale.copy = function() {
        return _sequentialJs.copy(scale, divergingSymlog()).constant(scale.constant());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
function divergingPow() {
    var scale = _powJs.powish(transformer());
    scale.copy = function() {
        return _sequentialJs.copy(scale, divergingPow()).exponent(scale.exponent());
    };
    return _initJs.initInterpolator.apply(scale, arguments);
}
function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
}

},{"d3-interpolate":"6jJyi","./continuous.js":"1LsCM","./init.js":"kp8lc","./linear.js":"lob4K","./log.js":"z4t8s","./sequential.js":"aMNy9","./symlog.js":"4KiG8","./pow.js":"jVG8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfCpU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "schemeCategory10", ()=>_category10JsDefault.default
);
parcelHelpers.export(exports, "schemeAccent", ()=>_accentJsDefault.default
);
parcelHelpers.export(exports, "schemeDark2", ()=>_dark2JsDefault.default
);
parcelHelpers.export(exports, "schemePaired", ()=>_pairedJsDefault.default
);
parcelHelpers.export(exports, "schemePastel1", ()=>_pastel1JsDefault.default
);
parcelHelpers.export(exports, "schemePastel2", ()=>_pastel2JsDefault.default
);
parcelHelpers.export(exports, "schemeSet1", ()=>_set1JsDefault.default
);
parcelHelpers.export(exports, "schemeSet2", ()=>_set2JsDefault.default
);
parcelHelpers.export(exports, "schemeSet3", ()=>_set3JsDefault.default
);
parcelHelpers.export(exports, "schemeTableau10", ()=>_tableau10JsDefault.default
);
parcelHelpers.export(exports, "interpolateBrBG", ()=>_brBGJsDefault.default
);
parcelHelpers.export(exports, "schemeBrBG", ()=>_brBGJs.scheme
);
parcelHelpers.export(exports, "interpolatePRGn", ()=>_prgnJsDefault.default
);
parcelHelpers.export(exports, "schemePRGn", ()=>_prgnJs.scheme
);
parcelHelpers.export(exports, "interpolatePiYG", ()=>_piYGJsDefault.default
);
parcelHelpers.export(exports, "schemePiYG", ()=>_piYGJs.scheme
);
parcelHelpers.export(exports, "interpolatePuOr", ()=>_puOrJsDefault.default
);
parcelHelpers.export(exports, "schemePuOr", ()=>_puOrJs.scheme
);
parcelHelpers.export(exports, "interpolateRdBu", ()=>_rdBuJsDefault.default
);
parcelHelpers.export(exports, "schemeRdBu", ()=>_rdBuJs.scheme
);
parcelHelpers.export(exports, "interpolateRdGy", ()=>_rdGyJsDefault.default
);
parcelHelpers.export(exports, "schemeRdGy", ()=>_rdGyJs.scheme
);
parcelHelpers.export(exports, "interpolateRdYlBu", ()=>_rdYlBuJsDefault.default
);
parcelHelpers.export(exports, "schemeRdYlBu", ()=>_rdYlBuJs.scheme
);
parcelHelpers.export(exports, "interpolateRdYlGn", ()=>_rdYlGnJsDefault.default
);
parcelHelpers.export(exports, "schemeRdYlGn", ()=>_rdYlGnJs.scheme
);
parcelHelpers.export(exports, "interpolateSpectral", ()=>_spectralJsDefault.default
);
parcelHelpers.export(exports, "schemeSpectral", ()=>_spectralJs.scheme
);
parcelHelpers.export(exports, "interpolateBuGn", ()=>_buGnJsDefault.default
);
parcelHelpers.export(exports, "schemeBuGn", ()=>_buGnJs.scheme
);
parcelHelpers.export(exports, "interpolateBuPu", ()=>_buPuJsDefault.default
);
parcelHelpers.export(exports, "schemeBuPu", ()=>_buPuJs.scheme
);
parcelHelpers.export(exports, "interpolateGnBu", ()=>_gnBuJsDefault.default
);
parcelHelpers.export(exports, "schemeGnBu", ()=>_gnBuJs.scheme
);
parcelHelpers.export(exports, "interpolateOrRd", ()=>_orRdJsDefault.default
);
parcelHelpers.export(exports, "schemeOrRd", ()=>_orRdJs.scheme
);
parcelHelpers.export(exports, "interpolatePuBuGn", ()=>_puBuGnJsDefault.default
);
parcelHelpers.export(exports, "schemePuBuGn", ()=>_puBuGnJs.scheme
);
parcelHelpers.export(exports, "interpolatePuBu", ()=>_puBuJsDefault.default
);
parcelHelpers.export(exports, "schemePuBu", ()=>_puBuJs.scheme
);
parcelHelpers.export(exports, "interpolatePuRd", ()=>_puRdJsDefault.default
);
parcelHelpers.export(exports, "schemePuRd", ()=>_puRdJs.scheme
);
parcelHelpers.export(exports, "interpolateRdPu", ()=>_rdPuJsDefault.default
);
parcelHelpers.export(exports, "schemeRdPu", ()=>_rdPuJs.scheme
);
parcelHelpers.export(exports, "interpolateYlGnBu", ()=>_ylGnBuJsDefault.default
);
parcelHelpers.export(exports, "schemeYlGnBu", ()=>_ylGnBuJs.scheme
);
parcelHelpers.export(exports, "interpolateYlGn", ()=>_ylGnJsDefault.default
);
parcelHelpers.export(exports, "schemeYlGn", ()=>_ylGnJs.scheme
);
parcelHelpers.export(exports, "interpolateYlOrBr", ()=>_ylOrBrJsDefault.default
);
parcelHelpers.export(exports, "schemeYlOrBr", ()=>_ylOrBrJs.scheme
);
parcelHelpers.export(exports, "interpolateYlOrRd", ()=>_ylOrRdJsDefault.default
);
parcelHelpers.export(exports, "schemeYlOrRd", ()=>_ylOrRdJs.scheme
);
parcelHelpers.export(exports, "interpolateBlues", ()=>_bluesJsDefault.default
);
parcelHelpers.export(exports, "schemeBlues", ()=>_bluesJs.scheme
);
parcelHelpers.export(exports, "interpolateGreens", ()=>_greensJsDefault.default
);
parcelHelpers.export(exports, "schemeGreens", ()=>_greensJs.scheme
);
parcelHelpers.export(exports, "interpolateGreys", ()=>_greysJsDefault.default
);
parcelHelpers.export(exports, "schemeGreys", ()=>_greysJs.scheme
);
parcelHelpers.export(exports, "interpolatePurples", ()=>_purplesJsDefault.default
);
parcelHelpers.export(exports, "schemePurples", ()=>_purplesJs.scheme
);
parcelHelpers.export(exports, "interpolateReds", ()=>_redsJsDefault.default
);
parcelHelpers.export(exports, "schemeReds", ()=>_redsJs.scheme
);
parcelHelpers.export(exports, "interpolateOranges", ()=>_orangesJsDefault.default
);
parcelHelpers.export(exports, "schemeOranges", ()=>_orangesJs.scheme
);
parcelHelpers.export(exports, "interpolateCividis", ()=>_cividisJsDefault.default
);
parcelHelpers.export(exports, "interpolateCubehelixDefault", ()=>_cubehelixJsDefault.default
);
parcelHelpers.export(exports, "interpolateRainbow", ()=>_rainbowJsDefault.default
);
parcelHelpers.export(exports, "interpolateWarm", ()=>_rainbowJs.warm
);
parcelHelpers.export(exports, "interpolateCool", ()=>_rainbowJs.cool
);
parcelHelpers.export(exports, "interpolateSinebow", ()=>_sinebowJsDefault.default
);
parcelHelpers.export(exports, "interpolateTurbo", ()=>_turboJsDefault.default
);
parcelHelpers.export(exports, "interpolateViridis", ()=>_viridisJsDefault.default
);
parcelHelpers.export(exports, "interpolateMagma", ()=>_viridisJs.magma
);
parcelHelpers.export(exports, "interpolateInferno", ()=>_viridisJs.inferno
);
parcelHelpers.export(exports, "interpolatePlasma", ()=>_viridisJs.plasma
);
var _category10Js = require("./categorical/category10.js");
var _category10JsDefault = parcelHelpers.interopDefault(_category10Js);
var _accentJs = require("./categorical/Accent.js");
var _accentJsDefault = parcelHelpers.interopDefault(_accentJs);
var _dark2Js = require("./categorical/Dark2.js");
var _dark2JsDefault = parcelHelpers.interopDefault(_dark2Js);
var _pairedJs = require("./categorical/Paired.js");
var _pairedJsDefault = parcelHelpers.interopDefault(_pairedJs);
var _pastel1Js = require("./categorical/Pastel1.js");
var _pastel1JsDefault = parcelHelpers.interopDefault(_pastel1Js);
var _pastel2Js = require("./categorical/Pastel2.js");
var _pastel2JsDefault = parcelHelpers.interopDefault(_pastel2Js);
var _set1Js = require("./categorical/Set1.js");
var _set1JsDefault = parcelHelpers.interopDefault(_set1Js);
var _set2Js = require("./categorical/Set2.js");
var _set2JsDefault = parcelHelpers.interopDefault(_set2Js);
var _set3Js = require("./categorical/Set3.js");
var _set3JsDefault = parcelHelpers.interopDefault(_set3Js);
var _tableau10Js = require("./categorical/Tableau10.js");
var _tableau10JsDefault = parcelHelpers.interopDefault(_tableau10Js);
var _brBGJs = require("./diverging/BrBG.js");
var _brBGJsDefault = parcelHelpers.interopDefault(_brBGJs);
var _prgnJs = require("./diverging/PRGn.js");
var _prgnJsDefault = parcelHelpers.interopDefault(_prgnJs);
var _piYGJs = require("./diverging/PiYG.js");
var _piYGJsDefault = parcelHelpers.interopDefault(_piYGJs);
var _puOrJs = require("./diverging/PuOr.js");
var _puOrJsDefault = parcelHelpers.interopDefault(_puOrJs);
var _rdBuJs = require("./diverging/RdBu.js");
var _rdBuJsDefault = parcelHelpers.interopDefault(_rdBuJs);
var _rdGyJs = require("./diverging/RdGy.js");
var _rdGyJsDefault = parcelHelpers.interopDefault(_rdGyJs);
var _rdYlBuJs = require("./diverging/RdYlBu.js");
var _rdYlBuJsDefault = parcelHelpers.interopDefault(_rdYlBuJs);
var _rdYlGnJs = require("./diverging/RdYlGn.js");
var _rdYlGnJsDefault = parcelHelpers.interopDefault(_rdYlGnJs);
var _spectralJs = require("./diverging/Spectral.js");
var _spectralJsDefault = parcelHelpers.interopDefault(_spectralJs);
var _buGnJs = require("./sequential-multi/BuGn.js");
var _buGnJsDefault = parcelHelpers.interopDefault(_buGnJs);
var _buPuJs = require("./sequential-multi/BuPu.js");
var _buPuJsDefault = parcelHelpers.interopDefault(_buPuJs);
var _gnBuJs = require("./sequential-multi/GnBu.js");
var _gnBuJsDefault = parcelHelpers.interopDefault(_gnBuJs);
var _orRdJs = require("./sequential-multi/OrRd.js");
var _orRdJsDefault = parcelHelpers.interopDefault(_orRdJs);
var _puBuGnJs = require("./sequential-multi/PuBuGn.js");
var _puBuGnJsDefault = parcelHelpers.interopDefault(_puBuGnJs);
var _puBuJs = require("./sequential-multi/PuBu.js");
var _puBuJsDefault = parcelHelpers.interopDefault(_puBuJs);
var _puRdJs = require("./sequential-multi/PuRd.js");
var _puRdJsDefault = parcelHelpers.interopDefault(_puRdJs);
var _rdPuJs = require("./sequential-multi/RdPu.js");
var _rdPuJsDefault = parcelHelpers.interopDefault(_rdPuJs);
var _ylGnBuJs = require("./sequential-multi/YlGnBu.js");
var _ylGnBuJsDefault = parcelHelpers.interopDefault(_ylGnBuJs);
var _ylGnJs = require("./sequential-multi/YlGn.js");
var _ylGnJsDefault = parcelHelpers.interopDefault(_ylGnJs);
var _ylOrBrJs = require("./sequential-multi/YlOrBr.js");
var _ylOrBrJsDefault = parcelHelpers.interopDefault(_ylOrBrJs);
var _ylOrRdJs = require("./sequential-multi/YlOrRd.js");
var _ylOrRdJsDefault = parcelHelpers.interopDefault(_ylOrRdJs);
var _bluesJs = require("./sequential-single/Blues.js");
var _bluesJsDefault = parcelHelpers.interopDefault(_bluesJs);
var _greensJs = require("./sequential-single/Greens.js");
var _greensJsDefault = parcelHelpers.interopDefault(_greensJs);
var _greysJs = require("./sequential-single/Greys.js");
var _greysJsDefault = parcelHelpers.interopDefault(_greysJs);
var _purplesJs = require("./sequential-single/Purples.js");
var _purplesJsDefault = parcelHelpers.interopDefault(_purplesJs);
var _redsJs = require("./sequential-single/Reds.js");
var _redsJsDefault = parcelHelpers.interopDefault(_redsJs);
var _orangesJs = require("./sequential-single/Oranges.js");
var _orangesJsDefault = parcelHelpers.interopDefault(_orangesJs);
var _cividisJs = require("./sequential-multi/cividis.js");
var _cividisJsDefault = parcelHelpers.interopDefault(_cividisJs);
var _cubehelixJs = require("./sequential-multi/cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);
var _rainbowJs = require("./sequential-multi/rainbow.js");
var _rainbowJsDefault = parcelHelpers.interopDefault(_rainbowJs);
var _sinebowJs = require("./sequential-multi/sinebow.js");
var _sinebowJsDefault = parcelHelpers.interopDefault(_sinebowJs);
var _turboJs = require("./sequential-multi/turbo.js");
var _turboJsDefault = parcelHelpers.interopDefault(_turboJs);
var _viridisJs = require("./sequential-multi/viridis.js");
var _viridisJsDefault = parcelHelpers.interopDefault(_viridisJs);

},{"./categorical/category10.js":"j4Teo","./categorical/Accent.js":"lNYV9","./categorical/Dark2.js":"fK6db","./categorical/Paired.js":"7TRFs","./categorical/Pastel1.js":"8GWIR","./categorical/Pastel2.js":"5hLqW","./categorical/Set1.js":"6lXdW","./categorical/Set2.js":"ev0BU","./categorical/Set3.js":"ltDSo","./categorical/Tableau10.js":"gg57L","./diverging/BrBG.js":"aDyxU","./diverging/PRGn.js":"lJrID","./diverging/PiYG.js":"2UPPB","./diverging/PuOr.js":"hn6CX","./diverging/RdBu.js":"aBOAV","./diverging/RdGy.js":"6osTP","./diverging/RdYlBu.js":"hKUs9","./diverging/RdYlGn.js":"eKp3o","./diverging/Spectral.js":"9aNDP","./sequential-multi/BuGn.js":"22lwr","./sequential-multi/BuPu.js":"4irWf","./sequential-multi/GnBu.js":"964kK","./sequential-multi/OrRd.js":"3hdxq","./sequential-multi/PuBuGn.js":"9kVx1","./sequential-multi/PuBu.js":"43RCM","./sequential-multi/PuRd.js":"dhE1L","./sequential-multi/RdPu.js":"4Pqw0","./sequential-multi/YlGnBu.js":"3VnM6","./sequential-multi/YlGn.js":"f9Ai9","./sequential-multi/YlOrBr.js":"eI2jw","./sequential-multi/YlOrRd.js":"ao5E9","./sequential-single/Blues.js":"1pzBn","./sequential-single/Greens.js":"bVmeS","./sequential-single/Greys.js":"jsCuc","./sequential-single/Purples.js":"6Waty","./sequential-single/Reds.js":"2N3E3","./sequential-single/Oranges.js":"gWy5h","./sequential-multi/cividis.js":"2gM4s","./sequential-multi/cubehelix.js":"bK5z7","./sequential-multi/rainbow.js":"bjHKO","./sequential-multi/sinebow.js":"hqiUB","./sequential-multi/turbo.js":"6GvRp","./sequential-multi/viridis.js":"htSS8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4Teo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiYm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(specifier) {
    var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
    while(i < n)colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
    return colors;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNYV9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fK6db":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TRFs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GWIR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hLqW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lXdW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ev0BU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltDSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gg57L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = _colorsJsDefault.default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aDyxU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"289bX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Interpolate = require("d3-interpolate");
exports.default = (scheme)=>_d3Interpolate.interpolateRgbBasis(scheme[scheme.length - 1])
;

},{"d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJrID":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2UPPB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hn6CX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aBOAV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6osTP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKUs9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKp3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9aNDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22lwr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4irWf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"964kK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hdxq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kVx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43RCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dhE1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Pqw0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VnM6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9Ai9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eI2jw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ao5E9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pzBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bVmeS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jsCuc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Waty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2N3E3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gWy5h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(_colorsJsDefault.default);
exports.default = _rampJsDefault.default(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2gM4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(t) {
    t = Math.max(0, Math.min(1, t));
    return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bK5z7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");
exports.default = _d3Interpolate.interpolateCubehelixLong(_d3Color.cubehelix(300, 0.5, 0), _d3Color.cubehelix(-240, 0.5, 1));

},{"d3-color":"grhaa","d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjHKO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warm", ()=>warm
);
parcelHelpers.export(exports, "cool", ()=>cool
);
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");
var warm = _d3Interpolate.interpolateCubehelixLong(_d3Color.cubehelix(-100, 0.75, 0.35), _d3Color.cubehelix(80, 1.5, 0.8));
var cool = _d3Interpolate.interpolateCubehelixLong(_d3Color.cubehelix(260, 0.75, 0.35), _d3Color.cubehelix(80, 1.5, 0.8));
var c = _d3Color.cubehelix();
exports.default = function(t) {
    if (t < 0 || t > 1) t -= Math.floor(t);
    var ts = Math.abs(t - 0.5);
    c.h = 360 * t - 100;
    c.s = 1.5 - 1.5 * ts;
    c.l = 0.8 - 0.9 * ts;
    return c + "";
};

},{"d3-color":"grhaa","d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqiUB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var c = _d3Color.rgb(), pi_1_3 = Math.PI / 3, pi_2_3 = Math.PI * 2 / 3;
exports.default = function(t) {
    var x;
    t = (0.5 - t) * Math.PI;
    c.r = 255 * (x = Math.sin(t)) * x;
    c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
    c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
    return c + "";
};

},{"d3-color":"grhaa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GvRp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(t) {
    t = Math.max(0, Math.min(1, t));
    return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"htSS8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "magma", ()=>magma
);
parcelHelpers.export(exports, "inferno", ()=>inferno
);
parcelHelpers.export(exports, "plasma", ()=>plasma
);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
function ramp(range) {
    var n = range.length;
    return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
}
exports.default = ramp(_colorsJsDefault.default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(_colorsJsDefault.default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(_colorsJsDefault.default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(_colorsJsDefault.default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SqrXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arc", ()=>_arcJsDefault.default
);
parcelHelpers.export(exports, "area", ()=>_areaJsDefault.default
);
parcelHelpers.export(exports, "line", ()=>_lineJsDefault.default
);
parcelHelpers.export(exports, "pie", ()=>_pieJsDefault.default
);
parcelHelpers.export(exports, "areaRadial", ()=>_areaRadialJsDefault.default
) // Note: radialArea is deprecated!
;
parcelHelpers.export(exports, "radialArea", ()=>_areaRadialJsDefault.default
);
parcelHelpers.export(exports, "lineRadial", ()=>_lineRadialJsDefault.default
) // Note: radialLine is deprecated!
;
parcelHelpers.export(exports, "radialLine", ()=>_lineRadialJsDefault.default
);
parcelHelpers.export(exports, "pointRadial", ()=>_pointRadialJsDefault.default
);
parcelHelpers.export(exports, "link", ()=>_linkJs.link
);
parcelHelpers.export(exports, "linkHorizontal", ()=>_linkJs.linkHorizontal
);
parcelHelpers.export(exports, "linkVertical", ()=>_linkJs.linkVertical
);
parcelHelpers.export(exports, "linkRadial", ()=>_linkJs.linkRadial
);
parcelHelpers.export(exports, "symbol", ()=>_symbolJsDefault.default
);
parcelHelpers.export(exports, "symbolsStroke", ()=>_symbolJs.symbolsStroke
);
parcelHelpers.export(exports, "symbolsFill", ()=>_symbolJs.symbolsFill
);
parcelHelpers.export(exports, "symbols", ()=>_symbolJs.symbolsFill
);
parcelHelpers.export(exports, "symbolAsterisk", ()=>_asteriskJsDefault.default
);
parcelHelpers.export(exports, "symbolCircle", ()=>_circleJsDefault.default
);
parcelHelpers.export(exports, "symbolCross", ()=>_crossJsDefault.default
);
parcelHelpers.export(exports, "symbolDiamond", ()=>_diamondJsDefault.default
);
parcelHelpers.export(exports, "symbolDiamond2", ()=>_diamond2JsDefault.default
);
parcelHelpers.export(exports, "symbolPlus", ()=>_plusJsDefault.default
);
parcelHelpers.export(exports, "symbolSquare", ()=>_squareJsDefault.default
);
parcelHelpers.export(exports, "symbolSquare2", ()=>_square2JsDefault.default
);
parcelHelpers.export(exports, "symbolStar", ()=>_starJsDefault.default
);
parcelHelpers.export(exports, "symbolTriangle", ()=>_triangleJsDefault.default
);
parcelHelpers.export(exports, "symbolTriangle2", ()=>_triangle2JsDefault.default
);
parcelHelpers.export(exports, "symbolWye", ()=>_wyeJsDefault.default
);
parcelHelpers.export(exports, "symbolX", ()=>_xJsDefault.default
);
parcelHelpers.export(exports, "curveBasisClosed", ()=>_basisClosedJsDefault.default
);
parcelHelpers.export(exports, "curveBasisOpen", ()=>_basisOpenJsDefault.default
);
parcelHelpers.export(exports, "curveBasis", ()=>_basisJsDefault.default
);
parcelHelpers.export(exports, "curveBumpX", ()=>_bumpJs.bumpX
);
parcelHelpers.export(exports, "curveBumpY", ()=>_bumpJs.bumpY
);
parcelHelpers.export(exports, "curveBundle", ()=>_bundleJsDefault.default
);
parcelHelpers.export(exports, "curveCardinalClosed", ()=>_cardinalClosedJsDefault.default
);
parcelHelpers.export(exports, "curveCardinalOpen", ()=>_cardinalOpenJsDefault.default
);
parcelHelpers.export(exports, "curveCardinal", ()=>_cardinalJsDefault.default
);
parcelHelpers.export(exports, "curveCatmullRomClosed", ()=>_catmullRomClosedJsDefault.default
);
parcelHelpers.export(exports, "curveCatmullRomOpen", ()=>_catmullRomOpenJsDefault.default
);
parcelHelpers.export(exports, "curveCatmullRom", ()=>_catmullRomJsDefault.default
);
parcelHelpers.export(exports, "curveLinearClosed", ()=>_linearClosedJsDefault.default
);
parcelHelpers.export(exports, "curveLinear", ()=>_linearJsDefault.default
);
parcelHelpers.export(exports, "curveMonotoneX", ()=>_monotoneJs.monotoneX
);
parcelHelpers.export(exports, "curveMonotoneY", ()=>_monotoneJs.monotoneY
);
parcelHelpers.export(exports, "curveNatural", ()=>_naturalJsDefault.default
);
parcelHelpers.export(exports, "curveStep", ()=>_stepJsDefault.default
);
parcelHelpers.export(exports, "curveStepAfter", ()=>_stepJs.stepAfter
);
parcelHelpers.export(exports, "curveStepBefore", ()=>_stepJs.stepBefore
);
parcelHelpers.export(exports, "stack", ()=>_stackJsDefault.default
);
parcelHelpers.export(exports, "stackOffsetExpand", ()=>_expandJsDefault.default
);
parcelHelpers.export(exports, "stackOffsetDiverging", ()=>_divergingJsDefault.default
);
parcelHelpers.export(exports, "stackOffsetNone", ()=>_noneJsDefault.default
);
parcelHelpers.export(exports, "stackOffsetSilhouette", ()=>_silhouetteJsDefault.default
);
parcelHelpers.export(exports, "stackOffsetWiggle", ()=>_wiggleJsDefault.default
);
parcelHelpers.export(exports, "stackOrderAppearance", ()=>_appearanceJsDefault.default
);
parcelHelpers.export(exports, "stackOrderAscending", ()=>_ascendingJsDefault.default
);
parcelHelpers.export(exports, "stackOrderDescending", ()=>_descendingJsDefault.default
);
parcelHelpers.export(exports, "stackOrderInsideOut", ()=>_insideOutJsDefault.default
);
parcelHelpers.export(exports, "stackOrderNone", ()=>_noneJsDefault1.default
);
parcelHelpers.export(exports, "stackOrderReverse", ()=>_reverseJsDefault.default
);
var _arcJs = require("./arc.js");
var _arcJsDefault = parcelHelpers.interopDefault(_arcJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _pieJs = require("./pie.js");
var _pieJsDefault = parcelHelpers.interopDefault(_pieJs);
var _areaRadialJs = require("./areaRadial.js");
var _areaRadialJsDefault = parcelHelpers.interopDefault(_areaRadialJs);
var _lineRadialJs = require("./lineRadial.js");
var _lineRadialJsDefault = parcelHelpers.interopDefault(_lineRadialJs);
var _pointRadialJs = require("./pointRadial.js");
var _pointRadialJsDefault = parcelHelpers.interopDefault(_pointRadialJs);
var _linkJs = require("./link.js");
var _symbolJs = require("./symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _asteriskJs = require("./symbol/asterisk.js");
var _asteriskJsDefault = parcelHelpers.interopDefault(_asteriskJs);
var _circleJs = require("./symbol/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _crossJs = require("./symbol/cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _diamondJs = require("./symbol/diamond.js");
var _diamondJsDefault = parcelHelpers.interopDefault(_diamondJs);
var _diamond2Js = require("./symbol/diamond2.js");
var _diamond2JsDefault = parcelHelpers.interopDefault(_diamond2Js);
var _plusJs = require("./symbol/plus.js");
var _plusJsDefault = parcelHelpers.interopDefault(_plusJs);
var _squareJs = require("./symbol/square.js");
var _squareJsDefault = parcelHelpers.interopDefault(_squareJs);
var _square2Js = require("./symbol/square2.js");
var _square2JsDefault = parcelHelpers.interopDefault(_square2Js);
var _starJs = require("./symbol/star.js");
var _starJsDefault = parcelHelpers.interopDefault(_starJs);
var _triangleJs = require("./symbol/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _triangle2Js = require("./symbol/triangle2.js");
var _triangle2JsDefault = parcelHelpers.interopDefault(_triangle2Js);
var _wyeJs = require("./symbol/wye.js");
var _wyeJsDefault = parcelHelpers.interopDefault(_wyeJs);
var _xJs = require("./symbol/x.js");
var _xJsDefault = parcelHelpers.interopDefault(_xJs);
var _basisClosedJs = require("./curve/basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _basisOpenJs = require("./curve/basisOpen.js");
var _basisOpenJsDefault = parcelHelpers.interopDefault(_basisOpenJs);
var _basisJs = require("./curve/basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _bumpJs = require("./curve/bump.js");
var _bundleJs = require("./curve/bundle.js");
var _bundleJsDefault = parcelHelpers.interopDefault(_bundleJs);
var _cardinalClosedJs = require("./curve/cardinalClosed.js");
var _cardinalClosedJsDefault = parcelHelpers.interopDefault(_cardinalClosedJs);
var _cardinalOpenJs = require("./curve/cardinalOpen.js");
var _cardinalOpenJsDefault = parcelHelpers.interopDefault(_cardinalOpenJs);
var _cardinalJs = require("./curve/cardinal.js");
var _cardinalJsDefault = parcelHelpers.interopDefault(_cardinalJs);
var _catmullRomClosedJs = require("./curve/catmullRomClosed.js");
var _catmullRomClosedJsDefault = parcelHelpers.interopDefault(_catmullRomClosedJs);
var _catmullRomOpenJs = require("./curve/catmullRomOpen.js");
var _catmullRomOpenJsDefault = parcelHelpers.interopDefault(_catmullRomOpenJs);
var _catmullRomJs = require("./curve/catmullRom.js");
var _catmullRomJsDefault = parcelHelpers.interopDefault(_catmullRomJs);
var _linearClosedJs = require("./curve/linearClosed.js");
var _linearClosedJsDefault = parcelHelpers.interopDefault(_linearClosedJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _monotoneJs = require("./curve/monotone.js");
var _naturalJs = require("./curve/natural.js");
var _naturalJsDefault = parcelHelpers.interopDefault(_naturalJs);
var _stepJs = require("./curve/step.js");
var _stepJsDefault = parcelHelpers.interopDefault(_stepJs);
var _stackJs = require("./stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _expandJs = require("./offset/expand.js");
var _expandJsDefault = parcelHelpers.interopDefault(_expandJs);
var _divergingJs = require("./offset/diverging.js");
var _divergingJsDefault = parcelHelpers.interopDefault(_divergingJs);
var _noneJs = require("./offset/none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
var _silhouetteJs = require("./offset/silhouette.js");
var _silhouetteJsDefault = parcelHelpers.interopDefault(_silhouetteJs);
var _wiggleJs = require("./offset/wiggle.js");
var _wiggleJsDefault = parcelHelpers.interopDefault(_wiggleJs);
var _appearanceJs = require("./order/appearance.js");
var _appearanceJsDefault = parcelHelpers.interopDefault(_appearanceJs);
var _ascendingJs = require("./order/ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _descendingJs = require("./order/descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _insideOutJs = require("./order/insideOut.js");
var _insideOutJsDefault = parcelHelpers.interopDefault(_insideOutJs);
var _noneJs1 = require("./order/none.js");
var _noneJsDefault1 = parcelHelpers.interopDefault(_noneJs1);
var _reverseJs = require("./order/reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);

},{"./arc.js":"8EL3d","./area.js":"87W2h","./line.js":"hTFAN","./pie.js":"blNzn","./areaRadial.js":"aKyw6","./lineRadial.js":"4aSXI","./pointRadial.js":"gH3Nl","./link.js":"g3qcz","./symbol.js":"12bBv","./symbol/asterisk.js":"7qUSV","./symbol/circle.js":"jQjPb","./symbol/cross.js":"2CCQJ","./symbol/diamond.js":"afDKe","./symbol/diamond2.js":"3WPQ9","./symbol/plus.js":"ehHk2","./symbol/square.js":"3Rovu","./symbol/square2.js":"7rWsq","./symbol/star.js":"fqvh2","./symbol/triangle.js":"l2B6P","./symbol/triangle2.js":"k3OsU","./symbol/wye.js":"6dhtz","./symbol/x.js":"d1kQT","./curve/basisClosed.js":"jK8tZ","./curve/basisOpen.js":"9nzjm","./curve/basis.js":"lmIyE","./curve/bump.js":"etTRy","./curve/bundle.js":"9NCmN","./curve/cardinalClosed.js":"8btb4","./curve/cardinalOpen.js":"avKmC","./curve/cardinal.js":"brZ6e","./curve/catmullRomClosed.js":"3mnrZ","./curve/catmullRomOpen.js":"4v2qz","./curve/catmullRom.js":"j2hDs","./curve/linearClosed.js":"bZkPo","./curve/linear.js":"ajwdK","./curve/monotone.js":"akQ7S","./curve/natural.js":"ejsSN","./curve/step.js":"cenwN","./stack.js":"04Lp5","./offset/expand.js":"bE3nk","./offset/diverging.js":"7vGu2","./offset/none.js":"h0h85","./offset/silhouette.js":"ez0ZX","./offset/wiggle.js":"hJZrV","./order/appearance.js":"fDXA7","./order/ascending.js":"17HfK","./order/descending.js":"fTuOf","./order/insideOut.js":"4CNKk","./order/none.js":"30Qqt","./order/reverse.js":"4K6jR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8EL3d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Path = require("d3-path");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _mathJs = require("./math.js");
function arcInnerRadius(d) {
    return d.innerRadius;
}
function arcOuterRadius(d) {
    return d.outerRadius;
}
function arcStartAngle(d) {
    return d.startAngle;
}
function arcEndAngle(d) {
    return d.endAngle;
}
function arcPadAngle(d) {
    return d && d.padAngle; // Note: optional!
}
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
    if (t * t < _mathJs.epsilon) return;
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
    return [
        x0 + t * x10,
        y0 + t * y10
    ];
}
// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / _mathJs.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * _mathJs.sqrt(_mathJs.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
    };
}
exports.default = function() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = _constantJsDefault.default(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
    function arc() {
        var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - _mathJs.halfPi, a1 = endAngle.apply(this, arguments) - _mathJs.halfPi, da = _mathJs.abs(a1 - a0), cw = a1 > a0;
        if (!context) context = buffer = _d3Path.path();
        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;
        // Is it a point?
        if (!(r1 > _mathJs.epsilon)) context.moveTo(0, 0);
        else if (da > _mathJs.tau - _mathJs.epsilon) {
            context.moveTo(r1 * _mathJs.cos(a0), r1 * _mathJs.sin(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > _mathJs.epsilon) {
                context.moveTo(r0 * _mathJs.cos(a1), r0 * _mathJs.sin(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        } else {
            var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > _mathJs.epsilon && (padRadius ? +padRadius.apply(this, arguments) : _mathJs.sqrt(r0 * r0 + r1 * r1)), rc = _mathJs.min(_mathJs.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
            // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
            if (rp > _mathJs.epsilon) {
                var p0 = _mathJs.asin(rp / r0 * _mathJs.sin(ap)), p1 = _mathJs.asin(rp / r1 * _mathJs.sin(ap));
                if ((da0 -= p0 * 2) > _mathJs.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                if ((da1 -= p1 * 2) > _mathJs.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                else da1 = 0, a01 = a11 = (a0 + a1) / 2;
            }
            var x01 = r1 * _mathJs.cos(a01), y01 = r1 * _mathJs.sin(a01), x10 = r0 * _mathJs.cos(a10), y10 = r0 * _mathJs.sin(a10);
            // Apply rounded corners?
            if (rc > _mathJs.epsilon) {
                var x11 = r1 * _mathJs.cos(a11), y11 = r1 * _mathJs.sin(a11), x00 = r0 * _mathJs.cos(a00), y00 = r0 * _mathJs.sin(a00), oc;
                // Restrict the corner radius according to the sector angle.
                if (da < _mathJs.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
                    var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / _mathJs.sin(_mathJs.acos((ax * bx + ay * by) / (_mathJs.sqrt(ax * ax + ay * ay) * _mathJs.sqrt(bx * bx + by * by))) / 2), lc = _mathJs.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = _mathJs.min(rc, (r0 - lc) / (kc - 1));
                    rc1 = _mathJs.min(rc, (r1 - lc) / (kc + 1));
                }
            }
            // Is the sector collapsed to a line?
            if (!(da1 > _mathJs.epsilon)) context.moveTo(x01, y01);
            else if (rc1 > _mathJs.epsilon) {
                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, _mathJs.atan2(t0.y01, t0.x01), _mathJs.atan2(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc1, _mathJs.atan2(t0.y01, t0.x01), _mathJs.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, _mathJs.atan2(t0.cy + t0.y11, t0.cx + t0.x11), _mathJs.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, _mathJs.atan2(t1.y11, t1.x11), _mathJs.atan2(t1.y01, t1.x01), !cw);
                }
            } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
            // Is there no inner ring, and it’s a circular sector?
            // Or perhaps it’s an annular sector collapsed due to padding?
            if (!(r0 > _mathJs.epsilon) || !(da0 > _mathJs.epsilon)) context.lineTo(x10, y10);
            else if (rc0 > _mathJs.epsilon) {
                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                // Have the corners merged?
                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, _mathJs.atan2(t0.y01, t0.x01), _mathJs.atan2(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc0, _mathJs.atan2(t0.y01, t0.x01), _mathJs.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, _mathJs.atan2(t0.cy + t0.y11, t0.cx + t0.x11), _mathJs.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, _mathJs.atan2(t1.y11, t1.x11), _mathJs.atan2(t1.y01, t1.x01), !cw);
                }
            } else context.arc(0, 0, r0, a10, a00, cw);
        }
        context.closePath();
        if (buffer) return context = null, buffer + "" || null;
    }
    arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _mathJs.pi / 2;
        return [
            _mathJs.cos(a) * r,
            _mathJs.sin(a) * r
        ];
    };
    arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : innerRadius;
    };
    arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : cornerRadius;
    };
    arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : padRadius;
    };
    arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : startAngle;
    };
    arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : endAngle;
    };
    arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), arc) : padAngle;
    };
    arc.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
};

},{"d3-path":"eY3pl","./constant.js":"dFe8v","./math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dFe8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function constant() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4VX7v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "atan2", ()=>atan2
);
parcelHelpers.export(exports, "cos", ()=>cos
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "sin", ()=>sin
);
parcelHelpers.export(exports, "sqrt", ()=>sqrt
);
parcelHelpers.export(exports, "epsilon", ()=>epsilon
);
parcelHelpers.export(exports, "pi", ()=>pi
);
parcelHelpers.export(exports, "halfPi", ()=>halfPi
);
parcelHelpers.export(exports, "tau", ()=>tau
);
parcelHelpers.export(exports, "acos", ()=>acos
);
parcelHelpers.export(exports, "asin", ()=>asin
);
const abs = Math.abs;
const atan2 = Math.atan2;
const cos = Math.cos;
const max = Math.max;
const min = Math.min;
const sin = Math.sin;
const sqrt = Math.sqrt;
const epsilon = 0.000000000001;
const pi = Math.PI;
const halfPi = pi / 2;
const tau = 2 * pi;
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87W2h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Path = require("d3-path");
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _pointJs = require("./point.js");
exports.default = function(x0, y0, y1) {
    var x1 = null, defined = _constantJsDefault.default(true), context = null, curve = _linearJsDefault.default, output = null;
    x0 = typeof x0 === "function" ? x0 : x0 === undefined ? _pointJs.x : _constantJsDefault.default(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === undefined ? _constantJsDefault.default(0) : _constantJsDefault.default(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === undefined ? _pointJs.y : _constantJsDefault.default(+y1);
    function area(data) {
        var i, j, k, n = (data = _arrayJsDefault.default(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
        if (context == null) output = curve(buffer = _d3Path.path());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) {
                    j = i;
                    output.areaStart();
                    output.lineStart();
                } else {
                    output.lineEnd();
                    output.lineStart();
                    for(k = i - 1; k >= j; --k)output.point(x0z[k], y0z[k]);
                    output.lineEnd();
                    output.areaEnd();
                }
            }
            if (defined0) {
                x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
            }
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    function arealine() {
        return _lineJsDefault.default().defined(defined).curve(curve).context(context);
    }
    area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : _constantJsDefault.default(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : _constantJsDefault.default(+_), area) : x0;
    };
    area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : _constantJsDefault.default(+_), area) : x1;
    };
    area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : _constantJsDefault.default(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : _constantJsDefault.default(+_), area) : y0;
    };
    area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : _constantJsDefault.default(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
        return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
        return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
        return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), area) : defined;
    };
    area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
};

},{"d3-path":"eY3pl","./array.js":"6SJ8v","./constant.js":"dFe8v","./curve/linear.js":"ajwdK","./line.js":"hTFAN","./point.js":"5bQ0r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6SJ8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice
);
var slice = Array.prototype.slice;
exports.default = function(x) {
    return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
     : Array.from(x); // Map, Set, iterable, string, or anything else
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajwdK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function Linear(context) {
    this._context = context;
}
Linear.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                this._context.lineTo(x, y);
                break;
        }
    }
};
exports.default = function(context) {
    return new Linear(context);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hTFAN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Path = require("d3-path");
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _pointJs = require("./point.js");
exports.default = function(x, y) {
    var defined = _constantJsDefault.default(true), context = null, curve = _linearJsDefault.default, output = null;
    x = typeof x === "function" ? x : x === undefined ? _pointJs.x : _constantJsDefault.default(x);
    y = typeof y === "function" ? y : y === undefined ? _pointJs.y : _constantJsDefault.default(y);
    function line(data) {
        var i, n = (data = _arrayJsDefault.default(data)).length, d, defined0 = false, buffer;
        if (context == null) output = curve(buffer = _d3Path.path());
        for(i = 0; i <= n; ++i){
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) output.lineStart();
                else output.lineEnd();
            }
            if (defined0) output.point(+x(d, i, data), +y(d, i, data));
        }
        if (buffer) return output = null, buffer + "" || null;
    }
    line.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : _constantJsDefault.default(+_), line) : x;
    };
    line.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : _constantJsDefault.default(+_), line) : y;
    };
    line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), line) : defined;
    };
    line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
};

},{"d3-path":"eY3pl","./array.js":"6SJ8v","./constant.js":"dFe8v","./curve/linear.js":"ajwdK","./point.js":"5bQ0r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5bQ0r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "x", ()=>x
);
parcelHelpers.export(exports, "y", ()=>y
);
function x(p) {
    return p[0];
}
function y(p) {
    return p[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"blNzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _descendingJs = require("./descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _mathJs = require("./math.js");
exports.default = function() {
    var value = _identityJsDefault.default, sortValues = _descendingJsDefault.default, sort = null, startAngle = _constantJsDefault.default(0), endAngle = _constantJsDefault.default(_mathJs.tau), padAngle = _constantJsDefault.default(0);
    function pie(data) {
        var i1, n = (data = _arrayJsDefault.default(data)).length, j1, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(_mathJs.tau, Math.max(-_mathJs.tau, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
        for(i1 = 0; i1 < n; ++i1)if ((v = arcs[index[i1] = i1] = +value(data[i1], i1, data)) > 0) sum += v;
        // Optionally sort the arcs by previously-computed values or by data.
        if (sortValues != null) index.sort(function(i, j) {
            return sortValues(arcs[i], arcs[j]);
        });
        else if (sort != null) index.sort(function(i, j) {
            return sort(data[i], data[j]);
        });
        // Compute the arcs! They are stored in the original data's order.
        for(i1 = 0, k = sum ? (da - n * pa) / sum : 0; i1 < n; ++i1, a0 = a1)j1 = index[i1], v = arcs[j1], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j1] = {
            data: data[j1],
            index: i1,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p
        };
        return arcs;
    }
    pie.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : _constantJsDefault.default(+_), pie) : value;
    };
    pie.sortValues = function(_) {
        return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
    };
    pie.sort = function(_) {
        return arguments.length ? (sort = _, sortValues = null, pie) : sort;
    };
    pie.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), pie) : startAngle;
    };
    pie.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), pie) : endAngle;
    };
    pie.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : _constantJsDefault.default(+_), pie) : padAngle;
    };
    return pie;
};

},{"./array.js":"6SJ8v","./constant.js":"dFe8v","./descending.js":"1wgeb","./identity.js":"ivc9L","./math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wgeb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ivc9L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(d) {
    return d;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKyw6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _radialJs = require("./curve/radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _lineRadialJs = require("./lineRadial.js");
exports.default = function() {
    var a = _areaJsDefault.default().curve(_radialJs.curveRadialLinear), c = a.curve, x0 = a.lineX0, x1 = a.lineX1, y0 = a.lineY0, y1 = a.lineY1;
    a.angle = a.x, delete a.x;
    a.startAngle = a.x0, delete a.x0;
    a.endAngle = a.x1, delete a.x1;
    a.radius = a.y, delete a.y;
    a.innerRadius = a.y0, delete a.y0;
    a.outerRadius = a.y1, delete a.y1;
    a.lineStartAngle = function() {
        return _lineRadialJs.lineRadial(x0());
    }, delete a.lineX0;
    a.lineEndAngle = function() {
        return _lineRadialJs.lineRadial(x1());
    }, delete a.lineX1;
    a.lineInnerRadius = function() {
        return _lineRadialJs.lineRadial(y0());
    }, delete a.lineY0;
    a.lineOuterRadius = function() {
        return _lineRadialJs.lineRadial(y1());
    }, delete a.lineY1;
    a.curve = function(_) {
        return arguments.length ? c(_radialJsDefault.default(_)) : c()._curve;
    };
    return a;
};

},{"./curve/radial.js":"7P2sE","./area.js":"87W2h","./lineRadial.js":"4aSXI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7P2sE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "curveRadialLinear", ()=>curveRadialLinear
);
var _linearJs = require("./linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var curveRadialLinear = curveRadial(_linearJsDefault.default);
function Radial(curve) {
    this._curve = curve;
}
Radial.prototype = {
    areaStart: function() {
        this._curve.areaStart();
    },
    areaEnd: function() {
        this._curve.areaEnd();
    },
    lineStart: function() {
        this._curve.lineStart();
    },
    lineEnd: function() {
        this._curve.lineEnd();
    },
    point: function(a, r) {
        this._curve.point(r * Math.sin(a), r * -Math.cos(a));
    }
};
function curveRadial(curve) {
    function radial(context) {
        return new Radial(curve(context));
    }
    radial._curve = curve;
    return radial;
}
exports.default = curveRadial;

},{"./linear.js":"ajwdK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4aSXI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lineRadial", ()=>lineRadial
);
var _radialJs = require("./curve/radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
function lineRadial(l) {
    var c = l.curve;
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    l.curve = function(_) {
        return arguments.length ? c(_radialJsDefault.default(_)) : c()._curve;
    };
    return l;
}
exports.default = function() {
    return lineRadial(_lineJsDefault.default().curve(_radialJs.curveRadialLinear));
};

},{"./curve/radial.js":"7P2sE","./line.js":"hTFAN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gH3Nl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x, y) {
    return [
        (y = +y) * Math.cos(x -= Math.PI / 2),
        y * Math.sin(x)
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g3qcz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "link", ()=>link
);
parcelHelpers.export(exports, "linkHorizontal", ()=>linkHorizontal
);
parcelHelpers.export(exports, "linkVertical", ()=>linkVertical
);
parcelHelpers.export(exports, "linkRadial", ()=>linkRadial
);
var _d3Path = require("d3-path");
var _arrayJs = require("./array.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _bumpJs = require("./curve/bump.js");
var _pointJs = require("./point.js");
function linkSource(d) {
    return d.source;
}
function linkTarget(d) {
    return d.target;
}
function link(curve) {
    let source = linkSource;
    let target = linkTarget;
    let x = _pointJs.x;
    let y = _pointJs.y;
    let context = null;
    let output = null;
    function link1() {
        let buffer;
        const argv = _arrayJs.slice.call(arguments);
        const s = source.apply(this, argv);
        const t = target.apply(this, argv);
        if (context == null) output = curve(buffer = _d3Path.path());
        output.lineStart();
        argv[0] = s, output.point(+x.apply(this, argv), +y.apply(this, argv));
        argv[0] = t, output.point(+x.apply(this, argv), +y.apply(this, argv));
        output.lineEnd();
        if (buffer) return output = null, buffer + "" || null;
    }
    link1.source = function(_) {
        return arguments.length ? (source = _, link1) : source;
    };
    link1.target = function(_) {
        return arguments.length ? (target = _, link1) : target;
    };
    link1.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : _constantJsDefault.default(+_), link1) : x;
    };
    link1.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : _constantJsDefault.default(+_), link1) : y;
    };
    link1.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link1) : context;
    };
    return link1;
}
function linkHorizontal() {
    return link(_bumpJs.bumpX);
}
function linkVertical() {
    return link(_bumpJs.bumpY);
}
function linkRadial() {
    const l = link(_bumpJs.bumpRadial);
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    return l;
}

},{"d3-path":"eY3pl","./array.js":"6SJ8v","./constant.js":"dFe8v","./curve/bump.js":"etTRy","./point.js":"5bQ0r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etTRy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bumpX", ()=>bumpX
);
parcelHelpers.export(exports, "bumpY", ()=>bumpY
);
parcelHelpers.export(exports, "bumpRadial", ()=>bumpRadial
);
var _pointRadialJs = require("../pointRadial.js");
var _pointRadialJsDefault = parcelHelpers.interopDefault(_pointRadialJs);
class Bump {
    constructor(context, x){
        this._context = context;
        this._x = x;
    }
    areaStart() {
        this._line = 0;
    }
    areaEnd() {
        this._line = NaN;
    }
    lineStart() {
        this._point = 0;
    }
    lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    }
    point(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                if (this._line) this._context.lineTo(x, y);
                else this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
                else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
                break;
        }
        this._x0 = x, this._y0 = y;
    }
}
class BumpRadial {
    constructor(context){
        this._context = context;
    }
    lineStart() {
        this._point = 0;
    }
    lineEnd() {}
    point(x, y) {
        x = +x, y = +y;
        if ((this._point++) === 0) this._x0 = x, this._y0 = y;
        else {
            const p0 = _pointRadialJsDefault.default(this._x0, this._y0);
            const p1 = _pointRadialJsDefault.default(this._x0, this._y0 = (this._y0 + y) / 2);
            const p2 = _pointRadialJsDefault.default(x, this._y0);
            const p3 = _pointRadialJsDefault.default(x, y);
            this._context.moveTo(...p0);
            this._context.bezierCurveTo(...p1, ...p2, ...p3);
        }
    }
}
function bumpX(context) {
    return new Bump(context, true);
}
function bumpY(context) {
    return new Bump(context, false);
}
function bumpRadial(context) {
    return new BumpRadial(context);
}

},{"../pointRadial.js":"gH3Nl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12bBv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symbolsFill", ()=>symbolsFill
);
parcelHelpers.export(exports, "symbolsStroke", ()=>symbolsStroke
);
var _d3Path = require("d3-path");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _asteriskJs = require("./symbol/asterisk.js");
var _asteriskJsDefault = parcelHelpers.interopDefault(_asteriskJs);
var _circleJs = require("./symbol/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _crossJs = require("./symbol/cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _diamondJs = require("./symbol/diamond.js");
var _diamondJsDefault = parcelHelpers.interopDefault(_diamondJs);
var _diamond2Js = require("./symbol/diamond2.js");
var _diamond2JsDefault = parcelHelpers.interopDefault(_diamond2Js);
var _plusJs = require("./symbol/plus.js");
var _plusJsDefault = parcelHelpers.interopDefault(_plusJs);
var _squareJs = require("./symbol/square.js");
var _squareJsDefault = parcelHelpers.interopDefault(_squareJs);
var _square2Js = require("./symbol/square2.js");
var _square2JsDefault = parcelHelpers.interopDefault(_square2Js);
var _starJs = require("./symbol/star.js");
var _starJsDefault = parcelHelpers.interopDefault(_starJs);
var _triangleJs = require("./symbol/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _triangle2Js = require("./symbol/triangle2.js");
var _triangle2JsDefault = parcelHelpers.interopDefault(_triangle2Js);
var _wyeJs = require("./symbol/wye.js");
var _wyeJsDefault = parcelHelpers.interopDefault(_wyeJs);
var _xJs = require("./symbol/x.js");
var _xJsDefault = parcelHelpers.interopDefault(_xJs);
const symbolsFill = [
    _circleJsDefault.default,
    _crossJsDefault.default,
    _diamondJsDefault.default,
    _squareJsDefault.default,
    _starJsDefault.default,
    _triangleJsDefault.default,
    _wyeJsDefault.default
];
const symbolsStroke = [
    _circleJsDefault.default,
    _plusJsDefault.default,
    _xJsDefault.default,
    _triangle2JsDefault.default,
    _asteriskJsDefault.default,
    _square2JsDefault.default,
    _diamond2JsDefault.default
];
function Symbol(type, size) {
    let context = null;
    type = typeof type === "function" ? type : _constantJsDefault.default(type || _circleJsDefault.default);
    size = typeof size === "function" ? size : _constantJsDefault.default(size === undefined ? 64 : +size);
    function symbol() {
        let buffer;
        if (!context) context = buffer = _d3Path.path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : _constantJsDefault.default(_), symbol) : type;
    };
    symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : _constantJsDefault.default(+_), symbol) : size;
    };
    symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
}
exports.default = Symbol;

},{"d3-path":"eY3pl","./constant.js":"dFe8v","./symbol/asterisk.js":"7qUSV","./symbol/circle.js":"jQjPb","./symbol/cross.js":"2CCQJ","./symbol/diamond.js":"afDKe","./symbol/diamond2.js":"3WPQ9","./symbol/plus.js":"ehHk2","./symbol/square.js":"3Rovu","./symbol/square2.js":"7rWsq","./symbol/star.js":"fqvh2","./symbol/triangle.js":"l2B6P","./symbol/triangle2.js":"k3OsU","./symbol/wye.js":"6dhtz","./symbol/x.js":"d1kQT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7qUSV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const sqrt3 = _mathJs.sqrt(3);
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size + _mathJs.min(size / 28, 0.75)) * 0.59436;
        const t = r / 2;
        const u = t * sqrt3;
        context.moveTo(0, r);
        context.lineTo(0, -r);
        context.moveTo(-u, -t);
        context.lineTo(u, t);
        context.moveTo(-u, t);
        context.lineTo(u, -t);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQjPb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size / _mathJs.pi);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, _mathJs.tau);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2CCQJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afDKe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const tan30 = _mathJs.sqrt(1 / 3);
const tan30_2 = tan30 * 2;
exports.default = {
    draw (context, size) {
        const y = _mathJs.sqrt(size / tan30_2);
        const x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3WPQ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size) * 0.62625;
        context.moveTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.lineTo(-r, 0);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ehHk2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size - _mathJs.min(size / 7, 2)) * 0.87559;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
        context.moveTo(0, r);
        context.lineTo(0, -r);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Rovu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const w = _mathJs.sqrt(size);
        const x = -w / 2;
        context.rect(x, x, w, w);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rWsq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size) * 0.4431;
        context.moveTo(r, r);
        context.lineTo(r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, r);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fqvh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const ka = 0.8908130915292852;
const kr = _mathJs.sin(_mathJs.pi / 10) / _mathJs.sin(7 * _mathJs.pi / 10);
const kx = _mathJs.sin(_mathJs.tau / 10) * kr;
const ky = -_mathJs.cos(_mathJs.tau / 10) * kr;
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size * ka);
        const x = kx * r;
        const y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for(let i = 1; i < 5; ++i){
            const a = _mathJs.tau * i / 5;
            const c = _mathJs.cos(a);
            const s = _mathJs.sin(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2B6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const sqrt3 = _mathJs.sqrt(3);
exports.default = {
    draw (context, size) {
        const y = -_mathJs.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3 * y, -y);
        context.lineTo(sqrt3 * y, -y);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k3OsU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const sqrt3 = _mathJs.sqrt(3);
exports.default = {
    draw (context, size) {
        const s = _mathJs.sqrt(size) * 0.6824;
        const t = s / 2;
        const u = s * sqrt3 / 2; // cos(Math.PI / 6)
        context.moveTo(0, -s);
        context.lineTo(u, t);
        context.lineTo(-u, t);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dhtz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const c = -0.5;
const s = _mathJs.sqrt(3) / 2;
const k = 1 / _mathJs.sqrt(12);
const a = (k / 2 + 1) * 3;
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size / a);
        const x0 = r / 2, y0 = r * k;
        const x1 = x0, y1 = r * k + r;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d1kQT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = _mathJs.sqrt(size - _mathJs.min(size / 6, 1.7)) * 0.6189;
        context.moveTo(-r, -r);
        context.lineTo(r, r);
        context.moveTo(-r, r);
        context.lineTo(r, -r);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jK8tZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _basisJs = require("./basis.js");
function BasisClosed(context) {
    this._context = context;
}
BasisClosed.prototype = {
    areaStart: _noopJsDefault.default,
    areaEnd: _noopJsDefault.default,
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
            case 2:
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x2 = x, this._y2 = y;
                break;
            case 1:
                this._point = 2;
                this._x3 = x, this._y3 = y;
                break;
            case 2:
                this._point = 3;
                this._x4 = x, this._y4 = y;
                this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                break;
            default:
                _basisJs.point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
exports.default = function(context) {
    return new BasisClosed(context);
};

},{"../noop.js":"f1azw","./basis.js":"lmIyE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1azw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmIyE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point
);
parcelHelpers.export(exports, "Basis", ()=>Basis
);
function point(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}
function Basis(context) {
    this._context = context;
}
Basis.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 3:
                point(this, this._x1, this._y1); // falls through
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
            default:
                point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
exports.default = function(context) {
    return new Basis(context);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nzjm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
function BasisOpen(context) {
    this._context = context;
}
BasisOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                _basisJs.point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
exports.default = function(context) {
    return new BasisOpen(context);
};

},{"./basis.js":"lmIyE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9NCmN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
function Bundle(context, beta) {
    this._basis = new _basisJs.Basis(context);
    this._beta = beta;
}
Bundle.prototype = {
    lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
    },
    lineEnd: function() {
        var x = this._x, y = this._y, j = x.length - 1;
        if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while(++i <= j){
                t = i / j;
                this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
            }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
exports.default = function custom(beta1) {
    function bundle(context) {
        return beta1 === 1 ? new _basisJs.Basis(context) : new Bundle(context, beta1);
    }
    bundle.beta = function(beta) {
        return custom(+beta);
    };
    return bundle;
}(0.85);

},{"./basis.js":"lmIyE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8btb4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardinalClosed", ()=>CardinalClosed
);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _cardinalJs = require("./cardinal.js");
function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
    areaStart: _noopJsDefault.default,
    areaEnd: _noopJsDefault.default,
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                _cardinalJs.point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension1) {
    function cardinal(context) {
        return new CardinalClosed(context, tension1);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"../noop.js":"f1azw","./cardinal.js":"brZ6e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"brZ6e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point
);
parcelHelpers.export(exports, "Cardinal", ()=>Cardinal
);
function point(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                point(this, this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                this._x1 = x, this._y1 = y;
                break;
            case 2:
                this._point = 3; // falls through
            default:
                point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension1) {
    function cardinal(context) {
        return new Cardinal(context, tension1);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"avKmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardinalOpen", ()=>CardinalOpen
);
var _cardinalJs = require("./cardinal.js");
function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                _cardinalJs.point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension1) {
    function cardinal(context) {
        return new CardinalOpen(context, tension1);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"./cardinal.js":"brZ6e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mnrZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cardinalClosedJs = require("./cardinalClosed.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _catmullRomJs = require("./catmullRom.js");
function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRomClosed.prototype = {
    areaStart: _noopJsDefault.default,
    areaEnd: _noopJsDefault.default,
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                _catmullRomJs.point(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha1) {
    function catmullRom(context) {
        return alpha1 ? new CatmullRomClosed(context, alpha1) : new _cardinalClosedJs.CardinalClosed(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"./cardinalClosed.js":"8btb4","../noop.js":"f1azw","./catmullRom.js":"j2hDs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j2hDs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point
);
var _mathJs = require("../math.js");
var _cardinalJs = require("./cardinal.js");
function point(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > _mathJs.epsilon) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > _mathJs.epsilon) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRom.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                this.point(this._x2, this._y2);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3; // falls through
            default:
                point(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha1) {
    function catmullRom(context) {
        return alpha1 ? new CatmullRom(context, alpha1) : new _cardinalJs.Cardinal(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"../math.js":"4VX7v","./cardinal.js":"brZ6e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4v2qz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cardinalOpenJs = require("./cardinalOpen.js");
var _catmullRomJs = require("./catmullRom.js");
function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRomOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                _catmullRomJs.point(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha1) {
    function catmullRom(context) {
        return alpha1 ? new CatmullRomOpen(context, alpha1) : new _cardinalOpenJs.CardinalOpen(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"./cardinalOpen.js":"avKmC","./catmullRom.js":"j2hDs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZkPo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
function LinearClosed(context) {
    this._context = context;
}
LinearClosed.prototype = {
    areaStart: _noopJsDefault.default,
    areaEnd: _noopJsDefault.default,
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._point) this._context.closePath();
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
    }
};
exports.default = function(context) {
    return new LinearClosed(context);
};

},{"../noop.js":"f1azw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akQ7S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "monotoneX", ()=>monotoneX
);
parcelHelpers.export(exports, "monotoneY", ()=>monotoneY
);
function sign(x) {
    return x < 0 ? -1 : 1;
}
// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
// Calculate a one-sided slope.
function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
function MonotoneX(context) {
    this._context = context;
}
MonotoneX.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
            case 3:
                point(this, this._t0, slope2(this, this._t0));
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                point(this, slope2(this, t1 = slope3(this, x, y)), t1);
                break;
            default:
                point(this, this._t0, t1 = slope3(this, x, y));
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
    }
};
function MonotoneY(context) {
    this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
    MonotoneX.prototype.point.call(this, y, x);
};
function ReflectContext(context) {
    this._context = context;
}
ReflectContext.prototype = {
    moveTo: function(x, y) {
        this._context.moveTo(y, x);
    },
    closePath: function() {
        this._context.closePath();
    },
    lineTo: function(x, y) {
        this._context.lineTo(y, x);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
};
function monotoneX(context) {
    return new MonotoneX(context);
}
function monotoneY(context) {
    return new MonotoneY(context);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ejsSN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function Natural(context) {
    this._context = context;
}
Natural.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = [];
        this._y = [];
    },
    lineEnd: function() {
        var x = this._x, y = this._y, n = x.length;
        if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) this._context.lineTo(x[1], y[1]);
            else {
                var px = controlPoints(x), py = controlPoints(y);
                for(var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1)this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
        }
        if (this._line || this._line !== 0 && n === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for(i = 1; i < n - 1; ++i)a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for(i = 1; i < n; ++i)m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for(i = n - 2; i >= 0; --i)a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for(i = 0; i < n - 1; ++i)b[i] = 2 * x[i + 1] - a[i + 1];
    return [
        a,
        b
    ];
}
exports.default = function(context) {
    return new Natural(context);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cenwN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stepBefore", ()=>stepBefore
);
parcelHelpers.export(exports, "stepAfter", ()=>stepAfter
);
function Step(context, t) {
    this._context = context;
    this._t = t;
}
Step.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y);
                    this._context.lineTo(x, y);
                } else {
                    var x1 = this._x * (1 - this._t) + x * this._t;
                    this._context.lineTo(x1, this._y);
                    this._context.lineTo(x1, y);
                }
                break;
        }
        this._x = x, this._y = y;
    }
};
exports.default = function(context) {
    return new Step(context, 0.5);
};
function stepBefore(context) {
    return new Step(context, 0);
}
function stepAfter(context) {
    return new Step(context, 1);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"04Lp5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _noneJs = require("./offset/none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
var _noneJs1 = require("./order/none.js");
var _noneJsDefault1 = parcelHelpers.interopDefault(_noneJs1);
function stackValue(d, key) {
    return d[key];
}
function stackSeries(key) {
    const series = [];
    series.key = key;
    return series;
}
exports.default = function() {
    var keys = _constantJsDefault.default([]), order = _noneJsDefault1.default, offset = _noneJsDefault.default, value = stackValue;
    function stack(data) {
        var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
        for (const d of data)for(i = 0, ++j; i < n; ++i)(sz[i][j] = [
            0,
            +value(d, sz[i].key, j, data)
        ]).data = d;
        for(i = 0, oz = _arrayJsDefault.default(order(sz)); i < n; ++i)sz[oz[i]].index = i;
        offset(sz, oz);
        return sz;
    }
    stack.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : _constantJsDefault.default(Array.from(_)), stack) : keys;
    };
    stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : _constantJsDefault.default(+_), stack) : value;
    };
    stack.order = function(_) {
        return arguments.length ? (order = _ == null ? _noneJsDefault1.default : typeof _ === "function" ? _ : _constantJsDefault.default(Array.from(_)), stack) : order;
    };
    stack.offset = function(_) {
        return arguments.length ? (offset = _ == null ? _noneJsDefault.default : _, stack) : offset;
    };
    return stack;
};

},{"./array.js":"6SJ8v","./constant.js":"dFe8v","./offset/none.js":"h0h85","./order/none.js":"30Qqt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0h85":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(series, order) {
    if (!((n = series.length) > 1)) return;
    for(var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i){
        s0 = s1, s1 = series[order[i]];
        for(j = 0; j < m; ++j)s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"30Qqt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(series) {
    var n = series.length, o = new Array(n);
    while(--n >= 0)o[n] = n;
    return o;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bE3nk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noneJs = require("./none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
exports.default = function(series, order) {
    if (!((n = series.length) > 0)) return;
    for(var i, n, j = 0, m = series[0].length, y; j < m; ++j){
        for(y = i = 0; i < n; ++i)y += series[i][j][1] || 0;
        if (y) for(i = 0; i < n; ++i)series[i][j][1] /= y;
    }
    _noneJsDefault.default(series, order);
};

},{"./none.js":"h0h85","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vGu2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(series, order) {
    if (!((n = series.length) > 0)) return;
    for(var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j)for(yp = yn = 0, i = 0; i < n; ++i){
        if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) d[0] = yp, d[1] = yp += dy;
        else if (dy < 0) d[1] = yn, d[0] = yn += dy;
        else d[0] = 0, d[1] = dy;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ez0ZX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noneJs = require("./none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
exports.default = function(series, order) {
    if (!((n = series.length) > 0)) return;
    for(var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j){
        for(var i = 0, y = 0; i < n; ++i)y += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y / 2;
    }
    _noneJsDefault.default(series, order);
};

},{"./none.js":"h0h85","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hJZrV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noneJs = require("./none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
exports.default = function(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
    for(var y = 0, j = 1, s0, m, n; j < m; ++j){
        for(var i = 0, s1 = 0, s2 = 0; i < n; ++i){
            var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
            for(var k = 0; k < i; ++k){
                var sk = series[order[k]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
                s3 += skj0 - skj1;
            }
            s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        if (s1) y -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    _noneJsDefault.default(series, order);
};

},{"./none.js":"h0h85","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDXA7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noneJs = require("./none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
exports.default = function(series) {
    var peaks = series.map(peak);
    return _noneJsDefault.default(series).sort(function(a, b) {
        return peaks[a] - peaks[b];
    });
};
function peak(series) {
    var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
    while(++i < n)if ((vi = +series[i][1]) > vj) vj = vi, j = i;
    return j;
}

},{"./none.js":"30Qqt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"17HfK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sum", ()=>sum
);
var _noneJs = require("./none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
exports.default = function(series) {
    var sums = series.map(sum);
    return _noneJsDefault.default(series).sort(function(a, b) {
        return sums[a] - sums[b];
    });
};
function sum(series) {
    var s = 0, i = -1, n = series.length, v;
    while(++i < n)if (v = +series[i][1]) s += v;
    return s;
}

},{"./none.js":"30Qqt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTuOf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
exports.default = function(series) {
    return _ascendingJsDefault.default(series).reverse();
};

},{"./ascending.js":"17HfK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4CNKk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appearanceJs = require("./appearance.js");
var _appearanceJsDefault = parcelHelpers.interopDefault(_appearanceJs);
var _ascendingJs = require("./ascending.js");
exports.default = function(series) {
    var n = series.length, i, j, sums = series.map(_ascendingJs.sum), order = _appearanceJsDefault.default(series), top = 0, bottom = 0, tops = [], bottoms = [];
    for(i = 0; i < n; ++i){
        j = order[i];
        if (top < bottom) {
            top += sums[j];
            tops.push(j);
        } else {
            bottom += sums[j];
            bottoms.push(j);
        }
    }
    return bottoms.reverse().concat(tops);
};

},{"./appearance.js":"fDXA7","./ascending.js":"17HfK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4K6jR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noneJs = require("./none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
exports.default = function(series) {
    return _noneJsDefault.default(series).reverse();
};

},{"./none.js":"30Qqt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQoq0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zoom", ()=>_zoomJsDefault.default
);
parcelHelpers.export(exports, "zoomTransform", ()=>_transformJsDefault.default
);
parcelHelpers.export(exports, "zoomIdentity", ()=>_transformJs.identity
);
parcelHelpers.export(exports, "ZoomTransform", ()=>_transformJs.Transform
);
var _zoomJs = require("./zoom.js");
var _zoomJsDefault = parcelHelpers.interopDefault(_zoomJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);

},{"./zoom.js":"2QYtg","./transform.js":"2Dxqg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2QYtg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Dispatch = require("d3-dispatch");
var _d3Drag = require("d3-drag");
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _d3Transition = require("d3-transition");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _eventJs = require("./event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _transformJs = require("./transform.js");
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
// Ignore right-click, since that should open the context menu.
// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
function defaultFilter(event) {
    return (!event.ctrlKey || event.type === 'wheel') && !event.button;
}
function defaultExtent() {
    var e = this;
    if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        if (e.hasAttribute("viewBox")) {
            e = e.viewBox.baseVal;
            return [
                [
                    e.x,
                    e.y
                ],
                [
                    e.x + e.width,
                    e.y + e.height
                ]
            ];
        }
        return [
            [
                0,
                0
            ],
            [
                e.width.baseVal.value,
                e.height.baseVal.value
            ]
        ];
    }
    return [
        [
            0,
            0
        ],
        [
            e.clientWidth,
            e.clientHeight
        ]
    ];
}
function defaultTransform() {
    return this.__zoom || _transformJs.identity;
}
function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform, extent, translateExtent) {
    var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
    return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}
exports.default = function() {
    var filter = defaultFilter, extent1 = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [
        0,
        Infinity
    ], translateExtent = [
        [
            -Infinity,
            -Infinity
        ],
        [
            Infinity,
            Infinity
        ]
    ], duration = 250, interpolate = _d3Interpolate.interpolateZoom, listeners = _d3Dispatch.dispatch("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
    function zoom(selection) {
        selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, {
            passive: false
        }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    zoom.transform = function(collection, transform, point, event) {
        var selection = collection.selection ? collection.selection() : collection;
        selection.property("__zoom", defaultTransform);
        if (collection !== selection) schedule(collection, transform, point, event);
        else selection.interrupt().each(function() {
            gesture(this, arguments).event(event).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
        });
    };
    zoom.scaleBy = function(selection, k, p, event) {
        zoom.scaleTo(selection, function() {
            var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
            return k0 * k1;
        }, p, event);
    };
    zoom.scaleTo = function(selection, k, p, event) {
        zoom.transform(selection, function() {
            var e = extent1.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
            return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
        }, p, event);
    };
    zoom.translateBy = function(selection, x, y, event) {
        zoom.transform(selection, function() {
            return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent1.apply(this, arguments), translateExtent);
        }, null, event);
    };
    zoom.translateTo = function(selection, x, y, p, event) {
        zoom.transform(selection, function() {
            var e = extent1.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
            return constrain(_transformJs.identity.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
        }, p, event);
    };
    function scale(transform, k) {
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
        return k === transform.k ? transform : new _transformJs.Transform(k, transform.x, transform.y);
    }
    function translate(transform, p0, p1) {
        var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
        return x === transform.x && y === transform.y ? transform : new _transformJs.Transform(transform.k, x, y);
    }
    function centroid(extent) {
        return [
            (+extent[0][0] + +extent[1][0]) / 2,
            (+extent[0][1] + +extent[1][1]) / 2
        ];
    }
    function schedule(transition, transform, point, event) {
        transition.on("start.zoom", function() {
            gesture(this, arguments).event(event).start();
        }).on("interrupt.zoom end.zoom", function() {
            gesture(this, arguments).event(event).end();
        }).tween("zoom", function() {
            var that = this, args = arguments, g = gesture(that, args).event(event), e = extent1.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === "function" ? transform.apply(that, args) : transform, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
            return function(t) {
                if (t === 1) t = b; // Avoid rounding error on end.
                else {
                    var l = i(t), k = w / l[2];
                    t = new _transformJs.Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
                }
                g.zoom(null, t);
            };
        });
    }
    function gesture(that, args, clean) {
        return !clean && that.__zooming || new Gesture(that, args);
    }
    function Gesture(that, args) {
        this.that = that;
        this.args = args;
        this.active = 0;
        this.sourceEvent = null;
        this.extent = extent1.apply(that, args);
        this.taps = 0;
    }
    Gesture.prototype = {
        event: function(event) {
            if (event) this.sourceEvent = event;
            return this;
        },
        start: function() {
            if (++this.active === 1) {
                this.that.__zooming = this;
                this.emit("start");
            }
            return this;
        },
        zoom: function(key, transform) {
            if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
            if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
            if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
            this.that.__zoom = transform;
            this.emit("zoom");
            return this;
        },
        end: function() {
            if (--this.active === 0) {
                delete this.that.__zooming;
                this.emit("end");
            }
            return this;
        },
        emit: function(type) {
            var d = _d3Selection.select(this.that).datum();
            listeners.call(type, this.that, new _eventJsDefault.default(type, {
                sourceEvent: this.sourceEvent,
                target: zoom,
                type,
                transform: this.that.__zoom,
                dispatch: listeners
            }), d);
        }
    };
    function wheeled(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = _d3Selection.pointer(event);
        // If the mouse is in the same location as before, reuse it.
        // If there were recent wheel events, reset the wheel idle timeout.
        if (g.wheel) {
            if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) g.mouse[1] = t.invert(g.mouse[0] = p);
            clearTimeout(g.wheel);
        } else if (t.k === k) return;
        else {
            g.mouse = [
                p,
                t.invert(p)
            ];
            _d3Transition.interrupt(this);
            g.start();
        }
        _noeventJsDefault.default(event);
        g.wheel = setTimeout(wheelidled, wheelDelay);
        g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
        function wheelidled() {
            g.wheel = null;
            g.end();
        }
    }
    function mousedowned(event1, ...args) {
        if (touchending || !filter.apply(this, arguments)) return;
        var currentTarget = event1.currentTarget, g = gesture(this, args, true).event(event1), v = _d3Selection.select(event1.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = _d3Selection.pointer(event1, currentTarget), x0 = event1.clientX, y0 = event1.clientY;
        _d3Drag.dragDisable(event1.view);
        _noeventJs.nopropagation(event1);
        g.mouse = [
            p,
            this.__zoom.invert(p)
        ];
        _d3Transition.interrupt(this);
        g.start();
        function mousemoved(event) {
            _noeventJsDefault.default(event);
            if (!g.moved) {
                var dx = event.clientX - x0, dy = event.clientY - y0;
                g.moved = dx * dx + dy * dy > clickDistance2;
            }
            g.event(event).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = _d3Selection.pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
        }
        function mouseupped(event) {
            v.on("mousemove.zoom mouseup.zoom", null);
            _d3Drag.dragEnable(event.view, g.moved);
            _noeventJsDefault.default(event);
            g.event(event).end();
        }
    }
    function dblclicked(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var t0 = this.__zoom, p0 = _d3Selection.pointer(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent1.apply(this, args), translateExtent);
        _noeventJsDefault.default(event);
        if (duration > 0) _d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0, event);
        else _d3Selection.select(this).call(zoom.transform, t1, p0, event);
    }
    function touchstarted(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
        _noeventJs.nopropagation(event);
        for(i = 0; i < n; ++i){
            t = touches[i], p = _d3Selection.pointer(t, this);
            p = [
                p,
                this.__zoom.invert(p),
                t.identifier
            ];
            if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
            else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
        }
        if (touchstarting) touchstarting = clearTimeout(touchstarting);
        if (started) {
            if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() {
                touchstarting = null;
            }, touchDelay);
            _d3Transition.interrupt(this);
            g.start();
        }
    }
    function touchmoved(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
        _noeventJsDefault.default(event);
        for(i = 0; i < n; ++i){
            t = touches[i], p = _d3Selection.pointer(t, this);
            if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
            else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
        }
        t = g.that.__zoom;
        if (g.touch1) {
            var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
            t = scale(t, Math.sqrt(dp / dl));
            p = [
                (p0[0] + p1[0]) / 2,
                (p0[1] + p1[1]) / 2
            ];
            l = [
                (l0[0] + l1[0]) / 2,
                (l0[1] + l1[1]) / 2
            ];
        } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
        else return;
        g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
    }
    function touchended(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
        _noeventJs.nopropagation(event);
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() {
            touchending = null;
        }, touchDelay);
        for(i = 0; i < n; ++i){
            t = touches[i];
            if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
            else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
        }
        if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
        if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
        else {
            g.end();
            // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
            if (g.taps === 2) {
                t = _d3Selection.pointer(t, this);
                if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
                    var p = _d3Selection.select(this).on("dblclick.zoom");
                    if (p) p.apply(this, arguments);
                }
            }
        }
    }
    zoom.wheelDelta = function(_) {
        return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : _constantJsDefault.default(+_), zoom) : wheelDelta;
    };
    zoom.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), zoom) : filter;
    };
    zoom.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : _constantJsDefault.default(!!_), zoom) : touchable;
    };
    zoom.extent = function(_) {
        return arguments.length ? (extent1 = typeof _ === "function" ? _ : _constantJsDefault.default([
            [
                +_[0][0],
                +_[0][1]
            ],
            [
                +_[1][0],
                +_[1][1]
            ]
        ]), zoom) : extent1;
    };
    zoom.scaleExtent = function(_) {
        return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [
            scaleExtent[0],
            scaleExtent[1]
        ];
    };
    zoom.translateExtent = function(_) {
        return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [
            [
                translateExtent[0][0],
                translateExtent[0][1]
            ],
            [
                translateExtent[1][0],
                translateExtent[1][1]
            ]
        ];
    };
    zoom.constrain = function(_) {
        return arguments.length ? (constrain = _, zoom) : constrain;
    };
    zoom.duration = function(_) {
        return arguments.length ? (duration = +_, zoom) : duration;
    };
    zoom.interpolate = function(_) {
        return arguments.length ? (interpolate = _, zoom) : interpolate;
    };
    zoom.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? zoom : value;
    };
    zoom.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
    };
    zoom.tapDistance = function(_) {
        return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
    };
    return zoom;
};

},{"d3-dispatch":"5WtHO","d3-drag":"hGy7N","d3-interpolate":"6jJyi","d3-selection":"gn9gd","d3-transition":"4lorl","./constant.js":"84Lz7","./event.js":"8AEix","./transform.js":"2Dxqg","./noevent.js":"jokv0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84Lz7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x
;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8AEix":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function ZoomEvent(type, { sourceEvent , target , transform , dispatch  }) {
    Object.defineProperties(this, {
        type: {
            value: type,
            enumerable: true,
            configurable: true
        },
        sourceEvent: {
            value: sourceEvent,
            enumerable: true,
            configurable: true
        },
        target: {
            value: target,
            enumerable: true,
            configurable: true
        },
        transform: {
            value: transform,
            enumerable: true,
            configurable: true
        },
        _: {
            value: dispatch
        }
    });
}
exports.default = ZoomEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Dxqg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transform", ()=>Transform
);
parcelHelpers.export(exports, "identity", ()=>identity
);
function Transform(k, x, y) {
    this.k = k;
    this.x = x;
    this.y = y;
}
Transform.prototype = {
    constructor: Transform,
    scale: function(k) {
        return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
    },
    translate: function(x, y) {
        return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
    },
    apply: function(point) {
        return [
            point[0] * this.k + this.x,
            point[1] * this.k + this.y
        ];
    },
    applyX: function(x) {
        return x * this.k + this.x;
    },
    applyY: function(y) {
        return y * this.k + this.y;
    },
    invert: function(location) {
        return [
            (location[0] - this.x) / this.k,
            (location[1] - this.y) / this.k
        ];
    },
    invertX: function(x) {
        return (x - this.x) / this.k;
    },
    invertY: function(y) {
        return (y - this.y) / this.k;
    },
    rescaleX: function(x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
    },
    rescaleY: function(y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
    },
    toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
};
var identity = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
    while(!node.__zoom)if (!(node = node.parentNode)) return identity;
    return node.__zoom;
}
exports.default = transform;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jokv0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nopropagation", ()=>nopropagation
);
function nopropagation(event) {
    event.stopImmediatePropagation();
}
exports.default = function(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"isRWn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GP", ()=>GP
);
parcelHelpers.export(exports, "CONSTRUCTOR", ()=>CONSTRUCTOR
);
parcelHelpers.export(exports, "MOST_FREQ_CONSTRUCTORS", ()=>MOST_FREQ_CONSTRUCTORS
);
parcelHelpers.export(exports, "SCROLLYOPTION", ()=>SCROLLYOPTION
);
parcelHelpers.export(exports, "FIXED_CLASSES_OPACITY", ()=>FIXED_CLASSES_OPACITY
);
parcelHelpers.export(exports, "Y_MINMAX", ()=>Y_MINMAX
);
parcelHelpers.export(exports, "addSelectOptionsGps", ()=>addSelectOptionsGps
);
parcelHelpers.export(exports, "getConstructorColor", ()=>getConstructorColor
);
parcelHelpers.export(exports, "addSelectOptionsConstructors", ()=>addSelectOptionsConstructors
);
parcelHelpers.export(exports, "isInputElem", ()=>isInputElem
);
// adapted from https://stackoverflow.com/questions/21294302/converting-milliseconds-to-minutes-and-seconds-with-javascript
parcelHelpers.export(exports, "getHumanReadableTime", ()=>getHumanReadableTime
);
let GP;
(function(GP1) {
    GP1["ABU"] = 'Abu Dhabi Grand Prix';
    GP1["ARGENTINE"] = 'Argentine Grand Prix';
    GP1["AUSTRALIAN"] = 'Australian Grand Prix';
    GP1["AUSTRIAN"] = 'Austrian Grand Prix';
    GP1["AZERBAIJAN"] = 'Azerbaijan Grand Prix';
    GP1["BAHRAIN"] = 'Bahrain Grand Prix';
    GP1["BELGIAN"] = 'Belgian Grand Prix';
    GP1["BRAZILIAN"] = 'Brazilian Grand Prix';
    GP1["BRITISH"] = 'British Grand Prix';
    GP1["CANADIAN"] = 'Canadian Grand Prix';
    GP1["CHINESE"] = 'Chinese Grand Prix';
    GP1["DUTCH"] = 'Dutch Grand Prix';
    GP1["EIFEL"] = 'Eifel Grand Prix';
    GP1["EMILIA"] = 'Emilia Romagna Grand Prix';
    GP1["EUROPEAN"] = 'European Grand Prix';
    GP1["FRENCH"] = 'French Grand Prix';
    GP1["GERMAN"] = 'German Grand Prix';
    GP1["HUNGARIAN"] = 'Hungarian Grand Prix';
    GP1["INDIAN"] = 'Indian Grand Prix';
    GP1["ITALIAN"] = 'Italian Grand Prix';
    GP1["JAPANESE"] = 'Japanese Grand Prix';
    GP1["KOREAN"] = 'Korean Grand Prix';
    GP1["MALAYSIAN"] = 'Malaysian Grand Prix';
    GP1["MEXICAN"] = 'Mexican Grand Prix"';
    GP1["MEXICO"] = 'Mexico City Grand Prix"';
    GP1["MONACO"] = 'Monaco Grand Prix';
    GP1["PACIFIC"] = 'Pacific Grand Prix';
    GP1["PORTUGUESE"] = 'Portuguese Grand Prix';
    GP1["QATAR"] = 'Qatar Grand Prix';
    GP1["RUSSIAN"] = 'Russian Grand Prix';
    GP1["SAKHIR"] = 'Sakhir Grand Prix';
    GP1["SAN"] = 'San Marino Grand Prix';
    GP1["SAO_PAULO"] = 'Sao Paulo Grand Prix';
    GP1["SAUDI"] = 'Saudi Arabian Grand Prix';
    GP1["SINGAPORE"] = 'Singapore Grand Prix';
    GP1["SPANISH"] = 'Spanish Grand Prix';
    GP1["STYRIAN"] = 'Styrian Grand Prix';
    GP1["TURKISH"] = 'Turkish Grand Prix';
    GP1["TUSCAN"] = 'Tuscan Grand Prix';
    GP1["UNITED"] = 'United States Grand Prix';
})(GP || (GP = {}));
let CONSTRUCTOR;
(function(CONSTRUCTOR1) {
    CONSTRUCTOR1["ALFA_ROMEO"] = 'Alfa Romeo';
    CONSTRUCTOR1["ALPHATAURI"] = 'AlphaTauri';
    CONSTRUCTOR1["ALPINE_F1_TEAM"] = 'Alpine F1 Team';
    CONSTRUCTOR1["ARROWS"] = 'Arrows';
    CONSTRUCTOR1["ASTON_MARTIN"] = 'Aston Martin';
    CONSTRUCTOR1["BAR"] = "BAR";
    CONSTRUCTOR1["BENETTON"] = 'Benetton';
    CONSTRUCTOR1["BMW_SAUBER"] = 'BMW Sauber';
    CONSTRUCTOR1["BRAWN"] = 'Brawn';
    CONSTRUCTOR1["CATERHAM"] = 'Caterham';
    CONSTRUCTOR1["FERRARI"] = 'Ferrari';
    CONSTRUCTOR1["FOOTWORK"] = 'Footwork';
    CONSTRUCTOR1["FORCE_INDIA"] = 'Force India';
    CONSTRUCTOR1["FORTI"] = 'Forti';
    CONSTRUCTOR1["HAAS_F1_TEAM"] = 'Haas F1 Team';
    CONSTRUCTOR1["HONDA"] = 'Honda';
    CONSTRUCTOR1["HRT"] = "HRT";
    CONSTRUCTOR1["JAGUAR"] = 'Jaguar';
    CONSTRUCTOR1["JORDAN"] = 'Jordan';
    CONSTRUCTOR1["LARROUSSE"] = 'Larrousse';
    CONSTRUCTOR1["LIGIER"] = 'Ligier';
    CONSTRUCTOR1["LOTUS_F1"] = 'Lotus F1';
    CONSTRUCTOR1["LOTUS"] = 'Lotus';
    CONSTRUCTOR1["MANOR_MARUSSIA"] = 'Manor Marussia';
    CONSTRUCTOR1["MARUSSIA"] = 'Marussia';
    CONSTRUCTOR1["MCLAREN"] = 'McLaren';
    CONSTRUCTOR1["MERCEDES"] = 'Mercedes';
    CONSTRUCTOR1["MF1"] = "MF1";
    CONSTRUCTOR1["MINARDI"] = 'Minardi';
    CONSTRUCTOR1["PACIFIC"] = 'Pacific';
    CONSTRUCTOR1["PROST"] = 'Prost';
    CONSTRUCTOR1["RACING_POINT"] = 'Racing Point';
    CONSTRUCTOR1["RED_BULL"] = 'Red Bull';
    CONSTRUCTOR1["RENAULT"] = 'Renault';
    CONSTRUCTOR1["SAUBER"] = 'Sauber';
    CONSTRUCTOR1["SIMTEK"] = 'Simtek';
    CONSTRUCTOR1["SPYKER_MF1"] = 'Spyker MF1';
    CONSTRUCTOR1["SPYKER"] = 'Spyker';
    CONSTRUCTOR1["STEWART"] = 'Stewart';
    CONSTRUCTOR1["SUPER_AGURI"] = 'Super Aguri';
    CONSTRUCTOR1["TEAM_LOTUS"] = 'Team Lotus';
    CONSTRUCTOR1["TORO_ROSSO"] = 'Toro Rosso';
    CONSTRUCTOR1["TOYOTA"] = 'Toyota';
    CONSTRUCTOR1["TYRRELL"] = 'Tyrrell';
    CONSTRUCTOR1["VIRGIN"] = 'Virgin';
    CONSTRUCTOR1["WILLIAMS"] = 'Williams';
})(CONSTRUCTOR || (CONSTRUCTOR = {}));
const MOST_FREQ_CONSTRUCTORS = [
    CONSTRUCTOR.WILLIAMS,
    CONSTRUCTOR.FERRARI,
    CONSTRUCTOR.MCLAREN,
    CONSTRUCTOR.RED_BULL,
    CONSTRUCTOR.SAUBER,
    CONSTRUCTOR.TORO_ROSSO,
    CONSTRUCTOR.RENAULT,
    CONSTRUCTOR.MERCEDES, 
];
let SCROLLYOPTION;
(function(SCROLLYOPTION1) {
    SCROLLYOPTION1[SCROLLYOPTION1["ANNEES_2010"] = 0] = "ANNEES_2010";
    SCROLLYOPTION1[SCROLLYOPTION1["TURBOHYBRID"] = 1] = "TURBOHYBRID";
    SCROLLYOPTION1[SCROLLYOPTION1["FERRARI_VS_WILLIAMS"] = 2] = "FERRARI_VS_WILLIAMS";
    SCROLLYOPTION1[SCROLLYOPTION1["ANNEES_2000"] = 3] = "ANNEES_2000";
})(SCROLLYOPTION || (SCROLLYOPTION = {}));
const FIXED_CLASSES_OPACITY = [
    'xaxis',
    'yaxis',
    'regulations',
    'scrolly-rect',
    'main-title'
];
const Y_MINMAX = [
    60,
    150
];
function addSelectOptionsGps(select, selected) {
    for(let gp in GP){
        const option = document.createElement('option');
        option.innerHTML = GP[gp];
        option.value = GP[gp];
        if (GP[gp] === selected) option.selected = true;
        select.appendChild(option);
    }
}
function getConstructorColor(constructor) {
    switch(constructor){
        case CONSTRUCTOR.FERRARI:
            return 'red';
        case CONSTRUCTOR.MCLAREN:
            return 'orange';
        case CONSTRUCTOR.RED_BULL:
            return 'blue';
        case CONSTRUCTOR.ALFA_ROMEO:
            return 'pink';
        case CONSTRUCTOR.SAUBER:
            return 'hotpink';
        case CONSTRUCTOR.TORO_ROSSO:
            return 'tan';
        case CONSTRUCTOR.RENAULT:
            return 'gold';
        case CONSTRUCTOR.MERCEDES:
            return 'darkcyan';
        case CONSTRUCTOR.WILLIAMS:
            return 'limegreen';
        case 'min':
            return 'purple';
        case 'max':
            return 'black';
        default:
            return 'grey';
    }
}
function addSelectOptionsConstructors(select, selected) {
    const selectOptions = MOST_FREQ_CONSTRUCTORS;
    selectOptions.push(...[
        'min',
        'max'
    ]);
    selectOptions.forEach((c)=>{
        const option = document.createElement('input');
        const label = document.createElement('label');
        const text = document.createElement('span');
        label.appendChild(option);
        label.appendChild(text);
        label.setAttribute('class', 'constructor-option');
        label.classList.add('check');
        option.type = "checkbox";
        text.classList.add('noselect');
        text.style.color = getConstructorColor(c);
        text.style.border = '2px solid ' + getConstructorColor(c);
        if (c === 'max') {
            text.style.backgroundColor = getConstructorColor(c);
            text.style.color = '#fff';
            text.innerHTML = 'Pire temps';
        } else if (c === 'min') {
            text.style.backgroundColor = getConstructorColor(c);
            text.style.color = '#fff';
            text.innerHTML = 'Meilleur temps';
            option.setAttribute('style', 'margin-left: 50px');
        } else text.innerHTML = c;
        option.addEventListener('change', function() {
            if (this.checked) {
                text.style.backgroundColor = getConstructorColor(c);
                text.style.color = '#fff';
            } else {
                text.style.color = getConstructorColor(c);
                text.style.backgroundColor = '';
            }
        });
        option.value = c;
        option.setAttribute('class', 'constructor-option');
        option.setAttribute('id', 'constructor-option-' + c);
        if (selected.includes(c)) {
            text.style.backgroundColor = getConstructorColor(c);
            text.style.color = '#fff';
            option.checked = true;
        }
        label.classList.add('select-constructor');
        select.appendChild(label);
    });
}
function isInputElem(elem) {
    return elem.tagName === 'INPUT';
}
function getHumanReadableTime(duration) {
    let milliseconds = parseInt(`${duration % 1000}`);
    let seconds = parseInt(`${duration / 1000 % 60}`);
    let minutes = parseInt(`${duration / 60000 % 60}`);
    let hours = parseInt(`${duration / 3600000 % 24}`);
    hours = hours < 10 ? 0 + hours : hours;
    minutes = minutes < 10 ? 0 + minutes : minutes;
    seconds = seconds < 10 ? 0 + seconds : seconds;
    return minutes + ":" + seconds + "." + milliseconds;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5xA8i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * d3.tip
 * Copyright (c) 2013-2017 Justin Palmer
 *
 * Tooltips for d3.js SVG visualizations
 */ // eslint-disable-next-line no-extra-semi
var _d3Collection = require("d3-collection");
var _d3Selection = require("d3-selection");
// Public - constructs a new tooltip
//
// Returns a tip
exports.default = function() {
    var direction = d3TipDirection, offset = d3TipOffset, html = d3TipHTML, rootElement = document.body, node = initNode(), svg = null, point = null, target = null;
    function tip(vis) {
        svg = getSVGNode(vis);
        if (!svg) return;
        point = svg.createSVGPoint();
        rootElement.appendChild(node);
    }
    // Public - show the tooltip on the screen
    //
    // Returns a tip
    tip.show = function() {
        var args = Array.prototype.slice.call(arguments);
        if (args[args.length - 1] instanceof SVGElement) target = args.pop();
        var content = html.apply(this, args), poffset = offset.apply(this, args), dir = direction.apply(this, args), nodel = getNodeEl(), i = directions.length, coords, scrollTop = document.documentElement.scrollTop || rootElement.scrollTop, scrollLeft = document.documentElement.scrollLeft || rootElement.scrollLeft;
        nodel.html(content).style('opacity', 1).style('pointer-events', 'all');
        while(i--)nodel.classed(directions[i], false);
        coords = directionCallbacks.get(dir).apply(this);
        nodel.classed(dir, true).style('top', coords.top + poffset[0] + scrollTop + 'px').style('left', coords.left + poffset[1] + scrollLeft + 'px');
        return tip;
    };
    // Public - hide the tooltip
    //
    // Returns a tip
    tip.hide = function() {
        var nodel = getNodeEl();
        nodel.style('opacity', 0).style('pointer-events', 'none');
        return tip;
    };
    // Public: Proxy attr calls to the d3 tip container.
    // Sets or gets attribute value.
    //
    // n - name of the attribute
    // v - value of the attribute
    //
    // Returns tip or attribute value
    // eslint-disable-next-line no-unused-vars
    tip.attr = function(n, v) {
        if (arguments.length < 2 && typeof n === 'string') return getNodeEl().attr(n);
        var args = Array.prototype.slice.call(arguments);
        _d3Selection.selection.prototype.attr.apply(getNodeEl(), args);
        return tip;
    };
    // Public: Proxy style calls to the d3 tip container.
    // Sets or gets a style value.
    //
    // n - name of the property
    // v - value of the property
    //
    // Returns tip or style property value
    // eslint-disable-next-line no-unused-vars
    tip.style = function(n, v) {
        if (arguments.length < 2 && typeof n === 'string') return getNodeEl().style(n);
        var args = Array.prototype.slice.call(arguments);
        _d3Selection.selection.prototype.style.apply(getNodeEl(), args);
        return tip;
    };
    // Public: Set or get the direction of the tooltip
    //
    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
    //     sw(southwest), ne(northeast) or se(southeast)
    //
    // Returns tip or direction
    tip.direction = function(v) {
        if (!arguments.length) return direction;
        direction = v == null ? v : functor(v);
        return tip;
    };
    // Public: Sets or gets the offset of the tip
    //
    // v - Array of [x, y] offset
    //
    // Returns offset or
    tip.offset = function(v) {
        if (!arguments.length) return offset;
        offset = v == null ? v : functor(v);
        return tip;
    };
    // Public: sets or gets the html value of the tooltip
    //
    // v - String value of the tip
    //
    // Returns html value or tip
    tip.html = function(v) {
        if (!arguments.length) return html;
        html = v == null ? v : functor(v);
        return tip;
    };
    // Public: sets or gets the root element anchor of the tooltip
    //
    // v - root element of the tooltip
    //
    // Returns root node of tip
    tip.rootElement = function(v) {
        if (!arguments.length) return rootElement;
        rootElement = v == null ? v : functor(v);
        return tip;
    };
    // Public: destroys the tooltip and removes it from the DOM
    //
    // Returns a tip
    tip.destroy = function() {
        if (node) {
            getNodeEl().remove();
            node = null;
        }
        return tip;
    };
    function d3TipDirection() {
        return 'n';
    }
    function d3TipOffset() {
        return [
            0,
            0
        ];
    }
    function d3TipHTML() {
        return ' ';
    }
    var directionCallbacks = _d3Collection.map({
        n: directionNorth,
        s: directionSouth,
        e: directionEast,
        w: directionWest,
        nw: directionNorthWest,
        ne: directionNorthEast,
        sw: directionSouthWest,
        se: directionSouthEast
    }), directions = directionCallbacks.keys();
    function directionNorth() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.n.y - node.offsetHeight,
            left: bbox.n.x - node.offsetWidth / 2
        };
    }
    function directionSouth() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.s.y,
            left: bbox.s.x - node.offsetWidth / 2
        };
    }
    function directionEast() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.e.y - node.offsetHeight / 2,
            left: bbox.e.x
        };
    }
    function directionWest() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.w.y - node.offsetHeight / 2,
            left: bbox.w.x - node.offsetWidth
        };
    }
    function directionNorthWest() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.nw.y - node.offsetHeight,
            left: bbox.nw.x - node.offsetWidth
        };
    }
    function directionNorthEast() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.ne.y - node.offsetHeight,
            left: bbox.ne.x
        };
    }
    function directionSouthWest() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.sw.y,
            left: bbox.sw.x - node.offsetWidth
        };
    }
    function directionSouthEast() {
        var bbox = getScreenBBox(this);
        return {
            top: bbox.se.y,
            left: bbox.se.x
        };
    }
    function initNode() {
        var div = _d3Selection.select(document.createElement('div'));
        div.style('position', 'absolute').style('top', 0).style('opacity', 0).style('pointer-events', 'none').style('box-sizing', 'border-box');
        return div.node();
    }
    function getSVGNode(element) {
        var svgNode = element.node();
        if (!svgNode) return null;
        if (svgNode.tagName.toLowerCase() === 'svg') return svgNode;
        return svgNode.ownerSVGElement;
    }
    function getNodeEl() {
        if (node == null) {
            node = initNode();
            // re-add node to DOM
            rootElement.appendChild(node);
        }
        return _d3Selection.select(node);
    }
    // Private - gets the screen coordinates of a shape
    //
    // Given a shape on the screen, will return an SVGPoint for the directions
    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast),
    // nw(northwest), sw(southwest).
    //
    //    +-+-+
    //    |   |
    //    +   +
    //    |   |
    //    +-+-+
    //
    // Returns an Object {n, s, e, w, nw, sw, ne, se}
    function getScreenBBox(targetShape) {
        var targetel = target || targetShape;
        while(targetel.getScreenCTM == null && targetel.parentNode != null)targetel = targetel.parentNode;
        var bbox = {}, matrix = targetel.getScreenCTM(), tbbox = targetel.getBBox(), width = tbbox.width, height = tbbox.height, x = tbbox.x, y = tbbox.y;
        point.x = x;
        point.y = y;
        bbox.nw = point.matrixTransform(matrix);
        point.x += width;
        bbox.ne = point.matrixTransform(matrix);
        point.y += height;
        bbox.se = point.matrixTransform(matrix);
        point.x -= width;
        bbox.sw = point.matrixTransform(matrix);
        point.y -= height / 2;
        bbox.w = point.matrixTransform(matrix);
        point.x += width;
        bbox.e = point.matrixTransform(matrix);
        point.x -= width / 2;
        point.y -= height / 2;
        bbox.n = point.matrixTransform(matrix);
        point.y += height;
        bbox.s = point.matrixTransform(matrix);
        return bbox;
    }
    // Private - replace D3JS 3.X d3.functor() function
    function functor(v) {
        return typeof v === 'function' ? v : function() {
            return v;
        };
    }
    return tip;
};

},{"d3-collection":"lgnY5","d3-selection":"4qlwZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgnY5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nest", ()=>_nestDefault.default
);
parcelHelpers.export(exports, "set", ()=>_setDefault.default
);
parcelHelpers.export(exports, "map", ()=>_mapDefault.default
);
parcelHelpers.export(exports, "keys", ()=>_keysDefault.default
);
parcelHelpers.export(exports, "values", ()=>_valuesDefault.default
);
parcelHelpers.export(exports, "entries", ()=>_entriesDefault.default
);
var _nest = require("./nest");
var _nestDefault = parcelHelpers.interopDefault(_nest);
var _set = require("./set");
var _setDefault = parcelHelpers.interopDefault(_set);
var _map = require("./map");
var _mapDefault = parcelHelpers.interopDefault(_map);
var _keys = require("./keys");
var _keysDefault = parcelHelpers.interopDefault(_keys);
var _values = require("./values");
var _valuesDefault = parcelHelpers.interopDefault(_values);
var _entries = require("./entries");
var _entriesDefault = parcelHelpers.interopDefault(_entries);

},{"./nest":"dBNxS","./set":"h9Dkt","./map":"gFXTu","./keys":"e6qKL","./values":"foy2e","./entries":"gwreO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBNxS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _map = require("./map");
var _mapDefault = parcelHelpers.interopDefault(_map);
exports.default = function() {
    var keys = [], sortKeys = [], sortValues, rollup, nest;
    function apply(array, depth, createResult, setResult) {
        if (depth >= keys.length) {
            if (sortValues != null) array.sort(sortValues);
            return rollup != null ? rollup(array) : array;
        }
        var i = -1, n = array.length, key1 = keys[depth++], keyValue, value, valuesByKey = _mapDefault.default(), values1, result = createResult();
        while(++i < n)if (values1 = valuesByKey.get(keyValue = key1(value = array[i]) + "")) values1.push(value);
        else valuesByKey.set(keyValue, [
            value
        ]);
        valuesByKey.each(function(values, key) {
            setResult(result, key, apply(values, depth, createResult, setResult));
        });
        return result;
    }
    function entries(map, depth) {
        if (++depth > keys.length) return map;
        var array, sortKey = sortKeys[depth - 1];
        if (rollup != null && depth >= keys.length) array = map.entries();
        else array = [], map.each(function(v, k) {
            array.push({
                key: k,
                values: entries(v, depth)
            });
        });
        return sortKey != null ? array.sort(function(a, b) {
            return sortKey(a.key, b.key);
        }) : array;
    }
    return nest = {
        object: function(array) {
            return apply(array, 0, createObject, setObject);
        },
        map: function(array) {
            return apply(array, 0, createMap, setMap);
        },
        entries: function(array) {
            return entries(apply(array, 0, createMap, setMap), 0);
        },
        key: function(d) {
            keys.push(d);
            return nest;
        },
        sortKeys: function(order) {
            sortKeys[keys.length - 1] = order;
            return nest;
        },
        sortValues: function(order) {
            sortValues = order;
            return nest;
        },
        rollup: function(f) {
            rollup = f;
            return nest;
        }
    };
};
function createObject() {
    return {};
}
function setObject(object, key, value) {
    object[key] = value;
}
function createMap() {
    return _mapDefault.default();
}
function setMap(map, key, value) {
    map.set(key, value);
}

},{"./map":"gFXTu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFXTu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prefix", ()=>prefix
);
var prefix = "$";
function Map() {}
Map.prototype = map.prototype = {
    constructor: Map,
    has: function(key) {
        return prefix + key in this;
    },
    get: function(key) {
        return this[prefix + key];
    },
    set: function(key, value) {
        this[prefix + key] = value;
        return this;
    },
    remove: function(key) {
        var property = prefix + key;
        return property in this && delete this[property];
    },
    clear: function() {
        for(var property in this)if (property[0] === prefix) delete this[property];
    },
    keys: function() {
        var keys = [];
        for(var property in this)if (property[0] === prefix) keys.push(property.slice(1));
        return keys;
    },
    values: function() {
        var values = [];
        for(var property in this)if (property[0] === prefix) values.push(this[property]);
        return values;
    },
    entries: function() {
        var entries = [];
        for(var property in this)if (property[0] === prefix) entries.push({
            key: property.slice(1),
            value: this[property]
        });
        return entries;
    },
    size: function() {
        var size = 0;
        for(var property in this)if (property[0] === prefix) ++size;
        return size;
    },
    empty: function() {
        for(var property in this)if (property[0] === prefix) return false;
        return true;
    },
    each: function(f) {
        for(var property in this)if (property[0] === prefix) f(this[property], property.slice(1), this);
    }
};
function map(object, f) {
    var map1 = new Map;
    // Copy constructor.
    if (object instanceof Map) object.each(function(value, key) {
        map1.set(key, value);
    });
    else if (Array.isArray(object)) {
        var i = -1, n = object.length, o;
        if (f == null) while(++i < n)map1.set(i, object[i]);
        else while(++i < n)map1.set(f(o = object[i], i, object), o);
    } else if (object) for(var key1 in object)map1.set(key1, object[key1]);
    return map1;
}
exports.default = map;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9Dkt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _map = require("./map");
var _mapDefault = parcelHelpers.interopDefault(_map);
function Set() {}
var proto = _mapDefault.default.prototype;
Set.prototype = set.prototype = {
    constructor: Set,
    has: proto.has,
    add: function(value) {
        value += "";
        this[_map.prefix + value] = value;
        return this;
    },
    remove: proto.remove,
    clear: proto.clear,
    values: proto.keys,
    size: proto.size,
    empty: proto.empty,
    each: proto.each
};
function set(object, f) {
    var set1 = new Set;
    // Copy constructor.
    if (object instanceof Set) object.each(function(value) {
        set1.add(value);
    });
    else if (object) {
        var i = -1, n = object.length;
        if (f == null) while(++i < n)set1.add(object[i]);
        else while(++i < n)set1.add(f(object[i], i, object));
    }
    return set1;
}
exports.default = set;

},{"./map":"gFXTu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e6qKL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(map) {
    var keys = [];
    for(var key in map)keys.push(key);
    return keys;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"foy2e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(map) {
    var values = [];
    for(var key in map)values.push(map[key]);
    return values;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gwreO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(map) {
    var entries = [];
    for(var key in map)entries.push({
        key: key,
        value: map[key]
    });
    return entries;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qlwZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", ()=>_createDefault.default
);
parcelHelpers.export(exports, "creator", ()=>_creatorDefault.default
);
parcelHelpers.export(exports, "local", ()=>_localDefault.default
);
parcelHelpers.export(exports, "matcher", ()=>_matcherDefault.default
);
parcelHelpers.export(exports, "mouse", ()=>_mouseDefault.default
);
parcelHelpers.export(exports, "namespace", ()=>_namespaceDefault.default
);
parcelHelpers.export(exports, "namespaces", ()=>_namespacesDefault.default
);
parcelHelpers.export(exports, "clientPoint", ()=>_pointDefault.default
);
parcelHelpers.export(exports, "select", ()=>_selectDefault.default
);
parcelHelpers.export(exports, "selectAll", ()=>_selectAllDefault.default
);
parcelHelpers.export(exports, "selection", ()=>_indexDefault.default
);
parcelHelpers.export(exports, "selector", ()=>_selectorDefault.default
);
parcelHelpers.export(exports, "selectorAll", ()=>_selectorAllDefault.default
);
parcelHelpers.export(exports, "style", ()=>_style.styleValue
);
parcelHelpers.export(exports, "touch", ()=>_touchDefault.default
);
parcelHelpers.export(exports, "touches", ()=>_touchesDefault.default
);
parcelHelpers.export(exports, "window", ()=>_windowDefault.default
);
parcelHelpers.export(exports, "event", ()=>_on.event
);
parcelHelpers.export(exports, "customEvent", ()=>_on.customEvent
);
var _create = require("./create");
var _createDefault = parcelHelpers.interopDefault(_create);
var _creator = require("./creator");
var _creatorDefault = parcelHelpers.interopDefault(_creator);
var _local = require("./local");
var _localDefault = parcelHelpers.interopDefault(_local);
var _matcher = require("./matcher");
var _matcherDefault = parcelHelpers.interopDefault(_matcher);
var _mouse = require("./mouse");
var _mouseDefault = parcelHelpers.interopDefault(_mouse);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _namespaces = require("./namespaces");
var _namespacesDefault = parcelHelpers.interopDefault(_namespaces);
var _point = require("./point");
var _pointDefault = parcelHelpers.interopDefault(_point);
var _select = require("./select");
var _selectDefault = parcelHelpers.interopDefault(_select);
var _selectAll = require("./selectAll");
var _selectAllDefault = parcelHelpers.interopDefault(_selectAll);
var _index = require("./selection/index");
var _indexDefault = parcelHelpers.interopDefault(_index);
var _selector = require("./selector");
var _selectorDefault = parcelHelpers.interopDefault(_selector);
var _selectorAll = require("./selectorAll");
var _selectorAllDefault = parcelHelpers.interopDefault(_selectorAll);
var _style = require("./selection/style");
var _touch = require("./touch");
var _touchDefault = parcelHelpers.interopDefault(_touch);
var _touches = require("./touches");
var _touchesDefault = parcelHelpers.interopDefault(_touches);
var _window = require("./window");
var _windowDefault = parcelHelpers.interopDefault(_window);
var _on = require("./selection/on");

},{"./create":false,"./creator":"fH8LI","./local":false,"./matcher":"jVUyD","./mouse":false,"./namespace":"apK2m","./namespaces":"9nUDN","./point":false,"./select":"kSDLF","./selectAll":false,"./selection/index":"5OrNW","./selector":"c7PBX","./selectorAll":"k60Ma","./selection/style":"w2OuU","./touch":false,"./touches":false,"./window":"OVHUv","./selection/on":"aicm6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fH8LI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namespace = require("./namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
var _namespaces = require("./namespaces");
function creatorInherit(name) {
    return function() {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
    };
}
function creatorFixed(fullname) {
    return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
}
exports.default = function(name) {
    var fullname = _namespaceDefault.default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
};

},{"./namespace":"apK2m","./namespaces":"9nUDN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"apK2m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namespaces = require("./namespaces");
var _namespacesDefault = parcelHelpers.interopDefault(_namespaces);
exports.default = function(name) {
    var prefix = name += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
    return _namespacesDefault.default.hasOwnProperty(prefix) ? {
        space: _namespacesDefault.default[prefix],
        local: name
    } : name;
};

},{"./namespaces":"9nUDN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nUDN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xhtml", ()=>xhtml
);
var xhtml = "http://www.w3.org/1999/xhtml";
exports.default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVUyD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(selector) {
    return function() {
        return this.matches(selector);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSDLF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./selection/index");
exports.default = function(selector) {
    return typeof selector === "string" ? new _index.Selection([
        [
            document.querySelector(selector)
        ]
    ], [
        document.documentElement
    ]) : new _index.Selection([
        [
            selector
        ]
    ], _index.root);
};

},{"./selection/index":"5OrNW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5OrNW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "root", ()=>root
);
parcelHelpers.export(exports, "Selection", ()=>Selection
);
var _select = require("./select");
var _selectDefault = parcelHelpers.interopDefault(_select);
var _selectAll = require("./selectAll");
var _selectAllDefault = parcelHelpers.interopDefault(_selectAll);
var _filter = require("./filter");
var _filterDefault = parcelHelpers.interopDefault(_filter);
var _data = require("./data");
var _dataDefault = parcelHelpers.interopDefault(_data);
var _enter = require("./enter");
var _enterDefault = parcelHelpers.interopDefault(_enter);
var _exit = require("./exit");
var _exitDefault = parcelHelpers.interopDefault(_exit);
var _join = require("./join");
var _joinDefault = parcelHelpers.interopDefault(_join);
var _merge = require("./merge");
var _mergeDefault = parcelHelpers.interopDefault(_merge);
var _order = require("./order");
var _orderDefault = parcelHelpers.interopDefault(_order);
var _sort = require("./sort");
var _sortDefault = parcelHelpers.interopDefault(_sort);
var _call = require("./call");
var _callDefault = parcelHelpers.interopDefault(_call);
var _nodes = require("./nodes");
var _nodesDefault = parcelHelpers.interopDefault(_nodes);
var _node = require("./node");
var _nodeDefault = parcelHelpers.interopDefault(_node);
var _size = require("./size");
var _sizeDefault = parcelHelpers.interopDefault(_size);
var _empty = require("./empty");
var _emptyDefault = parcelHelpers.interopDefault(_empty);
var _each = require("./each");
var _eachDefault = parcelHelpers.interopDefault(_each);
var _attr = require("./attr");
var _attrDefault = parcelHelpers.interopDefault(_attr);
var _style = require("./style");
var _styleDefault = parcelHelpers.interopDefault(_style);
var _property = require("./property");
var _propertyDefault = parcelHelpers.interopDefault(_property);
var _classed = require("./classed");
var _classedDefault = parcelHelpers.interopDefault(_classed);
var _text = require("./text");
var _textDefault = parcelHelpers.interopDefault(_text);
var _html = require("./html");
var _htmlDefault = parcelHelpers.interopDefault(_html);
var _raise = require("./raise");
var _raiseDefault = parcelHelpers.interopDefault(_raise);
var _lower = require("./lower");
var _lowerDefault = parcelHelpers.interopDefault(_lower);
var _append = require("./append");
var _appendDefault = parcelHelpers.interopDefault(_append);
var _insert = require("./insert");
var _insertDefault = parcelHelpers.interopDefault(_insert);
var _remove = require("./remove");
var _removeDefault = parcelHelpers.interopDefault(_remove);
var _clone = require("./clone");
var _cloneDefault = parcelHelpers.interopDefault(_clone);
var _datum = require("./datum");
var _datumDefault = parcelHelpers.interopDefault(_datum);
var _on = require("./on");
var _onDefault = parcelHelpers.interopDefault(_on);
var _dispatch = require("./dispatch");
var _dispatchDefault = parcelHelpers.interopDefault(_dispatch);
var root = [
    null
];
function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
}
function selection() {
    return new Selection([
        [
            document.documentElement
        ]
    ], root);
}
Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: _selectDefault.default,
    selectAll: _selectAllDefault.default,
    filter: _filterDefault.default,
    data: _dataDefault.default,
    enter: _enterDefault.default,
    exit: _exitDefault.default,
    join: _joinDefault.default,
    merge: _mergeDefault.default,
    order: _orderDefault.default,
    sort: _sortDefault.default,
    call: _callDefault.default,
    nodes: _nodesDefault.default,
    node: _nodeDefault.default,
    size: _sizeDefault.default,
    empty: _emptyDefault.default,
    each: _eachDefault.default,
    attr: _attrDefault.default,
    style: _styleDefault.default,
    property: _propertyDefault.default,
    classed: _classedDefault.default,
    text: _textDefault.default,
    html: _htmlDefault.default,
    raise: _raiseDefault.default,
    lower: _lowerDefault.default,
    append: _appendDefault.default,
    insert: _insertDefault.default,
    remove: _removeDefault.default,
    clone: _cloneDefault.default,
    datum: _datumDefault.default,
    on: _onDefault.default,
    dispatch: _dispatchDefault.default
};
exports.default = selection;

},{"./select":"fX25Z","./selectAll":"68oSD","./filter":"atvaJ","./data":"8I0D6","./enter":"7g06c","./exit":"DCSXT","./join":"kya3t","./merge":"9y3dm","./order":"ghB0z","./sort":"2hdlI","./call":"9zxLB","./nodes":"epqzO","./node":"02Nr3","./size":"4r0Hq","./empty":"ai2CZ","./each":"im2F7","./attr":"lzsEH","./style":"w2OuU","./property":"d0JFX","./classed":"8wxPJ","./text":"glesJ","./html":"fxDk5","./raise":"l7eRy","./lower":"ei84V","./append":"eAH3P","./insert":"1v2DS","./remove":"bi1Bk","./clone":"2fhrA","./datum":"7mgfx","./on":"aicm6","./dispatch":"cDGs8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fX25Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
var _selector = require("../selector");
var _selectorDefault = parcelHelpers.interopDefault(_selector);
exports.default = function(select) {
    if (typeof select !== "function") select = _selectorDefault.default(select);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
        }
    }
    return new _index.Selection(subgroups, this._parents);
};

},{"./index":"5OrNW","../selector":"c7PBX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c7PBX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function none() {}
exports.default = function(selector) {
    return selector == null ? none : function() {
        return this.querySelector(selector);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"68oSD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
var _selectorAll = require("../selectorAll");
var _selectorAllDefault = parcelHelpers.interopDefault(_selectorAll);
exports.default = function(select) {
    if (typeof select !== "function") select = _selectorAllDefault.default(select);
    for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
        }
    }
    return new _index.Selection(subgroups, parents);
};

},{"./index":"5OrNW","../selectorAll":"k60Ma","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k60Ma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function empty() {
    return [];
}
exports.default = function(selector) {
    return selector == null ? empty : function() {
        return this.querySelectorAll(selector);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"atvaJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
var _matcher = require("../matcher");
var _matcherDefault = parcelHelpers.interopDefault(_matcher);
exports.default = function(match) {
    if (typeof match !== "function") match = _matcherDefault.default(match);
    for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)if ((node = group[i]) && match.call(node, node.__data__, i, group)) subgroup.push(node);
    }
    return new _index.Selection(subgroups, this._parents);
};

},{"./index":"5OrNW","../matcher":"jVUyD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8I0D6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
var _enter = require("./enter");
var _constant = require("../constant");
var _constantDefault = parcelHelpers.interopDefault(_constant);
var keyPrefix = "$"; // Protect against keys like “__proto__”.
function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for(; i < dataLength; ++i)if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
    } else enter[i] = new _enter.EnterNode(parent, data[i]);
    // Put any non-null nodes that don’t fit into exit.
    for(; i < groupLength; ++i)if (node = group[i]) exit[i] = node;
}
function bindKey(parent, group, enter, update, exit, data, key) {
    var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for(i = 0; i < groupLength; ++i)if (node = group[i]) {
        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
        if (keyValue in nodeByKeyValue) exit[i] = node;
        else nodeByKeyValue[keyValue] = node;
    }
    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for(i = 0; i < dataLength; ++i){
        keyValue = keyPrefix + key.call(parent, data[i], i, data);
        if (node = nodeByKeyValue[keyValue]) {
            update[i] = node;
            node.__data__ = data[i];
            nodeByKeyValue[keyValue] = null;
        } else enter[i] = new _enter.EnterNode(parent, data[i]);
    }
    // Add any remaining nodes that were not bound to data to exit.
    for(i = 0; i < groupLength; ++i)if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) exit[i] = node;
}
exports.default = function(value, key) {
    if (!value) {
        data = new Array(this.size()), j = -1;
        this.each(function(d) {
            data[++j] = d;
        });
        return data;
    }
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function") value = _constantDefault.default(value);
    for(var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j){
        var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for(var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0)if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while(!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
        }
    }
    update = new _index.Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
};

},{"./index":"5OrNW","./enter":"7g06c","../constant":"90itl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7g06c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EnterNode", ()=>EnterNode
);
var _sparse = require("./sparse");
var _sparseDefault = parcelHelpers.interopDefault(_sparse);
var _index = require("./index");
exports.default = function() {
    return new _index.Selection(this._enter || this._groups.map(_sparseDefault.default), this._parents);
};
function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
}
EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
        return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
    }
};

},{"./sparse":"fEVhJ","./index":"5OrNW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fEVhJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(update) {
    return new Array(update.length);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"90itl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(x) {
    return function() {
        return x;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"DCSXT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sparse = require("./sparse");
var _sparseDefault = parcelHelpers.interopDefault(_sparse);
var _index = require("./index");
exports.default = function() {
    return new _index.Selection(this._exit || this._groups.map(_sparseDefault.default), this._parents);
};

},{"./sparse":"fEVhJ","./index":"5OrNW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kya3t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(onenter, onupdate, onexit) {
    var enter = this.enter(), update = this, exit = this.exit();
    enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
    if (onupdate != null) update = onupdate(update);
    if (onexit == null) exit.remove();
    else onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9y3dm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
exports.default = function(selection) {
    for(var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
        for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group0[i] || group1[i]) merge[i] = node;
    }
    for(; j < m0; ++j)merges[j] = groups0[j];
    return new _index.Selection(merges, this._parents);
};

},{"./index":"5OrNW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ghB0z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    for(var groups = this._groups, j = -1, m = groups.length; ++j < m;){
        for(var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;)if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
        }
    }
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2hdlI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _index = require("./index");
exports.default = function(compare) {
    if (!compare) compare = ascending;
    function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }
    for(var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j){
        for(var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group[i]) sortgroup[i] = node;
        sortgroup.sort(compareNode);
    }
    return new _index.Selection(sortgroups, this._parents).order();
};
function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

},{"./index":"5OrNW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9zxLB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"epqzO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var nodes = new Array(this.size()), i = -1;
    this.each(function() {
        nodes[++i] = this;
    });
    return nodes;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"02Nr3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j)for(var group = groups[j], i = 0, n = group.length; i < n; ++i){
        var node = group[i];
        if (node) return node;
    }
    return null;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4r0Hq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    var size = 0;
    this.each(function() {
        ++size;
    });
    return size;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ai2CZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function() {
    return !this.node();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"im2F7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(callback) {
    for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
        for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i)if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lzsEH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _namespace = require("../namespace");
var _namespaceDefault = parcelHelpers.interopDefault(_namespace);
function attrRemove(name) {
    return function() {
        this.removeAttribute(name);
    };
}
function attrRemoveNS(fullname) {
    return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
}
function attrConstant(name, value) {
    return function() {
        this.setAttribute(name, value);
    };
}
function attrConstantNS(fullname, value) {
    return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
    };
}
function attrFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
    };
}
function attrFunctionNS(fullname, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
    };
}
exports.default = function(name, value) {
    var fullname = _namespaceDefault.default(name);
    if (arguments.length < 2) {
        var node = this.node();
        return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
};

},{"../namespace":"apK2m","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"w2OuU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styleValue", ()=>styleValue
);
var _window = require("../window");
var _windowDefault = parcelHelpers.interopDefault(_window);
function styleRemove(name) {
    return function() {
        this.style.removeProperty(name);
    };
}
function styleConstant(name, value, priority) {
    return function() {
        this.style.setProperty(name, value, priority);
    };
}
function styleFunction(name, value, priority) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
    };
}
exports.default = function(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
};
function styleValue(node, name) {
    return node.style.getPropertyValue(name) || _windowDefault.default(node).getComputedStyle(node, null).getPropertyValue(name);
}

},{"../window":"OVHUv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"OVHUv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(node) {
    return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
     || node.document && node // node is a Window
     || node.defaultView; // node is a Document
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0JFX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function propertyRemove(name) {
    return function() {
        delete this[name];
    };
}
function propertyConstant(name, value) {
    return function() {
        this[name] = value;
    };
}
function propertyFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
    };
}
exports.default = function(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wxPJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function classArray(string) {
    return string.trim().split(/^|\s+/);
}
function classList(node) {
    return node.classList || new ClassList(node);
}
function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
    add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
            this._names.push(name);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    contains: function(name) {
        return this._names.indexOf(name) >= 0;
    }
};
function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while(++i < n)list.add(names[i]);
}
function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while(++i < n)list.remove(names[i]);
}
function classedTrue(names) {
    return function() {
        classedAdd(this, names);
    };
}
function classedFalse(names) {
    return function() {
        classedRemove(this, names);
    };
}
function classedFunction(names, value) {
    return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
}
exports.default = function(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while(++i < n)if (!list.contains(names[i])) return false;
        return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"glesJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function textRemove() {
    this.textContent = "";
}
function textConstant(value) {
    return function() {
        this.textContent = value;
    };
}
function textFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
    };
}
exports.default = function(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fxDk5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function htmlRemove() {
    this.innerHTML = "";
}
function htmlConstant(value) {
    return function() {
        this.innerHTML = value;
    };
}
function htmlFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
    };
}
exports.default = function(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7eRy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function raise() {
    if (this.nextSibling) this.parentNode.appendChild(this);
}
exports.default = function() {
    return this.each(raise);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ei84V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
exports.default = function() {
    return this.each(lower);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eAH3P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _creator = require("../creator");
var _creatorDefault = parcelHelpers.interopDefault(_creator);
exports.default = function(name) {
    var create = typeof name === "function" ? name : _creatorDefault.default(name);
    return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
    });
};

},{"../creator":"fH8LI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1v2DS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _creator = require("../creator");
var _creatorDefault = parcelHelpers.interopDefault(_creator);
var _selector = require("../selector");
var _selectorDefault = parcelHelpers.interopDefault(_selector);
function constantNull() {
    return null;
}
exports.default = function(name, before) {
    var create = typeof name === "function" ? name : _creatorDefault.default(name), select = before == null ? constantNull : typeof before === "function" ? before : _selectorDefault.default(before);
    return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
};

},{"../creator":"fH8LI","../selector":"c7PBX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bi1Bk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
}
exports.default = function() {
    return this.each(remove);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2fhrA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
exports.default = function(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mgfx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aicm6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "event", ()=>event
);
parcelHelpers.export(exports, "customEvent", ()=>customEvent
);
var filterEvents = {};
var event = null;
if (typeof document !== "undefined") {
    var element = document.documentElement;
    if (!("onmouseenter" in element)) filterEvents = {
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    };
}
function filterContextListener(listener, index, group) {
    listener = contextListener(listener, index, group);
    return function(event1) {
        var related = event1.relatedTarget;
        if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) listener.call(this, event1);
    };
}
function contextListener(listener, index, group) {
    return function(event1) {
        var event0 = event; // Events can be reentrant (e.g., focus).
        event = event1;
        try {
            listener.call(this, this.__data__, index, group);
        } finally{
            event = event0;
        }
    };
}
function parseTypenames(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {
            type: t,
            name: name
        };
    });
}
function onRemove(typename) {
    return function() {
        var on = this.__on;
        if (!on) return;
        for(var j = 0, i = -1, m = on.length, o; j < m; ++j)if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) this.removeEventListener(o.type, o.listener, o.capture);
        else on[++i] = o;
        if (++i) on.length = i;
        else delete this.__on;
    };
}
function onAdd(typename, value, capture) {
    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
    return function(d, i, group) {
        var on = this.__on, o, listener = wrap(value, i, group);
        if (on) {
            for(var j = 0, m = on.length; j < m; ++j)if ((o = on[j]).type === typename.type && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.capture);
                this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                o.value = value;
                return;
            }
        }
        this.addEventListener(typename.type, listener, capture);
        o = {
            type: typename.type,
            name: typename.name,
            value: value,
            listener: listener,
            capture: capture
        };
        if (!on) this.__on = [
            o
        ];
        else on.push(o);
    };
}
exports.default = function(typename, value, capture) {
    var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for(var j = 0, m = on.length, o; j < m; ++j)for(i = 0, o = on[j]; i < n; ++i){
            if ((t = typenames[i]).type === o.type && t.name === o.name) return o.value;
        }
        return;
    }
    on = value ? onAdd : onRemove;
    if (capture == null) capture = false;
    for(i = 0; i < n; ++i)this.each(on(typenames[i], value, capture));
    return this;
};
function customEvent(event1, listener, that, args) {
    var event0 = event;
    event1.sourceEvent = event;
    event = event1;
    try {
        return listener.apply(that, args);
    } finally{
        event = event0;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDGs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _window = require("../window");
var _windowDefault = parcelHelpers.interopDefault(_window);
function dispatchEvent(node, type, params) {
    var window = _windowDefault.default(node), event = window.CustomEvent;
    if (typeof event === "function") event = new event(type, params);
    else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
    return function() {
        return dispatchEvent(this, type, params);
    };
}
function dispatchFunction(type, params) {
    return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
    };
}
exports.default = function(type, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
};

},{"../window":"OVHUv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gzCRJ":[function(require,module,exports) {
module.exports = JSON.parse("{\"1994\":{\"Brazilian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":75.962,\"driver\":\"Ayrton Senna\"},{\"constructor\":\"Benetton\",\"fastest\":76.29,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":77.385,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Sauber\",\"fastest\":77.806,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Footwork\",\"fastest\":77.866,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"McLaren\",\"fastest\":78.122,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Tyrrell\",\"fastest\":78.194,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Larrousse\",\"fastest\":78.321,\"driver\":\"Érik Comas\"},{\"constructor\":\"Jordan\",\"fastest\":78.414,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Minardi\",\"fastest\":78.659,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Ligier\",\"fastest\":79.304,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Team Lotus\",\"fastest\":79.483,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Pacific\",\"fastest\":80.729,\"driver\":\"Bertrand Gachot\"},{\"constructor\":\"Simtek\",\"fastest\":81.186,\"driver\":\"David Brabham\"}],\"Pacific Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":70.218,\"driver\":\"Ayrton Senna\"},{\"constructor\":\"Benetton\",\"fastest\":70.44,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":71.683,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":71.744,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Jordan\",\"fastest\":72.409,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Footwork\",\"fastest\":72.444,\"driver\":\"Christian Fittipaldi\"},{\"constructor\":\"Sauber\",\"fastest\":72.686,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":72.751,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Minardi\",\"fastest\":73.016,\"driver\":\"Michele Alboreto\"},{\"constructor\":\"Larrousse\",\"fastest\":73.111,\"driver\":\"Érik Comas\"},{\"constructor\":\"Ligier\",\"fastest\":73.613,\"driver\":\"Éric Bernard\"},{\"constructor\":\"Team Lotus\",\"fastest\":74.424,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Simtek\",\"fastest\":74.748,\"driver\":\"David Brabham\"}],\"San Marino Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":81.548,\"driver\":\"Ayrton Senna\"},{\"constructor\":\"Benetton\",\"fastest\":81.885,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":82.113,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Sauber\",\"fastest\":83.119,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"McLaren\",\"fastest\":83.14,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Tyrrell\",\"fastest\":83.322,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Footwork\",\"fastest\":83.663,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":84.078,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Ligier\",\"fastest\":84.678,\"driver\":\"Éric Bernard\"},{\"constructor\":\"Larrousse\",\"fastest\":84.852,\"driver\":\"Érik Comas\"},{\"constructor\":\"Team Lotus\",\"fastest\":85.114,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Jordan\",\"fastest\":85.234,\"driver\":\"Andrea de Cesaris\"},{\"constructor\":\"Simtek\",\"fastest\":86.817,\"driver\":\"David Brabham\"},{\"constructor\":\"Pacific\",\"fastest\":87.143,\"driver\":\"Bertrand Gachot\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":81.908,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":82.559,\"driver\":\"Damon Hill\"},{\"constructor\":\"McLaren\",\"fastest\":82.66,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":83.594,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ferrari\",\"fastest\":83.7,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Tyrrell\",\"fastest\":83.969,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Sauber\",\"fastest\":84.254,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":84.996,\"driver\":\"Michele Alboreto\"},{\"constructor\":\"Footwork\",\"fastest\":85.018,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Larrousse\",\"fastest\":85.05,\"driver\":\"Érik Comas\"},{\"constructor\":\"Ligier\",\"fastest\":85.577,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Team Lotus\",\"fastest\":86.397,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Simtek\",\"fastest\":88.151,\"driver\":\"David Brabham\"},{\"constructor\":\"Pacific\",\"fastest\":88.873,\"driver\":\"Bertrand Gachot\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":86.178,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":86.277,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Williams\",\"fastest\":87.094,\"driver\":\"Damon Hill\"},{\"constructor\":\"Jordan\",\"fastest\":87.554,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":87.616,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Tyrrell\",\"fastest\":87.827,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Sauber\",\"fastest\":87.977,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Footwork\",\"fastest\":87.989,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":88.847,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Team Lotus\",\"fastest\":88.889,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Ligier\",\"fastest\":88.95,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Larrousse\",\"fastest\":89.039,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":91.632,\"driver\":\"David Brabham\"},{\"constructor\":\"Pacific\",\"fastest\":92.838,\"driver\":\"Bertrand Gachot\"}],\"French Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":76.282,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":76.707,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":76.954,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":77.441,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"McLaren\",\"fastest\":77.768,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":77.83,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":78.044,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":78.192,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Minardi\",\"fastest\":78.248,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Footwork\",\"fastest\":78.568,\"driver\":\"Christian Fittipaldi\"},{\"constructor\":\"Team Lotus\",\"fastest\":78.715,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Larrousse\",\"fastest\":78.811,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":79.771,\"driver\":\"David Brabham\"}],\"British Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":84.96,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":84.963,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":84.98,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":86.268,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":86.271,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Tyrrell\",\"fastest\":86.414,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Sauber\",\"fastest\":87.284,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":87.522,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Ligier\",\"fastest\":87.785,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Footwork\",\"fastest\":87.886,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Team Lotus\",\"fastest\":88.225,\"driver\":\"Alessandro Zanardi\"},{\"constructor\":\"Larrousse\",\"fastest\":88.519,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":90.69,\"driver\":\"David Brabham\"}],\"German Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":103.582,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Williams\",\"fastest\":104.026,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":104.268,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Tyrrell\",\"fastest\":104.718,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"McLaren\",\"fastest\":105.487,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":105.893,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":105.911,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Ligier\",\"fastest\":106.185,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Team Lotus\",\"fastest\":106.63,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Footwork\",\"fastest\":106.817,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":107.402,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Larrousse\",\"fastest\":108.229,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":108.87,\"driver\":\"David Brabham\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":78.258,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":78.824,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":80.219,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Tyrrell\",\"fastest\":80.232,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"McLaren\",\"fastest\":80.629,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Jordan\",\"fastest\":80.698,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Sauber\",\"fastest\":80.858,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":80.929,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":81.837,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Footwork\",\"fastest\":81.873,\"driver\":\"Christian Fittipaldi\"},{\"constructor\":\"Larrousse\",\"fastest\":82.487,\"driver\":\"Érik Comas\"},{\"constructor\":\"Team Lotus\",\"fastest\":82.513,\"driver\":\"Alessandro Zanardi\"},{\"constructor\":\"Simtek\",\"fastest\":82.614,\"driver\":\"David Brabham\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Jordan\",\"fastest\":141.163,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Benetton\",\"fastest\":141.494,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":141.681,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":142.202,\"driver\":\"Jean Alesi\"},{\"constructor\":\"McLaren\",\"fastest\":142.441,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":142.634,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":143.326,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Tyrrell\",\"fastest\":144.048,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Footwork\",\"fastest\":145.114,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Ligier\",\"fastest\":146.044,\"driver\":\"Éric Bernard\"},{\"constructor\":\"Larrousse\",\"fastest\":146.901,\"driver\":\"Philippe Alliot\"},{\"constructor\":\"Team Lotus\",\"fastest\":147.155,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Simtek\",\"fastest\":147.212,\"driver\":\"David Brabham\"}],\"Italian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":83.844,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Williams\",\"fastest\":84.158,\"driver\":\"Damon Hill\"},{\"constructor\":\"Team Lotus\",\"fastest\":84.374,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Ligier\",\"fastest\":85.455,\"driver\":\"Olivier Panis\"},{\"constructor\":\"McLaren\",\"fastest\":85.528,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":85.54,\"driver\":\"Andrea de Cesaris\"},{\"constructor\":\"Jordan\",\"fastest\":85.568,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Benetton\",\"fastest\":85.618,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Tyrrell\",\"fastest\":85.889,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Footwork\",\"fastest\":86.002,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":86.056,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Larrousse\",\"fastest\":87.846,\"driver\":\"Yannick Dalmas\"},{\"constructor\":\"Simtek\",\"fastest\":88.353,\"driver\":\"Jean-Marc Gounon\"}],\"Portuguese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":80.608,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Williams\",\"fastest\":80.766,\"driver\":\"Damon Hill\"},{\"constructor\":\"McLaren\",\"fastest\":81.251,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Tyrrell\",\"fastest\":81.59,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Jordan\",\"fastest\":81.796,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":81.921,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Benetton\",\"fastest\":82,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Footwork\",\"fastest\":82.132,\"driver\":\"Christian Fittipaldi\"},{\"constructor\":\"Ligier\",\"fastest\":82.672,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":83.243,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Team Lotus\",\"fastest\":83.408,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Larrousse\",\"fastest\":84.192,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":84.514,\"driver\":\"David Brabham\"}],\"European Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":82.762,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":82.892,\"driver\":\"Damon Hill\"},{\"constructor\":\"Sauber\",\"fastest\":83.431,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":83.455,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ferrari\",\"fastest\":83.677,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Ligier\",\"fastest\":84.04,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Footwork\",\"fastest\":84.079,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"McLaren\",\"fastest\":84.122,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Tyrrell\",\"fastest\":84.738,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Minardi\",\"fastest\":85.294,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Team Lotus\",\"fastest\":85.557,\"driver\":\"Alessandro Zanardi\"},{\"constructor\":\"Larrousse\",\"fastest\":86.272,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":87.201,\"driver\":\"David Brabham\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":97.209,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":97.696,\"driver\":\"Damon Hill\"},{\"constructor\":\"Sauber\",\"fastest\":97.742,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":97.88,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Ferrari\",\"fastest\":97.907,\"driver\":\"Jean Alesi\"},{\"constructor\":\"McLaren\",\"fastest\":97.998,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Footwork\",\"fastest\":99.03,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Tyrrell\",\"fastest\":99.266,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Minardi\",\"fastest\":99.548,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Team Lotus\",\"fastest\":99.721,\"driver\":\"Alessandro Zanardi\"},{\"constructor\":\"Ligier\",\"fastest\":100.042,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Larrousse\",\"fastest\":100.978,\"driver\":\"Érik Comas\"},{\"constructor\":\"Simtek\",\"fastest\":101.659,\"driver\":\"David Brabham\"}],\"Australian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":76.179,\"driver\":\"Nigel Mansell\"},{\"constructor\":\"Benetton\",\"fastest\":76.197,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":76.992,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":77.537,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ferrari\",\"fastest\":77.801,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Sauber\",\"fastest\":77.962,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":78.072,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":78.237,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Team Lotus\",\"fastest\":78.331,\"driver\":\"Alessandro Zanardi\"},{\"constructor\":\"Minardi\",\"fastest\":78.755,\"driver\":\"Michele Alboreto\"},{\"constructor\":\"Footwork\",\"fastest\":79.061,\"driver\":\"Christian Fittipaldi\"},{\"constructor\":\"Larrousse\",\"fastest\":80.145,\"driver\":\"Hideki Noda\"},{\"constructor\":\"Simtek\",\"fastest\":80.442,\"driver\":\"David Brabham\"}]},\"1995\":{\"Brazilian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":80.081,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":80.382,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":80.906,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":81.399,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":81.749,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Ligier\",\"fastest\":81.914,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":82.325,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Footwork\",\"fastest\":82.468,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Sauber\",\"fastest\":82.872,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":84.383,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Pacific\",\"fastest\":85.127,\"driver\":\"Bertrand Gachot\"},{\"constructor\":\"Forti\",\"fastest\":86.269,\"driver\":\"Roberto Moreno\"},{\"constructor\":\"Simtek\",\"fastest\":87.323,\"driver\":\"Jos Verstappen\"}],\"Argentine Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":113.241,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":114.272,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":114.381,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"McLaren\",\"fastest\":114.529,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":114.637,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Tyrrell\",\"fastest\":114.757,\"driver\":\"Mika Salo\"},{\"constructor\":\"Sauber\",\"fastest\":115.583,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Footwork\",\"fastest\":117.092,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":117.167,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Simtek\",\"fastest\":117.231,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Ligier\",\"fastest\":118.824,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Pacific\",\"fastest\":121.763,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":124.481,\"driver\":\"Roberto Moreno\"}],\"San Marino Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":87.274,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":87.282,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Williams\",\"fastest\":87.459,\"driver\":\"David Coulthard\"},{\"constructor\":\"McLaren\",\"fastest\":88.343,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":88.516,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Footwork\",\"fastest\":89.582,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Ligier\",\"fastest\":90.76,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":91.035,\"driver\":\"Mika Salo\"},{\"constructor\":\"Sauber\",\"fastest\":91.358,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Simtek\",\"fastest\":92.156,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":92.445,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Pacific\",\"fastest\":93.892,\"driver\":\"Bertrand Gachot\"},{\"constructor\":\"Forti\",\"fastest\":96.065,\"driver\":\"Roberto Moreno\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":81.452,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":82.052,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Williams\",\"fastest\":82.332,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":83.352,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"McLaren\",\"fastest\":83.833,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ligier\",\"fastest\":84.727,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Sauber\",\"fastest\":84.802,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":84.971,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":85.053,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Simtek\",\"fastest\":85.827,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":86.619,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Pacific\",\"fastest\":88.094,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":88.963,\"driver\":\"Roberto Moreno\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":81.952,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":82.742,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":83.22,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":83.857,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ligier\",\"fastest\":84.447,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Jordan\",\"fastest\":84.857,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Footwork\",\"fastest\":85.447,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Sauber\",\"fastest\":85.661,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":85.808,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Minardi\",\"fastest\":85.969,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Simtek\",\"fastest\":88.337,\"driver\":\"Domenico Schiattarella\"},{\"constructor\":\"Pacific\",\"fastest\":89.039,\"driver\":\"Bertrand Gachot\"},{\"constructor\":\"Forti\",\"fastest\":89.244,\"driver\":\"Pedro Diniz\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":87.661,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":88.039,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":88.189,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":88.91,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":89.021,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Ligier\",\"fastest\":89.809,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":90.017,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Footwork\",\"fastest\":90.159,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Tyrrell\",\"fastest\":90.657,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":91.445,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Pacific\",\"fastest\":92.841,\"driver\":\"Bertrand Gachot\"},{\"constructor\":\"Forti\",\"fastest\":94,\"driver\":\"Roberto Moreno\"}],\"French Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":77.225,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":77.512,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":78.761,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":78.81,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ligier\",\"fastest\":79.047,\"driver\":\"Olivier Panis\"},{\"constructor\":\"McLaren\",\"fastest\":79.238,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":80.309,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":80.796,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":81.076,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":81.323,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Pacific\",\"fastest\":83.466,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":84.184,\"driver\":\"Pedro Diniz\"}],\"British Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":88.124,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":88.397,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":89.657,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Jordan\",\"fastest\":90.083,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"McLaren\",\"fastest\":90.14,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ligier\",\"fastest\":90.946,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Sauber\",\"fastest\":91.602,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":92.087,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Minardi\",\"fastest\":92.259,\"driver\":\"Pierluigi Martini\"},{\"constructor\":\"Footwork\",\"fastest\":94.154,\"driver\":\"Massimiliano Papis\"},{\"constructor\":\"Forti\",\"fastest\":96.023,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Pacific\",\"fastest\":96.076,\"driver\":\"Bertrand Gachot\"}],\"German Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":104.385,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":104.465,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":105.553,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Jordan\",\"fastest\":105.765,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":105.849,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":106.801,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":107.372,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":107.507,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":108.093,\"driver\":\"Massimiliano Papis\"},{\"constructor\":\"Minardi\",\"fastest\":109.302,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Forti\",\"fastest\":112.961,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Pacific\",\"fastest\":113.492,\"driver\":\"Andrea Montermini\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":76.982,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":77.558,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":78.059,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":78.363,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":79.499,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Ligier\",\"fastest\":79.748,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Sauber\",\"fastest\":80.413,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":80.543,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Tyrrell\",\"fastest\":81.624,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":82.081,\"driver\":\"Taki Inoue\"},{\"constructor\":\"Forti\",\"fastest\":84.351,\"driver\":\"Roberto Moreno\"},{\"constructor\":\"Pacific\",\"fastest\":84.371,\"driver\":\"Andrea Montermini\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":114.392,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":115.435,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Benetton\",\"fastest\":116.085,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Williams\",\"fastest\":116.254,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":117.001,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Ligier\",\"fastest\":118.021,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":118.148,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":118.224,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":119.256,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Footwork\",\"fastest\":120.99,\"driver\":\"Taki Inoue\"},{\"constructor\":\"Pacific\",\"fastest\":122.405,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":123.817,\"driver\":\"Roberto Moreno\"}],\"Italian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":84.462,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":85.026,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":85.353,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Jordan\",\"fastest\":85.919,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":85.92,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":86.541,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":87.067,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Footwork\",\"fastest\":88.87,\"driver\":\"Massimiliano Papis\"},{\"constructor\":\"Tyrrell\",\"fastest\":89.028,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":89.559,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Pacific\",\"fastest\":90.721,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":90.834,\"driver\":\"Roberto Moreno\"}],\"Portuguese Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":80.537,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":81.301,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":81.97,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Sauber\",\"fastest\":82.226,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":82.538,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ligier\",\"fastest\":82.588,\"driver\":\"Martin Brundle\"},{\"constructor\":\"McLaren\",\"fastest\":82.914,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Tyrrell\",\"fastest\":83.936,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":84.657,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Footwork\",\"fastest\":84.883,\"driver\":\"Taki Inoue\"},{\"constructor\":\"Pacific\",\"fastest\":86.172,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":87.292,\"driver\":\"Pedro Diniz\"}],\"European Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":78.738,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":79.15,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":79.821,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Jordan\",\"fastest\":80.488,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Sauber\",\"fastest\":80.749,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"McLaren\",\"fastest\":80.866,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ligier\",\"fastest\":81.541,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Tyrrell\",\"fastest\":83.058,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":83.328,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Footwork\",\"fastest\":83.689,\"driver\":\"Massimiliano Papis\"},{\"constructor\":\"Pacific\",\"fastest\":84.696,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":85.157,\"driver\":\"Pedro Diniz\"}],\"Pacific Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":74.013,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":74.284,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":74.919,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":75.354,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Sauber\",\"fastest\":75.561,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":75.621,\"driver\":\"Olivier Panis\"},{\"constructor\":\"McLaren\",\"fastest\":75.652,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Minardi\",\"fastest\":76.596,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Tyrrell\",\"fastest\":77.014,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Footwork\",\"fastest\":78.114,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Forti\",\"fastest\":79.579,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Pacific\",\"fastest\":80.093,\"driver\":\"Andrea Montermini\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":98.023,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":98.888,\"driver\":\"Jean Alesi\"},{\"constructor\":\"McLaren\",\"fastest\":98.954,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Williams\",\"fastest\":99.032,\"driver\":\"Damon Hill\"},{\"constructor\":\"Jordan\",\"fastest\":99.621,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Sauber\",\"fastest\":100.01,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":100.838,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":101.355,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":102.059,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Minardi\",\"fastest\":103.102,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Pacific\",\"fastest\":106.097,\"driver\":\"Andrea Montermini\"},{\"constructor\":\"Forti\",\"fastest\":106.654,\"driver\":\"Pedro Diniz\"}],\"Australian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":7200,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":7200,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":7200,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Sauber\",\"fastest\":7200,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":7200,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":7200,\"driver\":\"Mark Blundell\"},{\"constructor\":\"Ligier\",\"fastest\":7200,\"driver\":\"Martin Brundle\"},{\"constructor\":\"Footwork\",\"fastest\":7200,\"driver\":\"Gianni Morbidelli\"},{\"constructor\":\"Tyrrell\",\"fastest\":7200,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":7200,\"driver\":\"Luca Badoer\"},{\"constructor\":\"Forti\",\"fastest\":7200,\"driver\":\"Roberto Moreno\"},{\"constructor\":\"Pacific\",\"fastest\":7200,\"driver\":\"Andrea Montermini\"}]},\"1996\":{\"Australian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":92.371,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Ferrari\",\"fastest\":92.889,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"McLaren\",\"fastest\":94.054,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Benetton\",\"fastest\":94.257,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":94.474,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":94.494,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":94.832,\"driver\":\"Mika Salo\"},{\"constructor\":\"Ligier\",\"fastest\":95.33,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Footwork\",\"fastest\":95.338,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":95.898,\"driver\":\"Giancarlo Fisichella\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":78.111,\"driver\":\"Damon Hill\"},{\"constructor\":\"Jordan\",\"fastest\":79.092,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ferrari\",\"fastest\":79.474,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":79.484,\"driver\":\"Jean Alesi\"},{\"constructor\":\"McLaren\",\"fastest\":79.607,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":79.799,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":80,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":80.157,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Ligier\",\"fastest\":80.426,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":81.491,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Forti\",\"fastest\":83.174,\"driver\":\"Luca Badoer\"}],\"Argentine Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":90.346,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":90.598,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":91.038,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":91.404,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Footwork\",\"fastest\":91.615,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":91.801,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":92.13,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":92.177,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":92.407,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Minardi\",\"fastest\":92.502,\"driver\":\"Tarso Marques\"},{\"constructor\":\"Forti\",\"fastest\":94.83,\"driver\":\"Luca Badoer\"}],\"European Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":78.941,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":80.149,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":80.711,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":80.818,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":80.888,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":81.113,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Footwork\",\"fastest\":81.367,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Tyrrell\",\"fastest\":81.458,\"driver\":\"Mika Salo\"},{\"constructor\":\"Ligier\",\"fastest\":81.509,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":82.921,\"driver\":\"Giancarlo Fisichella\"}],\"San Marino Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":86.89,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":87.105,\"driver\":\"Damon Hill\"},{\"constructor\":\"McLaren\",\"fastest\":87.688,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":88.009,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Tyrrell\",\"fastest\":88.423,\"driver\":\"Mika Salo\"},{\"constructor\":\"Jordan\",\"fastest\":88.632,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":88.785,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ligier\",\"fastest\":89.472,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Footwork\",\"fastest\":89.539,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":90.471,\"driver\":\"Pedro Lamy\"},{\"constructor\":\"Forti\",\"fastest\":92.037,\"driver\":\"Luca Badoer\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":80.356,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":80.866,\"driver\":\"Damon Hill\"},{\"constructor\":\"Benetton\",\"fastest\":80.918,\"driver\":\"Jean Alesi\"},{\"constructor\":\"McLaren\",\"fastest\":81.46,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":81.504,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":81.929,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Tyrrell\",\"fastest\":82.235,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":82.327,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Ligier\",\"fastest\":82.358,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":82.684,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Forti\",\"fastest\":85.059,\"driver\":\"Luca Badoer\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":80.65,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":81.587,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":82.061,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Jordan\",\"fastest\":82.379,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ligier\",\"fastest\":82.685,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":83.027,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"McLaren\",\"fastest\":83.07,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Tyrrell\",\"fastest\":83.224,\"driver\":\"Mika Salo\"},{\"constructor\":\"Footwork\",\"fastest\":83.371,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":85.274,\"driver\":\"Pedro Lamy\"}]},\"1997\":{\"Australian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":89.369,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Ferrari\",\"fastest\":91.472,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":91.531,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":92.287,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Benetton\",\"fastest\":92.593,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Prost\",\"fastest\":92.842,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Stewart\",\"fastest\":93.075,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":93.13,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Minardi\",\"fastest\":93.798,\"driver\":\"Ukyo Katayama\"},{\"constructor\":\"Tyrrell\",\"fastest\":94.229,\"driver\":\"Mika Salo\"},{\"constructor\":\"Arrows\",\"fastest\":94.806,\"driver\":\"Damon Hill\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":76.004,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Ferrari\",\"fastest\":76.594,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":76.644,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"McLaren\",\"fastest\":76.692,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Prost\",\"fastest\":76.756,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jordan\",\"fastest\":76.912,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Arrows\",\"fastest\":77.09,\"driver\":\"Damon Hill\"},{\"constructor\":\"Stewart\",\"fastest\":77.259,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":77.409,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Minardi\",\"fastest\":78.336,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Tyrrell\",\"fastest\":78.885,\"driver\":\"Jos Verstappen\"}],\"Argentine Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":84.473,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Prost\",\"fastest\":85.491,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Ferrari\",\"fastest\":85.773,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Stewart\",\"fastest\":85.942,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":86.218,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":86.564,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"McLaren\",\"fastest\":86.799,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":87.076,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Arrows\",\"fastest\":87.281,\"driver\":\"Damon Hill\"},{\"constructor\":\"Tyrrell\",\"fastest\":88.094,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":88.16,\"driver\":\"Jarno Trulli\"}],\"San Marino Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":83.303,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Ferrari\",\"fastest\":83.955,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Prost\",\"fastest\":84.075,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jordan\",\"fastest\":84.081,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":84.723,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"McLaren\",\"fastest\":84.812,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Benetton\",\"fastest\":85.371,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Stewart\",\"fastest\":85.579,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Arrows\",\"fastest\":85.743,\"driver\":\"Damon Hill\"},{\"constructor\":\"Tyrrell\",\"fastest\":86.852,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":86.96,\"driver\":\"Jarno Trulli\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":78.216,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ferrari\",\"fastest\":78.235,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":78.665,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"McLaren\",\"fastest\":78.779,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":79.105,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Benetton\",\"fastest\":79.263,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Stewart\",\"fastest\":79.295,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Prost\",\"fastest\":79.626,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Arrows\",\"fastest\":79.674,\"driver\":\"Damon Hill\"},{\"constructor\":\"Tyrrell\",\"fastest\":79.694,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":80.349,\"driver\":\"Jarno Trulli\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":76.525,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"McLaren\",\"fastest\":77.521,\"driver\":\"David Coulthard\"},{\"constructor\":\"Benetton\",\"fastest\":77.717,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Ferrari\",\"fastest\":78.313,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":78.385,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":78.494,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Prost\",\"fastest\":79.157,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Tyrrell\",\"fastest\":80.079,\"driver\":\"Mika Salo\"},{\"constructor\":\"Arrows\",\"fastest\":80.089,\"driver\":\"Damon Hill\"},{\"constructor\":\"Stewart\",\"fastest\":80.255,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Minardi\",\"fastest\":80.452,\"driver\":\"Jarno Trulli\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":78.095,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":78.108,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Stewart\",\"fastest\":78.388,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":78.466,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":78.75,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Benetton\",\"fastest\":78.899,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Prost\",\"fastest\":79.034,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":79.622,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Tyrrell\",\"fastest\":80.102,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Arrows\",\"fastest\":80.129,\"driver\":\"Damon Hill\"},{\"constructor\":\"Minardi\",\"fastest\":80.37,\"driver\":\"Jarno Trulli\"}],\"French Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":74.548,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":74.749,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":74.755,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Prost\",\"fastest\":74.957,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Benetton\",\"fastest\":74.986,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"McLaren\",\"fastest\":75.27,\"driver\":\"David Coulthard\"},{\"constructor\":\"Stewart\",\"fastest\":75.876,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":76.018,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Arrows\",\"fastest\":76.536,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Tyrrell\",\"fastest\":76.941,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Minardi\",\"fastest\":77.563,\"driver\":\"Ukyo Katayama\"}],\"British Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":81.598,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"McLaren\",\"fastest\":81.797,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":81.977,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":82.277,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":82.344,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Sauber\",\"fastest\":82.368,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Arrows\",\"fastest\":83.271,\"driver\":\"Damon Hill\"},{\"constructor\":\"Prost\",\"fastest\":83.366,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Stewart\",\"fastest\":84.067,\"driver\":\"Jan Magnussen\"},{\"constructor\":\"Tyrrell\",\"fastest\":84.478,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":84.553,\"driver\":\"Ukyo Katayama\"}],\"German Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":101.873,\"driver\":\"Gerhard Berger\"},{\"constructor\":\"Jordan\",\"fastest\":101.896,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"McLaren\",\"fastest\":102.034,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":102.181,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":102.421,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Prost\",\"fastest\":103.226,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Stewart\",\"fastest\":103.272,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Arrows\",\"fastest\":103.361,\"driver\":\"Damon Hill\"},{\"constructor\":\"Sauber\",\"fastest\":103.66,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Tyrrell\",\"fastest\":105.372,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":105.942,\"driver\":\"Tarso Marques\"}]},\"1998\":{\"Australian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":90.01,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":90.767,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":90.919,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Sauber\",\"fastest\":91.384,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Benetton\",\"fastest\":91.733,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":92.392,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Tyrrell\",\"fastest\":93.291,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Stewart\",\"fastest\":93.383,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Prost\",\"fastest\":93.739,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Arrows\",\"fastest\":93.927,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":94.646,\"driver\":\"Esteban Tuero\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":77.092,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Williams\",\"fastest\":78.109,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Ferrari\",\"fastest\":78.25,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":78.261,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Jordan\",\"fastest\":78.735,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Prost\",\"fastest\":78.753,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Stewart\",\"fastest\":79.344,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":79.375,\"driver\":\"Johnny Herbert\"},{\"constructor\":\"Tyrrell\",\"fastest\":80.203,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Minardi\",\"fastest\":80.39,\"driver\":\"Shinji Nakano\"},{\"constructor\":\"Arrows\",\"fastest\":80.481,\"driver\":\"Mika Salo\"}],\"Argentine Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":85.852,\"driver\":\"David Coulthard\"},{\"constructor\":\"Ferrari\",\"fastest\":86.251,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":86.827,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":86.876,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Benetton\",\"fastest\":87.198,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Sauber\",\"fastest\":87.839,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Tyrrell\",\"fastest\":88.811,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Stewart\",\"fastest\":89.249,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Prost\",\"fastest\":89.32,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Arrows\",\"fastest\":89.617,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":90.054,\"driver\":\"Shinji Nakano\"}],\"British Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":83.271,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":83.72,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":84.102,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Jordan\",\"fastest\":84.542,\"driver\":\"Damon Hill\"},{\"constructor\":\"Sauber\",\"fastest\":85.081,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Benetton\",\"fastest\":85.654,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Arrows\",\"fastest\":86.376,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Prost\",\"fastest\":86.808,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Stewart\",\"fastest\":86.948,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Tyrrell\",\"fastest\":87.061,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Minardi\",\"fastest\":88.051,\"driver\":\"Esteban Tuero\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Benetton\",\"fastest\":89.598,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":90.317,\"driver\":\"Jean Alesi\"},{\"constructor\":\"McLaren\",\"fastest\":90.517,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":90.551,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Stewart\",\"fastest\":91.005,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Arrows\",\"fastest\":91.028,\"driver\":\"Mika Salo\"},{\"constructor\":\"Williams\",\"fastest\":91.515,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":91.917,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Prost\",\"fastest\":92.081,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":93.399,\"driver\":\"Esteban Tuero\"},{\"constructor\":\"Tyrrell\",\"fastest\":94.09,\"driver\":\"Toranosuke Takagi\"}],\"German Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":101.838,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Williams\",\"fastest\":102.365,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Jordan\",\"fastest\":102.994,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":103.27,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Benetton\",\"fastest\":103.341,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Sauber\",\"fastest\":103.663,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Stewart\",\"fastest\":104.776,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Prost\",\"fastest\":104.844,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Tyrrell\",\"fastest\":104.961,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Arrows\",\"fastest\":105.276,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":106.713,\"driver\":\"Shinji Nakano\"}],\"Belgian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":108.682,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Jordan\",\"fastest\":109.728,\"driver\":\"Damon Hill\"},{\"constructor\":\"Ferrari\",\"fastest\":110.027,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":110.204,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Benetton\",\"fastest\":110.462,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":111.189,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Prost\",\"fastest\":112.572,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Stewart\",\"fastest\":112.67,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Arrows\",\"fastest\":113.037,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Tyrrell\",\"fastest\":113.237,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Minardi\",\"fastest\":115.084,\"driver\":\"Shinji Nakano\"}]},\"1999\":{\"Australian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":90.462,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":91.781,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Stewart\",\"fastest\":92.148,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":92.276,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Benetton\",\"fastest\":92.54,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Williams\",\"fastest\":92.691,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":92.888,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Prost\",\"fastest\":92.971,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Sauber\",\"fastest\":93.374,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Arrows\",\"fastest\":94.182,\"driver\":\"Toranosuke Takagi\"},{\"constructor\":\"Minardi\",\"fastest\":95.316,\"driver\":\"Luca Badoer\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":76.568,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Stewart\",\"fastest\":77.305,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Ferrari\",\"fastest\":77.578,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Benetton\",\"fastest\":77.81,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":77.884,\"driver\":\"Damon Hill\"},{\"constructor\":\"Williams\",\"fastest\":78.506,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Prost\",\"fastest\":78.636,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":78.716,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Minardi\",\"fastest\":80.016,\"driver\":\"Stéphane Sarrazin\"},{\"constructor\":\"Arrows\",\"fastest\":80.075,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"BAR\",\"fastest\":7200,\"driver\":\"Jacques Villeneuve\"}],\"San Marino Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":86.362,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":86.538,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":87.313,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Stewart\",\"fastest\":87.409,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":87.613,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Williams\",\"fastest\":87.77,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Prost\",\"fastest\":88.205,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":88.253,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Benetton\",\"fastest\":88.75,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Arrows\",\"fastest\":89.293,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Minardi\",\"fastest\":90.035,\"driver\":\"Marc Gené\"}]},\"2000\":{\"Australian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":90.556,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":91.075,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":91.359,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jaguar\",\"fastest\":91.514,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"BAR\",\"fastest\":91.968,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Benetton\",\"fastest\":91.992,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":92.018,\"driver\":\"Mika Salo\"},{\"constructor\":\"Williams\",\"fastest\":92.22,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Arrows\",\"fastest\":92.323,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Prost\",\"fastest\":93.024,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":93.261,\"driver\":\"Marc Gené\"}],\"San Marino Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":84.714,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Ferrari\",\"fastest\":84.805,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":85.871,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":85.892,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jaguar\",\"fastest\":85.929,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"BAR\",\"fastest\":86.124,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Sauber\",\"fastest\":86.238,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Benetton\",\"fastest\":86.281,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Arrows\",\"fastest\":86.349,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Prost\",\"fastest\":86.824,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Minardi\",\"fastest\":88.161,\"driver\":\"Gastón Mazzacane\"}],\"British Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":85.703,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":85.706,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"McLaren\",\"fastest\":85.741,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Williams\",\"fastest\":86.733,\"driver\":\"Jenson Button\"},{\"constructor\":\"Arrows\",\"fastest\":86.793,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Jaguar\",\"fastest\":86.818,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"BAR\",\"fastest\":87.025,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Benetton\",\"fastest\":87.253,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":87.301,\"driver\":\"Pedro Diniz\"},{\"constructor\":\"Prost\",\"fastest\":87.559,\"driver\":\"Jean Alesi\"},{\"constructor\":\"Minardi\",\"fastest\":88.253,\"driver\":\"Marc Gené\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":95.825,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":95.834,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Williams\",\"fastest\":96.628,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jaguar\",\"fastest\":96.899,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Jordan\",\"fastest\":97.243,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"BAR\",\"fastest\":97.267,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Benetton\",\"fastest\":97.348,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Arrows\",\"fastest\":97.652,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Prost\",\"fastest\":98.141,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Sauber\",\"fastest\":98.49,\"driver\":\"Mika Salo\"},{\"constructor\":\"Minardi\",\"fastest\":99.972,\"driver\":\"Marc Gené\"}]},\"2001\":{\"United States Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":71.708,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":71.986,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":72.309,\"driver\":\"Mika Häkkinen\"},{\"constructor\":\"Sauber\",\"fastest\":72.434,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Jordan\",\"fastest\":72.605,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Benetton\",\"fastest\":72.805,\"driver\":\"Jenson Button\"},{\"constructor\":\"BAR\",\"fastest\":73.122,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":73.189,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Prost\",\"fastest\":73.281,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":73.991,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Arrows\",\"fastest\":74.129,\"driver\":\"Enrique Bernoldi\"}]},\"2002\":{\"Malaysian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":95.266,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":95.497,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"McLaren\",\"fastest\":96.468,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":97.199,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":97.245,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jordan\",\"fastest\":97.536,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":97.694,\"driver\":\"Mika Salo\"},{\"constructor\":\"Arrows\",\"fastest\":97.919,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"BAR\",\"fastest\":98.039,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Jaguar\",\"fastest\":98.374,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Minardi\",\"fastest\":99.454,\"driver\":\"Mark Webber\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":91.317,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":92.088,\"driver\":\"David Coulthard\"},{\"constructor\":\"Williams\",\"fastest\":92.444,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":93.09,\"driver\":\"Takuma Sato\"},{\"constructor\":\"BAR\",\"fastest\":93.349,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Renault\",\"fastest\":93.429,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":93.553,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Toyota\",\"fastest\":93.742,\"driver\":\"Mika Salo\"},{\"constructor\":\"Jaguar\",\"fastest\":93.915,\"driver\":\"Eddie Irvine\"},{\"constructor\":\"Minardi\",\"fastest\":95.958,\"driver\":\"Mark Webber\"}]},\"2003\":{\"Malaysian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":97.044,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":97.393,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":97.454,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":97.766,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Williams\",\"fastest\":97.974,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":98.073,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":98.094,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jordan\",\"fastest\":98.416,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jaguar\",\"fastest\":98.516,\"driver\":\"Antônio Pizzonia\"},{\"constructor\":\"Minardi\",\"fastest\":100.417,\"driver\":\"Jos Verstappen\"}],\"Australian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":87.173,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":88.101,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Sauber\",\"fastest\":88.274,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Toyota\",\"fastest\":88.288,\"driver\":\"Olivier Panis\"},{\"constructor\":\"BAR\",\"fastest\":88.42,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Renault\",\"fastest\":88.928,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":89.105,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":89.344,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jaguar\",\"fastest\":89.367,\"driver\":\"Mark Webber\"},{\"constructor\":\"Minardi\",\"fastest\":7200,\"driver\":\"Justin Wilson\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":73.807,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":73.818,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jaguar\",\"fastest\":73.851,\"driver\":\"Mark Webber\"},{\"constructor\":\"Renault\",\"fastest\":73.953,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":74.124,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Jordan\",\"fastest\":74.191,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"BAR\",\"fastest\":74.504,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":74.631,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Toyota\",\"fastest\":74.839,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":76.542,\"driver\":\"Jos Verstappen\"}],\"San Marino Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":82.327,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":82.341,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Jaguar\",\"fastest\":83.015,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":83.148,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":83.16,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Renault\",\"fastest\":83.169,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":83.46,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":83.7,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Jordan\",\"fastest\":84.317,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Minardi\",\"fastest\":85.826,\"driver\":\"Justin Wilson\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":77.762,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":78.233,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BAR\",\"fastest\":78.704,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":78.811,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Williams\",\"fastest\":79.006,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":79.128,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":79.427,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jaguar\",\"fastest\":79.615,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":80.215,\"driver\":\"Ralph Firman\"},{\"constructor\":\"Minardi\",\"fastest\":82.104,\"driver\":\"Justin Wilson\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":69.15,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":69.189,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":69.391,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Sauber\",\"fastest\":69.725,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":69.89,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BAR\",\"fastest\":69.935,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jaguar\",\"fastest\":70.045,\"driver\":\"Antônio Pizzonia\"},{\"constructor\":\"Jordan\",\"fastest\":70.105,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":70.402,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Minardi\",\"fastest\":74.508,\"driver\":\"Justin Wilson\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":75.259,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":75.295,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":75.5,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":75.644,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jaguar\",\"fastest\":76.237,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":76.744,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"BAR\",\"fastest\":76.755,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Jordan\",\"fastest\":76.967,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":77.176,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":78.706,\"driver\":\"Jos Verstappen\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":75.529,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":76.047,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":76.048,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Jaguar\",\"fastest\":76.182,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":76.598,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":76.939,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"McLaren\",\"fastest\":77.024,\"driver\":\"David Coulthard\"},{\"constructor\":\"BAR\",\"fastest\":77.347,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Minardi\",\"fastest\":78.014,\"driver\":\"Jos Verstappen\"},{\"constructor\":\"Jordan\",\"fastest\":78.036,\"driver\":\"Giancarlo Fisichella\"}],\"European Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":91.523,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":91.555,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":91.619,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":91.976,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Toyota\",\"fastest\":92.35,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":93.066,\"driver\":\"Mark Webber\"},{\"constructor\":\"BAR\",\"fastest\":93.395,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jordan\",\"fastest\":93.553,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":94,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":96.318,\"driver\":\"Jos Verstappen\"}],\"French Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":75.019,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":75.48,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":75.533,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":75.967,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Jaguar\",\"fastest\":76.308,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":76.345,\"driver\":\"Olivier Panis\"},{\"constructor\":\"BAR\",\"fastest\":76.99,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Sauber\",\"fastest\":77.445,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Jordan\",\"fastest\":78.431,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Minardi\",\"fastest\":78.709,\"driver\":\"Jos Verstappen\"}],\"British Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":81.209,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":81.381,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":81.695,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":81.727,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Toyota\",\"fastest\":82.081,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"BAR\",\"fastest\":82.591,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Jaguar\",\"fastest\":82.634,\"driver\":\"Antônio Pizzonia\"},{\"constructor\":\"Sauber\",\"fastest\":83.187,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Jordan\",\"fastest\":83.574,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Minardi\",\"fastest\":85.468,\"driver\":\"Justin Wilson\"}],\"German Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":75.167,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Ferrari\",\"fastest\":75.488,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":75.679,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":75.874,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":76.034,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":76.775,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":76.831,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"BAR\",\"fastest\":77.09,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Sauber\",\"fastest\":77.169,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":79.023,\"driver\":\"Jos Verstappen\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":81.688,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":81.944,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Jaguar\",\"fastest\":82.027,\"driver\":\"Mark Webber\"},{\"constructor\":\"Ferrari\",\"fastest\":82.18,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":82.742,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":83.369,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Sauber\",\"fastest\":83.621,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Jordan\",\"fastest\":83.726,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"BAR\",\"fastest\":83.847,\"driver\":\"Jenson Button\"},{\"constructor\":\"Minardi\",\"fastest\":86.423,\"driver\":\"Jos Verstappen\"}],\"Italian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":80.963,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":81.014,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"McLaren\",\"fastest\":81.466,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":81.944,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BAR\",\"fastest\":82.301,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":82.488,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":82.754,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":82.992,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Sauber\",\"fastest\":83.216,\"driver\":\"Heinz-Harald Frentzen\"},{\"constructor\":\"Minardi\",\"fastest\":85.078,\"driver\":\"Jos Verstappen\"}],\"United States Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":71.67,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":71.794,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toyota\",\"fastest\":71.92,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Williams\",\"fastest\":71.948,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Renault\",\"fastest\":72.087,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BAR\",\"fastest\":72.695,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":73.083,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Jaguar\",\"fastest\":73.269,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":73.798,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Minardi\",\"fastest\":75.36,\"driver\":\"Jos Verstappen\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":91.713,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Williams\",\"fastest\":92.412,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Toyota\",\"fastest\":92.419,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"Renault\",\"fastest\":93.044,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Jaguar\",\"fastest\":93.106,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":93.137,\"driver\":\"David Coulthard\"},{\"constructor\":\"BAR\",\"fastest\":93.474,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":93.632,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Jordan\",\"fastest\":94.771,\"driver\":\"Ralph Firman\"},{\"constructor\":\"Minardi\",\"fastest\":94.975,\"driver\":\"Jos Verstappen\"}]},\"2004\":{\"Italian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":80.089,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Williams\",\"fastest\":80.62,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Renault\",\"fastest\":80.645,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BAR\",\"fastest\":80.715,\"driver\":\"Takuma Sato\"},{\"constructor\":\"McLaren\",\"fastest\":80.877,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":81.52,\"driver\":\"Ricardo Zonta\"},{\"constructor\":\"Jaguar\",\"fastest\":81.602,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":82.239,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":82.301,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":84.808,\"driver\":\"Zsolt Baumgartner\"}],\"Australian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":84.408,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":84.998,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":84.998,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":85.699,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Jaguar\",\"fastest\":85.805,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":86.297,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":87.065,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toyota\",\"fastest\":87.823,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"Jordan\",\"fastest\":88.178,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":90.681,\"driver\":\"Zsolt Baumgartner\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":93.074,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Jaguar\",\"fastest\":93.715,\"driver\":\"Mark Webber\"},{\"constructor\":\"Williams\",\"fastest\":94.054,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"McLaren\",\"fastest\":94.164,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":94.221,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":94.413,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Toyota\",\"fastest\":94.917,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"Sauber\",\"fastest\":95.039,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":96.569,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":98.577,\"driver\":\"Gianmaria Bruni\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":90.139,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":90.581,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":90.827,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Renault\",\"fastest\":90.971,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Toyota\",\"fastest\":91.686,\"driver\":\"Olivier Panis\"},{\"constructor\":\"McLaren\",\"fastest\":91.719,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":91.731,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jaguar\",\"fastest\":92.332,\"driver\":\"Christian Klien\"},{\"constructor\":\"Jordan\",\"fastest\":93.506,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":94.584,\"driver\":\"Gianmaria Bruni\"}],\"San Marino Grand Prix\":[{\"constructor\":\"BAR\",\"fastest\":79.753,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":80.011,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":80.212,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Renault\",\"fastest\":80.895,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Jaguar\",\"fastest\":80.921,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":81.087,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"McLaren\",\"fastest\":81.091,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":81.532,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":83.352,\"driver\":\"Giorgio Pantano\"},{\"constructor\":\"Minardi\",\"fastest\":86.899,\"driver\":\"Gianmaria Bruni\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":75.022,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":75.639,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":75.809,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Renault\",\"fastest\":76.144,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Toyota\",\"fastest\":76.313,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":76.514,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":76.636,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":77.444,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":77.802,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":79.817,\"driver\":\"Gianmaria Bruni\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":73.985,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":74.345,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":74.396,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":74.516,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":74.592,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":75.352,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jaguar\",\"fastest\":75.725,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":75.859,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jordan\",\"fastest\":76.488,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":80.06,\"driver\":\"Zsolt Baumgartner\"}],\"European Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":88.351,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":88.986,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Renault\",\"fastest\":89.135,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":89.137,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":89.354,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Toyota\",\"fastest\":89.697,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":91.431,\"driver\":\"Christian Klien\"},{\"constructor\":\"Jordan\",\"fastest\":91.604,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Sauber\",\"fastest\":91.982,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Minardi\",\"fastest\":94.398,\"driver\":\"Zsolt Baumgartner\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":72.275,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":72.341,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":73.023,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":73.355,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":73.595,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Jaguar\",\"fastest\":74.532,\"driver\":\"Christian Klien\"},{\"constructor\":\"Sauber\",\"fastest\":74.674,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":74.851,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"Jordan\",\"fastest\":75.321,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":77.064,\"driver\":\"Zsolt Baumgartner\"}],\"United States Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.223,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"BAR\",\"fastest\":70.601,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Williams\",\"fastest\":71.062,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"McLaren\",\"fastest\":71.137,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":71.167,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Renault\",\"fastest\":71.185,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Jaguar\",\"fastest\":71.286,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":72.47,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":73.147,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":74.01,\"driver\":\"Gianmaria Bruni\"}],\"French Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":73.698,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":73.971,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":73.987,\"driver\":\"David Coulthard\"},{\"constructor\":\"BAR\",\"fastest\":73.995,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":74.172,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Toyota\",\"fastest\":74.553,\"driver\":\"Cristiano da Matta\"},{\"constructor\":\"Jaguar\",\"fastest\":74.798,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":76.177,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":76.807,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":77.913,\"driver\":\"Gianmaria Bruni\"}],\"British Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":78.233,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":78.305,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"BAR\",\"fastest\":78.58,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":78.715,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":79.378,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Jaguar\",\"fastest\":80.004,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":80.202,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toyota\",\"fastest\":80.335,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jordan\",\"fastest\":82.458,\"driver\":\"Giorgio Pantano\"},{\"constructor\":\"Minardi\",\"fastest\":83.437,\"driver\":\"Gianmaria Bruni\"}],\"German Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":73.306,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":73.668,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":73.674,\"driver\":\"Jenson Button\"},{\"constructor\":\"McLaren\",\"fastest\":73.69,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":73.874,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":74.368,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":74.802,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":75.395,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jordan\",\"fastest\":76.192,\"driver\":\"Giorgio Pantano\"},{\"constructor\":\"Minardi\",\"fastest\":78.055,\"driver\":\"Gianmaria Bruni\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":79.146,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":79.693,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Renault\",\"fastest\":79.996,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":80.17,\"driver\":\"Antônio Pizzonia\"},{\"constructor\":\"Sauber\",\"fastest\":80.324,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"McLaren\",\"fastest\":80.57,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Jaguar\",\"fastest\":80.73,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":81.068,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jordan\",\"fastest\":82.18,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":84.329,\"driver\":\"Zsolt Baumgartner\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":116.232,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":116.304,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":117.99,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":118.04,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Jaguar\",\"fastest\":118.729,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":119.552,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Williams\",\"fastest\":119.681,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":120.237,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jordan\",\"fastest\":122.645,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":122.651,\"driver\":\"Gianmaria Bruni\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":94.012,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":94.178,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":94.295,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":94.759,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Williams\",\"fastest\":94.891,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":94.917,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":94.975,\"driver\":\"Olivier Panis\"},{\"constructor\":\"Jaguar\",\"fastest\":95.286,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":96.507,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":100.24,\"driver\":\"Zsolt Baumgartner\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":93.542,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":94.032,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Jaguar\",\"fastest\":94.571,\"driver\":\"Mark Webber\"},{\"constructor\":\"BAR\",\"fastest\":94.897,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Toyota\",\"fastest\":95.213,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Sauber\",\"fastest\":96.136,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"McLaren\",\"fastest\":96.156,\"driver\":\"David Coulthard\"},{\"constructor\":\"Renault\",\"fastest\":96.274,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Jordan\",\"fastest\":101.953,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":108.069,\"driver\":\"Gianmaria Bruni\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.646,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Williams\",\"fastest\":70.85,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"McLaren\",\"fastest\":70.892,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":70.922,\"driver\":\"Felipe Massa\"},{\"constructor\":\"BAR\",\"fastest\":71.092,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":71.454,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":71.483,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Jaguar\",\"fastest\":71.665,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":72.829,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":73.55,\"driver\":\"Zsolt Baumgartner\"}]},\"2005\":{\"European Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":90.081,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"McLaren\",\"fastest\":90.197,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":90.7,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Renault\",\"fastest\":91.056,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":91.249,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":92.205,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Red Bull\",\"fastest\":92.553,\"driver\":\"David Coulthard\"},{\"constructor\":\"BAR\",\"fastest\":92.594,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jordan\",\"fastest\":95.047,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Minardi\",\"fastest\":95.954,\"driver\":\"Patrick Friesacher\"}],\"Canadian Grand Prix\":[{\"constructor\":\"BAR\",\"fastest\":75.217,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":75.475,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":75.561,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":75.669,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Sauber\",\"fastest\":76.116,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Toyota\",\"fastest\":76.201,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":76.89,\"driver\":\"David Coulthard\"},{\"constructor\":\"Williams\",\"fastest\":77.081,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Minardi\",\"fastest\":78.214,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Jordan\",\"fastest\":78.664,\"driver\":\"Narain Karthikeyan\"}],\"United States Grand Prix\":[{\"constructor\":\"Toyota\",\"fastest\":70.625,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":70.694,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":71.277,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":71.29,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Ferrari\",\"fastest\":71.369,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":71.527,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":71.555,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Red Bull\",\"fastest\":72.132,\"driver\":\"Christian Klien\"},{\"constructor\":\"Jordan\",\"fastest\":73.462,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Minardi\",\"fastest\":73.632,\"driver\":\"Christijan Albers\"}],\"French Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":74.412,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":74.521,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":74.559,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":74.572,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":74.655,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Sauber\",\"fastest\":75.566,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Williams\",\"fastest\":75.885,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":76.434,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":77.857,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":77.96,\"driver\":\"Patrick Friesacher\"}],\"British Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":79.905,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":79.932,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":80.207,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":80.459,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":80.906,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":81.352,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Williams\",\"fastest\":81.997,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":82.108,\"driver\":\"David Coulthard\"},{\"constructor\":\"Jordan\",\"fastest\":83.583,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":84.576,\"driver\":\"Christijan Albers\"}],\"German Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":74.32,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":74.759,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":74.904,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":75.006,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":75.07,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":75.532,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":75.635,\"driver\":\"Christian Klien\"},{\"constructor\":\"Sauber\",\"fastest\":76.009,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Minardi\",\"fastest\":77.519,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Jordan\",\"fastest\":78.599,\"driver\":\"Tiago Monteiro\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":79.882,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":80.779,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Toyota\",\"fastest\":80.839,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Renault\",\"fastest\":81.141,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BAR\",\"fastest\":81.302,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":81.937,\"driver\":\"Christian Klien\"},{\"constructor\":\"Williams\",\"fastest\":82.086,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Sauber\",\"fastest\":82.565,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Minardi\",\"fastest\":84.443,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Jordan\",\"fastest\":85.057,\"driver\":\"Narain Karthikeyan\"}],\"Turkish Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":86.797,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":87.039,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":87.501,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":87.929,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Sauber\",\"fastest\":88.419,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Red Bull\",\"fastest\":88.963,\"driver\":\"Christian Klien\"},{\"constructor\":\"Ferrari\",\"fastest\":89.369,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"BAR\",\"fastest\":90.063,\"driver\":\"Jenson Button\"},{\"constructor\":\"Jordan\",\"fastest\":90.71,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Minardi\",\"fastest\":92.186,\"driver\":\"Christijan Albers\"}],\"Italian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":80.878,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":81.319,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BAR\",\"fastest\":81.369,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":81.64,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":81.721,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":82.304,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":82.356,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Williams\",\"fastest\":82.56,\"driver\":\"Mark Webber\"},{\"constructor\":\"Jordan\",\"fastest\":84.666,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Minardi\",\"fastest\":84.904,\"driver\":\"Robert Doornbos\"}],\"Belgian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":106.391,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Renault\",\"fastest\":106.497,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":106.596,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":107.476,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":107.867,\"driver\":\"Felipe Massa\"},{\"constructor\":\"BAR\",\"fastest\":107.978,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":108.071,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":108.508,\"driver\":\"David Coulthard\"},{\"constructor\":\"Minardi\",\"fastest\":109.779,\"driver\":\"Robert Doornbos\"},{\"constructor\":\"Jordan\",\"fastest\":111.498,\"driver\":\"Tiago Monteiro\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":71.988,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":72.145,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BAR\",\"fastest\":72.696,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":72.889,\"driver\":\"Christian Klien\"},{\"constructor\":\"Ferrari\",\"fastest\":72.976,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Toyota\",\"fastest\":73.041,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Sauber\",\"fastest\":73.151,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":73.387,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Williams\",\"fastest\":73.538,\"driver\":\"Mark Webber\"},{\"constructor\":\"Minardi\",\"fastest\":74.763,\"driver\":\"Christijan Albers\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Toyota\",\"fastest\":106.106,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BAR\",\"fastest\":106.141,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":106.276,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Red Bull\",\"fastest\":106.464,\"driver\":\"Christian Klien\"},{\"constructor\":\"Williams\",\"fastest\":107.233,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":107.44,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Ferrari\",\"fastest\":108.248,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":108.718,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":110.843,\"driver\":\"Christijan Albers\"},{\"constructor\":\"McLaren\",\"fastest\":122.309,\"driver\":\"Kimi Räikkönen\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":94.08,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":94.488,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BAR\",\"fastest\":94.801,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":95.301,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":95.428,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toyota\",\"fastest\":95.723,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":95.739,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":95.898,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":96.707,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":99.105,\"driver\":\"Christijan Albers\"}],\"Australian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":88.289,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":89.159,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":88.279,\"driver\":\"Mark Webber\"},{\"constructor\":\"Sauber\",\"fastest\":89.862,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Red Bull\",\"fastest\":88.892,\"driver\":\"David Coulthard\"},{\"constructor\":\"BAR\",\"fastest\":90.616,\"driver\":\"Jenson Button\"},{\"constructor\":\"McLaren\",\"fastest\":89.32,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Ferrari\",\"fastest\":91.341,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Jordan\",\"fastest\":92.735,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":97.499,\"driver\":\"Patrick Friesacher\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":95.09,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":95.253,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":95.7,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":96.644,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":95.865,\"driver\":\"Christian Klien\"},{\"constructor\":\"BAR\",\"fastest\":96.216,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":97.34,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":97.733,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":99.85,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":101.918,\"driver\":\"Patrick Friesacher\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":92.054,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":92.12,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Toyota\",\"fastest\":92.319,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":92.67,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":92.723,\"driver\":\"Christian Klien\"},{\"constructor\":\"McLaren\",\"fastest\":92.648,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"BAR\",\"fastest\":93.391,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":94.269,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":96.004,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Minardi\",\"fastest\":96.413,\"driver\":\"Patrick Friesacher\"}],\"San Marino Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":82.994,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":83.552,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BAR\",\"fastest\":83.641,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":84.069,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":84.026,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Sauber\",\"fastest\":84.337,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Ferrari\",\"fastest\":84.351,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Red Bull\",\"fastest\":86.351,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Jordan\",\"fastest\":88.976,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":85.921,\"driver\":\"Christijan Albers\"}],\"Spanish Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":76.602,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":75.038,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":76.88,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":77.047,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":75.746,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Red Bull\",\"fastest\":78.373,\"driver\":\"David Coulthard\"},{\"constructor\":\"Sauber\",\"fastest\":78.361,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Jordan\",\"fastest\":80.711,\"driver\":\"Narain Karthikeyan\"},{\"constructor\":\"Minardi\",\"fastest\":81.578,\"driver\":\"Christijan Albers\"}],\"Monaco Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":74.858,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Renault\",\"fastest\":76.281,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":77.072,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":77.401,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":78.538,\"driver\":\"David Coulthard\"},{\"constructor\":\"Ferrari\",\"fastest\":78.55,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":78.902,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Minardi\",\"fastest\":82.236,\"driver\":\"Patrick Friesacher\"},{\"constructor\":\"Jordan\",\"fastest\":83.67,\"driver\":\"Tiago Monteiro\"}]},\"2006\":{\"Bahrain Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":91.431,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":91.549,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":91.702,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":92.164,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Williams\",\"fastest\":92.62,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":92.85,\"driver\":\"David Coulthard\"},{\"constructor\":\"BMW Sauber\",\"fastest\":92.456,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Toyota\",\"fastest\":93.066,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.416,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":95.724,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":97.411,\"driver\":\"Takuma Sato\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":93.84,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Honda\",\"fastest\":93.986,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":94.626,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":94.668,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":94.916,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Red Bull\",\"fastest\":94.614,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toyota\",\"fastest\":94.586,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BMW Sauber\",\"fastest\":94.752,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.297,\"driver\":\"Scott Speed\"},{\"constructor\":\"MF1\",\"fastest\":97.426,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":99.011,\"driver\":\"Takuma Sato\"}],\"Australian Grand Prix\":[{\"constructor\":\"Honda\",\"fastest\":85.229,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":85.635,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"McLaren\",\"fastest\":85.822,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":86.327,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":86.937,\"driver\":\"Mark Webber\"},{\"constructor\":\"BMW Sauber\",\"fastest\":87.579,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Ferrari\",\"fastest\":86.718,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":87.023,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":87.219,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":90.226,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":92.279,\"driver\":\"Takuma Sato\"}],\"San Marino Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":82.795,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":82.988,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":83.709,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":83.772,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":84.021,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Williams\",\"fastest\":83.966,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"BMW Sauber\",\"fastest\":83.887,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Red Bull\",\"fastest\":84.101,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.52,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":86.82,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Super Aguri\",\"fastest\":87.609,\"driver\":\"Takuma Sato\"}],\"European Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":89.816,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":90.028,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":90.754,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":90.933,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":90.944,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BMW Sauber\",\"fastest\":91.422,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Williams\",\"fastest\":91.194,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":91.227,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":91.728,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":92.936,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":95.239,\"driver\":\"Takuma Sato\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":74.648,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":74.97,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":75.885,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toyota\",\"fastest\":75.885,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":75.801,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.847,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Williams\",\"fastest\":75.502,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":75.928,\"driver\":\"Christian Klien\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.661,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":77.702,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Super Aguri\",\"fastest\":78.92,\"driver\":\"Takuma Sato\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":73.962,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":74.082,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":74.14,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Honda\",\"fastest\":74.982,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":74.398,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":74.747,\"driver\":\"Christian Klien\"},{\"constructor\":\"Toro Rosso\",\"fastest\":74.969,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.052,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"MF1\",\"fastest\":75.598,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":77.276,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Ferrari\",\"fastest\":7200,\"driver\":\"Felipe Massa\"}],\"British Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":80.253,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":80.397,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":80.574,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":80.943,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toyota\",\"fastest\":81.073,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BMW Sauber\",\"fastest\":81.329,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Red Bull\",\"fastest\":81.442,\"driver\":\"David Coulthard\"},{\"constructor\":\"Williams\",\"fastest\":81.567,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.699,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":82.207,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Super Aguri\",\"fastest\":86.158,\"driver\":\"Takuma Sato\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":74.942,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":75.386,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":75.888,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":75.986,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":76.012,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":76.608,\"driver\":\"Jenson Button\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.832,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Red Bull\",\"fastest\":75.833,\"driver\":\"Christian Klien\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.116,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":77.121,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Super Aguri\",\"fastest\":79.088,\"driver\":\"Takuma Sato\"}],\"United States Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.832,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":71.92,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Honda\",\"fastest\":72.109,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"BMW Sauber\",\"fastest\":72.479,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Toyota\",\"fastest\":72.795,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":72.15,\"driver\":\"Juan Pablo Montoya\"},{\"constructor\":\"Williams\",\"fastest\":72.292,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":72.792,\"driver\":\"Scott Speed\"},{\"constructor\":\"MF1\",\"fastest\":72.854,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Red Bull\",\"fastest\":72.925,\"driver\":\"Christian Klien\"},{\"constructor\":\"Super Aguri\",\"fastest\":73.496,\"driver\":\"Takuma Sato\"}],\"French Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":75.493,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":75.785,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":76.036,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":76.281,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":76.129,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":76.433,\"driver\":\"Christian Klien\"},{\"constructor\":\"BMW Sauber\",\"fastest\":76.294,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Honda\",\"fastest\":77.027,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":77.063,\"driver\":\"Scott Speed\"},{\"constructor\":\"MF1\",\"fastest\":77.105,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":78.637,\"driver\":\"Franck Montagny\"}],\"German Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":74.07,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":74.205,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":74.862,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":74.894,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":75.15,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":75.141,\"driver\":\"Christian Klien\"},{\"constructor\":\"Williams\",\"fastest\":75.094,\"driver\":\"Mark Webber\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.329,\"driver\":\"Jacques Villeneuve\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.399,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"MF1\",\"fastest\":77.093,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":77.185,\"driver\":\"Takuma Sato\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":79.599,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":79.886,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Honda\",\"fastest\":80.085,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Williams\",\"fastest\":80.266,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":80.759,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":80.924,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"BMW Sauber\",\"fastest\":80.623,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Red Bull\",\"fastest\":80.89,\"driver\":\"David Coulthard\"},{\"constructor\":\"MF1\",\"fastest\":83.146,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.068,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Super Aguri\",\"fastest\":82.967,\"driver\":\"Takuma Sato\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":86.907,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":87.321,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":87.569,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"BMW Sauber\",\"fastest\":87.785,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Honda\",\"fastest\":87.79,\"driver\":\"Jenson Button\"},{\"constructor\":\"McLaren\",\"fastest\":87.866,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":88.386,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":87.852,\"driver\":\"Christian Klien\"},{\"constructor\":\"MF1\",\"fastest\":88.639,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Toro Rosso\",\"fastest\":89.158,\"driver\":\"Scott Speed\"},{\"constructor\":\"Super Aguri\",\"fastest\":90.607,\"driver\":\"Sakon Yamamoto\"}],\"Italian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":81.484,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":81.486,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"BMW Sauber\",\"fastest\":81.653,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Honda\",\"fastest\":82.011,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":83.175,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":81.924,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":82.203,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":82.589,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.043,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker MF1\",\"fastest\":83.116,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":84.289,\"driver\":\"Takuma Sato\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":104.36,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Honda\",\"fastest\":105.503,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":105.754,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":105.775,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"BMW Sauber\",\"fastest\":106.053,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Red Bull\",\"fastest\":105.968,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":105.851,\"driver\":\"Scott Speed\"},{\"constructor\":\"Williams\",\"fastest\":106.413,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":108.894,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Spyker MF1\",\"fastest\":109.542,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":110.326,\"driver\":\"Takuma Sato\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":89.599,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toyota\",\"fastest\":89.989,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":90.371,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Honda\",\"fastest\":90.992,\"driver\":\"Jenson Button\"},{\"constructor\":\"BMW Sauber\",\"fastest\":91.094,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":91.276,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":90.827,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":91.943,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker MF1\",\"fastest\":93.709,\"driver\":\"Tiago Monteiro\"},{\"constructor\":\"Red Bull\",\"fastest\":92.252,\"driver\":\"David Coulthard\"},{\"constructor\":\"Super Aguri\",\"fastest\":93.666,\"driver\":\"Takuma Sato\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.313,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"McLaren\",\"fastest\":71.299,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":71.328,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Renault\",\"fastest\":71.567,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Honda\",\"fastest\":71.619,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"BMW Sauber\",\"fastest\":71.882,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Williams\",\"fastest\":71.65,\"driver\":\"Mark Webber\"},{\"constructor\":\"Red Bull\",\"fastest\":72.591,\"driver\":\"Robert Doornbos\"},{\"constructor\":\"Toro Rosso\",\"fastest\":72.856,\"driver\":\"Scott Speed\"},{\"constructor\":\"Spyker MF1\",\"fastest\":73.138,\"driver\":\"Christijan Albers\"},{\"constructor\":\"Super Aguri\",\"fastest\":73.269,\"driver\":\"Takuma Sato\"}]},\"2007\":{\"Australian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":86.072,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":86.493,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":86.556,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":86.964,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":87.934,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":88.404,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Super Aguri\",\"fastest\":86.909,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Williams\",\"fastest\":86.914,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":87.264,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.305,\"driver\":\"Scott Speed\"},{\"constructor\":\"Spyker\",\"fastest\":89.339,\"driver\":\"Adrian Sutil\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":95.043,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":95.31,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":96.543,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Williams\",\"fastest\":96.829,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Toyota\",\"fastest\":96.902,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":95.766,\"driver\":\"David Coulthard\"},{\"constructor\":\"Renault\",\"fastest\":95.63,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Super Aguri\",\"fastest\":95.945,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Honda\",\"fastest\":96.088,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.145,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker\",\"fastest\":98.279,\"driver\":\"Christijan Albers\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":92.652,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":92.935,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":93.404,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":92.935,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":94.106,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":93.294,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":92.915,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Super Aguri\",\"fastest\":93.082,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Honda\",\"fastest\":93.624,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":94.024,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker\",\"fastest\":95.28,\"driver\":\"Adrian Sutil\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":81.421,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":81.451,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":82.253,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Toyota\",\"fastest\":82.324,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Renault\",\"fastest\":82.568,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":82.749,\"driver\":\"David Coulthard\"},{\"constructor\":\"Williams\",\"fastest\":81.968,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":82.097,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Super Aguri\",\"fastest\":82.115,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.508,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker\",\"fastest\":83.811,\"driver\":\"Adrian Sutil\"}],\"Monaco Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":75.726,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":75.967,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":76.285,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Williams\",\"fastest\":76.439,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":76.319,\"driver\":\"David Coulthard\"},{\"constructor\":\"BMW Sauber\",\"fastest\":76.832,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Honda\",\"fastest\":77.498,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.703,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Toyota\",\"fastest\":76.988,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Super Aguri\",\"fastest\":78.25,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Spyker\",\"fastest\":78.418,\"driver\":\"Adrian Sutil\"}],\"Canadian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":75.707,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":76.266,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Ferrari\",\"fastest\":76.411,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":76.913,\"driver\":\"Mark Webber\"},{\"constructor\":\"Williams\",\"fastest\":76.919,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":77.229,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":77.634,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Super Aguri\",\"fastest\":76.743,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.76,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Honda\",\"fastest\":77.116,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Spyker\",\"fastest\":78.536,\"driver\":\"Adrian Sutil\"}],\"United States Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":72.331,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":72.703,\"driver\":\"Felipe Massa\"},{\"constructor\":\"BMW Sauber\",\"fastest\":72.847,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":73.308,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toyota\",\"fastest\":72.92,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":72.873,\"driver\":\"David Coulthard\"},{\"constructor\":\"Honda\",\"fastest\":72.998,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":73.06,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Super Aguri\",\"fastest\":73.259,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.484,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker\",\"fastest\":74.122,\"driver\":\"Adrian Sutil\"}],\"French Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":75.034,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":75.084,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.493,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Renault\",\"fastest\":75.674,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":75.534,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":76.241,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Honda\",\"fastest\":75.584,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":75.806,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.049,\"driver\":\"Scott Speed\"},{\"constructor\":\"Super Aguri\",\"fastest\":76.244,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Spyker\",\"fastest\":77.826,\"driver\":\"Christijan Albers\"}],\"British Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":79.997,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":80.099,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BMW Sauber\",\"fastest\":80.401,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Toyota\",\"fastest\":80.516,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":80.721,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":80.235,\"driver\":\"Mark Webber\"},{\"constructor\":\"Williams\",\"fastest\":80.35,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Honda\",\"fastest\":80.364,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.515,\"driver\":\"Scott Speed\"},{\"constructor\":\"Super Aguri\",\"fastest\":81.448,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Spyker\",\"fastest\":82.019,\"driver\":\"Adrian Sutil\"}],\"European Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":91.45,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":91.741,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":91.84,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Red Bull\",\"fastest\":92.476,\"driver\":\"Mark Webber\"},{\"constructor\":\"Renault\",\"fastest\":92.01,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":92.501,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":91.978,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":92.221,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Super Aguri\",\"fastest\":92.451,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.038,\"driver\":\"Scott Speed\"},{\"constructor\":\"Spyker\",\"fastest\":94.5,\"driver\":\"Adrian Sutil\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":79.674,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":80.259,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Ferrari\",\"fastest\":80.41,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":80.632,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Toyota\",\"fastest\":80.714,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":80.779,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":80.718,\"driver\":\"David Coulthard\"},{\"constructor\":\"Super Aguri\",\"fastest\":81.127,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.993,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Honda\",\"fastest\":81.737,\"driver\":\"Jenson Button\"},{\"constructor\":\"Spyker\",\"fastest\":82.737,\"driver\":\"Adrian Sutil\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":87.329,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":87.373,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":87.722,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Renault\",\"fastest\":88.491,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Williams\",\"fastest\":88.39,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Toyota\",\"fastest\":88.74,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Super Aguri\",\"fastest\":88.002,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Red Bull\",\"fastest\":88.013,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.798,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Spyker\",\"fastest\":89.861,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Honda\",\"fastest\":88.188,\"driver\":\"Rubens Barrichello\"}],\"Italian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":81.997,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":82.549,\"driver\":\"Felipe Massa\"},{\"constructor\":\"BMW Sauber\",\"fastest\":83.174,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":83.325,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Williams\",\"fastest\":83.209,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Toyota\",\"fastest\":83.787,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Honda\",\"fastest\":83.176,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Red Bull\",\"fastest\":83.166,\"driver\":\"Mark Webber\"},{\"constructor\":\"Super Aguri\",\"fastest\":83.274,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.351,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Spyker\",\"fastest\":84.699,\"driver\":\"Adrian Sutil\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":105.994,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":106.091,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":107.334,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"BMW Sauber\",\"fastest\":106.996,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Red Bull\",\"fastest\":106.8,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toyota\",\"fastest\":106.618,\"driver\":\"Ralf Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":106.603,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Honda\",\"fastest\":106.955,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":107.115,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Super Aguri\",\"fastest\":107.98,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Spyker\",\"fastest\":108.044,\"driver\":\"Adrian Sutil\"}],\"Japanese Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":85.368,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":85.516,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BMW Sauber\",\"fastest\":86.505,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Honda\",\"fastest\":86.913,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":86.247,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.948,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Renault\",\"fastest\":86.033,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toyota\",\"fastest\":86.253,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":86.728,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Super Aguri\",\"fastest\":87.564,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Spyker\",\"fastest\":88.628,\"driver\":\"Adrian Sutil\"}],\"Chinese Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":95.908,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":96.044,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":97.619,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toyota\",\"fastest\":96.959,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":98.455,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Honda\",\"fastest\":97.251,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.862,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Renault\",\"fastest\":96.991,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Super Aguri\",\"fastest\":97.247,\"driver\":\"Anthony Davidson\"},{\"constructor\":\"Williams\",\"fastest\":97.456,\"driver\":\"Alexander Wurz\"},{\"constructor\":\"Spyker\",\"fastest\":98.668,\"driver\":\"Adrian Sutil\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":71.931,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":72.082,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":72.928,\"driver\":\"Mark Webber\"},{\"constructor\":\"BMW Sauber\",\"fastest\":73.081,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Toyota\",\"fastest\":73.195,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":73.477,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":72.932,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":72.968,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.058,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Super Aguri\",\"fastest\":74.098,\"driver\":\"Takuma Sato\"},{\"constructor\":\"Spyker\",\"fastest\":75.217,\"driver\":\"Adrian Sutil\"}]},\"2008\":{\"Australian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":86.714,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":86.869,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":86.14,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":88.527,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":86.413,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Red Bull\",\"fastest\":86.914,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":85.842,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Honda\",\"fastest\":86.173,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":86.188,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":87.207,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Super Aguri\",\"fastest\":88.208,\"driver\":\"Takuma Sato\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":95.748,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":96.613,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toyota\",\"fastest\":96.711,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":96.727,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Red Bull\",\"fastest\":95.408,\"driver\":\"David Coulthard\"},{\"constructor\":\"Renault\",\"fastest\":95.562,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Honda\",\"fastest\":95.208,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.648,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":95.67,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":96.24,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Super Aguri\",\"fastest\":97.087,\"driver\":\"Takuma Sato\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"BMW Sauber\",\"fastest\":93.096,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":93.123,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":93.292,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Toyota\",\"fastest\":92.528,\"driver\":\"Timo Glock\"},{\"constructor\":\"Williams\",\"fastest\":92.943,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Honda\",\"fastest\":92.508,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":92.79,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Red Bull\",\"fastest\":92.371,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.915,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Force India\",\"fastest\":93.501,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Super Aguri\",\"fastest\":94.14,\"driver\":\"Anthony Davidson\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":81.813,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":81.904,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"BMW Sauber\",\"fastest\":82.065,\"driver\":\"Robert Kubica\"},{\"constructor\":\"McLaren\",\"fastest\":82.096,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":81.81,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toyota\",\"fastest\":81.23,\"driver\":\"Timo Glock\"},{\"constructor\":\"Honda\",\"fastest\":81.049,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Williams\",\"fastest\":81.117,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.724,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Force India\",\"fastest\":82.516,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Super Aguri\",\"fastest\":83.318,\"driver\":\"Anthony Davidson\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":87.617,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":87.808,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"BMW Sauber\",\"fastest\":88.39,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Red Bull\",\"fastest\":88.417,\"driver\":\"Mark Webber\"},{\"constructor\":\"Renault\",\"fastest\":87.568,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Toyota\",\"fastest\":87.806,\"driver\":\"Timo Glock\"},{\"constructor\":\"Williams\",\"fastest\":87.012,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":87.219,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":87.412,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":87.807,\"driver\":\"Giancarlo Fisichella\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":75.787,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":75.839,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":76.171,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":76.479,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Renault\",\"fastest\":76.852,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toyota\",\"fastest\":75.907,\"driver\":\"Timo Glock\"},{\"constructor\":\"Red Bull\",\"fastest\":75.839,\"driver\":\"David Coulthard\"},{\"constructor\":\"Honda\",\"fastest\":76.101,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.806,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Force India\",\"fastest\":77.225,\"driver\":\"Adrian Sutil\"}],\"Canadian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":77.886,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":78.498,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":78.735,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":78.393,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Williams\",\"fastest\":78.062,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Honda\",\"fastest\":80.848,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Red Bull\",\"fastest\":77.523,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toyota\",\"fastest\":78.031,\"driver\":\"Timo Glock\"},{\"constructor\":\"Toro Rosso\",\"fastest\":78.916,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Force India\",\"fastest\":79.108,\"driver\":\"Adrian Sutil\"}],\"French Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":76.449,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":76.693,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":75.77,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Toyota\",\"fastest\":76.92,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.786,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Red Bull\",\"fastest\":77.233,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.816,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":76.235,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":76.306,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":76.971,\"driver\":\"Giancarlo Fisichella\"}],\"British Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":81.049,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":80.174,\"driver\":\"David Coulthard\"},{\"constructor\":\"Ferrari\",\"fastest\":81.706,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"BMW Sauber\",\"fastest\":79.788,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Renault\",\"fastest\":82.029,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.531,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Toyota\",\"fastest\":80.274,\"driver\":\"Timo Glock\"},{\"constructor\":\"Williams\",\"fastest\":81.112,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Honda\",\"fastest\":81.512,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":81.786,\"driver\":\"Adrian Sutil\"}],\"German Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":75.666,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":75.859,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toyota\",\"fastest\":75.508,\"driver\":\"Timo Glock\"},{\"constructor\":\"Renault\",\"fastest\":76.189,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"BMW Sauber\",\"fastest\":75.581,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Red Bull\",\"fastest\":77.014,\"driver\":\"Mark Webber\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.858,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Williams\",\"fastest\":75.633,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":75.701,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":76.657,\"driver\":\"Adrian Sutil\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":80.899,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":81.191,\"driver\":\"Felipe Massa\"},{\"constructor\":\"BMW Sauber\",\"fastest\":81.045,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Toyota\",\"fastest\":81.326,\"driver\":\"Timo Glock\"},{\"constructor\":\"Renault\",\"fastest\":81.698,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":80.502,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.144,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Honda\",\"fastest\":80.332,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":80.748,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":81.67,\"driver\":\"Giancarlo Fisichella\"}],\"European Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":98.989,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":99.199,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":99.392,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Toro Rosso\",\"fastest\":100.142,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toyota\",\"fastest\":98.499,\"driver\":\"Timo Glock\"},{\"constructor\":\"Williams\",\"fastest\":98.428,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Renault\",\"fastest\":98.435,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":98.515,\"driver\":\"Mark Webber\"},{\"constructor\":\"Honda\",\"fastest\":98.88,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":99.268,\"driver\":\"Giancarlo Fisichella\"}],\"Belgian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":107.338,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":107.678,\"driver\":\"Felipe Massa\"},{\"constructor\":\"BMW Sauber\",\"fastest\":108.315,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Renault\",\"fastest\":106.965,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Red Bull\",\"fastest\":107.018,\"driver\":\"David Coulthard\"},{\"constructor\":\"Toro Rosso\",\"fastest\":108.951,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Toyota\",\"fastest\":106.949,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":107.429,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":108.153,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":108.226,\"driver\":\"Adrian Sutil\"}],\"Italian Grand Prix\":[{\"constructor\":\"Toro Rosso\",\"fastest\":97.555,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":97.631,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Red Bull\",\"fastest\":97.284,\"driver\":\"David Coulthard\"},{\"constructor\":\"Williams\",\"fastest\":96.653,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Ferrari\",\"fastest\":97.522,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toyota\",\"fastest\":99.152,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Renault\",\"fastest\":96.63,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"BMW Sauber\",\"fastest\":96.697,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Force India\",\"fastest\":96.698,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Honda\",\"fastest\":96.51,\"driver\":\"Rubens Barrichello\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":104.801,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":105.465,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"BMW Sauber\",\"fastest\":105.779,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Toro Rosso\",\"fastest\":106.244,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toyota\",\"fastest\":105.038,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":106.611,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Honda\",\"fastest\":105.133,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":105.212,\"driver\":\"Mark Webber\"},{\"constructor\":\"Renault\",\"fastest\":104.971,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":107.94,\"driver\":\"Adrian Sutil\"}],\"Japanese Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":78.404,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":78.644,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":78.274,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"BMW Sauber\",\"fastest\":78.835,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Toyota\",\"fastest\":79.026,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Toro Rosso\",\"fastest\":79.638,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":78.187,\"driver\":\"David Coulthard\"},{\"constructor\":\"Williams\",\"fastest\":78.594,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Honda\",\"fastest\":78.882,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":79.163,\"driver\":\"Adrian Sutil\"}],\"Chinese Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":96.303,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":96.645,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":95.722,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Red Bull\",\"fastest\":96.731,\"driver\":\"David Coulthard\"},{\"constructor\":\"BMW Sauber\",\"fastest\":95.814,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.685,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toyota\",\"fastest\":95.937,\"driver\":\"Timo Glock\"},{\"constructor\":\"Honda\",\"fastest\":96.079,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Williams\",\"fastest\":96.21,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":97.73,\"driver\":\"Adrian Sutil\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":72.368,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toyota\",\"fastest\":72.737,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"McLaren\",\"fastest\":72.83,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":72.137,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.082,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"BMW Sauber\",\"fastest\":72.3,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Red Bull\",\"fastest\":72.289,\"driver\":\"Mark Webber\"},{\"constructor\":\"Honda\",\"fastest\":72.81,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":72.8,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Force India\",\"fastest\":73.426,\"driver\":\"Giancarlo Fisichella\"}]},\"2009\":{\"Australian Grand Prix\":[{\"constructor\":\"Brawn\",\"fastest\":86.202,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":86.83,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"BMW Sauber\",\"fastest\":85.504,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Williams\",\"fastest\":85.607,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Toyota\",\"fastest\":86.975,\"driver\":\"Timo Glock\"},{\"constructor\":\"Ferrari\",\"fastest\":87.033,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":85.605,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":85.726,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.503,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Force India\",\"fastest\":86.677,\"driver\":\"Giancarlo Fisichella\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Brawn\",\"fastest\":95.181,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":95.273,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":95.518,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":94.788,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"BMW Sauber\",\"fastest\":94.769,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Ferrari\",\"fastest\":95.642,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":95.708,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"McLaren\",\"fastest\":94.905,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.431,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"Force India\",\"fastest\":95.908,\"driver\":\"Giancarlo Fisichella\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":96.184,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Renault\",\"fastest\":96.381,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Brawn\",\"fastest\":96.493,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toyota\",\"fastest\":96.066,\"driver\":\"Timo Glock\"},{\"constructor\":\"Williams\",\"fastest\":96.193,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Ferrari\",\"fastest\":96.033,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":96.032,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.906,\"driver\":\"Sébastien Bourdais\"},{\"constructor\":\"BMW Sauber\",\"fastest\":95.975,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Force India\",\"fastest\":97.669,\"driver\":\"Adrian Sutil\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Toyota\",\"fastest\":93.431,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Red Bull\",\"fastest\":94.015,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Brawn\",\"fastest\":94.044,\"driver\":\"Jenson Button\"},{\"constructor\":\"McLaren\",\"fastest\":93.242,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Renault\",\"fastest\":93.941,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Ferrari\",\"fastest\":94.818,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Williams\",\"fastest\":93.348,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"BMW Sauber\",\"fastest\":93.487,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Force India\",\"fastest\":93.722,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.753,\"driver\":\"Sébastien Buemi\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Brawn\",\"fastest\":80.527,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":80.66,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":80.934,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toyota\",\"fastest\":81.247,\"driver\":\"Timo Glock\"},{\"constructor\":\"Renault\",\"fastest\":80.604,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Williams\",\"fastest\":80.531,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"BMW Sauber\",\"fastest\":80.676,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"McLaren\",\"fastest\":80.805,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.067,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Force India\",\"fastest\":81.742,\"driver\":\"Adrian Sutil\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Brawn\",\"fastest\":74.902,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":74.927,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":75.271,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":75.455,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"McLaren\",\"fastest\":75.516,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Renault\",\"fastest\":75.837,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.833,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Force India\",\"fastest\":76.146,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"BMW Sauber\",\"fastest\":76.264,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Toyota\",\"fastest\":76.548,\"driver\":\"Jarno Trulli\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":88.316,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Brawn\",\"fastest\":88.421,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toyota\",\"fastest\":87.795,\"driver\":\"Timo Glock\"},{\"constructor\":\"Ferrari\",\"fastest\":88.815,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":88.582,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Williams\",\"fastest\":87.629,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"BMW Sauber\",\"fastest\":87.521,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"McLaren\",\"fastest\":88.207,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Force India\",\"fastest\":88.391,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.708,\"driver\":\"Sébastien Buemi\"}],\"British Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":79.509,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Brawn\",\"fastest\":79.856,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toyota\",\"fastest\":80.091,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Williams\",\"fastest\":80.216,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Ferrari\",\"fastest\":78.927,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":79.392,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"BMW Sauber\",\"fastest\":79.308,\"driver\":\"Robert Kubica\"},{\"constructor\":\"McLaren\",\"fastest\":79.353,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Force India\",\"fastest\":79.802,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toro Rosso\",\"fastest\":79.898,\"driver\":\"Sébastien Bourdais\"}],\"German Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":92.23,\"driver\":\"Mark Webber\"},{\"constructor\":\"Brawn\",\"fastest\":92.357,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"McLaren\",\"fastest\":92.616,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Force India\",\"fastest\":92.402,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Ferrari\",\"fastest\":94.574,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":94.803,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"BMW Sauber\",\"fastest\":92.19,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":102.5,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Toyota\",\"fastest\":92.423,\"driver\":\"Timo Glock\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.251,\"driver\":\"Sébastien Buemi\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Renault\",\"fastest\":81.389,\"driver\":\"Nelson Piquet Jr.\"},{\"constructor\":\"Red Bull\",\"fastest\":81.607,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":81.839,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":81.89,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":80.823,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Brawn\",\"fastest\":81.222,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.002,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Toyota\",\"fastest\":81.082,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":81.738,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Force India\",\"fastest\":81.807,\"driver\":\"Giancarlo Fisichella\"}],\"European Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":99.489,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Brawn\",\"fastest\":99.563,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Red Bull\",\"fastest\":99.789,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":100.144,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":99.795,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Renault\",\"fastest\":99.04,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"BMW Sauber\",\"fastest\":98.826,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Force India\",\"fastest\":98.846,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toyota\",\"fastest\":98.991,\"driver\":\"Timo Glock\"},{\"constructor\":\"Toro Rosso\",\"fastest\":99.514,\"driver\":\"Sébastien Buemi\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Force India\",\"fastest\":105.119,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toyota\",\"fastest\":106.395,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":106.5,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Brawn\",\"fastest\":105.251,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":106.633,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":106.761,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":106.307,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"McLaren\",\"fastest\":105.122,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":105.136,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":105.951,\"driver\":\"Sébastien Buemi\"}],\"Italian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":84.066,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Force India\",\"fastest\":84.261,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Ferrari\",\"fastest\":83.901,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Brawn\",\"fastest\":85.015,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":83.728,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Red Bull\",\"fastest\":85.18,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toyota\",\"fastest\":83.611,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":83.866,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":84.074,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.22,\"driver\":\"Sébastien Buemi\"}],\"Singapore Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":107.891,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":108.204,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":107.013,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Brawn\",\"fastest\":107.141,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":108.544,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toyota\",\"fastest\":107.413,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"BMW Sauber\",\"fastest\":109.307,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Ferrari\",\"fastest\":107.177,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":107.369,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Force India\",\"fastest\":108.231,\"driver\":\"Adrian Sutil\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":92.16,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toyota\",\"fastest\":91.55,\"driver\":\"Timo Glock\"},{\"constructor\":\"McLaren\",\"fastest\":91.223,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Force India\",\"fastest\":92.087,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Brawn\",\"fastest\":92.66,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"BMW Sauber\",\"fastest\":92.341,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":91.704,\"driver\":\"Giancarlo Fisichella\"},{\"constructor\":\"Toro Rosso\",\"fastest\":91.103,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Williams\",\"fastest\":91.482,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":91.638,\"driver\":\"Fernando Alonso\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Brawn\",\"fastest\":79.576,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Red Bull\",\"fastest\":79.668,\"driver\":\"Mark Webber\"},{\"constructor\":\"Force India\",\"fastest\":79.912,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toyota\",\"fastest\":80.097,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Ferrari\",\"fastest\":80.168,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.25,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Williams\",\"fastest\":80.326,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"BMW Sauber\",\"fastest\":80.631,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Renault\",\"fastest\":81.422,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":85.052,\"driver\":\"Heikki Kovalainen\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":100.948,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":101.615,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Brawn\",\"fastest\":101.786,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toyota\",\"fastest\":100.777,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"BMW Sauber\",\"fastest\":101.992,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":101.148,\"driver\":\"Kazuki Nakajima\"},{\"constructor\":\"Toro Rosso\",\"fastest\":101.689,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Ferrari\",\"fastest\":100.726,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":101.667,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":101.701,\"driver\":\"Vitantonio Liuzzi\"}]},\"2010\":{\"Bahrain Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":114.101,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":114.242,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":115.217,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":115.241,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":115.885,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Force India\",\"fastest\":115.623,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Williams\",\"fastest\":115.33,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":116.237,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":116.265,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Virgin\",\"fastest\":119.728,\"driver\":\"Timo Glock\"},{\"constructor\":\"Lotus\",\"fastest\":119.852,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"HRT\",\"fastest\":123.204,\"driver\":\"Bruno Senna\"}],\"Australian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":83.919,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":84.111,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":84.675,\"driver\":\"Jenson Button\"},{\"constructor\":\"Mercedes\",\"fastest\":84.884,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":85.217,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Renault\",\"fastest\":85.372,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Force India\",\"fastest\":85.743,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":85.638,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Sauber\",\"fastest\":85.747,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Lotus\",\"fastest\":88.797,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":89.592,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":90.526,\"driver\":\"Bruno Senna\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":109.327,\"driver\":\"Mark Webber\"},{\"constructor\":\"Mercedes\",\"fastest\":110.673,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":110.914,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":111.001,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Renault\",\"fastest\":108.76,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Sauber\",\"fastest\":108.771,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":109.207,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":112.27,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":112.52,\"driver\":\"Timo Glock\"},{\"constructor\":\"McLaren\",\"fastest\":112.211,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":113.044,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"HRT\",\"fastest\":116.299,\"driver\":\"Karun Chandhok\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":94.558,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":94.913,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":94.923,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"McLaren\",\"fastest\":94.979,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":95.364,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Force India\",\"fastest\":95.963,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":95.748,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.047,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Sauber\",\"fastest\":96.422,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Virgin\",\"fastest\":99.278,\"driver\":\"Timo Glock\"},{\"constructor\":\"Lotus\",\"fastest\":99.399,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"HRT\",\"fastest\":100.469,\"driver\":\"Bruno Senna\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":79.995,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":80.829,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":80.937,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":81.294,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":81.353,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Sauber\",\"fastest\":81.984,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Force India\",\"fastest\":81.985,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":82.131,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.191,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":84.674,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":85.475,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":86.75,\"driver\":\"Karun Chandhok\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":73.826,\"driver\":\"Mark Webber\"},{\"constructor\":\"Renault\",\"fastest\":74.12,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":74.283,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":74.432,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":74.544,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":74.901,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":75.17,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.413,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Sauber\",\"fastest\":75.692,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Lotus\",\"fastest\":77.094,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":77.377,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":78.509,\"driver\":\"Bruno Senna\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":86.295,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":86.433,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":86.857,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":87.039,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":87.082,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":87.879,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Force India\",\"fastest\":87.525,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.273,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Williams\",\"fastest\":88.392,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Lotus\",\"fastest\":90.237,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":90.744,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":91.266,\"driver\":\"Bruno Senna\"}],\"Canadian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":75.105,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":75.373,\"driver\":\"Mark Webber\"},{\"constructor\":\"Ferrari\",\"fastest\":75.435,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":75.648,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Renault\",\"fastest\":75.715,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Mercedes\",\"fastest\":76.071,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":76.434,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.928,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Sauber\",\"fastest\":77.384,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Lotus\",\"fastest\":78.237,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":78.941,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":79.484,\"driver\":\"Bruno Senna\"}],\"European Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":97.587,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":97.969,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":98.075,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":98.137,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":98.428,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.586,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Mercedes\",\"fastest\":98.627,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":98.851,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Sauber\",\"fastest\":99.264,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Lotus\",\"fastest\":100.658,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":102.086,\"driver\":\"Lucas di Grassi\"},{\"constructor\":\"HRT\",\"fastest\":102.6,\"driver\":\"Karun Chandhok\"}],\"British Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":89.615,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":90.426,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":90.556,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":90.625,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":91.04,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":91.175,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":91.274,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Force India\",\"fastest\":91.399,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.012,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":94.405,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":94.775,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":96.576,\"driver\":\"Karun Chandhok\"}],\"German Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":73.791,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":73.793,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":74.427,\"driver\":\"Jenson Button\"},{\"constructor\":\"Renault\",\"fastest\":75.079,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":75.109,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Mercedes\",\"fastest\":75.026,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":75.084,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Force India\",\"fastest\":75.467,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.588,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Lotus\",\"fastest\":77.583,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":78.343,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":78.592,\"driver\":\"Bruno Senna\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":78.773,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":79.987,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":80.499,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":81.082,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":81.229,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Sauber\",\"fastest\":81.411,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Williams\",\"fastest\":81.331,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":81.517,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.897,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Virgin\",\"fastest\":84.05,\"driver\":\"Timo Glock\"},{\"constructor\":\"Lotus\",\"fastest\":84.12,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"HRT\",\"fastest\":86.391,\"driver\":\"Bruno Senna\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":105.778,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":105.863,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":106.1,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":106.314,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Williams\",\"fastest\":106.602,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":106.659,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Mercedes\",\"fastest\":107.874,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Toro Rosso\",\"fastest\":108.267,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Lotus\",\"fastest\":110.98,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":112.049,\"driver\":\"Timo Glock\"},{\"constructor\":\"Sauber\",\"fastest\":122.284,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"HRT\",\"fastest\":123.612,\"driver\":\"Bruno Senna\"}],\"Italian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":81.962,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":82.084,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":82.433,\"driver\":\"Mark Webber\"},{\"constructor\":\"Mercedes\",\"fastest\":83.027,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":83.037,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Renault\",\"fastest\":83.039,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Force India\",\"fastest\":83.199,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Sauber\",\"fastest\":83.659,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.681,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":85.54,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":85.934,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":86.847,\"driver\":\"Bruno Senna\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":105.39,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":105.457,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":105.571,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":106.236,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Mercedes\",\"fastest\":106.443,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":106.593,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Sauber\",\"fastest\":107.884,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":107.666,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Force India\",\"fastest\":108.899,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Virgin\",\"fastest\":110.271,\"driver\":\"Timo Glock\"},{\"constructor\":\"Lotus\",\"fastest\":110.915,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"HRT\",\"fastest\":112.946,\"driver\":\"Christian Klien\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":90.785,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":91.169,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":91.231,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Ferrari\",\"fastest\":91.352,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":91.494,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":91.535,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":92.187,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Force India\",\"fastest\":92.659,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.071,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Lotus\",\"fastest\":95.346,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":96.265,\"driver\":\"Lucas di Grassi\"},{\"constructor\":\"HRT\",\"fastest\":97.27,\"driver\":\"Bruno Senna\"}],\"Korean Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":95.585,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":95.766,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":96.062,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":96.535,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":96.824,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Williams\",\"fastest\":96.998,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":97.643,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Force India\",\"fastest\":97.783,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.853,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Lotus\",\"fastest\":100.521,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":100.748,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":102.444,\"driver\":\"Sakon Yamamoto\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":74.47,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Red Bull\",\"fastest\":75.519,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":75.747,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":75.989,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":76.552,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Mercedes\",\"fastest\":76.925,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":79.385,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":79.581,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Force India\",\"fastest\":80.357,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Virgin\",\"fastest\":82.13,\"driver\":\"Timo Glock\"},{\"constructor\":\"Lotus\",\"fastest\":82.25,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"HRT\",\"fastest\":83.083,\"driver\":\"Christian Klien\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":99.394,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":99.425,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":99.792,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":100.203,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Mercedes\",\"fastest\":100.516,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":100.78,\"driver\":\"Robert Kubica\"},{\"constructor\":\"Sauber\",\"fastest\":100.783,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Force India\",\"fastest\":100.914,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":101.738,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Lotus\",\"fastest\":103.516,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":104.095,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":105.085,\"driver\":\"Bruno Senna\"}]},\"2011\":{\"Australian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":83.529,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":84.307,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":84.974,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":85.247,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Mercedes\",\"fastest\":85.421,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Sauber\",\"fastest\":85.626,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.103,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Force India\",\"fastest\":86.739,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":86.27,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Lotus\",\"fastest\":89.254,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":89.858,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":92.978,\"driver\":\"Vitantonio Liuzzi\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":94.87,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":94.974,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":95.802,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":96.124,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Mercedes\",\"fastest\":96.809,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Sauber\",\"fastest\":96.82,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.16,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Force India\",\"fastest\":97.37,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":97.496,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Lotus\",\"fastest\":98.645,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":100.648,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":101.549,\"driver\":\"Vitantonio Liuzzi\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":93.706,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":94.421,\"driver\":\"Jenson Button\"},{\"constructor\":\"Mercedes\",\"fastest\":94.67,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":95.119,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.158,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Force India\",\"fastest\":95.874,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Renault\",\"fastest\":95.149,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Sauber\",\"fastest\":96.053,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":96.465,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Lotus\",\"fastest\":97.894,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":99.119,\"driver\":\"Jérôme d'Ambrosio\"},{\"constructor\":\"HRT\",\"fastest\":100.212,\"driver\":\"Vitantonio Liuzzi\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":85.049,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":85.574,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"McLaren\",\"fastest\":85.595,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":85.851,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":86.296,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Williams\",\"fastest\":86.764,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":87.027,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Sauber\",\"fastest\":87.244,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":87.255,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":88.78,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":90.445,\"driver\":\"Jérôme d'Ambrosio\"},{\"constructor\":\"HRT\",\"fastest\":90.692,\"driver\":\"Vitantonio Liuzzi\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":80.981,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":81.961,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":81.964,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":82.471,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Mercedes\",\"fastest\":82.599,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":82.952,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.231,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Sauber\",\"fastest\":83.367,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Lotus\",\"fastest\":85.403,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Force India\",\"fastest\":86.126,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Virgin\",\"fastest\":87.315,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":87.809,\"driver\":\"Vitantonio Liuzzi\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":73.556,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":73.997,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":74.483,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":74.682,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":75.826,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":75.482,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":75.815,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Force India\",\"fastest\":76.118,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.3,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":77.343,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":77.914,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":7200,\"driver\":\"Narain Karthikeyan\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":73.014,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":73.199,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":73.565,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":73.814,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":74.062,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Force India\",\"fastest\":74.752,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":75.043,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":75.285,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.334,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":76.745,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"HRT\",\"fastest\":78.424,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Virgin\",\"fastest\":78.537,\"driver\":\"Timo Glock\"}],\"European Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":96.975,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":97.38,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":97.454,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":98.231,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":98.781,\"driver\":\"Nick Heidfeld\"},{\"constructor\":\"Force India\",\"fastest\":99.034,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":99.489,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":99.525,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":99.711,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":101.664,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":102.553,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":103.584,\"driver\":\"Vitantonio Liuzzi\"}],\"British Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":90.399,\"driver\":\"Mark Webber\"},{\"constructor\":\"Ferrari\",\"fastest\":90.516,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":91.898,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":91.929,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":91.933,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":92.128,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Mercedes\",\"fastest\":92.209,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":92.734,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Lotus\",\"fastest\":94.821,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.245,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Virgin\",\"fastest\":96.203,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":97.484,\"driver\":\"Vitantonio Liuzzi\"}],\"German Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":90.079,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":90.134,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":90.442,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":91.263,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":92.01,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Renault\",\"fastest\":92.187,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Williams\",\"fastest\":92.635,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":93.176,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.546,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":95.599,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":96.4,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":97.011,\"driver\":\"Vitantonio Liuzzi\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":79.815,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":79.978,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":80.35,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Mercedes\",\"fastest\":81.098,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":81.445,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Sauber\",\"fastest\":82.157,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":82.284,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Williams\",\"fastest\":82.684,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.979,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Lotus\",\"fastest\":84.362,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":86.294,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":86.323,\"driver\":\"Vitantonio Liuzzi\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":108.298,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":108.73,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":110.256,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Mercedes\",\"fastest\":110.552,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":110.773,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Renault\",\"fastest\":111.121,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Sauber\",\"fastest\":111.374,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":127.349,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Force India\",\"fastest\":127.758,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Lotus\",\"fastest\":128.354,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":129.566,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":131.616,\"driver\":\"Vitantonio Liuzzi\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":104.381,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":104.804,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":104.874,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":106.013,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":107.093,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Sauber\",\"fastest\":107.616,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":108.082,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":108.634,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Renault\",\"fastest\":108.662,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Lotus\",\"fastest\":110.948,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":112.154,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":112.404,\"driver\":\"Daniel Ricciardo\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":90.466,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":90.475,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":90.804,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":92.38,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Mercedes\",\"fastest\":92.116,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Renault\",\"fastest\":92.245,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Force India\",\"fastest\":92.463,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":93.079,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.227,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":95.454,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":96.439,\"driver\":\"Jérôme d'Ambrosio\"},{\"constructor\":\"HRT\",\"fastest\":97.846,\"driver\":\"Daniel Ricciardo\"}],\"Korean Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":95.82,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":96.042,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":96.831,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Mercedes\",\"fastest\":97.754,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Renault\",\"fastest\":98.124,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Force India\",\"fastest\":98.219,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.315,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Sauber\",\"fastest\":98.775,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Williams\",\"fastest\":99.189,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Lotus\",\"fastest\":100.522,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":102.091,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":103.758,\"driver\":\"Vitantonio Liuzzi\"}],\"Indian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":84.178,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":84.474,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":84.519,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":85.451,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":86.14,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.161,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Renault\",\"fastest\":86.319,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Williams\",\"fastest\":86.537,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":87.562,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Lotus\",\"fastest\":88.565,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"HRT\",\"fastest\":90.216,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Virgin\",\"fastest\":90.866,\"driver\":\"Jérôme d'Ambrosio\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":98.481,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":98.622,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":99.058,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":99.773,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":100.414,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Sauber\",\"fastest\":100.874,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":100.919,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Toro Rosso\",\"fastest\":101.009,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Williams\",\"fastest\":101.76,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Lotus\",\"fastest\":102.979,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Virgin\",\"fastest\":104.515,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":104.641,\"driver\":\"Daniel Ricciardo\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":71.918,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":72.283,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":72.591,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":73.05,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":73.298,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Renault\",\"fastest\":73.761,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Williams\",\"fastest\":73.801,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.804,\"driver\":\"Jaime Alguersuari\"},{\"constructor\":\"Sauber\",\"fastest\":74.129,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Lotus\",\"fastest\":75.068,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"HRT\",\"fastest\":76.631,\"driver\":\"Vitantonio Liuzzi\"},{\"constructor\":\"Virgin\",\"fastest\":77.019,\"driver\":\"Jérôme d'Ambrosio\"}],\"Italian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":82.275,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":82.725,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":82.841,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":83.53,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Mercedes\",\"fastest\":83.777,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Force India\",\"fastest\":84.163,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":84.648,\"driver\":\"Rubens Barrichello\"},{\"constructor\":\"Sauber\",\"fastest\":84.845,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.932,\"driver\":\"Sébastien Buemi\"},{\"constructor\":\"Lotus\",\"fastest\":86.647,\"driver\":\"Jarno Trulli\"},{\"constructor\":\"Virgin\",\"fastest\":87.591,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":88.054,\"driver\":\"Daniel Ricciardo\"}]},\"2012\":{\"Australian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":84.922,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":85.302,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Mercedes\",\"fastest\":85.336,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":85.651,\"driver\":\"Mark Webber\"},{\"constructor\":\"Williams\",\"fastest\":85.908,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":86.451,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.319,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":86.494,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":86.59,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Caterham\",\"fastest\":88.679,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":90.923,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":93.495,\"driver\":\"Pedro de la Rosa\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":96.219,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":96.391,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":96.461,\"driver\":\"Mark Webber\"},{\"constructor\":\"Lotus F1\",\"fastest\":96.461,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":97.566,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":97.698,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":97.589,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":97.877,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.883,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":99.306,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":100.903,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":102.914,\"driver\":\"Pedro de la Rosa\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":95.121,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"McLaren\",\"fastest\":95.626,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Sauber\",\"fastest\":95.784,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Lotus F1\",\"fastest\":95.898,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":96.031,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":96.255,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Williams\",\"fastest\":96.283,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":96.317,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.956,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":98.463,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":99.282,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":100.411,\"driver\":\"Pedro de la Rosa\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":92.422,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":92.52,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Mercedes\",\"fastest\":92.821,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.912,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Lotus F1\",\"fastest\":93.008,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":93.394,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":93.403,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":93.51,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":94.017,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Caterham\",\"fastest\":95.823,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":97.683,\"driver\":\"Charles Pic\"},{\"constructor\":\"HRT\",\"fastest\":97.883,\"driver\":\"Pedro de la Rosa\"}],\"Spanish Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":81.707,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":82.285,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Ferrari\",\"fastest\":82.302,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Lotus F1\",\"fastest\":82.424,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":82.533,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Mercedes\",\"fastest\":82.904,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":82.884,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":83.125,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.265,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Caterham\",\"fastest\":85.277,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":86.582,\"driver\":\"Charles Pic\"},{\"constructor\":\"HRT\",\"fastest\":87.555,\"driver\":\"Pedro de la Rosa\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":74.301,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":74.381,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":74.583,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":74.639,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":74.948,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":75.245,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":75.421,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":75.508,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.878,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":76.538,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":77.947,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":78.096,\"driver\":\"Pedro de la Rosa\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":73.784,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":74.087,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":74.151,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":74.411,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":74.645,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":74.705,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Sauber\",\"fastest\":74.688,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.078,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":75.17,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Caterham\",\"fastest\":76.263,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"HRT\",\"fastest\":77.492,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Marussia\",\"fastest\":77.901,\"driver\":\"Timo Glock\"}],\"European Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":98.086,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":98.41,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":98.475,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Lotus F1\",\"fastest\":98.505,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Mercedes\",\"fastest\":98.623,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Sauber\",\"fastest\":98.741,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Force India\",\"fastest\":98.752,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Ferrari\",\"fastest\":98.707,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Caterham\",\"fastest\":100.295,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":100.203,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"HRT\",\"fastest\":102.171,\"driver\":\"Pedro de la Rosa\"},{\"constructor\":\"Marussia\",\"fastest\":102.675,\"driver\":\"Charles Pic\"}],\"British Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":111.746,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":111.793,\"driver\":\"Mark Webber\"},{\"constructor\":\"Mercedes\",\"fastest\":112.02,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Lotus F1\",\"fastest\":113.29,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":113.539,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"McLaren\",\"fastest\":108.044,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":114.382,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":117.071,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":117.132,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":109.027,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":111.618,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":112.742,\"driver\":\"Pedro de la Rosa\"}],\"German Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":100.212,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Red Bull\",\"fastest\":101.026,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":101.551,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":103.501,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":100.752,\"driver\":\"Bruno Senna\"},{\"constructor\":\"McLaren\",\"fastest\":104.113,\"driver\":\"Jenson Button\"},{\"constructor\":\"Lotus F1\",\"fastest\":100.574,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.741,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Sauber\",\"fastest\":99.933,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Caterham\",\"fastest\":77.62,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":79.22,\"driver\":\"Charles Pic\"},{\"constructor\":\"HRT\",\"fastest\":79.912,\"driver\":\"Pedro de la Rosa\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":80.953,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":81.366,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Red Bull\",\"fastest\":81.416,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":81.844,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":81.939,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":81.813,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Mercedes\",\"fastest\":81.895,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Sauber\",\"fastest\":81.895,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.38,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Caterham\",\"fastest\":83.576,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":85.244,\"driver\":\"Charles Pic\"},{\"constructor\":\"HRT\",\"fastest\":85.916,\"driver\":\"Pedro de la Rosa\"}],\"Belgian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":107.573,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":107.871,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Williams\",\"fastest\":107.893,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Lotus F1\",\"fastest\":108.205,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":108.313,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":108.392,\"driver\":\"Mark Webber\"},{\"constructor\":\"Force India\",\"fastest\":108.855,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Mercedes\",\"fastest\":109.081,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Toro Rosso\",\"fastest\":109.354,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Caterham\",\"fastest\":111.739,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":112.336,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":113.03,\"driver\":\"Pedro de la Rosa\"}],\"Italian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":84.01,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":84.247,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Force India\",\"fastest\":84.304,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Mercedes\",\"fastest\":84.54,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Red Bull\",\"fastest\":84.802,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Lotus F1\",\"fastest\":84.855,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":84.901,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":84.82,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Toro Rosso\",\"fastest\":85.312,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":86.382,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":87.039,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":87.441,\"driver\":\"Narain Karthikeyan\"}],\"Singapore Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":106.362,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":106.804,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Red Bull\",\"fastest\":106.905,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":107.216,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":107.241,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Lotus F1\",\"fastest\":107.788,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Mercedes\",\"fastest\":107.823,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Sauber\",\"fastest\":108.505,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":108.774,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":110.846,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":111.37,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":112.372,\"driver\":\"Narain Karthikeyan\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":90.839,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":91.29,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":91.7,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Lotus F1\",\"fastest\":91.898,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":92.114,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":92.272,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Mercedes\",\"fastest\":92.469,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Williams\",\"fastest\":92.512,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.954,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":94.657,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":95.213,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":95.385,\"driver\":\"Pedro de la Rosa\"}],\"Korean Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":97.242,\"driver\":\"Mark Webber\"},{\"constructor\":\"McLaren\",\"fastest\":97.469,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":97.534,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Lotus F1\",\"fastest\":97.625,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":98.266,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Mercedes\",\"fastest\":98.361,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Sauber\",\"fastest\":98.46,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":98.725,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Toro Rosso\",\"fastest\":99.084,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":100.207,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":101.317,\"driver\":\"Charles Pic\"},{\"constructor\":\"HRT\",\"fastest\":102.881,\"driver\":\"Pedro de la Rosa\"}],\"Indian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":85.283,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":85.544,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":85.773,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Lotus F1\",\"fastest\":86.136,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":86.36,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":86.331,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Mercedes\",\"fastest\":85.976,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":86.241,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.777,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":88.756,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":89.613,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":90.592,\"driver\":\"Pedro de la Rosa\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":100.63,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":100.978,\"driver\":\"Mark Webber\"},{\"constructor\":\"Williams\",\"fastest\":101.226,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Lotus F1\",\"fastest\":101.26,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":101.582,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Mercedes\",\"fastest\":101.603,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":102.019,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":102.084,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":102.765,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":104.956,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Marussia\",\"fastest\":105.089,\"driver\":\"Charles Pic\"},{\"constructor\":\"HRT\",\"fastest\":105.766,\"driver\":\"Pedro de la Rosa\"}],\"United States Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":95.657,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":95.766,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":96.587,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Mercedes\",\"fastest\":96.794,\"driver\":\"Michael Schumacher\"},{\"constructor\":\"Ferrari\",\"fastest\":96.937,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Force India\",\"fastest\":97.141,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":97.604,\"driver\":\"Bruno Senna\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.879,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Sauber\",\"fastest\":98.206,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Marussia\",\"fastest\":100.056,\"driver\":\"Timo Glock\"},{\"constructor\":\"Caterham\",\"fastest\":100.809,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"HRT\",\"fastest\":102.011,\"driver\":\"Pedro de la Rosa\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":72.458,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":72.581,\"driver\":\"Mark Webber\"},{\"constructor\":\"Ferrari\",\"fastest\":72.987,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Williams\",\"fastest\":73.174,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":73.206,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":73.298,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Mercedes\",\"fastest\":73.489,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Sauber\",\"fastest\":74.234,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":74.574,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Caterham\",\"fastest\":77.073,\"driver\":\"Vitaly Petrov\"},{\"constructor\":\"Marussia\",\"fastest\":77.508,\"driver\":\"Timo Glock\"},{\"constructor\":\"HRT\",\"fastest\":79.576,\"driver\":\"Narain Karthikeyan\"}]},\"2013\":{\"Australian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":87.407,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":88.087,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":88.49,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Lotus F1\",\"fastest\":88.738,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":89.305,\"driver\":\"Paul di Resta\"},{\"constructor\":\"McLaren\",\"fastest\":90.357,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":98.067,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.778,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Williams\",\"fastest\":100.29,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Marussia\",\"fastest\":108.147,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":109.519,\"driver\":\"Giedo van der Garde\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":109.674,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":110.587,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Mercedes\",\"fastest\":111.699,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":97.636,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":113.175,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":104.509,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Sauber\",\"fastest\":98.125,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.157,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Williams\",\"fastest\":97.867,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Marussia\",\"fastest\":98.434,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":99.314,\"driver\":\"Charles Pic\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":94.484,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":94.761,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":94.788,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.998,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":96.314,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Red Bull\",\"fastest\":95.343,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Sauber\",\"fastest\":96.261,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":96.287,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":97.139,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Marussia\",\"fastest\":98.78,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":99.614,\"driver\":\"Charles Pic\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.33,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":92.584,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":92.667,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":93.235,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Lotus F1\",\"fastest\":93.327,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":93.702,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.974,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Sauber\",\"fastest\":93.976,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":94.105,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Caterham\",\"fastest\":95.283,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":96.178,\"driver\":\"Jules Bianchi\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":80.718,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":81.054,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Lotus F1\",\"fastest\":81.177,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":81.218,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":82.069,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Force India\",\"fastest\":82.233,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.127,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Sauber\",\"fastest\":82.389,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":83.26,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Caterham\",\"fastest\":84.661,\"driver\":\"Giedo van der Garde\"},{\"constructor\":\"Marussia\",\"fastest\":84.713,\"driver\":\"Jules Bianchi\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":73.876,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":73.98,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Lotus F1\",\"fastest\":74.822,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Ferrari\",\"fastest\":74.824,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":75.138,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Force India\",\"fastest\":75.383,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.703,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Sauber\",\"fastest\":78.331,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":79.077,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Caterham\",\"fastest\":79.408,\"driver\":\"Giedo van der Garde\"},{\"constructor\":\"Marussia\",\"fastest\":87.303,\"driver\":\"Max Chilton\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":85.425,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":85.512,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":85.897,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":86.504,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.543,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Force India\",\"fastest\":84.908,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Lotus F1\",\"fastest\":85.716,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":89.435,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":89.761,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Caterham\",\"fastest\":85.626,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":86.508,\"driver\":\"Jules Bianchi\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":89.607,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":90.211,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":90.736,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.757,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Lotus F1\",\"fastest\":90.955,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":90.979,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":91.649,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":92.211,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":92.359,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Caterham\",\"fastest\":93.866,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":94.108,\"driver\":\"Jules Bianchi\"}],\"German Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":89.398,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":89.501,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Lotus F1\",\"fastest\":89.892,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.528,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":91.126,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":90.269,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":90.231,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":90.697,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":91.693,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Caterham\",\"fastest\":92.937,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":93.063,\"driver\":\"Jules Bianchi\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":79.388,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":79.426,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Lotus F1\",\"fastest\":79.595,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":79.791,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.641,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":80.777,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":80.569,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Sauber\",\"fastest\":80.58,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":81.133,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Caterham\",\"fastest\":83.007,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":83.787,\"driver\":\"Jules Bianchi\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":121.012,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":121.2,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":109.103,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"McLaren\",\"fastest\":109.304,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Lotus F1\",\"fastest\":123.081,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":123.482,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":109.088,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Caterham\",\"fastest\":112.036,\"driver\":\"Giedo van der Garde\"},{\"constructor\":\"Marussia\",\"fastest\":112.563,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Williams\",\"fastest\":123.072,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Toro Rosso\",\"fastest\":123.3,\"driver\":\"Jean-Éric Vergne\"}],\"Italian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":83.755,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Sauber\",\"fastest\":84.065,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Ferrari\",\"fastest\":84.132,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Mercedes\",\"fastest\":84.192,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.209,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":84.502,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Lotus F1\",\"fastest\":84.61,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":84.932,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":85.011,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Caterham\",\"fastest\":86.406,\"driver\":\"Giedo van der Garde\"},{\"constructor\":\"Marussia\",\"fastest\":87.085,\"driver\":\"Jules Bianchi\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":102.841,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":102.932,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":103.058,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":103.89,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":104.282,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":104.439,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Sauber\",\"fastest\":104.245,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Force India\",\"fastest\":105.185,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":105.388,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Caterham\",\"fastest\":108.111,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":108.83,\"driver\":\"Jules Bianchi\"}],\"Korean Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":97.202,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":97.42,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":97.531,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":98.038,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":98.237,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":98.362,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.417,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":98.431,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":99.47,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Caterham\",\"fastest\":100.864,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":101.169,\"driver\":\"Jules Bianchi\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":90.915,\"driver\":\"Mark Webber\"},{\"constructor\":\"Mercedes\",\"fastest\":91.253,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":91.365,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":91.378,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":91.644,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":91.827,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":91.992,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":92.013,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.485,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Marussia\",\"fastest\":94.32,\"driver\":\"Max Chilton\"},{\"constructor\":\"Caterham\",\"fastest\":94.556,\"driver\":\"Charles Pic\"}],\"Indian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":84.119,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":84.871,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":85.201,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Lotus F1\",\"fastest\":85.248,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":85.334,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":86.153,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":85.519,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":85.711,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":86.134,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Marussia\",\"fastest\":86.97,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":87.105,\"driver\":\"Giedo van der Garde\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":99.957,\"driver\":\"Mark Webber\"},{\"constructor\":\"Mercedes\",\"fastest\":100.419,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":100.542,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Sauber\",\"fastest\":100.576,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Ferrari\",\"fastest\":101.015,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":101.068,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":101.111,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":101.133,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":101.395,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Caterham\",\"fastest\":103.252,\"driver\":\"Giedo van der Garde\"},{\"constructor\":\"Marussia\",\"fastest\":103.398,\"driver\":\"Jules Bianchi\"}],\"United States Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":96.338,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Lotus F1\",\"fastest\":97.155,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":97.296,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Mercedes\",\"fastest\":97.345,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":97.376,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":97.452,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":97.836,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.131,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":98.139,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Caterham\",\"fastest\":100.491,\"driver\":\"Giedo van der Garde\"},{\"constructor\":\"Marussia\",\"fastest\":100.528,\"driver\":\"Jules Bianchi\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":86.479,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":87.102,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":87.539,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Lotus F1\",\"fastest\":87.456,\"driver\":\"Heikki Kovalainen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.052,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Sauber\",\"fastest\":87.455,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Force India\",\"fastest\":87.798,\"driver\":\"Paul di Resta\"},{\"constructor\":\"Williams\",\"fastest\":87.367,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"McLaren\",\"fastest\":88.269,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Caterham\",\"fastest\":87.843,\"driver\":\"Charles Pic\"},{\"constructor\":\"Marussia\",\"fastest\":88.366,\"driver\":\"Jules Bianchi\"}]},\"2014\":{\"Australian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":104.231,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":104.548,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":104.437,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":104.494,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":105.864,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Force India\",\"fastest\":106.03,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":108.079,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":95.117,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Caterham\",\"fastest\":95.157,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Marussia\",\"fastest\":94.293,\"driver\":\"Max Chilton\"},{\"constructor\":\"Lotus F1\",\"fastest\":96.993,\"driver\":\"Romain Grosjean\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":119.431,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":119.486,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":120.175,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":121.712,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":122.213,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":122.351,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":122.131,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Williams\",\"fastest\":122.46,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Lotus F1\",\"fastest\":122.074,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Marussia\",\"fastest\":122.702,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":123.595,\"driver\":\"Kamui Kobayashi\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":93.185,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":94.051,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":94.247,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Force India\",\"fastest\":94.346,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":94.368,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":94.387,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.145,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":95.891,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Lotus F1\",\"fastest\":95.908,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Caterham\",\"fastest\":97.085,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Marussia\",\"fastest\":97.31,\"driver\":\"Jules Bianchi\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":113.86,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":114.455,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":115.637,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":116.147,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Force India\",\"fastest\":116.366,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":116.773,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Lotus F1\",\"fastest\":117.079,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":116.963,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":117.393,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Caterham\",\"fastest\":119.26,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Marussia\",\"fastest\":119.326,\"driver\":\"Jules Bianchi\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":85.232,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":86.285,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":86.632,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Lotus F1\",\"fastest\":86.96,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Ferrari\",\"fastest\":87.104,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":87.335,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":87.685,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.039,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":88.28,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Marussia\",\"fastest\":89.586,\"driver\":\"Max Chilton\"},{\"constructor\":\"Caterham\",\"fastest\":90.312,\"driver\":\"Marcus Ericsson\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.989,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":76.384,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":76.686,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":77.54,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"McLaren\",\"fastest\":77.555,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Force India\",\"fastest\":77.846,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":78.082,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Lotus F1\",\"fastest\":78.196,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":78.741,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Marussia\",\"fastest\":79.332,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":80.133,\"driver\":\"Kamui Kobayashi\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":74.874,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":75.548,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":75.55,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":75.814,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.162,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"McLaren\",\"fastest\":76.182,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":76.3,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":76.687,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":77.314,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Marussia\",\"fastest\":78.348,\"driver\":\"Max Chilton\"},{\"constructor\":\"Caterham\",\"fastest\":79.278,\"driver\":\"Kamui Kobayashi\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Williams\",\"fastest\":68.759,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Mercedes\",\"fastest\":68.944,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":69.285,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":69.466,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":69.515,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":69.619,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Force India\",\"fastest\":69.624,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":69.939,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":70.825,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Marussia\",\"fastest\":71.412,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":71.673,\"driver\":\"Kamui Kobayashi\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":95.766,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":97.386,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":98.2,\"driver\":\"Jenson Button\"},{\"constructor\":\"Force India\",\"fastest\":98.329,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":100.707,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Lotus F1\",\"fastest\":98.496,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Marussia\",\"fastest\":98.709,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Sauber\",\"fastest\":100.912,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Williams\",\"fastest\":105.318,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":105.935,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Caterham\",\"fastest\":109.421,\"driver\":\"Marcus Ericsson\"}],\"German Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":76.54,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":76.759,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":77.214,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Red Bull\",\"fastest\":77.273,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":77.649,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":77.965,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Force India\",\"fastest\":78.014,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":78.787,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Lotus F1\",\"fastest\":78.983,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Marussia\",\"fastest\":79.676,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":80.408,\"driver\":\"Kamui Kobayashi\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":82.715,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":83.201,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":83.354,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":83.909,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":84.294,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.706,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Force India\",\"fastest\":84.775,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":85.136,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Lotus F1\",\"fastest\":85.337,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Marussia\",\"fastest\":87.419,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":87.139,\"driver\":\"Kamui Kobayashi\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":125.591,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":127.717,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":127.786,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":128.049,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":128.679,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":129.377,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Force India\",\"fastest\":130.084,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Sauber\",\"fastest\":130.238,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Lotus F1\",\"fastest\":131.087,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Marussia\",\"fastest\":132.47,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":133.469,\"driver\":\"André Lotterer\"}],\"Italian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":84.109,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":84.697,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":85.314,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Ferrari\",\"fastest\":85.43,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":85.436,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":85.944,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.07,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":86.588,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Lotus F1\",\"fastest\":87.52,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Caterham\",\"fastest\":87.671,\"driver\":\"Kamui Kobayashi\"},{\"constructor\":\"Marussia\",\"fastest\":87.738,\"driver\":\"Jules Bianchi\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":105.681,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":105.854,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":105.907,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":106,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":106.25,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":106.989,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Force India\",\"fastest\":107.308,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":107.333,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Lotus F1\",\"fastest\":107.812,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Marussia\",\"fastest\":109.44,\"driver\":\"Jules Bianchi\"},{\"constructor\":\"Caterham\",\"fastest\":110.405,\"driver\":\"Kamui Kobayashi\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.506,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":93.128,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":93.74,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":94.075,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":94.242,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":94.984,\"driver\":\"Jean-Éric Vergne\"},{\"constructor\":\"Force India\",\"fastest\":95.089,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Sauber\",\"fastest\":95.364,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Lotus F1\",\"fastest\":95.917,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Caterham\",\"fastest\":96.813,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Marussia\",\"fastest\":96.943,\"driver\":\"Jules Bianchi\"}],\"Russian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":98.513,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":98.92,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":99.121,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":99.277,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Red Bull\",\"fastest\":99.635,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":99.709,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":100.058,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":100.536,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Lotus F1\",\"fastest\":101.397,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Caterham\",\"fastest\":102.648,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Marussia\",\"fastest\":103.649,\"driver\":\"Max Chilton\"}],\"United States Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":96.067,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":96.906,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":97.244,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":97.61,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":97.655,\"driver\":\"Jenson Button\"},{\"constructor\":\"Sauber\",\"fastest\":98.81,\"driver\":\"Adrian Sutil\"},{\"constructor\":\"Lotus F1\",\"fastest\":98.467,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Force India\",\"fastest\":98.554,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.699,\"driver\":\"Daniil Kvyat\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":70.023,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":70.247,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":70.93,\"driver\":\"Jenson Button\"},{\"constructor\":\"Red Bull\",\"fastest\":70.938,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Ferrari\",\"fastest\":70.977,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":71.591,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Force India\",\"fastest\":71.976,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":71.423,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Lotus F1\",\"fastest\":72.037,\"driver\":\"Romain Grosjean\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Sauber\",\"fastest\":102.819,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Lotus F1\",\"fastest\":102.768,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":102.239,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":101.908,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"McLaren\",\"fastest\":101.964,\"driver\":\"Jenson Button\"},{\"constructor\":\"Ferrari\",\"fastest\":102.236,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":101.025,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Mercedes\",\"fastest\":100.48,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Caterham\",\"fastest\":104.54,\"driver\":\"Kamui Kobayashi\"}]},\"2015\":{\"Australian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":86.327,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":87.718,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Ferrari\",\"fastest\":87.757,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":88.329,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.51,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Lotus F1\",\"fastest\":88.56,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":88.8,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Force India\",\"fastest\":89.208,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":91.422,\"driver\":\"Jenson Button\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":109.834,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":102.173,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":111.541,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Toro Rosso\",\"fastest\":103.701,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Williams\",\"fastest\":112.473,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Lotus F1\",\"fastest\":102.198,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":101.308,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Force India\",\"fastest\":103.023,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":101.636,\"driver\":\"Jenson Button\"},{\"constructor\":\"Manor Marussia\",\"fastest\":106.677,\"driver\":\"Roberto Merhi\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":95.782,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":96.687,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":96.954,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Red Bull\",\"fastest\":97.54,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Lotus F1\",\"fastest\":97.905,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":98.067,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.393,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":99.216,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":99.276,\"driver\":\"Jenson Button\"},{\"constructor\":\"Manor Marussia\",\"fastest\":102.091,\"driver\":\"Will Stevens\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.571,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":92.982,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":93.381,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":93.832,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":94.45,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":94.462,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Lotus F1\",\"fastest\":94.484,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":94.737,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"McLaren\",\"fastest\":95.039,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Manor Marussia\",\"fastest\":98.713,\"driver\":\"Will Stevens\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":84.681,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":85.458,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":85.694,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.136,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Red Bull\",\"fastest\":86.629,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Lotus F1\",\"fastest\":87.375,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":87.76,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":88.005,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Force India\",\"fastest\":88.365,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Manor Marussia\",\"fastest\":91.2,\"driver\":\"Will Stevens\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.098,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":75.849,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":76.041,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":76.808,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.931,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Lotus F1\",\"fastest\":76.946,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"McLaren\",\"fastest\":77.093,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":77.278,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":78.101,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Manor Marussia\",\"fastest\":80.655,\"driver\":\"Will Stevens\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":74.393,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":75.014,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":75.102,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Lotus F1\",\"fastest\":75.194,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":75.614,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Red Bull\",\"fastest\":76.079,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.042,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Sauber\",\"fastest\":76.262,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"McLaren\",\"fastest\":76.276,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Manor Marussia\",\"fastest\":79.133,\"driver\":\"Roberto Merhi\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":68.455,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":68.81,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":69.192,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Force India\",\"fastest\":69.278,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":69.612,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Red Bull\",\"fastest\":69.694,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":69.713,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Lotus F1\",\"fastest\":69.92,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":70.736,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Manor Marussia\",\"fastest\":74.071,\"driver\":\"Roberto Merhi\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.248,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":93.085,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Ferrari\",\"fastest\":93.379,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":93.636,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.649,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":93.673,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":94.43,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":94.868,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"McLaren\",\"fastest\":94.959,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Manor Marussia\",\"fastest\":97.364,\"driver\":\"Will Stevens\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":82.02,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":82.739,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":82.774,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":83.222,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.679,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Lotus F1\",\"fastest\":84.181,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":83.826,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":84.563,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":84.843,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":87.416,\"driver\":\"Roberto Merhi\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":107.197,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":108.537,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Lotus F1\",\"fastest\":108.561,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":108.599,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Red Bull\",\"fastest\":108.639,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":108.825,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toro Rosso\",\"fastest\":109.771,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Sauber\",\"fastest\":109.586,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"McLaren\",\"fastest\":110.978,\"driver\":\"Jenson Button\"},{\"constructor\":\"Marussia\",\"fastest\":112.948,\"driver\":\"Will Stevens\"}],\"Italian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":83.397,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":83.631,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":83.94,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Force India\",\"fastest\":84.626,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Lotus F1\",\"fastest\":84.525,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"Sauber\",\"fastest\":84.898,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Toro Rosso\",\"fastest\":85.618,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Red Bull\",\"fastest\":85.633,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":86.058,\"driver\":\"Jenson Button\"},{\"constructor\":\"Manor Marussia\",\"fastest\":87.731,\"driver\":\"Will Stevens\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":103.885,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":104.428,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Mercedes\",\"fastest\":105.3,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":105.676,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":105.798,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Lotus F1\",\"fastest\":106.413,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":106.305,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":106.328,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":106.965,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Manor Marussia\",\"fastest\":111.021,\"driver\":\"Will Stevens\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.584,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":93.024,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":93.245,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":93.497,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Lotus F1\",\"fastest\":93.967,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":94.174,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":94.453,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":94.785,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":95.673,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":98.783,\"driver\":\"Will Stevens\"}],\"Russian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":97.113,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Williams\",\"fastest\":97.912,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":97.965,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":98.659,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Lotus F1\",\"fastest\":98.787,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.924,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Red Bull\",\"fastest\":99.214,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":99.323,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"McLaren\",\"fastest\":99.763,\"driver\":\"Jenson Button\"},{\"constructor\":\"Marussia\",\"fastest\":103.693,\"driver\":\"Will Stevens\"}],\"United States Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":116.824,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":117.969,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":118.596,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":119.21,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":119.999,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":120.199,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":120.265,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Lotus F1\",\"fastest\":120.595,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":122.212,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Marussia\",\"fastest\":124.176,\"driver\":\"Alexander Rossi\"}],\"Mexican Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":79.48,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":79.85,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":80.398,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Williams\",\"fastest\":80.448,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.71,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":80.716,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Lotus F1\",\"fastest\":81.038,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":81.544,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"McLaren\",\"fastest\":81.779,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Marussia\",\"fastest\":84.136,\"driver\":\"Alexander Rossi\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":71.282,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":71.804,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":72.085,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Force India\",\"fastest\":72.265,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Red Bull\",\"fastest\":72.322,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Toro Rosso\",\"fastest\":72.739,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Sauber\",\"fastest\":72.989,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Lotus F1\",\"fastest\":73.385,\"driver\":\"Pastor Maldonado\"},{\"constructor\":\"McLaren\",\"fastest\":73.425,\"driver\":\"Jenson Button\"},{\"constructor\":\"Marussia\",\"fastest\":76.151,\"driver\":\"Alexander Rossi\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":100.237,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":101.051,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":101.184,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Red Bull\",\"fastest\":101.444,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":101.656,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":102.521,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":102.668,\"driver\":\"Jenson Button\"},{\"constructor\":\"Lotus F1\",\"fastest\":102.585,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":103.614,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Manor Marussia\",\"fastest\":106.297,\"driver\":\"Will Stevens\"}]},\"2016\":{\"Australian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":83.837,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":84.675,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toro Rosso\",\"fastest\":85.434,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Williams\",\"fastest\":85.458,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Red Bull\",\"fastest\":85.589,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":85.753,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":86.125,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":87.601,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Sauber\",\"fastest\":87.435,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":88.322,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Manor Marussia\",\"fastest\":89.627,\"driver\":\"Rio Haryanto\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":89.493,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":90.012,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":90.854,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":91.153,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Force India\",\"fastest\":91.62,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":91.756,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":91.772,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":91.934,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Manor Marussia\",\"fastest\":92.806,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Sauber\",\"fastest\":92.84,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Renault\",\"fastest\":93.181,\"driver\":\"Kevin Magnussen\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":95.402,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":95.917,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":95.972,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":96.296,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Force India\",\"fastest\":96.865,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":96.881,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":98.826,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":98.77,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Sauber\",\"fastest\":100.742,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Renault\",\"fastest\":98.673,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Manor Marussia\",\"fastest\":100.264,\"driver\":\"Rio Haryanto\"}],\"Russian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":95.417,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":96.123,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":96.536,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":97.125,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":97.212,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.583,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":97.701,\"driver\":\"Jenson Button\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":98.055,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":98.914,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":99.018,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Manor Marussia\",\"fastest\":99.399,\"driver\":\"Pascal Wehrlein\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":82,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":82.68,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":83.113,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":83.522,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.643,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":83.782,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":83.981,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":84.48,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":84.625,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":85.202,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":85.745,\"driver\":\"Pascal Wehrlein\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":73.622,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Mercedes\",\"fastest\":73.791,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":74.552,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":74.726,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":74.749,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":75.352,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":75.273,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":75.293,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Renault\",\"fastest\":76.058,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":76.299,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":77.295,\"driver\":\"Rio Haryanto\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":72.812,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":72.99,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":73.166,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":73.67,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Force India\",\"fastest\":73.952,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":74.338,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":74.457,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":74.571,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Renault\",\"fastest\":75.459,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Manor Marussia\",\"fastest\":75.599,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Sauber\",\"fastest\":75.635,\"driver\":\"Marcus Ericsson\"}],\"European Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":102.758,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Force India\",\"fastest\":103.515,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Red Bull\",\"fastest\":103.966,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":103.966,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":104.483,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":104.717,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":104.755,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":105.27,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":106.048,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Manor Marussia\",\"fastest\":105.665,\"driver\":\"Rio Haryanto\"},{\"constructor\":\"Renault\",\"fastest\":106.348,\"driver\":\"Kevin Magnussen\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":67.922,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Force India\",\"fastest\":67.657,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":69.781,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"McLaren\",\"fastest\":68.154,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Red Bull\",\"fastest\":69.98,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":70.44,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":67.578,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Manor Marussia\",\"fastest\":67.7,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Toro Rosso\",\"fastest\":67.618,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":67.941,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":68.418,\"driver\":\"Marcus Ericsson\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":89.287,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":90.313,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":90.881,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":91.557,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":91.989,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":91.875,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":92.343,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":92.05,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":92.905,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Manor Marussia\",\"fastest\":93.098,\"driver\":\"Rio Haryanto\"},{\"constructor\":\"Sauber\",\"fastest\":93.544,\"driver\":\"Felipe Nasr\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":79.965,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":80.28,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":80.874,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.131,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":81.211,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":81.823,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":82.182,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":84.941,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":87.063,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Renault\",\"fastest\":103.965,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Manor Marussia\",\"fastest\":107.343,\"driver\":\"Pascal Wehrlein\"}],\"German Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":74.363,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":74.726,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":75.142,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":75.51,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":75.53,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":75.883,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"McLaren\",\"fastest\":75.909,\"driver\":\"Jenson Button\"},{\"constructor\":\"Toro Rosso\",\"fastest\":75.989,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":76.665,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Manor Marussia\",\"fastest\":76.717,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Sauber\",\"fastest\":77.123,\"driver\":\"Felipe Nasr\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":106.744,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":106.893,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":106.91,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":107.407,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":107.612,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":108.114,\"driver\":\"Jenson Button\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":108.316,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":108.485,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":109.038,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Manor Marussia\",\"fastest\":109.05,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Sauber\",\"fastest\":108.949,\"driver\":\"Felipe Nasr\"}],\"Italian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":81.135,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":81.972,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":82.388,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":82.389,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":82.814,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":83.092,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":83.273,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Manor Marussia\",\"fastest\":83.315,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Toro Rosso\",\"fastest\":83.496,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Sauber\",\"fastest\":83.956,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Renault\",\"fastest\":84.23,\"driver\":\"Jolyon Palmer\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":102.584,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Red Bull\",\"fastest\":103.115,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":103.54,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":104.197,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":104.479,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":104.553,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":104.74,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":105.593,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Sauber\",\"fastest\":106.86,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Renault\",\"fastest\":106.825,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Manor Marussia\",\"fastest\":107.667,\"driver\":\"Pascal Wehrlein\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.85,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":93.42,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":93.584,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":94.319,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":94.518,\"driver\":\"Jenson Button\"},{\"constructor\":\"Williams\",\"fastest\":94.577,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":95.001,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":95.277,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.369,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":95.816,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":96.451,\"driver\":\"Esteban Ocon\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":90.647,\"driver\":\"Nico Rosberg\"},{\"constructor\":\"Ferrari\",\"fastest\":90.949,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":91.178,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":91.961,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":91.961,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":92.315,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.623,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"McLaren\",\"fastest\":92.689,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":92.807,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Sauber\",\"fastest\":93.222,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":93.353,\"driver\":\"Esteban Ocon\"}],\"United States Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":94.999,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":95.509,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":96.131,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":96.628,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":97.116,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.326,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":97.417,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":97.773,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Renault\",\"fastest\":97.935,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Sauber\",\"fastest\":98.583,\"driver\":\"Felipe Nasr\"},{\"constructor\":\"Manor Marussia\",\"fastest\":98.548,\"driver\":\"Pascal Wehrlein\"}],\"Mexican Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":78.704,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":79.054,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":79.33,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Ferrari\",\"fastest\":79.376,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":79.551,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.378,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":80.282,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":81.131,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":81.536,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Manor Marussia\",\"fastest\":81.785,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":81.401,\"driver\":\"Esteban Gutiérrez\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":70.736,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":71.404,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":71.485,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":71.937,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":72.104,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":72.266,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":72.42,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Toro Rosso\",\"fastest\":72.726,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Renault\",\"fastest\":73.258,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Manor Marussia\",\"fastest\":73.427,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Sauber\",\"fastest\":73.623,\"driver\":\"Marcus Ericsson\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":98.755,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":99.589,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":99.604,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Force India\",\"fastest\":100.501,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":101.106,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":101.084,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":101.48,\"driver\":\"Esteban Gutiérrez\"},{\"constructor\":\"Renault\",\"fastest\":101.82,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Manor Marussia\",\"fastest\":101.995,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Toro Rosso\",\"fastest\":102.003,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":102.247,\"driver\":\"Felipe Nasr\"}]},\"2017\":{\"Australian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":82.188,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":82.456,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":83.485,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":84.074,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":84.443,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.487,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":85.081,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":85.091,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":85.425,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":86.419,\"driver\":\"Antonio Giovinazzi\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":91.678,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":91.864,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":93.033,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":93.507,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":93.58,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":93.706,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.719,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":94.164,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":94.372,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":94.963,\"driver\":\"Antonio Giovinazzi\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":88.769,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":89.247,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":89.545,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Renault\",\"fastest\":89.842,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":90.074,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":90.763,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.923,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Sauber\",\"fastest\":91.414,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"Force India\",\"fastest\":91.684,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":92.054,\"driver\":\"Fernando Alonso\"}],\"Russian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":93.194,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":93.289,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":94.905,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":95.11,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Renault\",\"fastest\":95.285,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":95.337,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.948,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":96.017,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":96.66,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":97.332,\"driver\":\"Pascal Wehrlein\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":79.149,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":79.2,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":79.706,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":81.048,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":81.07,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":81.232,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":81.329,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.371,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":81.397,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":81.803,\"driver\":\"Pascal Wehrlein\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":72.178,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Mercedes\",\"fastest\":72.223,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":72.496,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.162,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":73.329,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":73.349,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":73.249,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Renault\",\"fastest\":73.628,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":74.893,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Sauber\",\"fastest\":75.159,\"driver\":\"Pascal Wehrlein\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":71.459,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":71.789,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":72.403,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Williams\",\"fastest\":72.858,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Force India\",\"fastest\":73.018,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":73.271,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.69,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"McLaren\",\"fastest\":73.693,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":73.839,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":74.495,\"driver\":\"Marcus Ericsson\"}],\"Azerbaijan Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":100.593,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":101.693,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":101.879,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":102.111,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":102.753,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Toro Rosso\",\"fastest\":103.186,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":103.796,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Renault\",\"fastest\":104.267,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":104.603,\"driver\":\"Pascal Wehrlein\"},{\"constructor\":\"McLaren\",\"fastest\":104.334,\"driver\":\"Fernando Alonso\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":64.251,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":64.293,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":64.896,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":65.48,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":65.605,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":65.726,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":65.597,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":65.602,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":66.534,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":66.857,\"driver\":\"Marcus Ericsson\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":86.6,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":87.147,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":88.13,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":88.856,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":88.902,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":89.418,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":89.549,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.355,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Williams\",\"fastest\":91.482,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":102.593,\"driver\":\"Pascal Wehrlein\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":76.276,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":76.53,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":76.797,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":77.468,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":77.549,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":78.538,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Force India\",\"fastest\":78.495,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":78.771,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":79.102,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Sauber\",\"fastest\":79.839,\"driver\":\"Pascal Wehrlein\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":102.553,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":102.795,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":103.38,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":104.685,\"driver\":\"Jolyon Palmer\"},{\"constructor\":\"Force India\",\"fastest\":105.244,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":105.09,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":105.133,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":105.439,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Williams\",\"fastest\":105.823,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":107.214,\"driver\":\"Marcus Ericsson\"}],\"Italian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":95.554,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":96.702,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Williams\",\"fastest\":97.032,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Force India\",\"fastest\":97.582,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":97.987,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":98.202,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":98.059,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.245,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":100.489,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":101.732,\"driver\":\"Marcus Ericsson\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":99.491,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":99.814,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":100.126,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":101.013,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":101.179,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":102.056,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":102.246,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":103.756,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":104.014,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Sauber\",\"fastest\":105.059,\"driver\":\"Pascal Wehrlein\"}],\"Malaysian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":90.076,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":90.121,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":90.541,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":91.478,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":91.582,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Renault\",\"fastest\":91.607,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":92.034,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.402,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":93.308,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":93.483,\"driver\":\"Pascal Wehrlein\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":87.319,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":87.791,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":88.306,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":89.111,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Williams\",\"fastest\":89.48,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":89.778,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Renault\",\"fastest\":89.879,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":89.972,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.413,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Sauber\",\"fastest\":91.597,\"driver\":\"Marcus Ericsson\"}],\"United States Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":93.108,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":93.347,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":93.577,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":94.647,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Renault\",\"fastest\":94.852,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":95.007,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":95.155,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":95.529,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":95.87,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":96.842,\"driver\":\"Marcus Ericsson\"}],\"Mexican Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":76.488,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":76.574,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":76.934,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Force India\",\"fastest\":77.437,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Renault\",\"fastest\":77.466,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":78.099,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Toro Rosso\",\"fastest\":78.683,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"McLaren\",\"fastest\":77.71,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":79.176,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":79.443,\"driver\":\"Kevin Magnussen\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":68.322,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":68.36,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":68.925,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Force India\",\"fastest\":69.598,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":69.617,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":69.703,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":69.841,\"driver\":\"Felipe Massa\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":69.879,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":70.625,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"Sauber\",\"fastest\":70.678,\"driver\":\"Pascal Wehrlein\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":96.231,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":96.777,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":96.959,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Renault\",\"fastest\":98.282,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":98.374,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":98.55,\"driver\":\"Felipe Massa\"},{\"constructor\":\"McLaren\",\"fastest\":98.636,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":99.298,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":99.724,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Sauber\",\"fastest\":99.93,\"driver\":\"Pascal Wehrlein\"}]},\"2018\":{\"Australian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":81.164,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":81.828,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Red Bull\",\"fastest\":81.879,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":83.187,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Renault\",\"fastest\":83.532,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":83.692,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Force India\",\"fastest\":84.005,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":84.23,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Toro Rosso\",\"fastest\":84.532,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"Sauber\",\"fastest\":84.556,\"driver\":\"Marcus Ericsson\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":87.958,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":88.124,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":88.398,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Toro Rosso\",\"fastest\":89.329,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":89.358,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Renault\",\"fastest\":89.57,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":89.874,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":90.212,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":91.063,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Williams\",\"fastest\":91.414,\"driver\":\"Sergey Sirotkin\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":91.095,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":91.625,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":91.796,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":92.532,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":92.758,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":92.855,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":93.232,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.795,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"Williams\",\"fastest\":94.062,\"driver\":\"Sergey Sirotkin\"},{\"constructor\":\"Sauber\",\"fastest\":94.454,\"driver\":\"Charles Leclerc\"}],\"Azerbaijan Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":101.498,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":101.677,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":101.911,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":102.523,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Renault\",\"fastest\":103.066,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":103.585,\"driver\":\"Lance Stroll\"},{\"constructor\":\"McLaren\",\"fastest\":104.019,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":104.074,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":104.759,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":104.496,\"driver\":\"Pierre Gasly\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":76.173,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":76.305,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":76.816,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":77.676,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":77.721,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":77.79,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Toro Rosso\",\"fastest\":78.463,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Force India\",\"fastest\":78.696,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Sauber\",\"fastest\":78.91,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Williams\",\"fastest\":79.695,\"driver\":\"Sergey Sirotkin\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":70.81,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":71.039,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":71.232,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"McLaren\",\"fastest\":72.11,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Renault\",\"fastest\":72.13,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":72.061,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Toro Rosso\",\"fastest\":72.221,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Williams\",\"fastest\":72.521,\"driver\":\"Sergey Sirotkin\"},{\"constructor\":\"Sauber\",\"fastest\":72.714,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":72.728,\"driver\":\"Romain Grosjean\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.764,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":70.857,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":70.937,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":71.973,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Force India\",\"fastest\":72.084,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Toro Rosso\",\"fastest\":72.635,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"McLaren\",\"fastest\":72.856,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":73.59,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Sauber\",\"fastest\":72.661,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":72.606,\"driver\":\"Kevin Magnussen\"}],\"French Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":90.029,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":90.4,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":90.705,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":92.115,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":92.635,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":91.472,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Force India\",\"fastest\":92.075,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Toro Rosso\",\"fastest\":92.46,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":92.976,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":93.636,\"driver\":\"Sergey Sirotkin\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":63.13,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":63.464,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":63.84,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":63.892,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":64.725,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":64.845,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Toro Rosso\",\"fastest\":64.874,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Sauber\",\"fastest\":64.979,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":65.058,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":65.286,\"driver\":\"Lance Stroll\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":85.892,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":85.936,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":86.602,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":87.244,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Sauber\",\"fastest\":87.879,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Force India\",\"fastest\":87.928,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":87.901,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":88.139,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.343,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Williams\",\"fastest\":89.252,\"driver\":\"Sergey Sirotkin\"}],\"German Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":71.212,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":71.416,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":71.822,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":72.2,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Renault\",\"fastest\":72.56,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":72.717,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Force India\",\"fastest\":72.774,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":73.657,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":73.702,\"driver\":\"Sergey Sirotkin\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.749,\"driver\":\"Pierre Gasly\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":96.186,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":96.506,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.591,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Red Bull\",\"fastest\":96.442,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":99.858,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":78.782,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Sauber\",\"fastest\":78.817,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Williams\",\"fastest\":78.56,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Force India\",\"fastest\":79.142,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Mercedes\",\"fastest\":95.658,\"driver\":\"Lewis Hamilton\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":102.191,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":118.905,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":121.851,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":122.122,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Red Bull\",\"fastest\":122.769,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":103.844,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Sauber\",\"fastest\":104.062,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Renault\",\"fastest\":104.145,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":104.917,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":104.998,\"driver\":\"Sergey Sirotkin\"}],\"Italian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":79.119,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Mercedes\",\"fastest\":79.294,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":80.615,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":80.936,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":81.041,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Force India\",\"fastest\":81.099,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Toro Rosso\",\"fastest\":81.35,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Williams\",\"fastest\":81.627,\"driver\":\"Lance Stroll\"},{\"constructor\":\"McLaren\",\"fastest\":82.085,\"driver\":\"Stoffel Vandoorne\"},{\"constructor\":\"Sauber\",\"fastest\":81.889,\"driver\":\"Charles Leclerc\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":96.015,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":96.334,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":96.628,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Force India\",\"fastest\":97.985,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":98.32,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Renault\",\"fastest\":98.588,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":98.641,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Sauber\",\"fastest\":98.747,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Toro Rosso\",\"fastest\":99.691,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Williams\",\"fastest\":101.263,\"driver\":\"Sergey Sirotkin\"}],\"Russian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":91.387,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":91.943,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":93.181,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Force India\",\"fastest\":93.413,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Sauber\",\"fastest\":93.419,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Red Bull\",\"fastest\":93.048,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":94.383,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Renault\",\"fastest\":94.626,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":95.504,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":95.612,\"driver\":\"Sergey Sirotkin\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":87.76,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":89.057,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":89.521,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":89.761,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.023,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"Force India\",\"fastest\":90.126,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Sauber\",\"fastest\":89.864,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Renault\",\"fastest\":90.361,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":90.372,\"driver\":\"Sergey Sirotkin\"},{\"constructor\":\"McLaren\",\"fastest\":90.573,\"driver\":\"Fernando Alonso\"}],\"United States Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.237,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":92.298,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":93.494,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Force India\",\"fastest\":94.145,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Renault\",\"fastest\":94.215,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":94.25,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":94.42,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Toro Rosso\",\"fastest\":94.85,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":95.294,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":95.362,\"driver\":\"Sergey Sirotkin\"}],\"Mexican Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":74.759,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Mercedes\",\"fastest\":74.894,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":74.97,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Renault\",\"fastest\":75.827,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Sauber\",\"fastest\":76.189,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Force India\",\"fastest\":76.844,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.828,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":76.911,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":76.871,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":77.689,\"driver\":\"Lance Stroll\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":67.281,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":67.374,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":67.778,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Sauber\",\"fastest\":68.296,\"driver\":\"Marcus Ericsson\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":68.517,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":69.029,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Force India\",\"fastest\":68.741,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":68.834,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Williams\",\"fastest\":69.441,\"driver\":\"Lance Stroll\"},{\"constructor\":\"McLaren\",\"fastest\":69.402,\"driver\":\"Fernando Alonso\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":94.794,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":95.125,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":95.401,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":96.192,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Sauber\",\"fastest\":96.237,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Force India\",\"fastest\":96.54,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Renault\",\"fastest\":96.542,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"McLaren\",\"fastest\":97.743,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.994,\"driver\":\"Brendon Hartley\"},{\"constructor\":\"Williams\",\"fastest\":98.635,\"driver\":\"Sergey Sirotkin\"}]},\"2019\":{\"Australian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":80.486,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":81.19,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":81.32,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":81.826,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":82.304,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":82.314,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Racing Point\",\"fastest\":82.781,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":82.562,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":82.636,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Williams\",\"fastest\":84.36,\"driver\":\"George Russell\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":87.866,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":88.19,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":88.752,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":88.757,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":88.813,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":89.022,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":89.488,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Toro Rosso\",\"fastest\":89.513,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Racing Point\",\"fastest\":89.756,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":91.759,\"driver\":\"George Russell\"}],\"Chinese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":91.547,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":91.848,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":92.089,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":92.958,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":93.15,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.236,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Racing Point\",\"fastest\":93.299,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":93.419,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":93.523,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Williams\",\"fastest\":95.253,\"driver\":\"George Russell\"}],\"Azerbaijan Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":100.495,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":100.797,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":101.069,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Racing Point\",\"fastest\":101.593,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":101.681,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"McLaren\",\"fastest\":101.886,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":102.424,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Renault\",\"fastest\":102.477,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":102.699,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":105.062,\"driver\":\"George Russell\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.406,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":76.272,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":76.357,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":76.911,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":77.445,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Renault\",\"fastest\":78.106,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":77.338,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":77.788,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Racing Point\",\"fastest\":77.886,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":79.072,\"driver\":\"George Russell\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":70.166,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":70.641,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":70.947,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":71.109,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Renault\",\"fastest\":71.218,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Toro Rosso\",\"fastest\":71.271,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"McLaren\",\"fastest\":71.417,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":72.115,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Racing Point\",\"fastest\":72.233,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":73.477,\"driver\":\"George Russell\"}],\"Canadian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.24,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":70.446,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":71.071,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Red Bull\",\"fastest\":71.079,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":71.863,\"driver\":\"Lando Norris\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":71.786,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":71.921,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":72.136,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Racing Point\",\"fastest\":72.197,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":73.617,\"driver\":\"George Russell\"}],\"French Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":88.319,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":88.965,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Red Bull\",\"fastest\":89.409,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":89.418,\"driver\":\"Lando Norris\"},{\"constructor\":\"Renault\",\"fastest\":89.918,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":90.533,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":90.461,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Racing Point\",\"fastest\":90.738,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":91.44,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":92.789,\"driver\":\"George Russell\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":63.003,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":63.262,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":63.439,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":64.072,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":64.099,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":64.166,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":64.516,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":64.665,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Racing Point\",\"fastest\":64.789,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":65.904,\"driver\":\"George Russell\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":85.093,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":85.172,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Red Bull\",\"fastest\":85.276,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":86.182,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":86.224,\"driver\":\"Lando Norris\"},{\"constructor\":\"Toro Rosso\",\"fastest\":86.345,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":86.519,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":86.662,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Racing Point\",\"fastest\":86.762,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Williams\",\"fastest\":87.789,\"driver\":\"George Russell\"}],\"German Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":71.767,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":72.113,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":72.538,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":72.789,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"McLaren\",\"fastest\":72.897,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Racing Point\",\"fastest\":73.065,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":72.799,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":72.344,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Toro Rosso\",\"fastest\":73.135,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Williams\",\"fastest\":74.721,\"driver\":\"George Russell\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":74.572,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":74.59,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":75.043,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":75.8,\"driver\":\"Lando Norris\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":76.013,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":76.041,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Renault\",\"fastest\":76.565,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.687,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Williams\",\"fastest\":77.031,\"driver\":\"George Russell\"},{\"constructor\":\"Racing Point\",\"fastest\":77.109,\"driver\":\"Sergio Pérez\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":102.519,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":103.282,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":103.69,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":104.257,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":104.557,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Racing Point\",\"fastest\":104.706,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":104.797,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"McLaren\",\"fastest\":104.847,\"driver\":\"Lando Norris\"},{\"constructor\":\"Toro Rosso\",\"fastest\":106.435,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Williams\",\"fastest\":107.548,\"driver\":\"George Russell\"}],\"Italian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":79.307,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":79.346,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Renault\",\"fastest\":79.839,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":80.455,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Red Bull\",\"fastest\":80.021,\"driver\":\"Alexander Albon\"},{\"constructor\":\"Racing Point\",\"fastest\":80.498,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":80.515,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":80.615,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Toro Rosso\",\"fastest\":80.63,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Williams\",\"fastest\":81.8,\"driver\":\"George Russell\"}],\"Singapore Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":96.217,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":96.408,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":96.813,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":97.818,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":98.264,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Racing Point\",\"fastest\":98.52,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":98.697,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Toro Rosso\",\"fastest\":98.699,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":99.65,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":100.867,\"driver\":\"George Russell\"}],\"Russian Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":91.628,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":92.03,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":92.31,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":93.222,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":93.289,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":93.517,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.95,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Racing Point\",\"fastest\":93.958,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":94.037,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":95.356,\"driver\":\"George Russell\"}],\"Japanese Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":87.064,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":87.293,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":87.851,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":88.304,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Toro Rosso\",\"fastest\":88.836,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":89.341,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":89.254,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Racing Point\",\"fastest\":89.345,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Renault\",\"fastest\":89.822,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":90.364,\"driver\":\"George Russell\"}],\"Mexican Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":74.758,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":75.024,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":75.262,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"McLaren\",\"fastest\":76.014,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Toro Rosso\",\"fastest\":76.469,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Racing Point\",\"fastest\":76.687,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":76.885,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":76.967,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":78.436,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":78.823,\"driver\":\"George Russell\"}],\"United States Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":92.029,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Ferrari\",\"fastest\":92.041,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":92.096,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":92.847,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":93.488,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Toro Rosso\",\"fastest\":93.601,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":93.979,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Racing Point\",\"fastest\":94.1,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":94.226,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":95.372,\"driver\":\"George Russell\"}],\"Brazilian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":67.508,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":67.631,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Mercedes\",\"fastest\":67.699,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Toro Rosso\",\"fastest\":68.837,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":68.854,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":68.919,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"McLaren\",\"fastest\":68.868,\"driver\":\"Lando Norris\"},{\"constructor\":\"Renault\",\"fastest\":68.903,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Racing Point\",\"fastest\":69.035,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":70.126,\"driver\":\"George Russell\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":94.779,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":95.139,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":95.219,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":96.436,\"driver\":\"Lando Norris\"},{\"constructor\":\"Renault\",\"fastest\":96.456,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Racing Point\",\"fastest\":97.055,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Toro Rosso\",\"fastest\":97.089,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":97.254,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":98.114,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":98.717,\"driver\":\"George Russell\"}]},\"2020\":{\"Austrian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":62.939,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":63.477,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":63.626,\"driver\":\"Lando Norris\"},{\"constructor\":\"Racing Point\",\"fastest\":63.868,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":63.923,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Renault\",\"fastest\":64.239,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":64.305,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":64.691,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":65.167,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":65.175,\"driver\":\"Antonio Giovinazzi\"}],\"Styrian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":79.273,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":80.489,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":80.671,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Renault\",\"fastest\":80.922,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"AlphaTauri\",\"fastest\":79.717,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Ferrari\",\"fastest\":79.628,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Williams\",\"fastest\":79.636,\"driver\":\"George Russell\"},{\"constructor\":\"Racing Point\",\"fastest\":79.645,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":80.211,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":81.14,\"driver\":\"Kimi Räikkönen\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":73.447,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Racing Point\",\"fastest\":74.377,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Ferrari\",\"fastest\":74.774,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Red Bull\",\"fastest\":74.849,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":74.966,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":75.508,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Renault\",\"fastest\":75.661,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":75.698,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":76.152,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":76.506,\"driver\":\"Antonio Giovinazzi\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":84.303,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":85.325,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":85.427,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":85.782,\"driver\":\"Lando Norris\"},{\"constructor\":\"Racing Point\",\"fastest\":85.839,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Renault\",\"fastest\":86.009,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":86.501,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Williams\",\"fastest\":87.092,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":87.158,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":87.164,\"driver\":\"Antonio Giovinazzi\"}],\"70th Anniversary Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":85.154,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Racing Point\",\"fastest\":86.082,\"driver\":\"Nico Hülkenberg\"},{\"constructor\":\"Red Bull\",\"fastest\":86.176,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":86.297,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":86.534,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":86.614,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":86.778,\"driver\":\"Lando Norris\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":87.254,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":87.455,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":88.433,\"driver\":\"Antonio Giovinazzi\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.584,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":76.292,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Racing Point\",\"fastest\":76.482,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"McLaren\",\"fastest\":77.044,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Ferrari\",\"fastest\":77.087,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"AlphaTauri\",\"fastest\":77.136,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Renault\",\"fastest\":77.198,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":77.386,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":77.908,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":78.099,\"driver\":\"George Russell\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":101.252,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":101.778,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":102.061,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":102.438,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Racing Point\",\"fastest\":102.532,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"AlphaTauri\",\"fastest\":102.73,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Ferrari\",\"fastest\":102.996,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Williams\",\"fastest\":103.468,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":103.743,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":103.838,\"driver\":\"Romain Grosjean\"}],\"Italian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":78.887,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"McLaren\",\"fastest\":79.695,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Racing Point\",\"fastest\":79.72,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Red Bull\",\"fastest\":79.795,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":79.864,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":80.169,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Ferrari\",\"fastest\":80.273,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":80.926,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":81.139,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":81.587,\"driver\":\"George Russell\"}],\"Tuscan Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.144,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":75.509,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":76.27,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Racing Point\",\"fastest\":76.311,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":76.297,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":76.64,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":76.854,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":76.854,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":77.254,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Williams\",\"fastest\":77.232,\"driver\":\"George Russell\"}],\"Russian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":91.304,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":91.867,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Racing Point\",\"fastest\":92.317,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":92.364,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":92.55,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"AlphaTauri\",\"fastest\":93,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":93.239,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Williams\",\"fastest\":93.583,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":94.592,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":94.594,\"driver\":\"Antonio Giovinazzi\"}],\"Eifel Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":85.269,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":85.562,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":86.035,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Renault\",\"fastest\":86.223,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":86.458,\"driver\":\"Lando Norris\"},{\"constructor\":\"Racing Point\",\"fastest\":86.704,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"AlphaTauri\",\"fastest\":86.776,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":86.936,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":87.125,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":87.564,\"driver\":\"George Russell\"}],\"Portuguese Grand Prix\":[{\"constructor\":\"Racing Point\",\"fastest\":77.223,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":77.481,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":77.728,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"McLaren\",\"fastest\":77.52,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Red Bull\",\"fastest\":76.904,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":77.09,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":76.652,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Williams\",\"fastest\":77.788,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":78.201,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":78.364,\"driver\":\"Romain Grosjean\"}],\"Emilia Romagna Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":73.609,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":74.176,\"driver\":\"Max Verstappen\"},{\"constructor\":\"AlphaTauri\",\"fastest\":74.502,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Renault\",\"fastest\":74.52,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Ferrari\",\"fastest\":74.616,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":74.814,\"driver\":\"Lando Norris\"},{\"constructor\":\"Racing Point\",\"fastest\":75.061,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Williams\",\"fastest\":75.323,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":75.918,\"driver\":\"Romain Grosjean\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":75.953,\"driver\":\"Kimi Räikkönen\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Racing Point\",\"fastest\":107.765,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Red Bull\",\"fastest\":108.055,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Renault\",\"fastest\":111.595,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Mercedes\",\"fastest\":112.56,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":112.745,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"McLaren\",\"fastest\":114.945,\"driver\":\"Lando Norris\"},{\"constructor\":\"Ferrari\",\"fastest\":115.169,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"AlphaTauri\",\"fastest\":118.556,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":128.007,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":130.017,\"driver\":\"George Russell\"}],\"Bahrain Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":87.264,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":87.678,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Racing Point\",\"fastest\":88.322,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Renault\",\"fastest\":88.417,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":88.448,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":88.542,\"driver\":\"Lando Norris\"},{\"constructor\":\"Ferrari\",\"fastest\":89.149,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":90.182,\"driver\":\"Nicholas Latifi\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":89.491,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":90.111,\"driver\":\"Kevin Magnussen\"}],\"Sakhir Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":53.377,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":53.433,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":53.613,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Racing Point\",\"fastest\":53.79,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"AlphaTauri\",\"fastest\":53.906,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Renault\",\"fastest\":53.957,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"McLaren\",\"fastest\":54.01,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":54.377,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":54.705,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":54.796,\"driver\":\"Nicholas Latifi\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":95.246,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":95.271,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":95.497,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":95.963,\"driver\":\"Daniil Kvyat\"},{\"constructor\":\"Racing Point\",\"fastest\":96.034,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":96.065,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Renault\",\"fastest\":96.359,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":97.555,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":97.863,\"driver\":\"Kevin Magnussen\"},{\"constructor\":\"Williams\",\"fastest\":98.045,\"driver\":\"George Russell\"}]},\"2021\":{\"Bahrain Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":88.997,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":89.385,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":89.678,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"AlphaTauri\",\"fastest\":89.809,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":89.927,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":90.249,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Aston Martin\",\"fastest\":90.601,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":90.708,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":91.936,\"driver\":\"Nicholas Latifi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":92.449,\"driver\":\"Mick Schumacher\"}],\"Emilia Romagna Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":74.411,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":74.446,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"Ferrari\",\"fastest\":74.74,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"AlphaTauri\",\"fastest\":74.79,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":74.826,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":75.21,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Aston Martin\",\"fastest\":75.138,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Williams\",\"fastest\":75.261,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":75.974,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":76.279,\"driver\":\"Mick Schumacher\"}],\"Portuguese Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":78.348,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":78.746,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":79.039,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":79.042,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":79.116,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":79.463,\"driver\":\"Yuki Tsunoda\"},{\"constructor\":\"Aston Martin\",\"fastest\":79.659,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":79.109,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":79.216,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":80.452,\"driver\":\"Mick Schumacher\"}],\"Spanish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":76.741,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":76.777,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":77.51,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":77.58,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":77.622,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Aston Martin\",\"fastest\":77.974,\"driver\":\"Lance Stroll\"},{\"constructor\":\"AlphaTauri\",\"fastest\":77.982,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":78.356,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":79.154,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":79.117,\"driver\":\"Mick Schumacher\"}],\"Monaco Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":70.346,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Red Bull\",\"fastest\":70.576,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":70.601,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":70.62,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":70.9,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Aston Martin\",\"fastest\":71.419,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":71.642,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":71.486,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Williams\",\"fastest\":71.83,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":72.958,\"driver\":\"Nikita Mazepin\"}],\"Azerbaijan Grand Prix\":[{\"constructor\":\"Ferrari\",\"fastest\":101.218,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Mercedes\",\"fastest\":101.45,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":101.563,\"driver\":\"Max Verstappen\"},{\"constructor\":\"AlphaTauri\",\"fastest\":101.565,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":101.747,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":102.273,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Aston Martin\",\"fastest\":102.224,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":102.587,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":102.758,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":104.158,\"driver\":\"Mick Schumacher\"}],\"French Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":89.99,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":90.248,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":90.84,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"AlphaTauri\",\"fastest\":90.868,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":91.252,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":91.34,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Aston Martin\",\"fastest\":91.767,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":91.813,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":92.065,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":92.942,\"driver\":\"Mick Schumacher\"}],\"Styrian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":63.841,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":64.035,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"McLaren\",\"fastest\":64.12,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":64.236,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":64.472,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":64.574,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Aston Martin\",\"fastest\":64.708,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Williams\",\"fastest\":64.671,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":64.913,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":66.041,\"driver\":\"Mick Schumacher\"}],\"Austrian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":63.72,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":63.768,\"driver\":\"Lando Norris\"},{\"constructor\":\"Mercedes\",\"fastest\":64.014,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"AlphaTauri\",\"fastest\":64.107,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Aston Martin\",\"fastest\":64.57,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Williams\",\"fastest\":64.591,\"driver\":\"George Russell\"},{\"constructor\":\"Ferrari\",\"fastest\":64.559,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":64.856,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":65.009,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":65.427,\"driver\":\"Mick Schumacher\"}],\"British Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":86.134,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":86.209,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":86.828,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":86.897,\"driver\":\"Lando Norris\"},{\"constructor\":\"Williams\",\"fastest\":86.971,\"driver\":\"George Russell\"},{\"constructor\":\"Aston Martin\",\"fastest\":87.179,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":87.245,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"AlphaTauri\",\"fastest\":87.273,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":87.617,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":88.738,\"driver\":\"Mick Schumacher\"}],\"Hungarian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.419,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":75.84,\"driver\":\"Max Verstappen\"},{\"constructor\":\"AlphaTauri\",\"fastest\":76.483,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":76.489,\"driver\":\"Lando Norris\"},{\"constructor\":\"Ferrari\",\"fastest\":76.496,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":76.653,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Aston Martin\",\"fastest\":76.75,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":77.564,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":77.944,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":78.922,\"driver\":\"Nikita Mazepin\"}],\"Belgian Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":119.765,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Williams\",\"fastest\":118.056,\"driver\":\"Nicholas Latifi\"},{\"constructor\":\"Mercedes\",\"fastest\":120.099,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"McLaren\",\"fastest\":116.025,\"driver\":\"Lando Norris\"},{\"constructor\":\"Aston Martin\",\"fastest\":118.231,\"driver\":\"Lance Stroll\"},{\"constructor\":\"AlphaTauri\",\"fastest\":121.164,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":118.205,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Ferrari\",\"fastest\":117.721,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":122.306,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":123.973,\"driver\":\"Mick Schumacher\"}],\"Dutch Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":68.885,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":68.923,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"AlphaTauri\",\"fastest\":69.478,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":69.527,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":69.59,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":69.933,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"McLaren\",\"fastest\":70.166,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Williams\",\"fastest\":70.332,\"driver\":\"George Russell\"},{\"constructor\":\"Aston Martin\",\"fastest\":70.367,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":71.387,\"driver\":\"Mick Schumacher\"}],\"Italian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":79.555,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":79.966,\"driver\":\"Max Verstappen\"},{\"constructor\":\"McLaren\",\"fastest\":79.989,\"driver\":\"Lando Norris\"},{\"constructor\":\"AlphaTauri\",\"fastest\":80.26,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":80.462,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":80.808,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Aston Martin\",\"fastest\":80.913,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":81.069,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Williams\",\"fastest\":81.392,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":82.248,\"driver\":\"Mick Schumacher\"}],\"Russian Grand Prix\":[{\"constructor\":\"McLaren\",\"fastest\":101.993,\"driver\":\"Lando Norris\"},{\"constructor\":\"Ferrari\",\"fastest\":102.51,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Williams\",\"fastest\":102.983,\"driver\":\"George Russell\"},{\"constructor\":\"Mercedes\",\"fastest\":104.05,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":104.204,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Aston Martin\",\"fastest\":104.956,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Red Bull\",\"fastest\":105.337,\"driver\":\"Sergio Pérez\"},{\"constructor\":\"AlphaTauri\",\"fastest\":106.641,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":109.586,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":109.83,\"driver\":\"Mick Schumacher\"}],\"Turkish Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":82.868,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":83.196,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":83.265,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"AlphaTauri\",\"fastest\":83.326,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":83.477,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":83.954,\"driver\":\"Lando Norris\"},{\"constructor\":\"Aston Martin\",\"fastest\":84.305,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Williams\",\"fastest\":85.007,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":85.2,\"driver\":\"Mick Schumacher\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":86.43,\"driver\":\"Antonio Giovinazzi\"}],\"United States Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":92.91,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":93.119,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Ferrari\",\"fastest\":93.606,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"McLaren\",\"fastest\":93.808,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"AlphaTauri\",\"fastest\":94.118,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":95.377,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Aston Martin\",\"fastest\":95.5,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":95.794,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":95.746,\"driver\":\"George Russell\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":96.499,\"driver\":\"Mick Schumacher\"}],\"Mexico City Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":75.875,\"driver\":\"Valtteri Bottas\"},{\"constructor\":\"Red Bull\",\"fastest\":76.225,\"driver\":\"Max Verstappen\"},{\"constructor\":\"AlphaTauri\",\"fastest\":76.456,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":76.761,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":76.763,\"driver\":\"Daniel Ricciardo\"},{\"constructor\":\"Aston Martin\",\"fastest\":77.746,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":77.958,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":78.172,\"driver\":\"George Russell\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":78.405,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":78.858,\"driver\":\"Mick Schumacher\"}],\"Sao Paulo Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":67.934,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":68.372,\"driver\":\"Max Verstappen\"},{\"constructor\":\"AlphaTauri\",\"fastest\":68.777,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Ferrari\",\"fastest\":68.826,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"McLaren\",\"fastest\":68.98,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":69.113,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"Aston Martin\",\"fastest\":69.399,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":69.503,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Williams\",\"fastest\":69.897,\"driver\":\"Nicholas Latifi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":70.329,\"driver\":\"Mick Schumacher\"}],\"Qatar Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":80.827,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":81.282,\"driver\":\"Max Verstappen\"},{\"constructor\":\"AlphaTauri\",\"fastest\":81.64,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":81.67,\"driver\":\"Fernando Alonso\"},{\"constructor\":\"McLaren\",\"fastest\":81.731,\"driver\":\"Lando Norris\"},{\"constructor\":\"Ferrari\",\"fastest\":81.84,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"Aston Martin\",\"fastest\":82.46,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Williams\",\"fastest\":82.756,\"driver\":\"George Russell\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":83.156,\"driver\":\"Kimi Räikkönen\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":83.407,\"driver\":\"Mick Schumacher\"}],\"Saudi Arabian Grand Prix\":[{\"constructor\":\"Mercedes\",\"fastest\":87.511,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"Red Bull\",\"fastest\":87.653,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Ferrari\",\"fastest\":88.054,\"driver\":\"Charles Leclerc\"},{\"constructor\":\"AlphaTauri\",\"fastest\":88.125,\"driver\":\"Pierre Gasly\"},{\"constructor\":\"McLaren\",\"fastest\":88.18,\"driver\":\"Lando Norris\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":88.647,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":88.754,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":89.054,\"driver\":\"George Russell\"},{\"constructor\":\"Aston Martin\",\"fastest\":89.198,\"driver\":\"Sebastian Vettel\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":89.464,\"driver\":\"Mick Schumacher\"}],\"Abu Dhabi Grand Prix\":[{\"constructor\":\"Red Bull\",\"fastest\":82.109,\"driver\":\"Max Verstappen\"},{\"constructor\":\"Mercedes\",\"fastest\":82.48,\"driver\":\"Lewis Hamilton\"},{\"constructor\":\"McLaren\",\"fastest\":82.931,\"driver\":\"Lando Norris\"},{\"constructor\":\"Ferrari\",\"fastest\":82.992,\"driver\":\"Carlos Sainz\"},{\"constructor\":\"AlphaTauri\",\"fastest\":83.22,\"driver\":\"Yuki Tsunoda\"},{\"constructor\":\"Alpine F1 Team\",\"fastest\":83.389,\"driver\":\"Esteban Ocon\"},{\"constructor\":\"Aston Martin\",\"fastest\":84.066,\"driver\":\"Lance Stroll\"},{\"constructor\":\"Alfa Romeo\",\"fastest\":84.251,\"driver\":\"Antonio Giovinazzi\"},{\"constructor\":\"Williams\",\"fastest\":84.338,\"driver\":\"Nicholas Latifi\"},{\"constructor\":\"Haas F1 Team\",\"fastest\":84.906,\"driver\":\"Mick Schumacher\"}]}}");

},{}],"2bgs1":[function(require,module,exports) {
module.exports = JSON.parse("{\"1996\":{\"Australian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":93.651,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":94.757,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":93.421,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":95.843,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":94.767,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":95.064,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":95.596,\"constructor\":\"Sauber\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":96.557,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":95.28,\"constructor\":\"Tyrrell\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":98.077,\"constructor\":\"Minardi\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":82.889,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":81.866,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":81.547,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":82.283,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.743,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":82.043,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":96.166,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":95.435,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":82.483,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":83.559,\"constructor\":\"Minardi\"},{\"driver\":\"Luca Badoer\",\"fastest\":85.627,\"constructor\":\"Forti\"}],\"Argentine Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":90.367,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":89.413,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":89.653,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":91.408,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":91.343,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":91.443,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":91.005,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":91.099,\"constructor\":\"Footwork\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":91.396,\"constructor\":\"Tyrrell\"},{\"driver\":\"Tarso Marques\",\"fastest\":92.925,\"constructor\":\"Minardi\"},{\"driver\":\"Andrea Montermini\",\"fastest\":94.592,\"constructor\":\"Forti\"}],\"European Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":81.769,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":82.004,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":81.363,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":82.078,\"constructor\":\"McLaren\"},{\"driver\":\"Pedro Diniz\",\"fastest\":83.72,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.472,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":82.697,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":83.233,\"constructor\":\"Footwork\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":82.602,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":84.369,\"constructor\":\"Minardi\"}],\"San Marino Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":88.966,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":89.542,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":88.931,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":89.48,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":90.184,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":89.888,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":90.811,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":90.479,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":89.997,\"constructor\":\"Tyrrell\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":91.633,\"constructor\":\"Minardi\"},{\"driver\":\"Luca Badoer\",\"fastest\":92.426,\"constructor\":\"Forti\"}],\"Monaco Grand Prix\":[{\"driver\":\"Eddie Irvine\",\"fastest\":86.12,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":85.205,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":86.682,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":86.238,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":85.581,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":95.477,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":85.608,\"constructor\":\"Sauber\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":118.465,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":86.461,\"constructor\":\"Tyrrell\"},{\"driver\":\"Luca Badoer\",\"fastest\":93.305,\"constructor\":\"Forti\"}],\"Spanish Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":105.517,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":108.509,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":108.707,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":109.771,\"constructor\":\"McLaren\"},{\"driver\":\"Pedro Diniz\",\"fastest\":110.636,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":107.735,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":108.846,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":108.302,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":111.734,\"constructor\":\"Tyrrell\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":183.566,\"constructor\":\"Minardi\"}],\"Canadian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":84.163,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":82.824,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":81.916,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":82.941,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":83.399,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":82.958,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":83.907,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":84.844,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":83.648,\"constructor\":\"Tyrrell\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":84.349,\"constructor\":\"Minardi\"},{\"driver\":\"Andrea Montermini\",\"fastest\":84.621,\"constructor\":\"Forti\"}],\"French Grand Prix\":[{\"driver\":\"Eddie Irvine\",\"fastest\":81.824,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":79.206,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":78.61,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":79.632,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":78.712,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.134,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":81.262,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":81.461,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":80.71,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":82.842,\"constructor\":\"Minardi\"},{\"driver\":\"Luca Badoer\",\"fastest\":82.258,\"constructor\":\"Forti\"}],\"British Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":90.944,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":89.984,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":89.288,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":90.531,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":92.188,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":90.552,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":92.213,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":92.08,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":91.765,\"constructor\":\"Tyrrell\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":93.707,\"constructor\":\"Minardi\"}],\"German Grand Prix\":[{\"driver\":\"Eddie Irvine\",\"fastest\":108.336,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":107.643,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":106.504,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":107.856,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":108.288,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":109.176,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":109.773,\"constructor\":\"Sauber\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":111.702,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":110.553,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":111.654,\"constructor\":\"Minardi\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":80.912,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":81.733,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":80.093,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":82.257,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":81.562,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.181,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":81.882,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":84.018,\"constructor\":\"Footwork\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":84.04,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":85.006,\"constructor\":\"Minardi\"}],\"Belgian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":113.905,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":113.067,\"constructor\":\"Benetton\"},{\"driver\":\"Damon Hill\",\"fastest\":113.441,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":114.198,\"constructor\":\"McLaren\"},{\"driver\":\"Pedro Diniz\",\"fastest\":118.665,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":115.616,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":116.704,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":115.854,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":117.468,\"constructor\":\"Minardi\"}],\"Italian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":86.11,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":86.652,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":87.027,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":86.827,\"constructor\":\"McLaren\"},{\"driver\":\"Pedro Diniz\",\"fastest\":87.905,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":87.557,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":88.223,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":88.65,\"constructor\":\"Footwork\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":88.98,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":91.353,\"constructor\":\"Minardi\"}],\"Portuguese Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":84.059,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":84.331,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":82.873,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":84.747,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":85.008,\"constructor\":\"Ligier\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":84.954,\"constructor\":\"Jordan\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":84.869,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":85.913,\"constructor\":\"Footwork\"},{\"driver\":\"Mika Salo\",\"fastest\":86.199,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":87.754,\"constructor\":\"Minardi\"}],\"Japanese Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":104.445,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":104.35,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":104.043,\"constructor\":\"Williams\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":104.852,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":105.347,\"constructor\":\"Ligier\"},{\"driver\":\"Martin Brundle\",\"fastest\":105.882,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":105.932,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":106.977,\"constructor\":\"Footwork\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":107.518,\"constructor\":\"Tyrrell\"},{\"driver\":\"Pedro Lamy\",\"fastest\":109.22,\"constructor\":\"Minardi\"}]},\"1997\":{\"Australian Grand Prix\":[{\"driver\":\"Pedro Diniz\",\"fastest\":94.465,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":90.585,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":91.067,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":91.624,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":91.412,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":94.147,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":91.762,\"constructor\":\"Prost\"},{\"driver\":\"Nicola Larini\",\"fastest\":92.784,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":94.194,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":94.918,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":93.386,\"constructor\":\"Stewart\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":79.91,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":78.397,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":78.773,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":78.509,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":78.649,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":78.441,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":79.094,\"constructor\":\"Prost\"},{\"driver\":\"Nicola Larini\",\"fastest\":78.73,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":80.274,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":79.96,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.788,\"constructor\":\"Stewart\"}],\"Argentine Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":90.649,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":88.028,\"constructor\":\"Williams\"},{\"driver\":\"Eddie Irvine\",\"fastest\":88.288,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":87.981,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":89.076,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":88.382,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":89.09,\"constructor\":\"Prost\"},{\"driver\":\"Nicola Larini\",\"fastest\":88.41,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":89.541,\"constructor\":\"Tyrrell\"},{\"driver\":\"Jarno Trulli\",\"fastest\":90.593,\"constructor\":\"Minardi\"},{\"driver\":\"Jan Magnussen\",\"fastest\":89.834,\"constructor\":\"Stewart\"}],\"San Marino Grand Prix\":[{\"driver\":\"Pedro Diniz\",\"fastest\":87.793,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":85.531,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":85.537,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":87.091,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":86.067,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":86.62,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":88.064,\"constructor\":\"Prost\"},{\"driver\":\"Nicola Larini\",\"fastest\":86.753,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":88.189,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":89.554,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":87.741,\"constructor\":\"Stewart\"}],\"Monaco Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":137.648,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":113.504,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":113.315,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":115.451,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":131.201,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":113.43,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":115.309,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":115.84,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":114.968,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":116.101,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":113.495,\"constructor\":\"Stewart\"}],\"Spanish Grand Prix\":[{\"driver\":\"Pedro Diniz\",\"fastest\":83.716,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":82.534,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":82.295,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":83.096,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":82.34,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.242,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.422,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":83.178,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":84.517,\"constructor\":\"Tyrrell\"},{\"driver\":\"Jarno Trulli\",\"fastest\":84.213,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.564,\"constructor\":\"Stewart\"}],\"Canadian Grand Prix\":[{\"driver\":\"Pedro Diniz\",\"fastest\":82.434,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":79.997,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":80.171,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":80.679,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":79.635,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.013,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":80.945,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":80.709,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":81.622,\"constructor\":\"Tyrrell\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.712,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.366,\"constructor\":\"Stewart\"}],\"French Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":80.434,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":78.136,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":77.91,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":78.684,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":79.317,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":79.225,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":79.417,\"constructor\":\"Prost\"},{\"driver\":\"Norberto Fontana\",\"fastest\":79.849,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":80.385,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":80.534,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":78.781,\"constructor\":\"Stewart\"}],\"British Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":86.471,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":85.082,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":84.475,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":86.26,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":85.988,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.872,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":86.61,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":86.232,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":88.053,\"constructor\":\"Tyrrell\"},{\"driver\":\"Tarso Marques\",\"fastest\":89.1,\"constructor\":\"Minardi\"},{\"driver\":\"Jan Magnussen\",\"fastest\":87.586,\"constructor\":\"Stewart\"}],\"German Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":106.56,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":107.044,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":106.603,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":105.747,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":106.831,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":106.127,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":106.733,\"constructor\":\"Prost\"},{\"driver\":\"Norberto Fontana\",\"fastest\":107.908,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":109.611,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":110.161,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":107.074,\"constructor\":\"Stewart\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":79.648,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":78.372,\"constructor\":\"Williams\"},{\"driver\":\"Eddie Irvine\",\"fastest\":79.527,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":79.923,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":80.161,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.366,\"constructor\":\"Jordan\"},{\"driver\":\"Shinji Nakano\",\"fastest\":80.003,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":80.606,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":81.578,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":80.672,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":81.409,\"constructor\":\"Stewart\"}],\"Belgian Grand Prix\":[{\"driver\":\"Pedro Diniz\",\"fastest\":113.652,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":112.692,\"constructor\":\"Williams\"},{\"driver\":\"Eddie Irvine\",\"fastest\":115.29,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":113.649,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":114.175,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":114.688,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":115.152,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":113.615,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":116.919,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":115.413,\"constructor\":\"Minardi\"},{\"driver\":\"Jan Magnussen\",\"fastest\":115.726,\"constructor\":\"Stewart\"}],\"Italian Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":87.081,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":85.6,\"constructor\":\"Williams\"},{\"driver\":\"Eddie Irvine\",\"fastest\":85.655,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":85.653,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":84.808,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.909,\"constructor\":\"Jordan\"},{\"driver\":\"Shinji Nakano\",\"fastest\":86.383,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":86.572,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":88.004,\"constructor\":\"Tyrrell\"},{\"driver\":\"Tarso Marques\",\"fastest\":89.116,\"constructor\":\"Minardi\"},{\"driver\":\"Jan Magnussen\",\"fastest\":87.447,\"constructor\":\"Stewart\"}],\"Austrian Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":72.903,\"constructor\":\"Arrows\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":71.814,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":72.169,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":72.624,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":72.207,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":72.375,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":72.598,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":72.574,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":73.708,\"constructor\":\"Tyrrell\"},{\"driver\":\"Ukyo Katayama\",\"fastest\":74.394,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":72.535,\"constructor\":\"Stewart\"}],\"Luxembourg Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":80.407,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":78.805,\"constructor\":\"Williams\"},{\"driver\":\"Eddie Irvine\",\"fastest\":81.793,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":79.716,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":79.576,\"constructor\":\"McLaren\"},{\"driver\":\"Olivier Panis\",\"fastest\":81.086,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":80.518,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":81.996,\"constructor\":\"Tyrrell\"},{\"driver\":\"Tarso Marques\",\"fastest\":96.826,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.737,\"constructor\":\"Stewart\"}],\"Japanese Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":101.419,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":98.942,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":99.268,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean Alesi\",\"fastest\":99.381,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":99.771,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":99.737,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":100.43,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":100.266,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":102.996,\"constructor\":\"Tyrrell\"},{\"driver\":\"Tarso Marques\",\"fastest\":102.699,\"constructor\":\"Minardi\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":103.883,\"constructor\":\"Stewart\"}],\"European Grand Prix\":[{\"driver\":\"Damon Hill\",\"fastest\":84.274,\"constructor\":\"Arrows\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":83.135,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":83.692,\"constructor\":\"Ferrari\"},{\"driver\":\"Gerhard Berger\",\"fastest\":83.361,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":84.006,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":85.434,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":83.941,\"constructor\":\"Prost\"},{\"driver\":\"Norberto Fontana\",\"fastest\":85.154,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":85.237,\"constructor\":\"Tyrrell\"},{\"driver\":\"Tarso Marques\",\"fastest\":85.947,\"constructor\":\"Minardi\"},{\"driver\":\"Jan Magnussen\",\"fastest\":85.37,\"constructor\":\"Stewart\"}]},\"1998\":{\"Australian Grand Prix\":[{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":93.554,\"constructor\":\"Williams\"},{\"driver\":\"Eddie Irvine\",\"fastest\":93.79,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":94.319,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":91.649,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":94.196,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":94.319,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":94.878,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":96.032,\"constructor\":\"Arrows\"},{\"driver\":\"Jan Magnussen\",\"fastest\":112.353,\"constructor\":\"Stewart\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":98.116,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":96.475,\"constructor\":\"Minardi\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":80.129,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":79.627,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":79.863,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":79.337,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":81.035,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":80.449,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":80.623,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":82.969,\"constructor\":\"Arrows\"},{\"driver\":\"Jan Magnussen\",\"fastest\":80.991,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":83.226,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":83.293,\"constructor\":\"Minardi\"}],\"Argentine Grand Prix\":[{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":89.592,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":88.272,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":88.179,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":88.261,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":89.31,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":89.201,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":89,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":92.519,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":90.408,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":91.057,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":90.992,\"constructor\":\"Minardi\"}],\"San Marino Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":89.726,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":89.345,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":91.562,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":89.497,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":90.859,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":90.481,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":90.391,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":91.267,\"constructor\":\"Arrows\"},{\"driver\":\"Jan Magnussen\",\"fastest\":95.069,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":92.43,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":93.443,\"constructor\":\"Minardi\"}],\"Spanish Grand Prix\":[{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":86.011,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":84.625,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":85.343,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":84.275,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":86.501,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":86.394,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":85.668,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":87.638,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":86.532,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":88.066,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":87.601,\"constructor\":\"Minardi\"}],\"Monaco Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":84.381,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":83.189,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":83.594,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":82.948,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":86.091,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":84.874,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":84.539,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":84.456,\"constructor\":\"Arrows\"},{\"driver\":\"Jan Magnussen\",\"fastest\":86.637,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":86.506,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":86.054,\"constructor\":\"Minardi\"}],\"Canadian Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":81.233,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":79.379,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":80.942,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":80.852,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":81.933,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":81.669,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":83.466,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":81.814,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.239,\"constructor\":\"Stewart\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":83.418,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":82.907,\"constructor\":\"Minardi\"}],\"French Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":78.913,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":77.77,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.307,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":77.523,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":79.052,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":79.869,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":79.66,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":81.502,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.651,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":80.299,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":81.883,\"constructor\":\"Minardi\"}],\"British Grand Prix\":[{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":96.884,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":95.704,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":97.982,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":95.961,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":97.223,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":102.346,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":97.202,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":97.887,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":100.097,\"constructor\":\"Stewart\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":100.948,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":103.755,\"constructor\":\"Minardi\"}],\"Austrian Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":73.73,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":73.029,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Wurz\",\"fastest\":74.04,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":72.878,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":73.972,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":75.709,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":74.639,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":100.264,\"constructor\":\"Arrows\"},{\"driver\":\"Jos Verstappen\",\"fastest\":75.61,\"constructor\":\"Stewart\"},{\"driver\":\"Ricardo Rosset\",\"fastest\":76.1,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":75.575,\"constructor\":\"Minardi\"}],\"German Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":106.274,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":106.381,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":106.831,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":106.116,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":106.317,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":107.775,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":106.964,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":108.899,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":107.544,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":108.608,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":109.424,\"constructor\":\"Minardi\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":80.078,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":79.286,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.06,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":80.545,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":80.68,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.538,\"constructor\":\"Prost\"},{\"driver\":\"Johnny Herbert\",\"fastest\":81.329,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":83.429,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.294,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":82.495,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":83.573,\"constructor\":\"Minardi\"}],\"Belgian Grand Prix\":[{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":126.284,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":123.766,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":129.528,\"constructor\":\"Benetton\"},{\"driver\":\"David Coulthard\",\"fastest\":925.994,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":125.63,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":131.701,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":127.597,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro Diniz\",\"fastest\":131.331,\"constructor\":\"Arrows\"},{\"driver\":\"Jos Verstappen\",\"fastest\":132.425,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":132.327,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":139.996,\"constructor\":\"Minardi\"}],\"Italian Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":86.479,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":85.483,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":86.659,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":85.139,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":86.194,\"constructor\":\"Jordan\"},{\"driver\":\"Jarno Trulli\",\"fastest\":86.285,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":86.84,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":87.866,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":87.77,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":87.726,\"constructor\":\"Tyrrell\"},{\"driver\":\"Esteban Tuero\",\"fastest\":89.093,\"constructor\":\"Minardi\"}],\"Luxembourg Grand Prix\":[{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":81.394,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":81.001,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.506,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":80.45,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":81.741,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.931,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":81.979,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":83.552,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.412,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":83.392,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":84.21,\"constructor\":\"Minardi\"}],\"Japanese Grand Prix\":[{\"driver\":\"Jacques Villeneuve\",\"fastest\":102.273,\"constructor\":\"Williams\"},{\"driver\":\"Michael Schumacher\",\"fastest\":100.19,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":102.335,\"constructor\":\"Benetton\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":100.426,\"constructor\":\"McLaren\"},{\"driver\":\"Damon Hill\",\"fastest\":102.275,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":103.073,\"constructor\":\"Prost\"},{\"driver\":\"Jean Alesi\",\"fastest\":102.357,\"constructor\":\"Sauber\"},{\"driver\":\"Mika Salo\",\"fastest\":105.304,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":104.947,\"constructor\":\"Stewart\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":105.673,\"constructor\":\"Tyrrell\"},{\"driver\":\"Shinji Nakano\",\"fastest\":104.158,\"constructor\":\"Minardi\"}]},\"1999\":{\"Australian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":93.309,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":92.112,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":93.407,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":93.378,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":93.657,\"constructor\":\"Benetton\"},{\"driver\":\"Pedro Diniz\",\"fastest\":94.748,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":95.22,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":92.894,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":94.98,\"constructor\":\"Prost\"},{\"driver\":\"Luca Badoer\",\"fastest\":97.073,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":94.756,\"constructor\":\"BAR\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":78.448,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":78.616,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":79.395,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":79.009,\"constructor\":\"Jordan\"},{\"driver\":\"Alexander Wurz\",\"fastest\":80.145,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":78.897,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":81.598,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":79.477,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":79.386,\"constructor\":\"Prost\"},{\"driver\":\"Stéphane Sarrazin\",\"fastest\":81.225,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":80.727,\"constructor\":\"BAR\"}],\"San Marino Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":89.145,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":88.547,\"constructor\":\"Ferrari\"},{\"driver\":\"Alessandro Zanardi\",\"fastest\":90.254,\"constructor\":\"Williams\"},{\"driver\":\"Damon Hill\",\"fastest\":90.14,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":90.977,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":90.442,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":91.587,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":90.564,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":90.081,\"constructor\":\"Prost\"},{\"driver\":\"Luca Badoer\",\"fastest\":92.851,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":91.007,\"constructor\":\"BAR\"}],\"Monaco Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":82.259,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":82.288,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":82.837,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":82.471,\"constructor\":\"Jordan\"},{\"driver\":\"Alexander Wurz\",\"fastest\":83.236,\"constructor\":\"Benetton\"},{\"driver\":\"Pedro Diniz\",\"fastest\":82.637,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":86.482,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.583,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":83.646,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":86.864,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":83.537,\"constructor\":\"BAR\"}],\"Spanish Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":85.209,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":84.982,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":86.52,\"constructor\":\"Williams\"},{\"driver\":\"Damon Hill\",\"fastest\":86.348,\"constructor\":\"Jordan\"},{\"driver\":\"Alexander Wurz\",\"fastest\":87.029,\"constructor\":\"Benetton\"},{\"driver\":\"Pedro Diniz\",\"fastest\":86.315,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":87.409,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":86.006,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":86.505,\"constructor\":\"Prost\"},{\"driver\":\"Luca Badoer\",\"fastest\":89.632,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":86.675,\"constructor\":\"BAR\"}],\"Canadian Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":80.961,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":80.382,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":82.002,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":81.284,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.345,\"constructor\":\"Benetton\"},{\"driver\":\"Pedro Diniz\",\"fastest\":81.864,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":82.792,\"constructor\":\"Arrows\"},{\"driver\":\"Johnny Herbert\",\"fastest\":82.078,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.1,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":82.888,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":82.283,\"constructor\":\"BAR\"}],\"French Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":79.227,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":80.328,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":80.313,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":80.994,\"constructor\":\"Jordan\"},{\"driver\":\"Alexander Wurz\",\"fastest\":81.409,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":80.848,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":82.535,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.878,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":81.33,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":82.844,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":80.881,\"constructor\":\"BAR\"}],\"British Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":88.309,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":88.782,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":89.414,\"constructor\":\"Williams\"},{\"driver\":\"Damon Hill\",\"fastest\":89.252,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":90.296,\"constructor\":\"Benetton\"},{\"driver\":\"Pedro Diniz\",\"fastest\":89.819,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":92.442,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":89.493,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":90.793,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":91.612,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":90.611,\"constructor\":\"BAR\"}],\"Austrian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":72.107,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":72.787,\"constructor\":\"Ferrari\"},{\"driver\":\"Alessandro Zanardi\",\"fastest\":74.381,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":73.176,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":73.579,\"constructor\":\"Benetton\"},{\"driver\":\"Pedro Diniz\",\"fastest\":73.093,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":74.914,\"constructor\":\"Arrows\"},{\"driver\":\"Johnny Herbert\",\"fastest\":72.641,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":73.465,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":74.517,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":73.977,\"constructor\":\"BAR\"}],\"German Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":105.27,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":107.687,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":108.083,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":107.619,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":107.785,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":108.334,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":110.286,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":107.788,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":106.823,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":109.894,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":109.179,\"constructor\":\"BAR\"}],\"Hungarian Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":80.699,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":81.01,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":81.745,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":80.991,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.469,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":80.83,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":83.52,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":81.707,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":81.936,\"constructor\":\"Prost\"},{\"driver\":\"Luca Badoer\",\"fastest\":83.456,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":81.343,\"constructor\":\"BAR\"}],\"Belgian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":113.955,\"constructor\":\"McLaren\"},{\"driver\":\"Mika Salo\",\"fastest\":115.299,\"constructor\":\"Ferrari\"},{\"driver\":\"Alessandro Zanardi\",\"fastest\":115.786,\"constructor\":\"Williams\"},{\"driver\":\"Damon Hill\",\"fastest\":114.954,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":117.037,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":116.016,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":118.48,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":116.131,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":116.367,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":116.789,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":117.619,\"constructor\":\"BAR\"}],\"Italian Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":85.832,\"constructor\":\"McLaren\"},{\"driver\":\"Mika Salo\",\"fastest\":85.63,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.579,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":85.917,\"constructor\":\"Jordan\"},{\"driver\":\"Alexander Wurz\",\"fastest\":88.338,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":85.911,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":88.516,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":85.825,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":85.953,\"constructor\":\"Prost\"},{\"driver\":\"Luca Badoer\",\"fastest\":88.914,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":86.338,\"constructor\":\"BAR\"}],\"European Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":81.282,\"constructor\":\"McLaren\"},{\"driver\":\"Eddie Irvine\",\"fastest\":82.332,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":82.237,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":82.082,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.244,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":83.097,\"constructor\":\"Sauber\"},{\"driver\":\"Toranosuke Takagi\",\"fastest\":84.848,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.96,\"constructor\":\"Stewart\"},{\"driver\":\"Jarno Trulli\",\"fastest\":83.742,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":83.657,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":82.564,\"constructor\":\"BAR\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":101.103,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":100.267,\"constructor\":\"Ferrari\"},{\"driver\":\"Alessandro Zanardi\",\"fastest\":102.056,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":100.631,\"constructor\":\"Jordan\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":100.96,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":101.328,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":103.885,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":100.81,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":106.874,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":102.49,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":101.769,\"constructor\":\"BAR\"}],\"Japanese Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":101.577,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":101.319,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":102.567,\"constructor\":\"Williams\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":102.972,\"constructor\":\"Jordan\"},{\"driver\":\"Alexander Wurz\",\"fastest\":103.963,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":103.669,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":105.556,\"constructor\":\"Arrows\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":103.496,\"constructor\":\"Stewart\"},{\"driver\":\"Olivier Panis\",\"fastest\":103.188,\"constructor\":\"Prost\"},{\"driver\":\"Marc Gené\",\"fastest\":105.359,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":103.898,\"constructor\":\"BAR\"}]},\"2000\":{\"Australian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":92.433,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":91.481,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":92.11,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":95.789,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":92.525,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":93.449,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.111,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":92.977,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":94.834,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":93.231,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":93.185,\"constructor\":\"BAR\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":75.456,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":74.755,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":75.192,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":77.696,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":76.379,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.002,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":78.381,\"constructor\":\"Prost\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":76.967,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":77.174,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":76.658,\"constructor\":\"BAR\"}],\"San Marino Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":86.523,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":86.774,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":88.754,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":88.387,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":87.339,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":88.884,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":89.35,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":87.814,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":88.842,\"constructor\":\"Arrows\"},{\"driver\":\"Gastón Mazzacane\",\"fastest\":90.03,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":88.787,\"constructor\":\"BAR\"}],\"British Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":86.217,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":86.428,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":87.286,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":88.001,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":86.998,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":88.116,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":88.388,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":88.037,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":88.867,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":88.557,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":87.655,\"constructor\":\"BAR\"}],\"Spanish Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":84.47,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":84.517,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":85.183,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":86.239,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":84.729,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":86.147,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":86.663,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":85.896,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":87.152,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":85.915,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":86.241,\"constructor\":\"BAR\"}],\"European Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":82.288,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":82.269,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":84.937,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":84.008,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":83.688,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":83.255,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":83.898,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":84.346,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":83.125,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":84.018,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":83.39,\"constructor\":\"BAR\"}],\"Monaco Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":81.571,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":81.91,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":82.123,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":82.424,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":83.769,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.905,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":83.261,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":82.634,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":84.486,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":84.351,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":83.393,\"constructor\":\"BAR\"}],\"Canadian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":79.049,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":79.235,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":80.479,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":80.693,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":80.52,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":80.399,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":80.889,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":80.494,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":80.693,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":80.547,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":80.533,\"constructor\":\"BAR\"}],\"French Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":79.479,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":79.656,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":81.071,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":79.708,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":80.908,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":80.958,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":81.115,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":81.725,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":81.506,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":82.42,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":80.857,\"constructor\":\"BAR\"}],\"Austrian Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":71.783,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":71.887,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":76.588,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":73.613,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":72.811,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":73.317,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":73.593,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":72.955,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":73.49,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":73.626,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":72.63,\"constructor\":\"BAR\"}],\"German Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":104.579,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":104.3,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":104.614,\"constructor\":\"Jordan\"},{\"driver\":\"Johnny Herbert\",\"fastest\":107.332,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":106.685,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":107.269,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":107.001,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":106.639,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":106.243,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":107.158,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":106.374,\"constructor\":\"BAR\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":80.028,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.52,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":80.64,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":81.572,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":81.211,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":81.483,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":83.644,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":81.372,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":82.366,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":83.388,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":81.163,\"constructor\":\"BAR\"}],\"Belgian Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":114.131,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":113.803,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":114.966,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":115.603,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":115.425,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":116.726,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":115.954,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":115.11,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":116.77,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":117.261,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":115.511,\"constructor\":\"BAR\"}],\"Italian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":85.595,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":85.663,\"constructor\":\"Ferrari\"},{\"driver\":\"Johnny Herbert\",\"fastest\":258.026,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":86.636,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":86.731,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":87.978,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":87.215,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":87.033,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":88.131,\"constructor\":\"Minardi\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":86.433,\"constructor\":\"BAR\"}],\"United States Grand Prix\":[{\"driver\":\"David Coulthard\",\"fastest\":74.711,\"constructor\":\"McLaren\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":74.822,\"constructor\":\"Ferrari\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":75.521,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":75.675,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":75.598,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":75.56,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.074,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":75.305,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":76.252,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":76.044,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":75.117,\"constructor\":\"BAR\"}],\"Japanese Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":99.189,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":99.443,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":100.967,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":101.154,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":100.699,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":102.416,\"constructor\":\"Benetton\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":102.356,\"constructor\":\"Prost\"},{\"driver\":\"Pedro Diniz\",\"fastest\":101.002,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":102.079,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":102.815,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":100.739,\"constructor\":\"BAR\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Mika Häkkinen\",\"fastest\":98.543,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":99.064,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":101.262,\"constructor\":\"Jordan\"},{\"driver\":\"Eddie Irvine\",\"fastest\":100.292,\"constructor\":\"Jaguar\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":101.729,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":100.312,\"constructor\":\"Benetton\"},{\"driver\":\"Jean Alesi\",\"fastest\":101.634,\"constructor\":\"Prost\"},{\"driver\":\"Mika Salo\",\"fastest\":100.896,\"constructor\":\"Sauber\"},{\"driver\":\"Jos Verstappen\",\"fastest\":101.104,\"constructor\":\"Arrows\"},{\"driver\":\"Marc Gené\",\"fastest\":101.928,\"constructor\":\"Minardi\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":100.16,\"constructor\":\"BAR\"}]},\"2001\":{\"Australian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":88.214,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":88.838,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":89.606,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":92.001,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":90.199,\"constructor\":\"BAR\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":90.266,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":91.999,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":90.229,\"constructor\":\"Sauber\"},{\"driver\":\"Luciano Burti\",\"fastest\":90.903,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":92.043,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":91.03,\"constructor\":\"Prost\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":101.833,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":100.962,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":101.503,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":104.891,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":103.47,\"constructor\":\"BAR\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":102.119,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":103.029,\"constructor\":\"Arrows\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":105.328,\"constructor\":\"Sauber\"},{\"driver\":\"Luciano Burti\",\"fastest\":103.697,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":105.585,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":103.853,\"constructor\":\"Prost\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.545,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":76.498,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":75.693,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":77.83,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":76.732,\"constructor\":\"BAR\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":77.522,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":78.875,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":77.816,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":77.132,\"constructor\":\"Jaguar\"},{\"driver\":\"Tarso Marques\",\"fastest\":79.734,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":77.609,\"constructor\":\"Prost\"}],\"San Marino Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":86.117,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":85.569,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.524,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":89.096,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":87.582,\"constructor\":\"BAR\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":87.243,\"constructor\":\"Jordan\"},{\"driver\":\"Enrique Bernoldi\",\"fastest\":88.956,\"constructor\":\"Arrows\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":87.35,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":87.854,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":91.671,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":88.369,\"constructor\":\"Prost\"}],\"Spanish Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":81.151,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":81.368,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":82.362,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":85.298,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.475,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":83.087,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":83.965,\"constructor\":\"Arrows\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":82.738,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":82.568,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":84.423,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":83.668,\"constructor\":\"Prost\"}],\"Austrian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":71.009,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":70.843,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":71.14,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":73.498,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":71.718,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":74.082,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":72.423,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":71.284,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":72.088,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.432,\"constructor\":\"Minardi\"},{\"driver\":\"Luciano Burti\",\"fastest\":72.642,\"constructor\":\"Prost\"}],\"Monaco Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":79.77,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":79.424,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":80.975,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":81.58,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":80.417,\"constructor\":\"BAR\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":80.81,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":81.732,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.705,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":80.681,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":82.956,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":81.151,\"constructor\":\"Prost\"}],\"Canadian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":78.176,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":78.148,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":77.205,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":81.124,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":79.782,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":79.414,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":79.257,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":79.309,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":79.006,\"constructor\":\"Jaguar\"},{\"driver\":\"Tarso Marques\",\"fastest\":82.312,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":79.328,\"constructor\":\"Prost\"}],\"European Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":78.537,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":78.883,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":78.354,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":80.069,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":79.797,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":79.484,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":81.154,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.498,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":78.674,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.937,\"constructor\":\"Minardi\"},{\"driver\":\"Luciano Burti\",\"fastest\":79.105,\"constructor\":\"Prost\"}],\"French Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":76.181,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":76.088,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":76.355,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":77.968,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":78.181,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.369,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":78.662,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":77.311,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":77.304,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":79.199,\"constructor\":\"Minardi\"},{\"driver\":\"Luciano Burti\",\"fastest\":78.253,\"constructor\":\"Prost\"}],\"British Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":83.928,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":83.405,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":84.437,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":86.798,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":85.809,\"constructor\":\"BAR\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":85.029,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":86.394,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":84.563,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":84.544,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.091,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":86.497,\"constructor\":\"Prost\"}],\"German Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":102.638,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":103.516,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":101.808,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":103.999,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":103.329,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":103.74,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":104.681,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":104.365,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":104.415,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":105.908,\"constructor\":\"Minardi\"},{\"driver\":\"Jean Alesi\",\"fastest\":104.135,\"constructor\":\"Prost\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":77.274,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":76.723,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":77.233,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.471,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":79.494,\"constructor\":\"BAR\"},{\"driver\":\"Jean Alesi\",\"fastest\":78.536,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":80.401,\"constructor\":\"Arrows\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.165,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":78.186,\"constructor\":\"Jaguar\"},{\"driver\":\"Tarso Marques\",\"fastest\":81.379,\"constructor\":\"Minardi\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":80.046,\"constructor\":\"Prost\"}],\"Belgian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":109.758,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":111.608,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":111.058,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":111.725,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":112.372,\"constructor\":\"BAR\"},{\"driver\":\"Jean Alesi\",\"fastest\":111.828,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":114.095,\"constructor\":\"Arrows\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":229.381,\"constructor\":\"Jaguar\"},{\"driver\":\"Tarso Marques\",\"fastest\":116.484,\"constructor\":\"Minardi\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":114.051,\"constructor\":\"Prost\"}],\"Italian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":85.221,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":87.323,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.073,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":87.283,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":86.386,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":86.365,\"constructor\":\"Jordan\"},{\"driver\":\"Jos Verstappen\",\"fastest\":87.945,\"constructor\":\"Arrows\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.656,\"constructor\":\"Sauber\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":86.381,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.709,\"constructor\":\"Minardi\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":87.394,\"constructor\":\"Prost\"}],\"United States Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":74.629,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":74.481,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":74.448,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":75.252,\"constructor\":\"Benetton\"},{\"driver\":\"Olivier Panis\",\"fastest\":75.919,\"constructor\":\"BAR\"},{\"driver\":\"Jean Alesi\",\"fastest\":75.199,\"constructor\":\"Jordan\"},{\"driver\":\"Enrique Bernoldi\",\"fastest\":76.068,\"constructor\":\"Arrows\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":75.169,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":75.139,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.694,\"constructor\":\"Minardi\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":75.296,\"constructor\":\"Prost\"}],\"Japanese Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":96.97,\"constructor\":\"Ferrari\"},{\"driver\":\"Mika Häkkinen\",\"fastest\":97.298,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":96.45,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":98.361,\"constructor\":\"Benetton\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":98.887,\"constructor\":\"BAR\"},{\"driver\":\"Jean Alesi\",\"fastest\":98.857,\"constructor\":\"Jordan\"},{\"driver\":\"Enrique Bernoldi\",\"fastest\":100.94,\"constructor\":\"Arrows\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":98.647,\"constructor\":\"Sauber\"},{\"driver\":\"Eddie Irvine\",\"fastest\":98.62,\"constructor\":\"Jaguar\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.153,\"constructor\":\"Minardi\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":98.24,\"constructor\":\"Prost\"}]},\"2002\":{\"Australian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":88.628,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":88.541,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":89.143,\"constructor\":\"Williams\"},{\"driver\":\"Takuma Sato\",\"fastest\":95.197,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":93.54,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":94.233,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":91.539,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":93.534,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":93.296,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":92.225,\"constructor\":\"Toyota\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":98.754,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.8,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":98.049,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":100.575,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":101.181,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":102.373,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":100.011,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":100.675,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":100.267,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":103.125,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":99.649,\"constructor\":\"Toyota\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.235,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.529,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":76.079,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":77.782,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":77.32,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":77.131,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":76.396,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":77.569,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":77.568,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":78.386,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":77.398,\"constructor\":\"Toyota\"}],\"San Marino Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":84.17,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":85.483,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":84.718,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":85.301,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":88.741,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":85.959,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":85.761,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":87.104,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":86.537,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":87.914,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":88.46,\"constructor\":\"Toyota\"}],\"Spanish Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":80.355,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":81.931,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":81.74,\"constructor\":\"Williams\"},{\"driver\":\"Felipe Massa\",\"fastest\":82.186,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":84.198,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":82.827,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.155,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":84.187,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":82.32,\"constructor\":\"Arrows\"},{\"driver\":\"Mika Salo\",\"fastest\":82.524,\"constructor\":\"Toyota\"}],\"Austrian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":69.298,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":71.223,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":69.853,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":72.18,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":71.284,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":70.823,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":71.209,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":72.602,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":71.201,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":71.819,\"constructor\":\"Minardi\"},{\"driver\":\"Allan McNish\",\"fastest\":71.456,\"constructor\":\"Toyota\"}],\"Monaco Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":78.023,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":79.36,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":79.489,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":80.927,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.12,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":81.916,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":80.445,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":80.953,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":79.601,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":79.968,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":79.479,\"constructor\":\"Toyota\"}],\"Canadian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":75.971,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":76.369,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":75.96,\"constructor\":\"Williams\"},{\"driver\":\"Felipe Massa\",\"fastest\":77.017,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.658,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":77.202,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.128,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":77.813,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":77.892,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":77.807,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":77.539,\"constructor\":\"Toyota\"}],\"European Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":92.226,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.159,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":93.856,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.224,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":95.029,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":94.609,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":93.676,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":95.644,\"constructor\":\"Jaguar\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":94.503,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":95.88,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":95.267,\"constructor\":\"Toyota\"}],\"British Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":83.083,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":85.409,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":84.586,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":84.996,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":85.104,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":84.949,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":86.074,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":85.54,\"constructor\":\"Jaguar\"},{\"driver\":\"Enrique Bernoldi\",\"fastest\":87.328,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":88.321,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":86.723,\"constructor\":\"Toyota\"}],\"French Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":75.311,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":75.045,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":75.584,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.847,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":77.565,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":76.278,\"constructor\":\"BAR\"},{\"driver\":\"Jenson Button\",\"fastest\":75.957,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":76.456,\"constructor\":\"Jaguar\"},{\"driver\":\"Mark Webber\",\"fastest\":77.087,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":77.295,\"constructor\":\"Toyota\"}],\"German Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.462,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":77.53,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":76.513,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.062,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":78.053,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":78.405,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":78.28,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":78.859,\"constructor\":\"Jaguar\"},{\"driver\":\"Enrique Bernoldi\",\"fastest\":79.084,\"constructor\":\"Arrows\"},{\"driver\":\"Mark Webber\",\"fastest\":79.485,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":78.497,\"constructor\":\"Toyota\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.207,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.926,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":77.783,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.185,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":78.247,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":78.126,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":78.438,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":78.889,\"constructor\":\"Jaguar\"},{\"driver\":\"Anthony Davidson\",\"fastest\":79.347,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":79.408,\"constructor\":\"Toyota\"}],\"Belgian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":107.176,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":109.398,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":109.293,\"constructor\":\"Williams\"},{\"driver\":\"Felipe Massa\",\"fastest\":110.595,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":110.886,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":109.787,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":110.235,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":110.221,\"constructor\":\"Jaguar\"},{\"driver\":\"Anthony Davidson\",\"fastest\":111.878,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":110.832,\"constructor\":\"Toyota\"}],\"Italian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":83.657,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":84.962,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":85.094,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":85.867,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":85.215,\"constructor\":\"Jordan\"},{\"driver\":\"Olivier Panis\",\"fastest\":85.335,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":85.368,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":85.579,\"constructor\":\"Jaguar\"},{\"driver\":\"Mark Webber\",\"fastest\":87.104,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":85.971,\"constructor\":\"Toyota\"}],\"United States Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":72.738,\"constructor\":\"Ferrari\"},{\"driver\":\"David Coulthard\",\"fastest\":73.481,\"constructor\":\"McLaren\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":72.798,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":74.557,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":74.025,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":73.848,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":74.026,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":74.19,\"constructor\":\"Jaguar\"},{\"driver\":\"Alex Yoong\",\"fastest\":75.347,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":74.672,\"constructor\":\"Toyota\"}],\"Japanese Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":96.125,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":96.848,\"constructor\":\"McLaren\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":96.59,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":98.534,\"constructor\":\"Sauber\"},{\"driver\":\"Takuma Sato\",\"fastest\":97.84,\"constructor\":\"Jordan\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":98.058,\"constructor\":\"BAR\"},{\"driver\":\"Jarno Trulli\",\"fastest\":98,\"constructor\":\"Renault\"},{\"driver\":\"Eddie Irvine\",\"fastest\":98.647,\"constructor\":\"Jaguar\"},{\"driver\":\"Mark Webber\",\"fastest\":100.232,\"constructor\":\"Minardi\"},{\"driver\":\"Mika Salo\",\"fastest\":97.761,\"constructor\":\"Toyota\"}]},\"2003\":{\"Australian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":87.759,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":87.942,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":87.724,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":88.17,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":89.096,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":89.274,\"constructor\":\"Jordan\"},{\"driver\":\"Antônio Pizzonia\",\"fastest\":89.217,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":88.6,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":91.785,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":89.694,\"constructor\":\"Toyota\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":96.412,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":97.787,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":96.764,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":97.078,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":98.528,\"constructor\":\"Sauber\"},{\"driver\":\"Ralph Firman\",\"fastest\":99.665,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":98.464,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":98.413,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":99.667,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":98.156,\"constructor\":\"Toyota\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":82.032,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":84.778,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":83.132,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.77,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":83.089,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":83.454,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":84.956,\"constructor\":\"Jaguar\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":82.713,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":88.01,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":87.08,\"constructor\":\"Toyota\"}],\"San Marino Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":82.491,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":82.946,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.81,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.844,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":84.874,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":84.73,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":84.258,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":83.972,\"constructor\":\"BAR\"},{\"driver\":\"Justin Wilson\",\"fastest\":86.354,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":84.705,\"constructor\":\"Toyota\"}],\"Spanish Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":80.143,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":80.798,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":82.577,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.476,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":81.791,\"constructor\":\"Sauber\"},{\"driver\":\"Ralph Firman\",\"fastest\":82.719,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":81.967,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":81.3,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":82.942,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":80.803,\"constructor\":\"Toyota\"}],\"Austrian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":68.337,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":70.112,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":69.423,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":70.358,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":70.516,\"constructor\":\"Sauber\"},{\"driver\":\"Ralph Firman\",\"fastest\":70.659,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":68.966,\"constructor\":\"Jaguar\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":69.764,\"constructor\":\"BAR\"},{\"driver\":\"Justin Wilson\",\"fastest\":71.267,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":70.466,\"constructor\":\"Toyota\"}],\"Monaco Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":74.707,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":74.768,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":74.545,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.397,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.835,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.647,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":78.004,\"constructor\":\"Jaguar\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":76.292,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":79.146,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":76.282,\"constructor\":\"Toyota\"}],\"Canadian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":76.368,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":76.349,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.699,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.04,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":77.769,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":77.186,\"constructor\":\"Jordan\"},{\"driver\":\"Antônio Pizzonia\",\"fastest\":77.324,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":77.562,\"constructor\":\"BAR\"},{\"driver\":\"Justin Wilson\",\"fastest\":78.039,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":77.787,\"constructor\":\"Toyota\"}],\"European Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":92.904,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":92.826,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":92.621,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.307,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":93.994,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":94.656,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":94.191,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":94.208,\"constructor\":\"BAR\"},{\"driver\":\"Justin Wilson\",\"fastest\":96.709,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":93.398,\"constructor\":\"Toyota\"}],\"French Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.303,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":75.512,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":75.981,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.025,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":78.099,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.093,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":77.068,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":77.149,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":78.754,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":77.398,\"constructor\":\"Toyota\"}],\"British Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":82.236,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":82.938,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":82.692,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.797,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":83.933,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":84.823,\"constructor\":\"Jordan\"},{\"driver\":\"Antônio Pizzonia\",\"fastest\":83.158,\"constructor\":\"Jaguar\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":83.705,\"constructor\":\"BAR\"},{\"driver\":\"Justin Wilson\",\"fastest\":85.859,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":83.463,\"constructor\":\"Toyota\"}],\"German Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.081,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":74.917,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":76.003,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":75.74,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.036,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":78.145,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":77.754,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":77.43,\"constructor\":\"BAR\"},{\"driver\":\"Nicolas Kiesa\",\"fastest\":80.171,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":75.883,\"constructor\":\"Toyota\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":83.207,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":82.095,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.372,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":82.565,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":84.267,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":85.081,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":83.156,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":83.376,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":86.559,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":83.04,\"constructor\":\"Toyota\"}],\"Italian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":81.832,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":82.126,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.032,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.195,\"constructor\":\"Renault\"},{\"driver\":\"Heinz-Harald Frentzen\",\"fastest\":83.518,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":85.133,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":83.778,\"constructor\":\"Jaguar\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":83.039,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":85.816,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":83.303,\"constructor\":\"Toyota\"}],\"United States Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":71.473,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":71.595,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":71.617,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":71.525,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":73.085,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":73.63,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":73.099,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":73.038,\"constructor\":\"BAR\"},{\"driver\":\"Nicolas Kiesa\",\"fastest\":74.737,\"constructor\":\"Minardi\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":73.231,\"constructor\":\"Toyota\"}],\"Japanese Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":93.553,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":93.408,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":93.416,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":94.255,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.991,\"constructor\":\"Sauber\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":95.824,\"constructor\":\"Jordan\"},{\"driver\":\"Mark Webber\",\"fastest\":94.635,\"constructor\":\"Jaguar\"},{\"driver\":\"Jenson Button\",\"fastest\":94.605,\"constructor\":\"BAR\"},{\"driver\":\"Jos Verstappen\",\"fastest\":97.869,\"constructor\":\"Minardi\"},{\"driver\":\"Olivier Panis\",\"fastest\":95.023,\"constructor\":\"Toyota\"}]},\"2004\":{\"Australian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":84.125,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":85.286,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":86.328,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.088,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":85.982,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":86.282,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":85.952,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":87.807,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":87.503,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":90.621,\"constructor\":\"Minardi\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":94.819,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":94.223,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":95.156,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":95.039,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":94.967,\"constructor\":\"BAR\"},{\"driver\":\"Felipe Massa\",\"fastest\":96.57,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":96.922,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":95.951,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":97.433,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":99.911,\"constructor\":\"Minardi\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":90.252,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":90.781,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":91.861,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":90.654,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":90.96,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":92.329,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":92.277,\"constructor\":\"Jaguar\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":92.319,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":93.284,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":94.555,\"constructor\":\"Minardi\"}],\"San Marino Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":80.411,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":81.689,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.5,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":81.65,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":81.201,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.654,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":82.931,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":82.861,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":83.381,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":86.075,\"constructor\":\"Minardi\"}],\"Spanish Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":77.45,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":78.262,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":78.842,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":77.556,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":77.495,\"constructor\":\"BAR\"},{\"driver\":\"Felipe Massa\",\"fastest\":78.819,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":78.617,\"constructor\":\"Jaguar\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":79.112,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.971,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":82.323,\"constructor\":\"Minardi\"}],\"Monaco Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":74.439,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":75.395,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.203,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":74.87,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":75.22,\"constructor\":\"BAR\"},{\"driver\":\"Felipe Massa\",\"fastest\":77.151,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":77.466,\"constructor\":\"Jaguar\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":76.232,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.262,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":81.592,\"constructor\":\"Minardi\"}],\"European Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":89.468,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":91.424,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":91.67,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":91.065,\"constructor\":\"Renault\"},{\"driver\":\"Takuma Sato\",\"fastest\":90.004,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":91.413,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":91.893,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":92.506,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":92.121,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":94.666,\"constructor\":\"Minardi\"}],\"Canadian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":73.622,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":74.04,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":74.752,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.179,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":74.246,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":75.078,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":75.731,\"constructor\":\"Jaguar\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":75.652,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":75.89,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":77.516,\"constructor\":\"Minardi\"}],\"United States Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":70.399,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":71.255,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":71.248,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":71.187,\"constructor\":\"Renault\"},{\"driver\":\"Takuma Sato\",\"fastest\":70.727,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":72.129,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":72.14,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":70.933,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":73.095,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":74.097,\"constructor\":\"Minardi\"}],\"French Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":75.377,\"constructor\":\"Ferrari\"},{\"driver\":\"Marc Gené\",\"fastest\":76.07,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":75.791,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.551,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":75.971,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.699,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":75.956,\"constructor\":\"Jaguar\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":76.937,\"constructor\":\"Toyota\"},{\"driver\":\"Giorgio Pantano\",\"fastest\":77.641,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":78.932,\"constructor\":\"Minardi\"}],\"British Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":78.739,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":79.968,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":79.554,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.442,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":79.488,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.813,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":80.768,\"constructor\":\"Jaguar\"},{\"driver\":\"Cristiano da Matta\",\"fastest\":80.768,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":81.72,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":84.296,\"constructor\":\"Minardi\"}],\"German Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":73.783,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":74.446,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":73.78,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.265,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":74.117,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":75.635,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":74.883,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":74.247,\"constructor\":\"Toyota\"},{\"driver\":\"Giorgio Pantano\",\"fastest\":76.058,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":78.372,\"constructor\":\"Minardi\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":79.071,\"constructor\":\"Ferrari\"},{\"driver\":\"Antônio Pizzonia\",\"fastest\":80.501,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":81.134,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.275,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":80.425,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.022,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":80.825,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":81.31,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":81.518,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":84.601,\"constructor\":\"Minardi\"}],\"Belgian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":105.503,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":106.547,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":105.108,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":105.87,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":107.151,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":106.758,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":107.509,\"constructor\":\"Jaguar\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":107.576,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":110.471,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":111.031,\"constructor\":\"Minardi\"}],\"Italian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":81.046,\"constructor\":\"Ferrari\"},{\"driver\":\"Antônio Pizzonia\",\"fastest\":82.246,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":82.889,\"constructor\":\"McLaren\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.855,\"constructor\":\"Renault\"},{\"driver\":\"Takuma Sato\",\"fastest\":82.66,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.615,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":83.09,\"constructor\":\"Jaguar\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":83.41,\"constructor\":\"Toyota\"},{\"driver\":\"Giorgio Pantano\",\"fastest\":84.061,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":86.356,\"constructor\":\"Minardi\"}],\"Chinese Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":92.238,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":93.108,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":92.876,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.625,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":92.935,\"constructor\":\"BAR\"},{\"driver\":\"Felipe Massa\",\"fastest\":93.483,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":94.893,\"constructor\":\"Jaguar\"},{\"driver\":\"Ricardo Zonta\",\"fastest\":94.269,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.717,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":97.377,\"constructor\":\"Minardi\"}],\"Japanese Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":92.73,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":93.467,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":93.917,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":94.279,\"constructor\":\"Renault\"},{\"driver\":\"Takuma Sato\",\"fastest\":93.742,\"constructor\":\"BAR\"},{\"driver\":\"Felipe Massa\",\"fastest\":93.614,\"constructor\":\"Sauber\"},{\"driver\":\"Mark Webber\",\"fastest\":94.229,\"constructor\":\"Jaguar\"},{\"driver\":\"Olivier Panis\",\"fastest\":94.438,\"constructor\":\"Toyota\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":95.524,\"constructor\":\"Jordan\"},{\"driver\":\"Gianmaria Bruni\",\"fastest\":99.352,\"constructor\":\"Minardi\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":71.672,\"constructor\":\"Ferrari\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":71.473,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":71.562,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":72.118,\"constructor\":\"Renault\"},{\"driver\":\"Takuma Sato\",\"fastest\":71.941,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":71.877,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":72.891,\"constructor\":\"Jaguar\"},{\"driver\":\"Jarno Trulli\",\"fastest\":72.435,\"constructor\":\"Toyota\"},{\"driver\":\"Timo Glock\",\"fastest\":73.905,\"constructor\":\"Jordan\"},{\"driver\":\"Zsolt Baumgartner\",\"fastest\":74.743,\"constructor\":\"Minardi\"}]},\"2005\":{\"Australian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":86.233,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":86.26,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.683,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":86.493,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.255,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":86.893,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":86.627,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":86.536,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":87.97,\"constructor\":\"Jordan\"},{\"driver\":\"Patrick Friesacher\",\"fastest\":92.852,\"constructor\":\"Minardi\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":96.878,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":97.912,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":95.899,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":95.712,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":95.483,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":97.212,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":96.79,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":95.816,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":99.833,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":102.465,\"constructor\":\"Minardi\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":92.886,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":92.411,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":91.713,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":93.055,\"constructor\":\"Williams\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":91.447,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":93.326,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":93.417,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":92.324,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":95.744,\"constructor\":\"Jordan\"},{\"driver\":\"Patrick Friesacher\",\"fastest\":96.432,\"constructor\":\"Minardi\"}],\"San Marino Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":81.858,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":82.604,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.133,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":83.917,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Wurz\",\"fastest\":83.023,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":83.602,\"constructor\":\"Sauber\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":83.488,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":84.022,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":84.094,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":87.42,\"constructor\":\"Minardi\"}],\"Spanish Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":75.648,\"constructor\":\"Ferrari\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":75.641,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.519,\"constructor\":\"Williams\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":75.771,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.802,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":76.947,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":76.469,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":78.998,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":80.124,\"constructor\":\"Minardi\"}],\"Monaco Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":75.842,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.6,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":76.971,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":75.921,\"constructor\":\"McLaren\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":77.482,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":77.693,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":76.812,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":80.747,\"constructor\":\"Jordan\"},{\"driver\":\"Patrick Friesacher\",\"fastest\":79.037,\"constructor\":\"Minardi\"}],\"European Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":91.028,\"constructor\":\"Ferrari\"},{\"driver\":\"Takuma Sato\",\"fastest\":91.889,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":90.711,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":91.124,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":90.94,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":92.329,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":91.306,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":91.724,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":93.292,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":95.047,\"constructor\":\"Minardi\"}],\"Canadian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":74.868,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":75.189,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.727,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":75.401,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":74.384,\"constructor\":\"McLaren\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":75.945,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":76.299,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":75.827,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":77.015,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":78.462,\"constructor\":\"Minardi\"}],\"United States Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":71.497,\"constructor\":\"Ferrari\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":73.237,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":73.907,\"constructor\":\"Minardi\"}],\"French Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":77.714,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":77.408,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.502,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":78.102,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.423,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":77.805,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":77.611,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.792,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":80.004,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":81.077,\"constructor\":\"Minardi\"}],\"British Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":81.675,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":81.993,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.159,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":83.291,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.502,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":82.466,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":83.089,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":81.96,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":84.247,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":86.182,\"constructor\":\"Minardi\"}],\"German Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":76.099,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":75.843,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.235,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.607,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":74.873,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.288,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":76.233,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":76.073,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":78.106,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":78.425,\"constructor\":\"Minardi\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":81.476,\"constructor\":\"Ferrari\"},{\"driver\":\"Takuma Sato\",\"fastest\":82.399,\"constructor\":\"BAR\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.506,\"constructor\":\"Renault\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":82.053,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.219,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":83.048,\"constructor\":\"Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":81.842,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":84.446,\"constructor\":\"Jordan\"},{\"driver\":\"Robert Doornbos\",\"fastest\":85.646,\"constructor\":\"Minardi\"}],\"Turkish Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":86.635,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":85.79,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.524,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":86.791,\"constructor\":\"Williams\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":84.77,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":86.514,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":86.374,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":86.178,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":89.035,\"constructor\":\"Jordan\"},{\"driver\":\"Robert Doornbos\",\"fastest\":89.229,\"constructor\":\"Minardi\"}],\"Italian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":83.466,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":83.161,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":82.146,\"constructor\":\"Renault\"},{\"driver\":\"Antônio Pizzonia\",\"fastest\":82.87,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.504,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":83.365,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":83.633,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.831,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":84.81,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":84.966,\"constructor\":\"Minardi\"}],\"Belgian Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":112.59,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":113.323,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":116.131,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":112.287,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":113.81,\"constructor\":\"McLaren\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":114.251,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":112.582,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":111.453,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":115.885,\"constructor\":\"Jordan\"},{\"driver\":\"Robert Doornbos\",\"fastest\":121.148,\"constructor\":\"Minardi\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":72.8,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":73.746,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":72.653,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":73.59,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":72.268,\"constructor\":\"McLaren\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":74.054,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":73.8,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":73.57,\"constructor\":\"Toyota\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":74.906,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":75.527,\"constructor\":\"Minardi\"}],\"Japanese Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":92.763,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":92.754,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":91.599,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":93.022,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":91.54,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":93.232,\"constructor\":\"Sauber\"},{\"driver\":\"David Coulthard\",\"fastest\":93.023,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":92.795,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":95.458,\"constructor\":\"Jordan\"},{\"driver\":\"Christijan Albers\",\"fastest\":96.039,\"constructor\":\"Minardi\"}],\"Chinese Grand Prix\":[{\"driver\":\"Rubens Barrichello\",\"fastest\":95.011,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":94.766,\"constructor\":\"BAR\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.536,\"constructor\":\"Renault\"},{\"driver\":\"Mark Webber\",\"fastest\":94.271,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.242,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":94.094,\"constructor\":\"Sauber\"},{\"driver\":\"Christian Klien\",\"fastest\":93.727,\"constructor\":\"Red Bull\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":94.035,\"constructor\":\"Toyota\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":96.563,\"constructor\":\"Jordan\"},{\"driver\":\"Robert Doornbos\",\"fastest\":96.894,\"constructor\":\"Minardi\"}]},\"2006\":{\"Bahrain Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":92.534,\"constructor\":\"Renault\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":92.771,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":92.523,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":94.112,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":92.408,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":92.729,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":93.212,\"constructor\":\"Red Bull\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":93.694,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":95.94,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":93.108,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":97.104,\"constructor\":\"Super Aguri\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":94.803,\"constructor\":\"Renault\"},{\"driver\":\"Juan Pablo Montoya\",\"fastest\":95.566,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":95.647,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":95.686,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":96.771,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":95.604,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":98.078,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":95.751,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":98.198,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":97.313,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":100.199,\"constructor\":\"Super Aguri\"}],\"Australian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":86.189,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.045,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":87.18,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":87.81,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":87.8,\"constructor\":\"Williams\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":87.69,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":88.25,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":87.7,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":89.238,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":87.988,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":90.574,\"constructor\":\"Super Aguri\"}],\"San Marino Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":84.569,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":85.027,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":84.624,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.316,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":85.488,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":85.347,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":86.759,\"constructor\":\"Red Bull\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":85.438,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":87.16,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":85.679,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":89.1,\"constructor\":\"Super Aguri\"}],\"European Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":92.532,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":92.472,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":92.099,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":93.607,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":93.579,\"constructor\":\"Williams\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":93.952,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":94.553,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.035,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":95.428,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":94.091,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":96.706,\"constructor\":\"Super Aguri\"}],\"Spanish Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":76.723,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":77.357,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.648,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":78.465,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.861,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":77.367,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":77.862,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":77.869,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":79.265,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":78.488,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":80.411,\"constructor\":\"Super Aguri\"}],\"Monaco Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":75.671,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":75.325,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":75.143,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.18,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":75.68,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":77.3,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":77.849,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":77.319,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":77.329,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":77.481,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":78.793,\"constructor\":\"Super Aguri\"}],\"British Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":81.599,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.461,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":81.934,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.744,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":82.916,\"constructor\":\"Williams\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.224,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":83.712,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":82.706,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":83.977,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":84.221,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":86.52,\"constructor\":\"Super Aguri\"}],\"Canadian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":75.911,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":75.841,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":75.993,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.503,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":77.705,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":78.001,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":77.576,\"constructor\":\"Red Bull\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":77.394,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":79.291,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":77.72,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":80.49,\"constructor\":\"Super Aguri\"}],\"United States Grand Prix\":[{\"driver\":\"Giancarlo Fisichella\",\"fastest\":73.131,\"constructor\":\"Renault\"},{\"driver\":\"Michael Schumacher\",\"fastest\":72.719,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":73.225,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":74.707,\"constructor\":\"Williams\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":73.611,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":74.73,\"constructor\":\"Red Bull\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":73.934,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":74.731,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":74.286,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":103.802,\"constructor\":\"Super Aguri\"}],\"French Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":77.77,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":77.625,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":77.111,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":77.809,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":78.796,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":78.51,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":78.968,\"constructor\":\"Red Bull\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":77.906,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":79.356,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":78.241,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Franck Montagny\",\"fastest\":80.113,\"constructor\":\"Super Aguri\"}],\"German Grand Prix\":[{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.981,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.475,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":76.357,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":76.763,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":76.812,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":76.818,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":77.719,\"constructor\":\"Red Bull\"},{\"driver\":\"Jacques Villeneuve\",\"fastest\":78.904,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":78.247,\"constructor\":\"MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":77.407,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":79.413,\"constructor\":\"Super Aguri\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":89.408,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":84.315,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":83.516,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":85.247,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":98.964,\"constructor\":\"Williams\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":84.678,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":87.572,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":85.801,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":86.117,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":86.249,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":90.957,\"constructor\":\"Super Aguri\"}],\"Turkish Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":88.245,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":88.959,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":88.005,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":89.084,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":90.071,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":88.474,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":90.025,\"constructor\":\"Red Bull\"},{\"driver\":\"Robert Kubica\",\"fastest\":89.723,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":90.403,\"constructor\":\"MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":89.933,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":91.814,\"constructor\":\"Super Aguri\"}],\"Italian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":83.121,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.559,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":82.575,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":83.869,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":84.197,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":83.518,\"constructor\":\"Honda\"},{\"driver\":\"Christian Klien\",\"fastest\":84.571,\"constructor\":\"Red Bull\"},{\"driver\":\"Robert Kubica\",\"fastest\":83.111,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":84.822,\"constructor\":\"Spyker MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":84.764,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":85.676,\"constructor\":\"Super Aguri\"}],\"Chinese Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":97.586,\"constructor\":\"Renault\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":99.149,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":98.553,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":99.823,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":99.907,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":99.206,\"constructor\":\"Honda\"},{\"driver\":\"Robert Doornbos\",\"fastest\":99.801,\"constructor\":\"Red Bull\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":99.164,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Christijan Albers\",\"fastest\":101.483,\"constructor\":\"Spyker MF1\"},{\"driver\":\"Scott Speed\",\"fastest\":99.681,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":100.856,\"constructor\":\"Super Aguri\"}],\"Japanese Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":92.676,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.344,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":92.792,\"constructor\":\"Ferrari\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":93.607,\"constructor\":\"Toyota\"},{\"driver\":\"Nico Rosberg\",\"fastest\":94.802,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":93.451,\"constructor\":\"Honda\"},{\"driver\":\"David Coulthard\",\"fastest\":95.052,\"constructor\":\"Red Bull\"},{\"driver\":\"Robert Kubica\",\"fastest\":93.509,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":95.26,\"constructor\":\"Spyker MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":94.131,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Takuma Sato\",\"fastest\":95.082,\"constructor\":\"Super Aguri\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":72.961,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":73.281,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":72.162,\"constructor\":\"Ferrari\"},{\"driver\":\"Jarno Trulli\",\"fastest\":74.882,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":103.205,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":73.053,\"constructor\":\"Honda\"},{\"driver\":\"Robert Doornbos\",\"fastest\":73.7,\"constructor\":\"Red Bull\"},{\"driver\":\"Robert Kubica\",\"fastest\":74.117,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Tiago Monteiro\",\"fastest\":74.41,\"constructor\":\"Spyker MF1\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":73.687,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":73.379,\"constructor\":\"Super Aguri\"}]},\"2007\":{\"Australian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":86.314,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":86.892,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":85.235,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":88.098,\"constructor\":\"Honda\"},{\"driver\":\"Robert Kubica\",\"fastest\":86.642,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":87.796,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":87.501,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":86.721,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":88.282,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":88.687,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":88.487,\"constructor\":\"Super Aguri\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":96.701,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":97.81,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":97.199,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":98.566,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":97.417,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":98.016,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":98.098,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":97.704,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":98.447,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Christijan Albers\",\"fastest\":101.495,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":98.496,\"constructor\":\"Super Aguri\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":94.27,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":95.2,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":94.067,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":95.842,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.47,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":95.153,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":95.384,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":95.556,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":95.723,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":96.772,\"constructor\":\"Spyker\"},{\"driver\":\"Anthony Davidson\",\"fastest\":96.111,\"constructor\":\"Super Aguri\"}],\"Spanish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":82.876,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":82.98,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":82.68,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":84.186,\"constructor\":\"Honda\"},{\"driver\":\"Robert Kubica\",\"fastest\":83.129,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":84.003,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":83.524,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":83.693,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":85.207,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":85.191,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":84.11,\"constructor\":\"Super Aguri\"}],\"Monaco Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":75.284,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.254,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.183,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":76.802,\"constructor\":\"Honda\"},{\"driver\":\"Robert Kubica\",\"fastest\":76.006,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":77.231,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":76.786,\"constructor\":\"Red Bull\"},{\"driver\":\"Alexander Wurz\",\"fastest\":76.658,\"constructor\":\"Williams\"},{\"driver\":\"Scott Speed\",\"fastest\":76.867,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":77.678,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":77.183,\"constructor\":\"Super Aguri\"}],\"Canadian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":76.367,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":77.411,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.849,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":78.543,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.696,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":77.91,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":77.618,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.156,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":79.375,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Christijan Albers\",\"fastest\":79.254,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":78.035,\"constructor\":\"Super Aguri\"}],\"United States Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":73.222,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":73.998,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":73.117,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":74.703,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":73.414,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":74.016,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":74.004,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":74.066,\"constructor\":\"Williams\"},{\"driver\":\"Scott Speed\",\"fastest\":75.092,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":74.858,\"constructor\":\"Spyker\"},{\"driver\":\"Anthony Davidson\",\"fastest\":74.066,\"constructor\":\"Super Aguri\"}],\"French Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":76.495,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":76.703,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.099,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":76.77,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.875,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":76.966,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":77.249,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.011,\"constructor\":\"Williams\"},{\"driver\":\"Scott Speed\",\"fastest\":77.934,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":78.091,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":77.796,\"constructor\":\"Super Aguri\"}],\"British Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":81.117,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.136,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.638,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":83.387,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":81.991,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":82.51,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":83.118,\"constructor\":\"Red Bull\"},{\"driver\":\"Alexander Wurz\",\"fastest\":82.693,\"constructor\":\"Williams\"},{\"driver\":\"Scott Speed\",\"fastest\":83.57,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Christijan Albers\",\"fastest\":84.39,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":83.413,\"constructor\":\"Super Aguri\"}],\"European Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":93.231,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":94.603,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":92.853,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":95.632,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":94.354,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":94.496,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":94.316,\"constructor\":\"Red Bull\"},{\"driver\":\"Alexander Wurz\",\"fastest\":94.235,\"constructor\":\"Williams\"},{\"driver\":\"Scott Speed\",\"fastest\":129.078,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Markus Winkelhock\",\"fastest\":102.783,\"constructor\":\"Spyker\"},{\"driver\":\"Anthony Davidson\",\"fastest\":95.282,\"constructor\":\"Super Aguri\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":80.171,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":80.935,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.047,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.004,\"constructor\":\"Honda\"},{\"driver\":\"Robert Kubica\",\"fastest\":80.419,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":80.961,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":80.915,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":80.672,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":81.915,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":82.263,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":80.98,\"constructor\":\"Super Aguri\"}],\"Turkish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":87.963,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":88.603,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":87.295,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":88.873,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":88.319,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Ralf Schumacher\",\"fastest\":88.924,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":89.068,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":88.536,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":89.563,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":90.617,\"constructor\":\"Spyker\"},{\"driver\":\"Anthony Davidson\",\"fastest\":89.658,\"constructor\":\"Super Aguri\"}],\"Italian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":82.871,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":84.226,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":83.37,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":84.532,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":83.681,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":84.622,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":84.824,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":84.472,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":85.313,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":85.377,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":84.669,\"constructor\":\"Super Aguri\"}],\"Belgian Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":108.182,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":109.6,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":108.036,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":110.678,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":108.663,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":108.99,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":110.049,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":109.769,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":110.73,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":110.902,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":110.886,\"constructor\":\"Super Aguri\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.193,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":89.655,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":89.588,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":91.06,\"constructor\":\"Honda\"},{\"driver\":\"Robert Kubica\",\"fastest\":89.021,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":92.414,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":88.94,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":89.926,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":89.057,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":91.891,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":91.507,\"constructor\":\"Super Aguri\"}],\"Chinese Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":97.991,\"constructor\":\"McLaren\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":98.9,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":97.454,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":98.913,\"constructor\":\"Honda\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":99.325,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":99.911,\"constructor\":\"Toyota\"},{\"driver\":\"Mark Webber\",\"fastest\":99.371,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":99.233,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":99.654,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":100.764,\"constructor\":\"Spyker\"},{\"driver\":\"Takuma Sato\",\"fastest\":100.126,\"constructor\":\"Super Aguri\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":72.506,\"constructor\":\"McLaren\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":74.891,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":72.445,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":74.039,\"constructor\":\"Honda\"},{\"driver\":\"Robert Kubica\",\"fastest\":72.686,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Jarno Trulli\",\"fastest\":73.361,\"constructor\":\"Toyota\"},{\"driver\":\"David Coulthard\",\"fastest\":74.195,\"constructor\":\"Red Bull\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":73.116,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":73.643,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":75.202,\"constructor\":\"Spyker\"},{\"driver\":\"Anthony Davidson\",\"fastest\":74.329,\"constructor\":\"Super Aguri\"}]},\"2008\":{\"Australian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":87.903,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":87.739,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":88.603,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":88.09,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":89.502,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":89.31,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":89.534,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":88.736,\"constructor\":\"Honda\"},{\"driver\":\"Takuma Sato\",\"fastest\":90.892,\"constructor\":\"Super Aguri\"},{\"driver\":\"Adrian Sutil\",\"fastest\":92.021,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":87.418,\"constructor\":\"McLaren\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":95.405,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":95.366,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":96.288,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":96.782,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":96.206,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":96.068,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":96.87,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":95.715,\"constructor\":\"Honda\"},{\"driver\":\"Anthony Davidson\",\"fastest\":98.171,\"constructor\":\"Super Aguri\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":96.962,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":95.462,\"constructor\":\"McLaren\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Felipe Massa\",\"fastest\":93.6,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":93.565,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":95.129,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":94.072,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":94.305,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":94.204,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":95.333,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":94.855,\"constructor\":\"Honda\"},{\"driver\":\"Anthony Davidson\",\"fastest\":95.324,\"constructor\":\"Super Aguri\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":95.057,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":93.193,\"constructor\":\"McLaren\"}],\"Spanish Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.67,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":82.106,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":82.683,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":83.319,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":82.564,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.758,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":87.449,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":82.353,\"constructor\":\"Honda\"},{\"driver\":\"Takuma Sato\",\"fastest\":84.617,\"constructor\":\"Super Aguri\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":83.439,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":82.017,\"constructor\":\"McLaren\"}],\"Turkish Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.506,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":86.78,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.28,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":87.795,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":87.63,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":87.926,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":88.18,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":87.998,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":88.78,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":86.529,\"constructor\":\"McLaren\"}],\"Monaco Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.689,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":77.933,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":77.869,\"constructor\":\"Renault\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":79.91,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":79.036,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":79.618,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":78.787,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":79.574,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":82.039,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":77.282,\"constructor\":\"McLaren\"}],\"Canadian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":77.387,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":77.43,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":78.225,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.977,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":78.085,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":78.87,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":78.532,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":78.301,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":79.066,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":77.506,\"constructor\":\"McLaren\"}],\"French Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.63,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":77.172,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":77.641,\"constructor\":\"Renault\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":78.054,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":77.507,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":77.567,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":77.76,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":77.969,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":78.462,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":77.134,\"constructor\":\"McLaren\"}],\"British Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":92.15,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":92.719,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.133,\"constructor\":\"Renault\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":94.277,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":92.952,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":93.808,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":93.367,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":93.376,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":94.93,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":92.817,\"constructor\":\"McLaren\"}],\"German Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.342,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":75.987,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":76.91,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.38,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":76.994,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":76.712,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":76.772,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":77.636,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":77.889,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":76.039,\"constructor\":\"McLaren\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.195,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":81.941,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":81.537,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":82.397,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":82.125,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":81.638,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":83.22,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":82.397,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":82.641,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":81.493,\"constructor\":\"McLaren\"}],\"European Grand Prix\":[{\"driver\":\"Felipe Massa\",\"fastest\":98.708,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":99.33,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":99.544,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":99.577,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":100.264,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":99.535,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":99.485,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":100.593,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":100.353,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":98.884,\"constructor\":\"McLaren\"}],\"Belgian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":107.93,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":108.965,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":109.238,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":110.656,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":109.515,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":110.255,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":109.002,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":110.671,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":110.487,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":108.135,\"constructor\":\"McLaren\"}],\"Italian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":88.047,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":89.807,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":89.961,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":90.019,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":89.681,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":89.948,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":89.258,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":89.827,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":93.458,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":89.721,\"constructor\":\"McLaren\"}],\"Singapore Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":105.599,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":106.899,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":105.768,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":106.454,\"constructor\":\"Williams\"},{\"driver\":\"David Coulthard\",\"fastest\":107.562,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":106.972,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":107.271,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":108.128,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":109.101,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":106.072,\"constructor\":\"McLaren\"}],\"Japanese Grand Prix\":[{\"driver\":\"Felipe Massa\",\"fastest\":78.426,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":79.292,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":79.101,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":79.531,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":79.82,\"constructor\":\"Red Bull\"},{\"driver\":\"Jarno Trulli\",\"fastest\":79.524,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":79.262,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.575,\"constructor\":\"Honda\"},{\"driver\":\"Adrian Sutil\",\"fastest\":81.189,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":79.258,\"constructor\":\"McLaren\"}],\"Chinese Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":96.483,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":96.498,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":96.659,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":97.246,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":97.68,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":96.727,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":97.212,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":97.773,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":98.372,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":96.325,\"constructor\":\"McLaren\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Felipe Massa\",\"fastest\":73.736,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":74.375,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.229,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":74.934,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":75.033,\"constructor\":\"Red Bull\"},{\"driver\":\"Timo Glock\",\"fastest\":74.057,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":74.214,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":74.759,\"constructor\":\"Honda\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":75.212,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":74.159,\"constructor\":\"McLaren\"}]},\"2009\":{\"Australian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":89.02,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":88.488,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":87.988,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":88.712,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":88.416,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":89.23,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":88.14,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":87.706,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":88.943,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":88.02,\"constructor\":\"Brawn\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":99.141,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":98.453,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":99.084,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.006,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":97.591,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":98.938,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":97.672,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":97.598,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":99.407,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":96.641,\"constructor\":\"Brawn\"}],\"Chinese Grand Prix\":[{\"driver\":\"Heikki Kovalainen\",\"fastest\":114.516,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":115.396,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":114.158,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":114.481,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":112.703,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":113.474,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":112.627,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":114.243,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":114.777,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":112.592,\"constructor\":\"Brawn\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":94.915,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":95.065,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":95.706,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":95.441,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":94.556,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":95.41,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":94.756,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":95.816,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":96.219,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":94.588,\"constructor\":\"Brawn\"}],\"Spanish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":83.839,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":83.089,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":83.878,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.42,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":84.134,\"constructor\":\"Toyota\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":83.09,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":83.621,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":83.796,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.762,\"constructor\":\"Brawn\"}],\"Monaco Grand Prix\":[{\"driver\":\"Heikki Kovalainen\",\"fastest\":75.672,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":75.154,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":76.268,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.371,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":76.011,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":76.178,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":75.321,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":75.772,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":76.245,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":75.19,\"constructor\":\"Brawn\"}],\"Turkish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.562,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":88.061,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":88.008,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":88.34,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":87.868,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":88.624,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":87.622,\"constructor\":\"Red Bull\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":87.988,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":89.192,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":87.579,\"constructor\":\"Brawn\"}],\"British Grand Prix\":[{\"driver\":\"Heikki Kovalainen\",\"fastest\":82.418,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":81.509,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":81.956,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":81.852,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":81.671,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Bourdais\",\"fastest\":82.466,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":80.735,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":81.054,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":81.81,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":81.189,\"constructor\":\"Brawn\"}],\"German Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":95.367,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":94.458,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":94.537,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.365,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":93.654,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":96.279,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":94.003,\"constructor\":\"Red Bull\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":94.238,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":95.301,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":94.252,\"constructor\":\"Brawn\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":82.479,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":82.434,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":83.224,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Nelson Piquet Jr.\",\"fastest\":83.418,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":82.506,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":82.955,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":81.931,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":82.468,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":83.174,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":82.706,\"constructor\":\"Brawn\"}],\"European Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":99.056,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.207,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":99.374,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":99.428,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":98.683,\"constructor\":\"Toyota\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":100.935,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":99.528,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":99.329,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":99.622,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":98.874,\"constructor\":\"Brawn\"}],\"Belgian Grand Prix\":[{\"driver\":\"Heikki Kovalainen\",\"fastest\":108.348,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":107.674,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":107.371,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":108.634,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":107.736,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":107.763,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":107.263,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":107.766,\"constructor\":\"Williams\"},{\"driver\":\"Giancarlo Fisichella\",\"fastest\":107.737,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":108.257,\"constructor\":\"Brawn\"}],\"Italian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":84.802,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":84.761,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":85.488,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.199,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":85.7,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":87.846,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":85.194,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":85.901,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":84.739,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":84.935,\"constructor\":\"Brawn\"}],\"Singapore Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":108.345,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":108.391,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":108.847,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":108.24,\"constructor\":\"Renault\"},{\"driver\":\"Timo Glock\",\"fastest\":108.396,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":110.636,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":108.398,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":108.352,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":109.852,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":108.369,\"constructor\":\"Brawn\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":93.259,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":92.999,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":93.334,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.946,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":93.152,\"constructor\":\"Toyota\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":94.049,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":92.569,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":93.595,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":93.668,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":93.251,\"constructor\":\"Brawn\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Heikki Kovalainen\",\"fastest\":74.303,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":74.558,\"constructor\":\"Ferrari\"},{\"driver\":\"Robert Kubica\",\"fastest\":74.155,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":74.789,\"constructor\":\"Renault\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":74.676,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":74.563,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":73.733,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":74.37,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":74.99,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":73.95,\"constructor\":\"Brawn\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":100.367,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":100.843,\"constructor\":\"Ferrari\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":100.672,\"constructor\":\"BMW Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":100.757,\"constructor\":\"Renault\"},{\"driver\":\"Jarno Trulli\",\"fastest\":100.723,\"constructor\":\"Toyota\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":100.326,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":100.279,\"constructor\":\"Red Bull\"},{\"driver\":\"Kazuki Nakajima\",\"fastest\":100.754,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":100.904,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":100.449,\"constructor\":\"Brawn\"}]},\"2010\":{\"Bahrain Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":119.56,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":120.204,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":119.487,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":118.287,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":119.833,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":120.474,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":119.393,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":119.964,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":122.701,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":129.127,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":121.65,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":127.062,\"constructor\":\"Virgin\"}],\"Australian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.506,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":88.489,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":88.358,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":89.537,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":89.21,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":89.57,\"constructor\":\"Renault\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":89.685,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":89.713,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":93.638,\"constructor\":\"Lotus\"},{\"driver\":\"Karun Chandhok\",\"fastest\":95.045,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":90.587,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":94.23,\"constructor\":\"Virgin\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":97.745,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":98.129,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":97.054,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":97.231,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":99.124,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":98.074,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":98.16,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":97.61,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":103.753,\"constructor\":\"Lotus\"},{\"driver\":\"Karun Chandhok\",\"fastest\":104.79,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":103.34,\"constructor\":\"Sauber\"},{\"driver\":\"Lucas di Grassi\",\"fastest\":103.224,\"constructor\":\"Virgin\"}],\"Chinese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":102.061,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":103.245,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":102.358,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":104.134,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":104.549,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":103.63,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":104.364,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":103.755,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":107.141,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":108.216,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":107.739,\"constructor\":\"Sauber\"},{\"driver\":\"Lucas di Grassi\",\"fastest\":1026.445,\"constructor\":\"Virgin\"}],\"Spanish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":84.357,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":85.455,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":84.828,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":84.846,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":85.728,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":85.466,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":85.845,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":85.655,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":89.564,\"constructor\":\"Lotus\"},{\"driver\":\"Karun Chandhok\",\"fastest\":92.041,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":86.083,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":89.776,\"constructor\":\"Virgin\"}],\"Monaco Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":76.219,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":75.58,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":75.192,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":75.503,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":79.074,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":75.353,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":75.963,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":76.381,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":78.401,\"constructor\":\"Lotus\"},{\"driver\":\"Karun Chandhok\",\"fastest\":79.553,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":78.775,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":80.775,\"constructor\":\"Virgin\"}],\"Turkish Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":89.895,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":89.81,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":89.195,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":89.996,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":90.62,\"constructor\":\"Williams\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":89.165,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":89.959,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":89.535,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":94.363,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":94.247,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":90.421,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":92.265,\"constructor\":\"Virgin\"}],\"Canadian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":77.806,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.832,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":78.148,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":78.207,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":78.912,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":76.972,\"constructor\":\"Renault\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":79.349,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":79.784,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":80.654,\"constructor\":\"Lotus\"},{\"driver\":\"Karun Chandhok\",\"fastest\":81.884,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":80.574,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":81.669,\"constructor\":\"Virgin\"}],\"European Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":98.766,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":98.968,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":99.141,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.889,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":99.489,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":99.542,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":99.803,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":100.084,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":101.77,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":102.927,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":99.517,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":102.319,\"constructor\":\"Virgin\"}],\"British Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":92.758,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":92.952,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":91.967,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":90.874,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":93.615,\"constructor\":\"Williams\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":92.484,\"constructor\":\"Renault\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":94.018,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":92.98,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":96.251,\"constructor\":\"Lotus\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":98.309,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":93.558,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":96.415,\"constructor\":\"Virgin\"}],\"German Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":76.451,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":76.609,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":75.824,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.88,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":76.836,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":77.166,\"constructor\":\"Renault\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":76.596,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":76.971,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":80.664,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":80.861,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":76.527,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":78.211,\"constructor\":\"Virgin\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":84.205,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":85.372,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":82.362,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.195,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":82.811,\"constructor\":\"Williams\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":83.799,\"constructor\":\"Renault\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":85.358,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":85.449,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":87.429,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":88.093,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":84.282,\"constructor\":\"Sauber\"},{\"driver\":\"Lucas di Grassi\",\"fastest\":87.287,\"constructor\":\"Virgin\"}],\"Belgian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":109.069,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":111.688,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":109.395,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":110.111,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":111.864,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":109.807,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":110.477,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":111.576,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":115.103,\"constructor\":\"Lotus\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":115.484,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":111.749,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":115.268,\"constructor\":\"Virgin\"}],\"Italian Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":84.598,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":84.491,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":84.278,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":84.139,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":84.576,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":84.56,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":84.937,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":85.224,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":87.822,\"constructor\":\"Lotus\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":88.875,\"constructor\":\"HRT\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":86.325,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":87.765,\"constructor\":\"Virgin\"}],\"Singapore Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":109.711,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":109.68,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":108.141,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":107.976,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":110.334,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":109.255,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":112.473,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":109.71,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":113.051,\"constructor\":\"Lotus\"},{\"driver\":\"Christian Klien\",\"fastest\":117.766,\"constructor\":\"HRT\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":112.475,\"constructor\":\"Sauber\"},{\"driver\":\"Lucas di Grassi\",\"fastest\":112.513,\"constructor\":\"Virgin\"}],\"Japanese Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":93.529,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":94.853,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":93.474,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.823,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":95.597,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":127.363,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":96.319,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":94.365,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":97.62,\"constructor\":\"Lotus\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":99.806,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":94.486,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":99.813,\"constructor\":\"Virgin\"}],\"Korean Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":110.43,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":111.835,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":110.375,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":110.257,\"constructor\":\"Ferrari\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":111.564,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":111.604,\"constructor\":\"Renault\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":111.371,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":111.962,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":115.018,\"constructor\":\"Lotus\"},{\"driver\":\"Sakon Yamamoto\",\"fastest\":118.313,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":113.086,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":118.102,\"constructor\":\"Virgin\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":73.851,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":74.184,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":74.047,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":73.855,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":74.985,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":75.161,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":74.997,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":75.695,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":77.161,\"constructor\":\"Lotus\"},{\"driver\":\"Christian Klien\",\"fastest\":77.69,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":74.748,\"constructor\":\"Sauber\"},{\"driver\":\"Lucas di Grassi\",\"fastest\":76.767,\"constructor\":\"Virgin\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":101.274,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":101.711,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":101.739,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":102.227,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":102.397,\"constructor\":\"Williams\"},{\"driver\":\"Robert Kubica\",\"fastest\":101.753,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":102.695,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":102.573,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":105.378,\"constructor\":\"Lotus\"},{\"driver\":\"Bruno Senna\",\"fastest\":106.255,\"constructor\":\"HRT\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":102.673,\"constructor\":\"Sauber\"},{\"driver\":\"Lucas di Grassi\",\"fastest\":106.126,\"constructor\":\"Virgin\"}]},\"2011\":{\"Australian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":89.6,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":89.883,\"constructor\":\"McLaren\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":90.064,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Massa\",\"fastest\":88.947,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":93.503,\"constructor\":\"Mercedes\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.962,\"constructor\":\"Sauber\"},{\"driver\":\"Adrian Sutil\",\"fastest\":91.526,\"constructor\":\"Force India\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":90.467,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":92.55,\"constructor\":\"Lotus\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":91.404,\"constructor\":\"Williams\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":94.523,\"constructor\":\"Virgin\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":100.571,\"constructor\":\"Red Bull\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":101.054,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":101.264,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":100.717,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":101.778,\"constructor\":\"Mercedes\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":102.095,\"constructor\":\"Sauber\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":102.659,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Paul di Resta\",\"fastest\":102.883,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":105.516,\"constructor\":\"Williams\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":103.677,\"constructor\":\"Lotus\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":105.346,\"constructor\":\"Virgin\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":106.521,\"constructor\":\"HRT\"}],\"Chinese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":100.415,\"constructor\":\"McLaren\"},{\"driver\":\"Mark Webber\",\"fastest\":98.993,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":101.166,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":101.678,\"constructor\":\"Ferrari\"},{\"driver\":\"Adrian Sutil\",\"fastest\":101.157,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":101.696,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":101.643,\"constructor\":\"Sauber\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":101.261,\"constructor\":\"Renault\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":101.702,\"constructor\":\"Williams\"},{\"driver\":\"Jarno Trulli\",\"fastest\":102.052,\"constructor\":\"Lotus\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":103.384,\"constructor\":\"HRT\"},{\"driver\":\"Timo Glock\",\"fastest\":104.381,\"constructor\":\"Virgin\"}],\"Turkish Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":89.703,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":90.573,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":90.279,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":90.108,\"constructor\":\"McLaren\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":90.158,\"constructor\":\"Renault\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":92.044,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":92.07,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":92.695,\"constructor\":\"Lotus\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":89.894,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":90.797,\"constructor\":\"Sauber\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":93.948,\"constructor\":\"HRT\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":94.971,\"constructor\":\"Virgin\"}],\"Spanish Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":88.737,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":87.162,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":86.727,\"constructor\":\"McLaren\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":86.958,\"constructor\":\"Renault\"},{\"driver\":\"Nico Rosberg\",\"fastest\":89.155,\"constructor\":\"Mercedes\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":89.132,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":87.247,\"constructor\":\"Sauber\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":86.891,\"constructor\":\"Williams\"},{\"driver\":\"Adrian Sutil\",\"fastest\":88.791,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":90.618,\"constructor\":\"Lotus\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":92.848,\"constructor\":\"HRT\"},{\"driver\":\"Timo Glock\",\"fastest\":91.635,\"constructor\":\"Virgin\"}],\"Monaco Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":76.234,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":76.463,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.471,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":78.699,\"constructor\":\"Mercedes\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":78.584,\"constructor\":\"Williams\"},{\"driver\":\"Nick Heidfeld\",\"fastest\":77.857,\"constructor\":\"Renault\"},{\"driver\":\"Paul di Resta\",\"fastest\":78.724,\"constructor\":\"Force India\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":78.308,\"constructor\":\"Sauber\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":78.608,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":80.678,\"constructor\":\"Lotus\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":81.391,\"constructor\":\"Virgin\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":81.566,\"constructor\":\"HRT\"}],\"Canadian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":77.217,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":79.148,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":76.956,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":79.138,\"constructor\":\"Mercedes\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":79.054,\"constructor\":\"Renault\"},{\"driver\":\"Paul di Resta\",\"fastest\":79.395,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":80.316,\"constructor\":\"Williams\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":80.213,\"constructor\":\"Sauber\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":79.507,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":82.233,\"constructor\":\"Lotus\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":83.116,\"constructor\":\"HRT\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":82.495,\"constructor\":\"Virgin\"}],\"European Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":101.852,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":102.308,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":102.34,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":103.649,\"constructor\":\"Mercedes\"},{\"driver\":\"Adrian Sutil\",\"fastest\":103.526,\"constructor\":\"Force India\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":103.151,\"constructor\":\"Renault\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":103.134,\"constructor\":\"Williams\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":103.517,\"constructor\":\"Sauber\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":103.579,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Timo Glock\",\"fastest\":106.628,\"constructor\":\"Virgin\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":105.055,\"constructor\":\"Lotus\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":107.418,\"constructor\":\"HRT\"}],\"British Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":94.503,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.391,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":93.666,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":95.301,\"constructor\":\"Force India\"},{\"driver\":\"Sergio Pérez\",\"fastest\":96.656,\"constructor\":\"Sauber\"},{\"driver\":\"Michael Schumacher\",\"fastest\":95.755,\"constructor\":\"Mercedes\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":96.375,\"constructor\":\"Williams\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":95.144,\"constructor\":\"Renault\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":96.197,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jarno Trulli\",\"fastest\":115.491,\"constructor\":\"Lotus\"},{\"driver\":\"Timo Glock\",\"fastest\":98.275,\"constructor\":\"Virgin\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":99.117,\"constructor\":\"HRT\"}],\"German Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":94.302,\"constructor\":\"McLaren\"},{\"driver\":\"Mark Webber\",\"fastest\":94.468,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":94.609,\"constructor\":\"Ferrari\"},{\"driver\":\"Michael Schumacher\",\"fastest\":95.628,\"constructor\":\"Mercedes\"},{\"driver\":\"Adrian Sutil\",\"fastest\":96.653,\"constructor\":\"Force India\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":96.186,\"constructor\":\"Renault\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":97.568,\"constructor\":\"Williams\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":96.659,\"constructor\":\"Sauber\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":97.415,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":99.05,\"constructor\":\"Lotus\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":99.787,\"constructor\":\"Virgin\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":100.489,\"constructor\":\"HRT\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":83.718,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":83.661,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":84.857,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":83.415,\"constructor\":\"Ferrari\"},{\"driver\":\"Adrian Sutil\",\"fastest\":85.579,\"constructor\":\"Force India\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":84.664,\"constructor\":\"Sauber\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":85.018,\"constructor\":\"Williams\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":84.664,\"constructor\":\"Renault\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":85.977,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Timo Glock\",\"fastest\":88.022,\"constructor\":\"Virgin\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":87.149,\"constructor\":\"Lotus\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.876,\"constructor\":\"HRT\"}],\"Belgian Grand Prix\":[{\"driver\":\"Michael Schumacher\",\"fastest\":111.137,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":109.883,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":111.107,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":110.062,\"constructor\":\"McLaren\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":116.79,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":113.871,\"constructor\":\"Sauber\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":112.432,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":112.591,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":110.424,\"constructor\":\"Williams\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":118.061,\"constructor\":\"HRT\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":116.319,\"constructor\":\"Virgin\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":114.051,\"constructor\":\"Lotus\"}],\"Italian Grand Prix\":[{\"driver\":\"Felipe Massa\",\"fastest\":86.924,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":86.557,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":86.187,\"constructor\":\"McLaren\"},{\"driver\":\"Michael Schumacher\",\"fastest\":87.402,\"constructor\":\"Mercedes\"},{\"driver\":\"Paul di Resta\",\"fastest\":88.054,\"constructor\":\"Force India\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":88.377,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.403,\"constructor\":\"Sauber\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":88.202,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":89.639,\"constructor\":\"Lotus\"},{\"driver\":\"Timo Glock\",\"fastest\":90.783,\"constructor\":\"Virgin\"},{\"driver\":\"Bruno Senna\",\"fastest\":86.895,\"constructor\":\"Renault\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":1098.88,\"constructor\":\"HRT\"}],\"Singapore Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":108.688,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":108.454,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":110.891,\"constructor\":\"Ferrari\"},{\"driver\":\"Michael Schumacher\",\"fastest\":113.096,\"constructor\":\"Mercedes\"},{\"driver\":\"Paul di Resta\",\"fastest\":114.239,\"constructor\":\"Force India\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":111.329,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":113.198,\"constructor\":\"Williams\"},{\"driver\":\"Bruno Senna\",\"fastest\":113.774,\"constructor\":\"Renault\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":112.197,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":114.063,\"constructor\":\"Lotus\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":118.73,\"constructor\":\"Virgin\"},{\"driver\":\"Vitantonio Liuzzi\",\"fastest\":118.283,\"constructor\":\"HRT\"}],\"Japanese Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":96.828,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":96.568,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":96.682,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":96.614,\"constructor\":\"Mercedes\"},{\"driver\":\"Paul di Resta\",\"fastest\":97.97,\"constructor\":\"Force India\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":97.053,\"constructor\":\"Renault\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":97.411,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":96.569,\"constructor\":\"Sauber\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":99.297,\"constructor\":\"Lotus\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":97.645,\"constructor\":\"Williams\"},{\"driver\":\"Timo Glock\",\"fastest\":101.704,\"constructor\":\"Virgin\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.437,\"constructor\":\"HRT\"}],\"Korean Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":99.605,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":100.459,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":100.541,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":101.77,\"constructor\":\"Mercedes\"},{\"driver\":\"Bruno Senna\",\"fastest\":102.549,\"constructor\":\"Renault\"},{\"driver\":\"Adrian Sutil\",\"fastest\":102.014,\"constructor\":\"Force India\"},{\"driver\":\"Sébastien Buemi\",\"fastest\":100.537,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":102.08,\"constructor\":\"Sauber\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":102.371,\"constructor\":\"Williams\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":102.456,\"constructor\":\"Lotus\"},{\"driver\":\"Timo Glock\",\"fastest\":104.536,\"constructor\":\"Virgin\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":104.87,\"constructor\":\"HRT\"}],\"Indian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":87.249,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":87.967,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.953,\"constructor\":\"Ferrari\"},{\"driver\":\"Michael Schumacher\",\"fastest\":88.549,\"constructor\":\"Mercedes\"},{\"driver\":\"Paul di Resta\",\"fastest\":88.679,\"constructor\":\"Force India\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":89.289,\"constructor\":\"Renault\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":89.239,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":88.635,\"constructor\":\"Williams\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":90.294,\"constructor\":\"Lotus\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":91.674,\"constructor\":\"HRT\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":91.99,\"constructor\":\"Virgin\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.345,\"constructor\":\"Sauber\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":103.154,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":103.914,\"constructor\":\"Ferrari\"},{\"driver\":\"Mark Webber\",\"fastest\":102.612,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":103.993,\"constructor\":\"Mercedes\"},{\"driver\":\"Paul di Resta\",\"fastest\":104.12,\"constructor\":\"Force India\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":103.521,\"constructor\":\"Sauber\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":104.093,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":103.673,\"constructor\":\"Renault\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":106.61,\"constructor\":\"Lotus\"},{\"driver\":\"Timo Glock\",\"fastest\":108.085,\"constructor\":\"Virgin\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":108.274,\"constructor\":\"HRT\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":104.438,\"constructor\":\"Williams\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":75.324,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":75.58,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.181,\"constructor\":\"Ferrari\"},{\"driver\":\"Michael Schumacher\",\"fastest\":76.681,\"constructor\":\"Mercedes\"},{\"driver\":\"Adrian Sutil\",\"fastest\":77.161,\"constructor\":\"Force India\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":77.011,\"constructor\":\"Renault\"},{\"driver\":\"Jaime Alguersuari\",\"fastest\":77.162,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":77.644,\"constructor\":\"Sauber\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":78.023,\"constructor\":\"Lotus\"},{\"driver\":\"Rubens Barrichello\",\"fastest\":76.684,\"constructor\":\"Williams\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":79.902,\"constructor\":\"Virgin\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":79.649,\"constructor\":\"HRT\"}]},\"2012\":{\"Australian Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":89.187,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Rosberg\",\"fastest\":90.931,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":89.417,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":90.759,\"constructor\":\"Lotus F1\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":90.254,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":90.277,\"constructor\":\"Ferrari\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":90.62,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":94.253,\"constructor\":\"Marussia\"},{\"driver\":\"Paul di Resta\",\"fastest\":90.605,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":90.274,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":93.214,\"constructor\":\"Caterham\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":101.539,\"constructor\":\"McLaren\"},{\"driver\":\"Mark Webber\",\"fastest\":101.017,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":101.68,\"constructor\":\"Ferrari\"},{\"driver\":\"Michael Schumacher\",\"fastest\":101.76,\"constructor\":\"Mercedes\"},{\"driver\":\"Bruno Senna\",\"fastest\":101.404,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":100.722,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":101.021,\"constructor\":\"Sauber\"},{\"driver\":\"Paul di Resta\",\"fastest\":101.819,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.756,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":103.513,\"constructor\":\"Caterham\"},{\"driver\":\"Timo Glock\",\"fastest\":104.757,\"constructor\":\"Marussia\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":105.909,\"constructor\":\"HRT\"}],\"Chinese Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":100.967,\"constructor\":\"Mercedes\"},{\"driver\":\"Jenson Button\",\"fastest\":100.422,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":101.12,\"constructor\":\"Lotus F1\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":99.96,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":101.152,\"constructor\":\"Ferrari\"},{\"driver\":\"Mark Webber\",\"fastest\":100.49,\"constructor\":\"Red Bull\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":100.482,\"constructor\":\"Williams\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":100.977,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":101.19,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":102.621,\"constructor\":\"Marussia\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":100.019,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":103.61,\"constructor\":\"HRT\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":96.379,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":97.733,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":96.928,\"constructor\":\"Lotus F1\"},{\"driver\":\"Felipe Massa\",\"fastest\":98.123,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":98.08,\"constructor\":\"Mercedes\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":96.7,\"constructor\":\"Sauber\"},{\"driver\":\"Bruno Senna\",\"fastest\":98.087,\"constructor\":\"Williams\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.312,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":97.058,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":98.305,\"constructor\":\"Caterham\"},{\"driver\":\"Timo Glock\",\"fastest\":100.323,\"constructor\":\"Marussia\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":99.747,\"constructor\":\"HRT\"}],\"Spanish Grand Prix\":[{\"driver\":\"Fernando Alonso\",\"fastest\":87.39,\"constructor\":\"Ferrari\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":87.906,\"constructor\":\"Williams\"},{\"driver\":\"Romain Grosjean\",\"fastest\":86.25,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Rosberg\",\"fastest\":88.15,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":87.768,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":88.624,\"constructor\":\"McLaren\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":88.266,\"constructor\":\"Sauber\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":88.308,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Paul di Resta\",\"fastest\":88.313,\"constructor\":\"Force India\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":88.715,\"constructor\":\"Caterham\"},{\"driver\":\"Timo Glock\",\"fastest\":89.599,\"constructor\":\"Marussia\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":90.722,\"constructor\":\"HRT\"}],\"Monaco Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":78.805,\"constructor\":\"Red Bull\"},{\"driver\":\"Michael Schumacher\",\"fastest\":78.904,\"constructor\":\"Mercedes\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":78.806,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":78.857,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":79.246,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":78.423,\"constructor\":\"Force India\"},{\"driver\":\"Bruno Senna\",\"fastest\":79.187,\"constructor\":\"Williams\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":79.013,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":79.305,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":79.604,\"constructor\":\"Marussia\"},{\"driver\":\"Sergio Pérez\",\"fastest\":77.296,\"constructor\":\"Sauber\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":80.286,\"constructor\":\"HRT\"}],\"Canadian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":75.752,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":77.02,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":76.182,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":77.06,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":77.202,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.764,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":76.414,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":77.489,\"constructor\":\"Williams\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":78.093,\"constructor\":\"Caterham\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":76.609,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":81.535,\"constructor\":\"HRT\"},{\"driver\":\"Charles Pic\",\"fastest\":80.632,\"constructor\":\"Marussia\"}],\"European Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":102.717,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":104.007,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":103.686,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":103.526,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":104.064,\"constructor\":\"Williams\"},{\"driver\":\"Paul di Resta\",\"fastest\":104.101,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":103.666,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":102.163,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":103.674,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":104.253,\"constructor\":\"Caterham\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":106.388,\"constructor\":\"HRT\"},{\"driver\":\"Charles Pic\",\"fastest\":106.701,\"constructor\":\"Marussia\"}],\"British Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":95.448,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Michael Schumacher\",\"fastest\":95.191,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":94.661,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":95.898,\"constructor\":\"Force India\"},{\"driver\":\"Bruno Senna\",\"fastest\":95.863,\"constructor\":\"Williams\"},{\"driver\":\"Mark Webber\",\"fastest\":94.629,\"constructor\":\"Red Bull\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":98.339,\"constructor\":\"HRT\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":94.608,\"constructor\":\"Sauber\"},{\"driver\":\"Timo Glock\",\"fastest\":97.422,\"constructor\":\"Marussia\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":97.252,\"constructor\":\"Caterham\"},{\"driver\":\"Fernando Alonso\",\"fastest\":94.739,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":95.49,\"constructor\":\"McLaren\"}],\"German Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":79.469,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":79.044,\"constructor\":\"Ferrari\"},{\"driver\":\"Michael Schumacher\",\"fastest\":78.725,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":79.372,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":79.719,\"constructor\":\"McLaren\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":79.607,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":79.485,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":79.645,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":79.161,\"constructor\":\"Sauber\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":79.997,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":81.753,\"constructor\":\"Marussia\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":81.788,\"constructor\":\"HRT\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":85.677,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":85.728,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":84.136,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.738,\"constructor\":\"Ferrari\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":85.723,\"constructor\":\"Williams\"},{\"driver\":\"Paul di Resta\",\"fastest\":85.976,\"constructor\":\"Force India\"},{\"driver\":\"Nico Rosberg\",\"fastest\":85.83,\"constructor\":\"Mercedes\"},{\"driver\":\"Sergio Pérez\",\"fastest\":85.218,\"constructor\":\"Sauber\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":86.061,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":86.595,\"constructor\":\"Caterham\"},{\"driver\":\"Timo Glock\",\"fastest\":88.447,\"constructor\":\"Marussia\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":88.765,\"constructor\":\"HRT\"}],\"Belgian Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":114.293,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":113.64,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":113.76,\"constructor\":\"Force India\"},{\"driver\":\"Nico Rosberg\",\"fastest\":113.073,\"constructor\":\"Mercedes\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":113.995,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Mark Webber\",\"fastest\":113.768,\"constructor\":\"Red Bull\"},{\"driver\":\"Bruno Senna\",\"fastest\":112.822,\"constructor\":\"Williams\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":116.475,\"constructor\":\"Caterham\"},{\"driver\":\"Felipe Massa\",\"fastest\":113.464,\"constructor\":\"Ferrari\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":117.315,\"constructor\":\"HRT\"},{\"driver\":\"Timo Glock\",\"fastest\":116.956,\"constructor\":\"Marussia\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":115.598,\"constructor\":\"Sauber\"}],\"Italian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.427,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":88.835,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":87.239,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":88.713,\"constructor\":\"Red Bull\"},{\"driver\":\"Jérôme d'Ambrosio\",\"fastest\":88.677,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":87.562,\"constructor\":\"Sauber\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":88.578,\"constructor\":\"Force India\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":88.053,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.621,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":89.066,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":89.753,\"constructor\":\"Marussia\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":90.398,\"constructor\":\"HRT\"}],\"Singapore Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":112.625,\"constructor\":\"McLaren\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":112.134,\"constructor\":\"Red Bull\"},{\"driver\":\"Bruno Senna\",\"fastest\":113.61,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":112.709,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":111.033,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":113.785,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Rosberg\",\"fastest\":113.897,\"constructor\":\"Mercedes\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":111.69,\"constructor\":\"Sauber\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":113.51,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":115.106,\"constructor\":\"Caterham\"},{\"driver\":\"Timo Glock\",\"fastest\":116.057,\"constructor\":\"Marussia\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":117.671,\"constructor\":\"HRT\"}],\"Japanese Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":95.774,\"constructor\":\"Red Bull\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":96.679,\"constructor\":\"Sauber\"},{\"driver\":\"Jenson Button\",\"fastest\":96.606,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":96.894,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":97.886,\"constructor\":\"Lotus F1\"},{\"driver\":\"Paul di Resta\",\"fastest\":97.535,\"constructor\":\"Force India\"},{\"driver\":\"Bruno Senna\",\"fastest\":96.819,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":97.455,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Timo Glock\",\"fastest\":98.756,\"constructor\":\"Marussia\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":98.043,\"constructor\":\"Caterham\"},{\"driver\":\"Michael Schumacher\",\"fastest\":96.942,\"constructor\":\"Mercedes\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":99.351,\"constructor\":\"HRT\"}],\"Korean Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":102.037,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":102.242,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":102.721,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":102.783,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":102.645,\"constructor\":\"Force India\"},{\"driver\":\"Sergio Pérez\",\"fastest\":102.495,\"constructor\":\"Sauber\"},{\"driver\":\"Michael Schumacher\",\"fastest\":103.184,\"constructor\":\"Mercedes\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":102.679,\"constructor\":\"Williams\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":102.721,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":104.955,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":104.462,\"constructor\":\"Marussia\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":107.068,\"constructor\":\"HRT\"}],\"Indian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":88.723,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":88.203,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":88.63,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":89.354,\"constructor\":\"Lotus F1\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":89.204,\"constructor\":\"Sauber\"},{\"driver\":\"Paul di Resta\",\"fastest\":89.086,\"constructor\":\"Force India\"},{\"driver\":\"Michael Schumacher\",\"fastest\":89.23,\"constructor\":\"Mercedes\"},{\"driver\":\"Bruno Senna\",\"fastest\":88.431,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":89.44,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":92.161,\"constructor\":\"HRT\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":90.786,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":91.366,\"constructor\":\"Marussia\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":104.533,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":104.458,\"constructor\":\"Lotus F1\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":104.833,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":104.09,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":103.964,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.41,\"constructor\":\"Sauber\"},{\"driver\":\"Michael Schumacher\",\"fastest\":105.225,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":105.903,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Timo Glock\",\"fastest\":107.661,\"constructor\":\"Marussia\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":107.115,\"constructor\":\"Caterham\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":108.619,\"constructor\":\"HRT\"},{\"driver\":\"Paul di Resta\",\"fastest\":105.617,\"constructor\":\"Force India\"}],\"United States Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":99.347,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":99.709,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":99.402,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":100.428,\"constructor\":\"Mercedes\"},{\"driver\":\"Paul di Resta\",\"fastest\":100.594,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.474,\"constructor\":\"Lotus F1\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":100.315,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":100.719,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":100.772,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Vitaly Petrov\",\"fastest\":102.824,\"constructor\":\"Caterham\"},{\"driver\":\"Charles Pic\",\"fastest\":102.481,\"constructor\":\"Marussia\"},{\"driver\":\"Narain Karthikeyan\",\"fastest\":104.508,\"constructor\":\"HRT\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.069,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":78.623,\"constructor\":\"Ferrari\"},{\"driver\":\"Mark Webber\",\"fastest\":78.903,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":78.21,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":79.444,\"constructor\":\"Lotus F1\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":90.97,\"constructor\":\"Williams\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":78.973,\"constructor\":\"Sauber\"},{\"driver\":\"Michael Schumacher\",\"fastest\":80.158,\"constructor\":\"Mercedes\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":78.983,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":79.256,\"constructor\":\"Caterham\"},{\"driver\":\"Timo Glock\",\"fastest\":79.686,\"constructor\":\"Marussia\"},{\"driver\":\"Pedro de la Rosa\",\"fastest\":81.085,\"constructor\":\"HRT\"}]},\"2013\":{\"Malaysian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":100.446,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":99.805,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":100.755,\"constructor\":\"Mercedes\"},{\"driver\":\"Sergio Pérez\",\"fastest\":99.199,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":102.791,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":100.727,\"constructor\":\"Sauber\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":100.492,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":101.226,\"constructor\":\"Lotus F1\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":101.373,\"constructor\":\"Williams\"},{\"driver\":\"Charles Pic\",\"fastest\":102.942,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":102.423,\"constructor\":\"Marussia\"}],\"Australian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":89.732,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":89.56,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":89.759,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":89.274,\"constructor\":\"Lotus F1\"},{\"driver\":\"Adrian Sutil\",\"fastest\":90.71,\"constructor\":\"Force India\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.926,\"constructor\":\"McLaren\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":90.652,\"constructor\":\"Williams\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":89.498,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":91.415,\"constructor\":\"Sauber\"},{\"driver\":\"Jules Bianchi\",\"fastest\":90.454,\"constructor\":\"Marussia\"},{\"driver\":\"Charles Pic\",\"fastest\":92.261,\"constructor\":\"Caterham\"}],\"Chinese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":99.981,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.506,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.955,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":100.138,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":98.058,\"constructor\":\"McLaren\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":96.808,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":100.63,\"constructor\":\"Sauber\"},{\"driver\":\"Paul di Resta\",\"fastest\":100.101,\"constructor\":\"Force India\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":98.2,\"constructor\":\"Williams\"},{\"driver\":\"Jules Bianchi\",\"fastest\":101.537,\"constructor\":\"Marussia\"},{\"driver\":\"Charles Pic\",\"fastest\":101.997,\"constructor\":\"Caterham\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":97.588,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":96.961,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":97.204,\"constructor\":\"Ferrari\"},{\"driver\":\"Adrian Sutil\",\"fastest\":97.07,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":97.627,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jenson Button\",\"fastest\":97.743,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":98.202,\"constructor\":\"Sauber\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":99.579,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":98.192,\"constructor\":\"Williams\"},{\"driver\":\"Jules Bianchi\",\"fastest\":98.756,\"constructor\":\"Marussia\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":99.334,\"constructor\":\"Caterham\"}],\"Spanish Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":87.591,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":87.017,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":86.394,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.757,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":87.251,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":86.564,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.083,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":86.217,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":87.849,\"constructor\":\"Williams\"},{\"driver\":\"Charles Pic\",\"fastest\":89.362,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":88.011,\"constructor\":\"Marussia\"}],\"Monaco Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.133,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":76.577,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":77.392,\"constructor\":\"Lotus F1\"},{\"driver\":\"Fernando Alonso\",\"fastest\":79.34,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":78.72,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":78.292,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":79.151,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":78.685,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":80.881,\"constructor\":\"Williams\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":80.494,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":79.016,\"constructor\":\"Marussia\"}],\"Canadian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":76.182,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":76.354,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":76.203,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":78.004,\"constructor\":\"Williams\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":77.909,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":77.694,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":77.607,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":79.056,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":77.369,\"constructor\":\"McLaren\"},{\"driver\":\"Charles Pic\",\"fastest\":79.38,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":78.873,\"constructor\":\"Marussia\"}],\"British Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":93.531,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":93.401,\"constructor\":\"Red Bull\"},{\"driver\":\"Paul di Resta\",\"fastest\":95.33,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":94.09,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":95.384,\"constructor\":\"Lotus F1\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":95.542,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":95.146,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":95.805,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":95.818,\"constructor\":\"Williams\"},{\"driver\":\"Charles Pic\",\"fastest\":97.091,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":97.978,\"constructor\":\"Marussia\"}],\"German Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":94.164,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":94.156,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.767,\"constructor\":\"Lotus F1\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.468,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":95.982,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":94.201,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":94.244,\"constructor\":\"Sauber\"},{\"driver\":\"Adrian Sutil\",\"fastest\":95.816,\"constructor\":\"Force India\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":93.972,\"constructor\":\"Williams\"},{\"driver\":\"Charles Pic\",\"fastest\":97.584,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":98.383,\"constructor\":\"Marussia\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":84.647,\"constructor\":\"Mercedes\"},{\"driver\":\"Mark Webber\",\"fastest\":84.069,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":85.26,\"constructor\":\"Lotus F1\"},{\"driver\":\"Felipe Massa\",\"fastest\":85.176,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":86.143,\"constructor\":\"McLaren\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":86.491,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":85.597,\"constructor\":\"Williams\"},{\"driver\":\"Paul di Resta\",\"fastest\":86.608,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":86.74,\"constructor\":\"Sauber\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":87.473,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":88.16,\"constructor\":\"Marussia\"}],\"Belgian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":110.756,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":111.582,\"constructor\":\"Mercedes\"},{\"driver\":\"Jenson Button\",\"fastest\":110.823,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":111.383,\"constructor\":\"Ferrari\"},{\"driver\":\"Adrian Sutil\",\"fastest\":112.226,\"constructor\":\"Force India\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":111.849,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":112.497,\"constructor\":\"Lotus F1\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":113.995,\"constructor\":\"Caterham\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":112.579,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":110.967,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jules Bianchi\",\"fastest\":114.894,\"constructor\":\"Marussia\"}],\"Italian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":86.69,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":86.797,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":86.716,\"constructor\":\"Sauber\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":85.849,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":87.294,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":87.607,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":87.418,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.948,\"constructor\":\"Lotus F1\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":86.981,\"constructor\":\"Williams\"},{\"driver\":\"Charles Pic\",\"fastest\":88.62,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":89.491,\"constructor\":\"Marussia\"}],\"Singapore Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":108.574,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":109.916,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":110.509,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":111.097,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jenson Button\",\"fastest\":111.74,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":112.007,\"constructor\":\"Sauber\"},{\"driver\":\"Adrian Sutil\",\"fastest\":109.656,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":110.328,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":110.708,\"constructor\":\"Williams\"},{\"driver\":\"Charles Pic\",\"fastest\":110.99,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":112.898,\"constructor\":\"Marussia\"}],\"Korean Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":101.38,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":101.936,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Rosberg\",\"fastest\":102.471,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":102.608,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":102.709,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":102.947,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":103.869,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":102.973,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":104.095,\"constructor\":\"Force India\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":104.375,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":104.991,\"constructor\":\"Marussia\"}],\"Japanese Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":95.516,\"constructor\":\"Lotus F1\"},{\"driver\":\"Mark Webber\",\"fastest\":94.587,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":94.65,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":95.877,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":96.482,\"constructor\":\"Sauber\"},{\"driver\":\"Jenson Button\",\"fastest\":95.549,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":97.367,\"constructor\":\"Force India\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":97.423,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":95.02,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Max Chilton\",\"fastest\":98.713,\"constructor\":\"Marussia\"},{\"driver\":\"Charles Pic\",\"fastest\":97.489,\"constructor\":\"Caterham\"}],\"Indian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":88.116,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":88.709,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":88.816,\"constructor\":\"Mercedes\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":88.682,\"constructor\":\"Sauber\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":87.679,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":88.503,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.831,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":88.419,\"constructor\":\"Force India\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":88.928,\"constructor\":\"Williams\"},{\"driver\":\"Jules Bianchi\",\"fastest\":90.171,\"constructor\":\"Marussia\"},{\"driver\":\"Charles Pic\",\"fastest\":92.907,\"constructor\":\"Caterham\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":103.893,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":104.458,\"constructor\":\"Mercedes\"},{\"driver\":\"Romain Grosjean\",\"fastest\":104.301,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":105.57,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":103.434,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.435,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":105.609,\"constructor\":\"Force India\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":104.351,\"constructor\":\"Williams\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":104.517,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Charles Pic\",\"fastest\":106.432,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":107.619,\"constructor\":\"Marussia\"}],\"United States Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":99.856,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":100.445,\"constructor\":\"Lotus F1\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":100.818,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":100.952,\"constructor\":\"Sauber\"},{\"driver\":\"Jenson Button\",\"fastest\":101.285,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":101.186,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":100.492,\"constructor\":\"Williams\"},{\"driver\":\"Paul di Resta\",\"fastest\":101.148,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":101.32,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jules Bianchi\",\"fastest\":103.419,\"constructor\":\"Marussia\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":103.933,\"constructor\":\"Caterham\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Mark Webber\",\"fastest\":75.436,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":76.442,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.496,\"constructor\":\"Ferrari\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":76.528,\"constructor\":\"Sauber\"},{\"driver\":\"Heikki Kovalainen\",\"fastest\":77.249,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":76.79,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":76.84,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":76.246,\"constructor\":\"McLaren\"},{\"driver\":\"Adrian Sutil\",\"fastest\":76.049,\"constructor\":\"Force India\"},{\"driver\":\"Max Chilton\",\"fastest\":77.281,\"constructor\":\"Marussia\"},{\"driver\":\"Giedo van der Garde\",\"fastest\":77.59,\"constructor\":\"Caterham\"}]},\"2014\":{\"Australian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":92.478,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":93.066,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":92.917,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":93.21,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":92.616,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":92.634,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":97.064,\"constructor\":\"Caterham\"},{\"driver\":\"Romain Grosjean\",\"fastest\":94.766,\"constructor\":\"Lotus F1\"},{\"driver\":\"Max Chilton\",\"fastest\":95.635,\"constructor\":\"Marussia\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":94.202,\"constructor\":\"Sauber\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":92.568,\"constructor\":\"Williams\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":103.066,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":104.289,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":104.165,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":105.982,\"constructor\":\"Force India\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":105.373,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":104.897,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":107.782,\"constructor\":\"Sauber\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":106.695,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":106.224,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":107.5,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":108.249,\"constructor\":\"Marussia\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":97.02,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":99.272,\"constructor\":\"Williams\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.785,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":99.565,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.438,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":99.269,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":100.16,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":100.698,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":99.443,\"constructor\":\"Lotus F1\"},{\"driver\":\"Max Chilton\",\"fastest\":101.825,\"constructor\":\"Marussia\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":101.134,\"constructor\":\"Caterham\"}],\"Chinese Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":100.402,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.473,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":102.081,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":102.379,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":102.228,\"constructor\":\"Force India\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":103.067,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":102.896,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":102.701,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":102.257,\"constructor\":\"Sauber\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":103.323,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":102.875,\"constructor\":\"Marussia\"}],\"Spanish Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":89.236,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":90.424,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":88.918,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":91.068,\"constructor\":\"Lotus F1\"},{\"driver\":\"Fernando Alonso\",\"fastest\":89.898,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":90.756,\"constructor\":\"Force India\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":90.666,\"constructor\":\"Sauber\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":90.269,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":90.318,\"constructor\":\"McLaren\"},{\"driver\":\"Max Chilton\",\"fastest\":91.767,\"constructor\":\"Marussia\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":93.064,\"constructor\":\"Caterham\"}],\"Monaco Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":79.361,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":79.252,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":78.479,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":80.657,\"constructor\":\"McLaren\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":81.083,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":80.767,\"constructor\":\"Force India\"},{\"driver\":\"Felipe Massa\",\"fastest\":80.314,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":81.146,\"constructor\":\"Sauber\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":80.911,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":80.579,\"constructor\":\"Marussia\"},{\"driver\":\"Romain Grosjean\",\"fastest\":80.979,\"constructor\":\"Lotus F1\"}],\"Canadian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":78.616,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":78.64,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":78.504,\"constructor\":\"Williams\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":79.399,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":78.529,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":78.759,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":78.936,\"constructor\":\"Force India\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":80.112,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":79.65,\"constructor\":\"Lotus F1\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":83.13,\"constructor\":\"Caterham\"}],\"Austrian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":72.581,\"constructor\":\"Williams\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":72.217,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":72.595,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":72.746,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":72.142,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":73.06,\"constructor\":\"Red Bull\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":73.317,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":73.709,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":73.187,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jules Bianchi\",\"fastest\":74.476,\"constructor\":\"Marussia\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":74.672,\"constructor\":\"Caterham\"}],\"British Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":3698.495,\"constructor\":\"Mercedes\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":3700.135,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":3692.106,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":3694.017,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":3667.384,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":3689.718,\"constructor\":\"Williams\"},{\"driver\":\"Jules Bianchi\",\"fastest\":3687.269,\"constructor\":\"Marussia\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":3681.464,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":3679.776,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":3670.56,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":3674.941,\"constructor\":\"Caterham\"}],\"German Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":79.908,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":81.494,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":80.846,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.548,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":80.752,\"constructor\":\"Force India\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":80.224,\"constructor\":\"McLaren\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":81.876,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":82.008,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":82.305,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jules Bianchi\",\"fastest\":82.522,\"constructor\":\"Marussia\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":82.866,\"constructor\":\"Caterham\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":85.724,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":86.85,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":86.608,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.419,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":88.883,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":90.28,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":89.12,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":88.704,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":89.128,\"constructor\":\"Lotus F1\"},{\"driver\":\"Max Chilton\",\"fastest\":89.499,\"constructor\":\"Marussia\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":92.888,\"constructor\":\"Caterham\"}],\"Belgian Grand Prix\":[{\"driver\":\"Jenson Button\",\"fastest\":113.483,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":112.512,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":113.879,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":112.953,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":110.511,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":113.612,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":113.276,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Adrian Sutil\",\"fastest\":112.413,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":115.649,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":115.9,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":115.247,\"constructor\":\"Marussia\"}],\"Italian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.004,\"constructor\":\"Mercedes\"},{\"driver\":\"Jenson Button\",\"fastest\":89.245,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":88.342,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.588,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":88.942,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.107,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":88.486,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":89.856,\"constructor\":\"Lotus F1\"},{\"driver\":\"Adrian Sutil\",\"fastest\":89.375,\"constructor\":\"Sauber\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":90.28,\"constructor\":\"Caterham\"},{\"driver\":\"Jules Bianchi\",\"fastest\":90.521,\"constructor\":\"Marussia\"}],\"Singapore Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":110.417,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":112.519,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":112.115,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":112.515,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":111.639,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":111.761,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":112.007,\"constructor\":\"Force India\"},{\"driver\":\"Adrian Sutil\",\"fastest\":113.948,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":113.213,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jules Bianchi\",\"fastest\":113.538,\"constructor\":\"Marussia\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":115.416,\"constructor\":\"Caterham\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":111.6,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":113.45,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":112.426,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":111.915,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":111.721,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":112.814,\"constructor\":\"Force India\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":113.562,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":115.372,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":114.702,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jules Bianchi\",\"fastest\":115.985,\"constructor\":\"Marussia\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":114.669,\"constructor\":\"Caterham\"}],\"Russian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":101.36,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":100.896,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":101.964,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":102.179,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":102.022,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":102.63,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":102.685,\"constructor\":\"Force India\"},{\"driver\":\"Adrian Sutil\",\"fastest\":103.822,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":104.03,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":103.979,\"constructor\":\"Caterham\"},{\"driver\":\"Max Chilton\",\"fastest\":108.268,\"constructor\":\"Marussia\"}],\"United States Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":101.929,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":102.505,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":104.255,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":101.474,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":101.379,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":106.226,\"constructor\":\"Force India\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":103.808,\"constructor\":\"Lotus F1\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":101.689,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":103.006,\"constructor\":\"Sauber\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":104.496,\"constructor\":\"Red Bull\"},{\"driver\":\"Adrian Sutil\",\"fastest\":107.508,\"constructor\":\"Sauber\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":105.599,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":104.826,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":106.739,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":107.424,\"constructor\":\"Ferrari\"},{\"driver\":\"Jean-Éric Vergne\",\"fastest\":105.686,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":105.777,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":107.897,\"constructor\":\"Lotus F1\"},{\"driver\":\"Kamui Kobayashi\",\"fastest\":107.431,\"constructor\":\"Caterham\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":74.018,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.313,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":73.999,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":74.07,\"constructor\":\"Lotus F1\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":73.555,\"constructor\":\"Mercedes\"},{\"driver\":\"Adrian Sutil\",\"fastest\":74.834,\"constructor\":\"Sauber\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":73.728,\"constructor\":\"Force India\"},{\"driver\":\"Felipe Massa\",\"fastest\":74.101,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":74.144,\"constructor\":\"Toro Rosso\"}]},\"2015\":{\"Australian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":90.945,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":92.872,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Felipe Massa\",\"fastest\":91.719,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":91.426,\"constructor\":\"Ferrari\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":91.56,\"constructor\":\"Sauber\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":92.797,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":91.959,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":93.338,\"constructor\":\"McLaren\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":102.062,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":103.648,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":104.514,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":103.99,\"constructor\":\"Williams\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":104.822,\"constructor\":\"Force India\"},{\"driver\":\"Felipe Nasr\",\"fastest\":103.902,\"constructor\":\"Sauber\"},{\"driver\":\"Max Verstappen\",\"fastest\":104.579,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":104.812,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jenson Button\",\"fastest\":106.056,\"constructor\":\"McLaren\"},{\"driver\":\"Roberto Merhi\",\"fastest\":109.04,\"constructor\":\"Manor Marussia\"}],\"Chinese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":102.208,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":103.018,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":102.734,\"constructor\":\"Williams\"},{\"driver\":\"Romain Grosjean\",\"fastest\":103.134,\"constructor\":\"Lotus F1\"},{\"driver\":\"Felipe Nasr\",\"fastest\":103.692,\"constructor\":\"Sauber\"},{\"driver\":\"Carlos Sainz\",\"fastest\":102.652,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":103.512,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":103.245,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":103.728,\"constructor\":\"McLaren\"},{\"driver\":\"Will Stevens\",\"fastest\":105.414,\"constructor\":\"Manor Marussia\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":97.326,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":96.311,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":98.095,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":98.725,\"constructor\":\"Red Bull\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":97.665,\"constructor\":\"Lotus F1\"},{\"driver\":\"Sergio Pérez\",\"fastest\":98.338,\"constructor\":\"Force India\"},{\"driver\":\"Felipe Nasr\",\"fastest\":98.216,\"constructor\":\"Sauber\"},{\"driver\":\"Max Verstappen\",\"fastest\":99.607,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":98.992,\"constructor\":\"McLaren\"},{\"driver\":\"Will Stevens\",\"fastest\":101.759,\"constructor\":\"Manor Marussia\"}],\"Spanish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.27,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":89.931,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":90.374,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":91.156,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":91.945,\"constructor\":\"Lotus F1\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":91.124,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":91.162,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Nasr\",\"fastest\":91.928,\"constructor\":\"Sauber\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":90.888,\"constructor\":\"Force India\"},{\"driver\":\"Will Stevens\",\"fastest\":93.655,\"constructor\":\"Manor Marussia\"}],\"Monaco Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":78.599,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":78.854,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":78.063,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":79.657,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":80.483,\"constructor\":\"Lotus F1\"},{\"driver\":\"Max Verstappen\",\"fastest\":78.873,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":79.49,\"constructor\":\"McLaren\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":79.285,\"constructor\":\"Sauber\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":78.944,\"constructor\":\"Williams\"},{\"driver\":\"Roberto Merhi\",\"fastest\":81.715,\"constructor\":\"Manor Marussia\"}],\"Canadian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":77.472,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":76.987,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":77.553,\"constructor\":\"Williams\"},{\"driver\":\"Romain Grosjean\",\"fastest\":77.969,\"constructor\":\"Lotus F1\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":78.238,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":78.048,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":78.856,\"constructor\":\"McLaren\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":78.89,\"constructor\":\"Sauber\"},{\"driver\":\"Max Verstappen\",\"fastest\":78.616,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Will Stevens\",\"fastest\":80.707,\"constructor\":\"Manor Marussia\"}],\"Austrian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":71.235,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":71.499,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":71.613,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":72.377,\"constructor\":\"Force India\"},{\"driver\":\"Max Verstappen\",\"fastest\":72.349,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":72.516,\"constructor\":\"Sauber\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":71.785,\"constructor\":\"Lotus F1\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":71.689,\"constructor\":\"Red Bull\"},{\"driver\":\"Roberto Merhi\",\"fastest\":74.939,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Jenson Button\",\"fastest\":101.204,\"constructor\":\"McLaren\"}],\"British Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":96.61,\"constructor\":\"Williams\"},{\"driver\":\"Nico Rosberg\",\"fastest\":96.975,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.233,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":97.493,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":97.91,\"constructor\":\"Red Bull\"},{\"driver\":\"Fernando Alonso\",\"fastest\":98.883,\"constructor\":\"McLaren\"},{\"driver\":\"Carlos Sainz\",\"fastest\":98.697,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":98.131,\"constructor\":\"Sauber\"},{\"driver\":\"Will Stevens\",\"fastest\":101.919,\"constructor\":\"Manor Marussia\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":86.772,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":85.149,\"constructor\":\"Mercedes\"},{\"driver\":\"Felipe Massa\",\"fastest\":86.864,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":84.821,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":88.074,\"constructor\":\"Force India\"},{\"driver\":\"Max Verstappen\",\"fastest\":87.65,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.311,\"constructor\":\"McLaren\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":87.13,\"constructor\":\"Lotus F1\"},{\"driver\":\"Will Stevens\",\"fastest\":89.543,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":88.004,\"constructor\":\"Sauber\"}],\"Belgian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":112.416,\"constructor\":\"Mercedes\"},{\"driver\":\"Sergio Pérez\",\"fastest\":114.796,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":113.032,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":114.093,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":114.517,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":114.779,\"constructor\":\"Lotus F1\"},{\"driver\":\"Felipe Nasr\",\"fastest\":113.991,\"constructor\":\"Sauber\"},{\"driver\":\"Max Verstappen\",\"fastest\":113.276,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":113.692,\"constructor\":\"McLaren\"},{\"driver\":\"Will Stevens\",\"fastest\":118.15,\"constructor\":\"Manor Marussia\"}],\"Italian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":86.672,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":87.376,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":87.525,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":88.14,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":95.106,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":88.516,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":89.285,\"constructor\":\"McLaren\"},{\"driver\":\"Max Verstappen\",\"fastest\":87.39,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.065,\"constructor\":\"Red Bull\"},{\"driver\":\"Will Stevens\",\"fastest\":91.098,\"constructor\":\"Manor Marussia\"}],\"Singapore Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":110.069,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":110.041,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":110.934,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":111.342,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":111.97,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":111.167,\"constructor\":\"McLaren\"},{\"driver\":\"Max Verstappen\",\"fastest\":110.298,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":110.175,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":111.594,\"constructor\":\"Sauber\"},{\"driver\":\"Alexander Rossi\",\"fastest\":115.312,\"constructor\":\"Manor Marussia\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":96.145,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":97.906,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":98.241,\"constructor\":\"Williams\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":98.136,\"constructor\":\"Lotus F1\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.614,\"constructor\":\"McLaren\"},{\"driver\":\"Max Verstappen\",\"fastest\":98.237,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":99.343,\"constructor\":\"Sauber\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.331,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":98.366,\"constructor\":\"Red Bull\"},{\"driver\":\"Will Stevens\",\"fastest\":101.452,\"constructor\":\"Manor Marussia\"}],\"Russian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":100.573,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":100.071,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":100.881,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":101.772,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":101.372,\"constructor\":\"Red Bull\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":101.52,\"constructor\":\"Lotus F1\"},{\"driver\":\"Jenson Button\",\"fastest\":103.068,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Nasr\",\"fastest\":101.507,\"constructor\":\"Sauber\"},{\"driver\":\"Will Stevens\",\"fastest\":104.926,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Carlos Sainz\",\"fastest\":102.258,\"constructor\":\"Toro Rosso\"}],\"United States Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":100.666,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.98,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":103.01,\"constructor\":\"Force India\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":101.33,\"constructor\":\"Ferrari\"},{\"driver\":\"Carlos Sainz\",\"fastest\":102.66,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Jenson Button\",\"fastest\":103.026,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Nasr\",\"fastest\":104.407,\"constructor\":\"Sauber\"},{\"driver\":\"Felipe Massa\",\"fastest\":108.231,\"constructor\":\"Williams\"},{\"driver\":\"Pastor Maldonado\",\"fastest\":102.849,\"constructor\":\"Lotus F1\"},{\"driver\":\"Alexander Rossi\",\"fastest\":108.173,\"constructor\":\"Manor Marussia\"}],\"Mexican Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":80.521,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":81.549,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":81.585,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":82.172,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":82.391,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":82.893,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":82.716,\"constructor\":\"Sauber\"},{\"driver\":\"Alexander Rossi\",\"fastest\":85.005,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":81.847,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":83.006,\"constructor\":\"McLaren\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":74.832,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":75.046,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":75.743,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":76.313,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":75.97,\"constructor\":\"Force India\"},{\"driver\":\"Max Verstappen\",\"fastest\":75.972,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":75.739,\"constructor\":\"Lotus F1\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":75.789,\"constructor\":\"Sauber\"},{\"driver\":\"Jenson Button\",\"fastest\":76.321,\"constructor\":\"McLaren\"},{\"driver\":\"Alexander Rossi\",\"fastest\":78.617,\"constructor\":\"Manor Marussia\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":104.517,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":104.55,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.892,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":106.305,\"constructor\":\"Red Bull\"},{\"driver\":\"Max Verstappen\",\"fastest\":105.746,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":106.464,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":104.796,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Nasr\",\"fastest\":106.424,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":105.859,\"constructor\":\"Lotus F1\"},{\"driver\":\"Will Stevens\",\"fastest\":109.61,\"constructor\":\"Manor Marussia\"}]},\"2016\":{\"Australian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":89.951,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":90.557,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":91.671,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Felipe Massa\",\"fastest\":92.288,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":92.78,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":1198.834,\"constructor\":\"Red Bull\"},{\"driver\":\"Jenson Button\",\"fastest\":91.684,\"constructor\":\"McLaren\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":92.955,\"constructor\":\"Renault\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":92.673,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Felipe Nasr\",\"fastest\":92.711,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":92.862,\"constructor\":\"Haas F1 Team\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":94.482,\"constructor\":\"Mercedes\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":97.077,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":95.678,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":95.158,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":96.095,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Max Verstappen\",\"fastest\":95.504,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":96.121,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":95.188,\"constructor\":\"Force India\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":95.448,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Felipe Nasr\",\"fastest\":95.36,\"constructor\":\"Sauber\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":96.73,\"constructor\":\"Renault\"}],\"Chinese Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.015,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Rosberg\",\"fastest\":100.418,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":99.824,\"constructor\":\"Force India\"},{\"driver\":\"Max Verstappen\",\"fastest\":100.399,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":101.558,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":100.593,\"constructor\":\"Ferrari\"},{\"driver\":\"Jenson Button\",\"fastest\":100.298,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Nasr\",\"fastest\":100.582,\"constructor\":\"Sauber\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":102.232,\"constructor\":\"Renault\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":101.489,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Romain Grosjean\",\"fastest\":99.923,\"constructor\":\"Haas F1 Team\"}],\"Russian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":99.094,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":100.101,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":99.743,\"constructor\":\"Williams\"},{\"driver\":\"Max Verstappen\",\"fastest\":102.029,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":100.347,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.179,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":102.026,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":101.832,\"constructor\":\"Renault\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":102.05,\"constructor\":\"Sauber\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":101.907,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Sergio Pérez\",\"fastest\":101.897,\"constructor\":\"Force India\"}],\"Spanish Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":88.209,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":86.948,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":87.974,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":89.081,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.801,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":89.75,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":88.974,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":88.716,\"constructor\":\"Renault\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":89.715,\"constructor\":\"Sauber\"},{\"driver\":\"Rio Haryanto\",\"fastest\":89.402,\"constructor\":\"Manor Marussia\"}],\"Monaco Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":78.294,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":77.939,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":78.005,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":78.446,\"constructor\":\"Force India\"},{\"driver\":\"Carlos Sainz\",\"fastest\":78.519,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":79.17,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":79.213,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":79.131,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":89.802,\"constructor\":\"Renault\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":81.342,\"constructor\":\"Sauber\"},{\"driver\":\"Rio Haryanto\",\"fastest\":79.868,\"constructor\":\"Manor Marussia\"}],\"Canadian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":76.297,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Rosberg\",\"fastest\":75.599,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":76.319,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":76.938,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":77.307,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":76.559,\"constructor\":\"Force India\"},{\"driver\":\"Romain Grosjean\",\"fastest\":77.281,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":76.578,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":78.282,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":78.224,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Nasr\",\"fastest\":77.883,\"constructor\":\"Sauber\"}],\"European Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":106.485,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":106.973,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":107.028,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":106.99,\"constructor\":\"Force India\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":107.604,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":108.804,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":107.563,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Jenson Button\",\"fastest\":107.622,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Nasr\",\"fastest\":107.708,\"constructor\":\"Sauber\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":110.571,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":107.583,\"constructor\":\"Renault\"}],\"Austrian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":68.411,\"constructor\":\"Mercedes\"},{\"driver\":\"Jenson Button\",\"fastest\":70.001,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":68.876,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":70.12,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":68.77,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":69.899,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":70.138,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Rio Haryanto\",\"fastest\":70.342,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":69.694,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":70.228,\"constructor\":\"Renault\"},{\"driver\":\"Felipe Nasr\",\"fastest\":70.415,\"constructor\":\"Sauber\"}],\"British Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":95.548,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":96.013,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":96.933,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":96.141,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":97.401,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":97.618,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":95.669,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":97.713,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":97.619,\"constructor\":\"Renault\"},{\"driver\":\"Rio Haryanto\",\"fastest\":101.38,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Felipe Nasr\",\"fastest\":98.71,\"constructor\":\"Sauber\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":83.67,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":84.608,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":83.086,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":84.958,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":84.669,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":85.273,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":85.021,\"constructor\":\"Force India\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":85.955,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":85.475,\"constructor\":\"Sauber\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":85.743,\"constructor\":\"Renault\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":86.524,\"constructor\":\"Manor Marussia\"}],\"German Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.746,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":78.442,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":78.71,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":80.442,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":79.606,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":79.781,\"constructor\":\"McLaren\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":81.127,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":79.585,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":81.212,\"constructor\":\"Sauber\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":79.883,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":80.71,\"constructor\":\"Manor Marussia\"}],\"Belgian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":1156.45,\"constructor\":\"Mercedes\"},{\"driver\":\"Sergio Pérez\",\"fastest\":1154.576,\"constructor\":\"Force India\"},{\"driver\":\"Max Verstappen\",\"fastest\":1144.667,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":1147.366,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":1145.519,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":125.072,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":116.588,\"constructor\":\"Renault\"},{\"driver\":\"Jenson Button\",\"fastest\":141.859,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Ocon\",\"fastest\":1142.21,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":130.752,\"constructor\":\"Sauber\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":1083.424,\"constructor\":\"Ferrari\"}],\"Italian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":86.303,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.016,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":86.4,\"constructor\":\"Williams\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":85.919,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":86.92,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.34,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Ocon\",\"fastest\":88.534,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":87.106,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":86.751,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":88.552,\"constructor\":\"Sauber\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":87.618,\"constructor\":\"Renault\"}],\"Singapore Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":107.752,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":107.187,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":107.345,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":111.249,\"constructor\":\"McLaren\"},{\"driver\":\"Carlos Sainz\",\"fastest\":110.532,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":111.368,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":110.858,\"constructor\":\"Renault\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":110.963,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":111.517,\"constructor\":\"Force India\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":111.075,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Esteban Ocon\",\"fastest\":111.748,\"constructor\":\"Manor Marussia\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":96.424,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":97.376,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":97.793,\"constructor\":\"Force India\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":97.466,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":98.291,\"constructor\":\"McLaren\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":99.199,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":101.775,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":99.653,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Carlos Sainz\",\"fastest\":99.243,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":99.781,\"constructor\":\"Sauber\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":99.35,\"constructor\":\"Renault\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":95.152,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":95.511,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":96.756,\"constructor\":\"Force India\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":95.118,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":97.02,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":97.597,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Felipe Massa\",\"fastest\":97.785,\"constructor\":\"Williams\"},{\"driver\":\"Jenson Button\",\"fastest\":97.177,\"constructor\":\"McLaren\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":97.978,\"constructor\":\"Renault\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":98.496,\"constructor\":\"Sauber\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":98,\"constructor\":\"Manor Marussia\"}],\"United States Grand Prix\":[{\"driver\":\"Nico Rosberg\",\"fastest\":101.897,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":102.424,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":99.877,\"constructor\":\"Ferrari\"},{\"driver\":\"Felipe Massa\",\"fastest\":103.414,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":102.832,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":103.502,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":104.335,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Felipe Nasr\",\"fastest\":104.117,\"constructor\":\"Sauber\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":102.475,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":103.925,\"constructor\":\"Force India\"},{\"driver\":\"Esteban Ocon\",\"fastest\":103.585,\"constructor\":\"Manor Marussia\"}],\"Mexican Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":82.596,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":81.134,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":83.288,\"constructor\":\"Force India\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":82.497,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":83.54,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":83.618,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.668,\"constructor\":\"McLaren\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":83.146,\"constructor\":\"Renault\"},{\"driver\":\"Romain Grosjean\",\"fastest\":83.278,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Felipe Nasr\",\"fastest\":83.657,\"constructor\":\"Sauber\"},{\"driver\":\"Esteban Ocon\",\"fastest\":84.964,\"constructor\":\"Manor Marussia\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":85.639,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":86.195,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":85.305,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":86.728,\"constructor\":\"Force India\"},{\"driver\":\"Jenson Button\",\"fastest\":86.983,\"constructor\":\"McLaren\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":86.062,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Gutiérrez\",\"fastest\":87.805,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":87.153,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":86.524,\"constructor\":\"Renault\"},{\"driver\":\"Esteban Ocon\",\"fastest\":87.796,\"constructor\":\"Manor Marussia\"},{\"driver\":\"Felipe Nasr\",\"fastest\":87.547,\"constructor\":\"Sauber\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":105.137,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":103.729,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":104.889,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.249,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":104.495,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":105.675,\"constructor\":\"Williams\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":105.715,\"constructor\":\"Renault\"},{\"driver\":\"Carlos Sainz\",\"fastest\":106.591,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":106.216,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":104.97,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":106.145,\"constructor\":\"Manor Marussia\"}]},\"2017\":{\"Australian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":86.593,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.538,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":86.964,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":88.045,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":87.568,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":86.711,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":88.336,\"constructor\":\"Force India\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":89.44,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":88.486,\"constructor\":\"Renault\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":89.052,\"constructor\":\"Sauber\"}],\"Chinese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":95.378,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":95.423,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":96.722,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":97.398,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.496,\"constructor\":\"McLaren\"},{\"driver\":\"Felipe Massa\",\"fastest\":96.511,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":96.531,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.015,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":97.528,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":99.732,\"constructor\":\"Sauber\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":92.798,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.72,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":93.495,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":94.256,\"constructor\":\"Williams\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":95.372,\"constructor\":\"Renault\"},{\"driver\":\"Romain Grosjean\",\"fastest\":94.948,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergio Pérez\",\"fastest\":94.609,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":94.985,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":95.595,\"constructor\":\"McLaren\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":95.086,\"constructor\":\"Sauber\"}],\"Russian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":97.367,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":96.844,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":98.429,\"constructor\":\"Red Bull\"},{\"driver\":\"Felipe Massa\",\"fastest\":98.232,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":98.661,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.418,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":99.566,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":98.3,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":99.835,\"constructor\":\"Sauber\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":99.79,\"constructor\":\"McLaren\"}],\"Spanish Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":83.674,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":83.593,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":83.686,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":85.755,\"constructor\":\"Force India\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":84.843,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":86.371,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":85.976,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":83.894,\"constructor\":\"McLaren\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":86.213,\"constructor\":\"Sauber\"},{\"driver\":\"Felipe Massa\",\"fastest\":86.472,\"constructor\":\"Williams\"}],\"Monaco Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":75.238,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":75.825,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":75.756,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":76.539,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":74.82,\"constructor\":\"Force India\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":76.313,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":76.614,\"constructor\":\"Renault\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":76.665,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":76.075,\"constructor\":\"Williams\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":76.829,\"constructor\":\"Sauber\"}],\"Canadian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":74.551,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":76.165,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":74.719,\"constructor\":\"Ferrari\"},{\"driver\":\"Esteban Ocon\",\"fastest\":76.247,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":76.136,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":76.713,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.853,\"constructor\":\"McLaren\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":76.341,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Lance Stroll\",\"fastest\":75.979,\"constructor\":\"Williams\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":76.995,\"constructor\":\"Sauber\"}],\"Azerbaijan Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":103.469,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":103.441,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.588,\"constructor\":\"Force India\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":104.882,\"constructor\":\"Red Bull\"},{\"driver\":\"Lance Stroll\",\"fastest\":105.108,\"constructor\":\"Williams\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":108.536,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":106.312,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":105.866,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":107.12,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":105.168,\"constructor\":\"McLaren\"}],\"Austrian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":67.411,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":67.486,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":67.442,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":68.59,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergio Pérez\",\"fastest\":68.47,\"constructor\":\"Force India\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":68.061,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Felipe Massa\",\"fastest\":68.419,\"constructor\":\"Williams\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":68.652,\"constructor\":\"Renault\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":68.422,\"constructor\":\"McLaren\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":69.241,\"constructor\":\"Sauber\"}],\"British Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":90.621,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":91.517,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":90.678,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":92.577,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":93.504,\"constructor\":\"Force India\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":93.464,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":93.4,\"constructor\":\"Williams\"},{\"driver\":\"Romain Grosjean\",\"fastest\":92.29,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":93.119,\"constructor\":\"Sauber\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":93.594,\"constructor\":\"Toro Rosso\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.461,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":80.818,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":80.49,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":81.631,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.182,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":82.105,\"constructor\":\"Force India\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":81.589,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":82.1,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Lance Stroll\",\"fastest\":82.83,\"constructor\":\"Williams\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":81.752,\"constructor\":\"Sauber\"}],\"Belgian Grand Prix\":[{\"driver\":\"Felipe Massa\",\"fastest\":109.637,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":108.3,\"constructor\":\"Force India\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":106.603,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":108.922,\"constructor\":\"Renault\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":109.907,\"constructor\":\"McLaren\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":110.775,\"constructor\":\"Sauber\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":106.577,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":107.549,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":109.708,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":109.087,\"constructor\":\"Haas F1 Team\"}],\"Italian Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":83.361,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":83.897,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.871,\"constructor\":\"McLaren\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":85.752,\"constructor\":\"Renault\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":83.488,\"constructor\":\"Mercedes\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":86.547,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":84.968,\"constructor\":\"Force India\"},{\"driver\":\"Felipe Massa\",\"fastest\":85.477,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":85.894,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":85.02,\"constructor\":\"Haas F1 Team\"}],\"Singapore Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":105.301,\"constructor\":\"Red Bull\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":106.722,\"constructor\":\"McLaren\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":106.722,\"constructor\":\"Renault\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":105.008,\"constructor\":\"Mercedes\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":109.061,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":106.731,\"constructor\":\"Force India\"},{\"driver\":\"Felipe Massa\",\"fastest\":107.055,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":106.537,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":107.585,\"constructor\":\"Haas F1 Team\"}],\"Malaysian Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":94.467,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":94.08,\"constructor\":\"Ferrari\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":95.931,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":94.266,\"constructor\":\"Renault\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":94.452,\"constructor\":\"Mercedes\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":96.395,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":95.591,\"constructor\":\"Force India\"},{\"driver\":\"Lance Stroll\",\"fastest\":96.627,\"constructor\":\"Williams\"},{\"driver\":\"Pierre Gasly\",\"fastest\":97.17,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":95.796,\"constructor\":\"Haas F1 Team\"}],\"Japanese Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":93.694,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.175,\"constructor\":\"Ferrari\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":93.724,\"constructor\":\"McLaren\"},{\"driver\":\"Jolyon Palmer\",\"fastest\":94.095,\"constructor\":\"Renault\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":93.144,\"constructor\":\"Mercedes\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":96.43,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":94.744,\"constructor\":\"Force India\"},{\"driver\":\"Lance Stroll\",\"fastest\":94.548,\"constructor\":\"Williams\"},{\"driver\":\"Pierre Gasly\",\"fastest\":94.533,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":95.338,\"constructor\":\"Haas F1 Team\"}],\"United States Grand Prix\":[{\"driver\":\"Marcus Ericsson\",\"fastest\":101.041,\"constructor\":\"Sauber\"},{\"driver\":\"Max Verstappen\",\"fastest\":98.06,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":97.893,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Brendon Hartley\",\"fastest\":99.979,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":99.666,\"constructor\":\"Williams\"},{\"driver\":\"Esteban Ocon\",\"fastest\":100.499,\"constructor\":\"Force India\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":97.767,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":100.462,\"constructor\":\"Renault\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":100.349,\"constructor\":\"McLaren\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":97.766,\"constructor\":\"Ferrari\"}],\"Mexican Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":78.892,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":78.785,\"constructor\":\"Ferrari\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":80.972,\"constructor\":\"McLaren\"},{\"driver\":\"Carlos Sainz\",\"fastest\":81.36,\"constructor\":\"Renault\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":79.374,\"constructor\":\"Mercedes\"},{\"driver\":\"Pascal Wehrlein\",\"fastest\":81.638,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":79.929,\"constructor\":\"Force India\"},{\"driver\":\"Lance Stroll\",\"fastest\":81.062,\"constructor\":\"Williams\"},{\"driver\":\"Pierre Gasly\",\"fastest\":80.859,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":80.345,\"constructor\":\"Haas F1 Team\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":71.044,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":72.492,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":73.451,\"constructor\":\"McLaren\"},{\"driver\":\"Carlos Sainz\",\"fastest\":73.625,\"constructor\":\"Renault\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":71.845,\"constructor\":\"Mercedes\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":73.666,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":73.052,\"constructor\":\"Force India\"},{\"driver\":\"Lance Stroll\",\"fastest\":71.862,\"constructor\":\"Williams\"},{\"driver\":\"Pierre Gasly\",\"fastest\":73.323,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":73.532,\"constructor\":\"Haas F1 Team\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":102.028,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":100.77,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":101.669,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":102.376,\"constructor\":\"Renault\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":100.65,\"constructor\":\"Mercedes\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":103.567,\"constructor\":\"Sauber\"},{\"driver\":\"Esteban Ocon\",\"fastest\":102.609,\"constructor\":\"Force India\"},{\"driver\":\"Lance Stroll\",\"fastest\":102.324,\"constructor\":\"Williams\"},{\"driver\":\"Pierre Gasly\",\"fastest\":103.844,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Romain Grosjean\",\"fastest\":102.437,\"constructor\":\"Haas F1 Team\"}]},\"2018\":{\"Australian Grand Prix\":[{\"driver\":\"Brendon Hartley\",\"fastest\":88.176,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":88.511,\"constructor\":\"Williams\"},{\"driver\":\"Charles Leclerc\",\"fastest\":88.759,\"constructor\":\"Sauber\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":86.444,\"constructor\":\"Mercedes\"},{\"driver\":\"Esteban Ocon\",\"fastest\":87.6,\"constructor\":\"Force India\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":86.958,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":87.081,\"constructor\":\"Renault\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":85.945,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":88.805,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.373,\"constructor\":\"Ferrari\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Esteban Ocon\",\"fastest\":95.043,\"constructor\":\"Force India\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":94.563,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":94.168,\"constructor\":\"McLaren\"},{\"driver\":\"Charles Leclerc\",\"fastest\":95.058,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":94.053,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":94.667,\"constructor\":\"Renault\"},{\"driver\":\"Brendon Hartley\",\"fastest\":94.689,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":98.684,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":93.74,\"constructor\":\"Mercedes\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":94.337,\"constructor\":\"Ferrari\"}],\"Chinese Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":96.456,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":96.878,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":95.785,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":96.881,\"constructor\":\"Renault\"},{\"driver\":\"Romain Grosjean\",\"fastest\":97.41,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Fernando Alonso\",\"fastest\":97.234,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":98.5,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":97.673,\"constructor\":\"Force India\"},{\"driver\":\"Pierre Gasly\",\"fastest\":98.367,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":98.386,\"constructor\":\"Sauber\"}],\"Azerbaijan Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":105.53,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":105.149,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":105.419,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":106.856,\"constructor\":\"Renault\"},{\"driver\":\"Lance Stroll\",\"fastest\":106.815,\"constructor\":\"Williams\"},{\"driver\":\"Sergio Pérez\",\"fastest\":106.206,\"constructor\":\"Force India\"},{\"driver\":\"Pierre Gasly\",\"fastest\":108.035,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Charles Leclerc\",\"fastest\":107.403,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":107.449,\"constructor\":\"McLaren\"},{\"driver\":\"Romain Grosjean\",\"fastest\":106.88,\"constructor\":\"Haas F1 Team\"}],\"Spanish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":79.133,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":79.128,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":78.441,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":80.246,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":81.324,\"constructor\":\"Renault\"},{\"driver\":\"Charles Leclerc\",\"fastest\":82.122,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":81.128,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.727,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":82.095,\"constructor\":\"Williams\"},{\"driver\":\"Brendon Hartley\",\"fastest\":81.439,\"constructor\":\"Toro Rosso\"}],\"Monaco Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":74.26,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":76.065,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":76.27,\"constructor\":\"Mercedes\"},{\"driver\":\"Esteban Ocon\",\"fastest\":77.027,\"constructor\":\"Force India\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":76.864,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":76.061,\"constructor\":\"Renault\"},{\"driver\":\"Pierre Gasly\",\"fastest\":77.099,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":74.944,\"constructor\":\"Williams\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":76.936,\"constructor\":\"Sauber\"},{\"driver\":\"Romain Grosjean\",\"fastest\":74.822,\"constructor\":\"Haas F1 Team\"}],\"Canadian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":73.964,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":73.992,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":73.864,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":75.1,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":75.588,\"constructor\":\"Renault\"},{\"driver\":\"Charles Leclerc\",\"fastest\":75.48,\"constructor\":\"Sauber\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":75.401,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":75.924,\"constructor\":\"Williams\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":75.765,\"constructor\":\"McLaren\"},{\"driver\":\"Pierre Gasly\",\"fastest\":75.699,\"constructor\":\"Toro Rosso\"}],\"French Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":94.225,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":94.275,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":95.638,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":95.425,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Charles Leclerc\",\"fastest\":95.977,\"constructor\":\"Sauber\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":94.398,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":98.319,\"constructor\":\"Force India\"},{\"driver\":\"Fernando Alonso\",\"fastest\":95.133,\"constructor\":\"McLaren\"},{\"driver\":\"Brendon Hartley\",\"fastest\":96.839,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":98.3,\"constructor\":\"Williams\"}],\"Austrian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":67.241,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":67.442,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":66.957,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":68.476,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":68.766,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":68.504,\"constructor\":\"Force India\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":68.971,\"constructor\":\"Williams\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":68.216,\"constructor\":\"Sauber\"},{\"driver\":\"Brendon Hartley\",\"fastest\":69.171,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":68.661,\"constructor\":\"McLaren\"}],\"British Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":90.696,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":91.245,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":91.589,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":93.405,\"constructor\":\"Renault\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":93.675,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":93.472,\"constructor\":\"Force India\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":93.604,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.482,\"constructor\":\"McLaren\"},{\"driver\":\"Pierre Gasly\",\"fastest\":93.465,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":93.869,\"constructor\":\"Williams\"}],\"German Grand Prix\":[{\"driver\":\"Kimi Räikkönen\",\"fastest\":75.99,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":75.545,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":75.852,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":76.716,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":77.43,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":77.867,\"constructor\":\"Force India\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":77.745,\"constructor\":\"Sauber\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":77.537,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":78.861,\"constructor\":\"Williams\"},{\"driver\":\"Brendon Hartley\",\"fastest\":77.681,\"constructor\":\"Toro Rosso\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":81.107,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":80.056,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":80.012,\"constructor\":\"Red Bull\"},{\"driver\":\"Pierre Gasly\",\"fastest\":81.685,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":81.302,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":81.261,\"constructor\":\"Renault\"},{\"driver\":\"Fernando Alonso\",\"fastest\":82.09,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Ocon\",\"fastest\":82.876,\"constructor\":\"Force India\"},{\"driver\":\"Lance Stroll\",\"fastest\":82.66,\"constructor\":\"Williams\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":83.671,\"constructor\":\"Sauber\"}],\"Belgian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":106.644,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":106.286,\"constructor\":\"Mercedes\"},{\"driver\":\"Esteban Ocon\",\"fastest\":108.078,\"constructor\":\"Force India\"},{\"driver\":\"Max Verstappen\",\"fastest\":106.946,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":107.937,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":108.588,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":108.694,\"constructor\":\"Sauber\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":109.113,\"constructor\":\"Williams\"},{\"driver\":\"Carlos Sainz\",\"fastest\":108.67,\"constructor\":\"Renault\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":108.956,\"constructor\":\"McLaren\"}],\"Italian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":82.505,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":82.497,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":83.609,\"constructor\":\"Red Bull\"},{\"driver\":\"Romain Grosjean\",\"fastest\":84.243,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":84.056,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":83.529,\"constructor\":\"Force India\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":83.768,\"constructor\":\"Williams\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":84.772,\"constructor\":\"McLaren\"},{\"driver\":\"Pierre Gasly\",\"fastest\":84.767,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":83.768,\"constructor\":\"Sauber\"}],\"Singapore Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":102.913,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":104.669,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":103.12,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.389,\"constructor\":\"Force India\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":101.905,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Fernando Alonso\",\"fastest\":103.164,\"constructor\":\"McLaren\"},{\"driver\":\"Carlos Sainz\",\"fastest\":105.211,\"constructor\":\"Renault\"},{\"driver\":\"Brendon Hartley\",\"fastest\":104.889,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":105.169,\"constructor\":\"Sauber\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":105.902,\"constructor\":\"Williams\"}],\"Russian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":95.861,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":95.99,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":98.015,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":97.931,\"constructor\":\"Sauber\"},{\"driver\":\"Sergio Pérez\",\"fastest\":98.3,\"constructor\":\"Force India\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":99.108,\"constructor\":\"Renault\"},{\"driver\":\"Max Verstappen\",\"fastest\":96.283,\"constructor\":\"Red Bull\"},{\"driver\":\"Lance Stroll\",\"fastest\":99.435,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":99.59,\"constructor\":\"McLaren\"},{\"driver\":\"Pierre Gasly\",\"fastest\":104.071,\"constructor\":\"Toro Rosso\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":92.785,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":93.187,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":92.318,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":94.786,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":94.133,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":94.073,\"constructor\":\"Force India\"},{\"driver\":\"Carlos Sainz\",\"fastest\":94.197,\"constructor\":\"Renault\"},{\"driver\":\"Charles Leclerc\",\"fastest\":94.515,\"constructor\":\"Sauber\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.943,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":93.354,\"constructor\":\"Williams\"}],\"United States Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":98.28,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":97.392,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":98.246,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":99.548,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":99.569,\"constructor\":\"Force India\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":98.963,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Lance Stroll\",\"fastest\":100.433,\"constructor\":\"Williams\"},{\"driver\":\"Pierre Gasly\",\"fastest\":99.646,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":99.24,\"constructor\":\"McLaren\"},{\"driver\":\"Marcus Ericsson\",\"fastest\":100.098,\"constructor\":\"Sauber\"}],\"Mexican Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":79.186,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":78.741,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":79.522,\"constructor\":\"Ferrari\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":80.637,\"constructor\":\"Renault\"},{\"driver\":\"Charles Leclerc\",\"fastest\":80.537,\"constructor\":\"Sauber\"},{\"driver\":\"Esteban Ocon\",\"fastest\":82.629,\"constructor\":\"Force India\"},{\"driver\":\"Stoffel Vandoorne\",\"fastest\":81.921,\"constructor\":\"McLaren\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":82.64,\"constructor\":\"Williams\"},{\"driver\":\"Romain Grosjean\",\"fastest\":81.37,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Brendon Hartley\",\"fastest\":82.438,\"constructor\":\"Toro Rosso\"}],\"Brazilian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":70.54,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":70.831,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":71.343,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":72.082,\"constructor\":\"Sauber\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":72.206,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Brendon Hartley\",\"fastest\":72.949,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Esteban Ocon\",\"fastest\":72.352,\"constructor\":\"Force India\"},{\"driver\":\"Carlos Sainz\",\"fastest\":72.169,\"constructor\":\"Renault\"},{\"driver\":\"Fernando Alonso\",\"fastest\":72.643,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":71.751,\"constructor\":\"Williams\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":100.953,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":100.867,\"constructor\":\"Ferrari\"},{\"driver\":\"Charles Leclerc\",\"fastest\":102.876,\"constructor\":\"Sauber\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.249,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":102.822,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergio Pérez\",\"fastest\":102.816,\"constructor\":\"Force India\"},{\"driver\":\"Carlos Sainz\",\"fastest\":101.351,\"constructor\":\"Renault\"},{\"driver\":\"Pierre Gasly\",\"fastest\":103.988,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Fernando Alonso\",\"fastest\":102.393,\"constructor\":\"McLaren\"},{\"driver\":\"Sergey Sirotkin\",\"fastest\":103.831,\"constructor\":\"Williams\"}]},\"2019\":{\"Australian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":85.58,\"constructor\":\"Mercedes\"},{\"driver\":\"Charles Leclerc\",\"fastest\":86.926,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":86.256,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":88.182,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":88.444,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":88.27,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Lando Norris\",\"fastest\":88.555,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":87.448,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":87.568,\"constructor\":\"Racing Point\"},{\"driver\":\"George Russell\",\"fastest\":88.713,\"constructor\":\"Williams\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":93.411,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":93.528,\"constructor\":\"Mercedes\"},{\"driver\":\"Pierre Gasly\",\"fastest\":95.291,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":95.586,\"constructor\":\"McLaren\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":95.892,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":95.237,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":95.215,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":96.33,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":94.934,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":97.313,\"constructor\":\"Williams\"}],\"Chinese Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":94.872,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":94.836,\"constructor\":\"Ferrari\"},{\"driver\":\"Pierre Gasly\",\"fastest\":94.742,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":98.632,\"constructor\":\"Renault\"},{\"driver\":\"Lance Stroll\",\"fastest\":96.678,\"constructor\":\"Racing Point\"},{\"driver\":\"Romain Grosjean\",\"fastest\":96.873,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":97.812,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":97.283,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":97.975,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Carlos Sainz\",\"fastest\":97.502,\"constructor\":\"McLaren\"}],\"Azerbaijan Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":104.024,\"constructor\":\"Mercedes\"},{\"driver\":\"Charles Leclerc\",\"fastest\":103.009,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":105.524,\"constructor\":\"Racing Point\"},{\"driver\":\"Max Verstappen\",\"fastest\":104.794,\"constructor\":\"Red Bull\"},{\"driver\":\"Lando Norris\",\"fastest\":105.394,\"constructor\":\"McLaren\"},{\"driver\":\"Alexander Albon\",\"fastest\":105.754,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":106.767,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":106.682,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":105.969,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":107.251,\"constructor\":\"Williams\"}],\"Spanish Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.492,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":79.769,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":79.82,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":80.77,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":80.726,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Carlos Sainz\",\"fastest\":80.859,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":80.615,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":81.859,\"constructor\":\"Racing Point\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.382,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":82.382,\"constructor\":\"Williams\"}],\"Monaco Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":75.163,\"constructor\":\"Mercedes\"},{\"driver\":\"Pierre Gasly\",\"fastest\":74.279,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":76.277,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":75.697,\"constructor\":\"Renault\"},{\"driver\":\"Romain Grosjean\",\"fastest\":76.746,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":75.891,\"constructor\":\"McLaren\"},{\"driver\":\"Alexander Albon\",\"fastest\":75.607,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":76.379,\"constructor\":\"Racing Point\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":76.299,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":77.038,\"constructor\":\"Williams\"}],\"Canadian Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":74.356,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":73.078,\"constructor\":\"Mercedes\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":75.995,\"constructor\":\"Renault\"},{\"driver\":\"Max Verstappen\",\"fastest\":74.767,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":76.471,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":76.198,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":76.043,\"constructor\":\"Racing Point\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":75.442,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":77.241,\"constructor\":\"Williams\"},{\"driver\":\"Romain Grosjean\",\"fastest\":76.245,\"constructor\":\"Haas F1 Team\"}],\"French Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":92.764,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":92.74,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":94.162,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":94.561,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":94.95,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":94.754,\"constructor\":\"Renault\"},{\"driver\":\"Lance Stroll\",\"fastest\":94.924,\"constructor\":\"Racing Point\"},{\"driver\":\"Romain Grosjean\",\"fastest\":95.691,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Alexander Albon\",\"fastest\":95.029,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":95.83,\"constructor\":\"Williams\"}],\"Austrian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":67.676,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":68.05,\"constructor\":\"Mercedes\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":69.051,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Carlos Sainz\",\"fastest\":68.117,\"constructor\":\"McLaren\"},{\"driver\":\"Max Verstappen\",\"fastest\":67.475,\"constructor\":\"Red Bull\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":68.903,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergio Pérez\",\"fastest\":69.061,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":68.019,\"constructor\":\"Renault\"},{\"driver\":\"George Russell\",\"fastest\":69.926,\"constructor\":\"Williams\"},{\"driver\":\"Alexander Albon\",\"fastest\":68.946,\"constructor\":\"Toro Rosso\"}],\"British Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":87.369,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":88.733,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":89.272,\"constructor\":\"Red Bull\"},{\"driver\":\"Lando Norris\",\"fastest\":89.636,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":89.624,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":89.91,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":90.034,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Lance Stroll\",\"fastest\":89.39,\"constructor\":\"Racing Point\"},{\"driver\":\"George Russell\",\"fastest\":91.013,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":93.425,\"constructor\":\"Haas F1 Team\"}],\"German Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":77.485,\"constructor\":\"Mercedes\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":77.507,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Max Verstappen\",\"fastest\":76.645,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":89.576,\"constructor\":\"Renault\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":76.794,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":78.811,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Carlos Sainz\",\"fastest\":77.841,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":77.831,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":77.708,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":79.3,\"constructor\":\"Williams\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":77.103,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":78.528,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":79.786,\"constructor\":\"Ferrari\"},{\"driver\":\"Carlos Sainz\",\"fastest\":81.002,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.88,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":81.008,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":80.839,\"constructor\":\"Renault\"},{\"driver\":\"Lance Stroll\",\"fastest\":80.603,\"constructor\":\"Racing Point\"},{\"driver\":\"Alexander Albon\",\"fastest\":80.621,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":82.386,\"constructor\":\"Williams\"}],\"Belgian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":106.409,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":106.465,\"constructor\":\"Mercedes\"},{\"driver\":\"Lando Norris\",\"fastest\":108.321,\"constructor\":\"McLaren\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":108.677,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Lance Stroll\",\"fastest\":108.357,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":108.143,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":107.56,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Alexander Albon\",\"fastest\":107.507,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":108.349,\"constructor\":\"Renault\"},{\"driver\":\"George Russell\",\"fastest\":108.86,\"constructor\":\"Williams\"}],\"Italian Grand Prix\":[{\"driver\":\"Sebastian Vettel\",\"fastest\":82.799,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":81.779,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":83.466,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":83.77,\"constructor\":\"Racing Point\"},{\"driver\":\"Lando Norris\",\"fastest\":84.044,\"constructor\":\"McLaren\"},{\"driver\":\"Max Verstappen\",\"fastest\":83.143,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":84.419,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":84.443,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":83.885,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":84.842,\"constructor\":\"Williams\"}],\"Singapore Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":104.723,\"constructor\":\"Ferrari\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":103.534,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":105.176,\"constructor\":\"Red Bull\"},{\"driver\":\"Lando Norris\",\"fastest\":105.716,\"constructor\":\"McLaren\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":105.63,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":102.301,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":104.371,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Lance Stroll\",\"fastest\":104.896,\"constructor\":\"Racing Point\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":105.765,\"constructor\":\"Renault\"},{\"driver\":\"Robert Kubica\",\"fastest\":106.793,\"constructor\":\"Williams\"}],\"Russian Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":96.193,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":95.761,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":98.02,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":98.043,\"constructor\":\"Racing Point\"},{\"driver\":\"Alexander Albon\",\"fastest\":96.762,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.519,\"constructor\":\"Renault\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":98.13,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":98.589,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":98.228,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":101.705,\"constructor\":\"Williams\"}],\"Japanese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":90.983,\"constructor\":\"Mercedes\"},{\"driver\":\"Charles Leclerc\",\"fastest\":91.611,\"constructor\":\"Ferrari\"},{\"driver\":\"Carlos Sainz\",\"fastest\":93.563,\"constructor\":\"McLaren\"},{\"driver\":\"Alexander Albon\",\"fastest\":92.775,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":93.239,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":92.621,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":93.481,\"constructor\":\"Renault\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":92.369,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":91.732,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"George Russell\",\"fastest\":95.458,\"constructor\":\"Williams\"}],\"Mexican Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":79.232,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Albon\",\"fastest\":79.325,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":80.311,\"constructor\":\"McLaren\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":79.461,\"constructor\":\"Mercedes\"},{\"driver\":\"Pierre Gasly\",\"fastest\":79.53,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Sergio Pérez\",\"fastest\":80.485,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":80.146,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.082,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Romain Grosjean\",\"fastest\":81.581,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Robert Kubica\",\"fastest\":80.696,\"constructor\":\"Williams\"}],\"United States Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":96.957,\"constructor\":\"Mercedes\"},{\"driver\":\"Alexander Albon\",\"fastest\":98.029,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":96.169,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":98.074,\"constructor\":\"McLaren\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":98.437,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":98.969,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":100.347,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.608,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Sergio Pérez\",\"fastest\":100.165,\"constructor\":\"Racing Point\"},{\"driver\":\"George Russell\",\"fastest\":101.239,\"constructor\":\"Williams\"}],\"Brazilian Grand Prix\":[{\"driver\":\"George Russell\",\"fastest\":73.752,\"constructor\":\"Williams\"},{\"driver\":\"Lando Norris\",\"fastest\":72.328,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":72.385,\"constructor\":\"Toro Rosso\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":72.733,\"constructor\":\"Renault\"},{\"driver\":\"Lance Stroll\",\"fastest\":72.603,\"constructor\":\"Racing Point\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":71.384,\"constructor\":\"Ferrari\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":73.02,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":73.262,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Max Verstappen\",\"fastest\":70.862,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":70.698,\"constructor\":\"Mercedes\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":99.283,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":100.128,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":101.119,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":101.294,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":101.19,\"constructor\":\"Renault\"},{\"driver\":\"Romain Grosjean\",\"fastest\":103.666,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergio Pérez\",\"fastest\":102.639,\"constructor\":\"Racing Point\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":103.142,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":102.222,\"constructor\":\"Toro Rosso\"},{\"driver\":\"George Russell\",\"fastest\":103.074,\"constructor\":\"Williams\"}]},\"2020\":{\"Austrian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":67.657,\"constructor\":\"Mercedes\"},{\"driver\":\"Alexander Albon\",\"fastest\":68.432,\"constructor\":\"Red Bull\"},{\"driver\":\"Lando Norris\",\"fastest\":67.475,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":68.305,\"constructor\":\"Racing Point\"},{\"driver\":\"Charles Leclerc\",\"fastest\":67.901,\"constructor\":\"Ferrari\"},{\"driver\":\"Esteban Ocon\",\"fastest\":68.912,\"constructor\":\"Renault\"},{\"driver\":\"Pierre Gasly\",\"fastest\":69.025,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Romain Grosjean\",\"fastest\":70.228,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":68.796,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":69.317,\"constructor\":\"Williams\"}],\"Styrian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":66.719,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":66.145,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":65.619,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":67.832,\"constructor\":\"Renault\"},{\"driver\":\"Pierre Gasly\",\"fastest\":67.827,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Charles Leclerc\",\"fastest\":92.548,\"constructor\":\"Ferrari\"},{\"driver\":\"Sergio Pérez\",\"fastest\":67.188,\"constructor\":\"Racing Point\"},{\"driver\":\"George Russell\",\"fastest\":68.601,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":68.009,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":68.382,\"constructor\":\"Alfa Romeo\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":76.627,\"constructor\":\"Mercedes\"},{\"driver\":\"Lance Stroll\",\"fastest\":78.973,\"constructor\":\"Racing Point\"},{\"driver\":\"Max Verstappen\",\"fastest\":79.184,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":80.363,\"constructor\":\"Ferrari\"},{\"driver\":\"Carlos Sainz\",\"fastest\":79.457,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":79.532,\"constructor\":\"Renault\"},{\"driver\":\"George Russell\",\"fastest\":79.984,\"constructor\":\"Williams\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":80.946,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":80.096,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":80.477,\"constructor\":\"Haas F1 Team\"}],\"British Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":89.238,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":87.097,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":89.813,\"constructor\":\"Ferrari\"},{\"driver\":\"Carlos Sainz\",\"fastest\":89.948,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":89.482,\"constructor\":\"Renault\"},{\"driver\":\"Lance Stroll\",\"fastest\":90.475,\"constructor\":\"Racing Point\"},{\"driver\":\"Pierre Gasly\",\"fastest\":89.603,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":89.973,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Romain Grosjean\",\"fastest\":89.782,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":90.501,\"constructor\":\"Williams\"}],\"70th Anniversary Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.451,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":89.465,\"constructor\":\"Red Bull\"},{\"driver\":\"Nico Hülkenberg\",\"fastest\":90.087,\"constructor\":\"Racing Point\"},{\"driver\":\"Esteban Ocon\",\"fastest\":90.575,\"constructor\":\"Renault\"},{\"driver\":\"Pierre Gasly\",\"fastest\":90.092,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Carlos Sainz\",\"fastest\":90.556,\"constructor\":\"McLaren\"},{\"driver\":\"Charles Leclerc\",\"fastest\":90.552,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":90.793,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":91.756,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":89.95,\"constructor\":\"Williams\"}],\"Spanish Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":78.183,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":81.477,\"constructor\":\"Red Bull\"},{\"driver\":\"Lance Stroll\",\"fastest\":82.024,\"constructor\":\"Racing Point\"},{\"driver\":\"Carlos Sainz\",\"fastest\":81.771,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":82.336,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":82.707,\"constructor\":\"Ferrari\"},{\"driver\":\"Esteban Ocon\",\"fastest\":82.174,\"constructor\":\"Renault\"},{\"driver\":\"Romain Grosjean\",\"fastest\":80.409,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":81.801,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":82.03,\"constructor\":\"Williams\"}],\"Belgian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":107.758,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":108.305,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":107.483,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":108.389,\"constructor\":\"Racing Point\"},{\"driver\":\"Charles Leclerc\",\"fastest\":107.84,\"constructor\":\"Ferrari\"},{\"driver\":\"Pierre Gasly\",\"fastest\":107.839,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lando Norris\",\"fastest\":108.552,\"constructor\":\"McLaren\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":109.822,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":108.083,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":108.048,\"constructor\":\"Williams\"}],\"Italian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":82.746,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":83.882,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":83.897,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":83.898,\"constructor\":\"Renault\"},{\"driver\":\"Alexander Albon\",\"fastest\":84.888,\"constructor\":\"Red Bull\"},{\"driver\":\"Pierre Gasly\",\"fastest\":84.037,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":84.835,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Charles Leclerc\",\"fastest\":86.026,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":84.785,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"George Russell\",\"fastest\":84.421,\"constructor\":\"Williams\"}],\"Tuscan Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.833,\"constructor\":\"Mercedes\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":81.202,\"constructor\":\"Ferrari\"},{\"driver\":\"Alexander Albon\",\"fastest\":80.039,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":80.632,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":80.426,\"constructor\":\"Renault\"},{\"driver\":\"Lando Norris\",\"fastest\":81.198,\"constructor\":\"McLaren\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":81.458,\"constructor\":\"AlphaTauri\"},{\"driver\":\"George Russell\",\"fastest\":81.645,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":128.433,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":130.612,\"constructor\":\"Alfa Romeo\"}],\"Russian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":97.03,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":97.332,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":97.886,\"constructor\":\"Renault\"},{\"driver\":\"Sergio Pérez\",\"fastest\":98.141,\"constructor\":\"Racing Point\"},{\"driver\":\"Pierre Gasly\",\"fastest\":97.231,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Charles Leclerc\",\"fastest\":99.053,\"constructor\":\"Ferrari\"},{\"driver\":\"Romain Grosjean\",\"fastest\":99.614,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":98.858,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":97.352,\"constructor\":\"Williams\"},{\"driver\":\"Lando Norris\",\"fastest\":97.377,\"constructor\":\"McLaren\"}],\"Eifel Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":88.145,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":88.139,\"constructor\":\"Red Bull\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":90.408,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":89.584,\"constructor\":\"Renault\"},{\"driver\":\"Carlos Sainz\",\"fastest\":90.129,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":89.7,\"constructor\":\"Racing Point\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":90.512,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Pierre Gasly\",\"fastest\":90.11,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":90.456,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":91.377,\"constructor\":\"Williams\"}],\"Portuguese Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.75,\"constructor\":\"Mercedes\"},{\"driver\":\"Lando Norris\",\"fastest\":79.36,\"constructor\":\"McLaren\"},{\"driver\":\"Max Verstappen\",\"fastest\":79.854,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":80.408,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.058,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Esteban Ocon\",\"fastest\":80.859,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":80.449,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Sergio Pérez\",\"fastest\":80.802,\"constructor\":\"Racing Point\"},{\"driver\":\"George Russell\",\"fastest\":80.882,\"constructor\":\"Williams\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":81.46,\"constructor\":\"Haas F1 Team\"}],\"Emilia Romagna Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":75.484,\"constructor\":\"Mercedes\"},{\"driver\":\"Alexander Albon\",\"fastest\":76.177,\"constructor\":\"Red Bull\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":77.552,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":77.666,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":77.767,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":78.069,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":78.084,\"constructor\":\"Racing Point\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":78.719,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":78.088,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Romain Grosjean\",\"fastest\":78.822,\"constructor\":\"Haas F1 Team\"}],\"Turkish Grand Prix\":[{\"driver\":\"Lance Stroll\",\"fastest\":99.921,\"constructor\":\"Racing Point\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":99.662,\"constructor\":\"Ferrari\"},{\"driver\":\"Max Verstappen\",\"fastest\":98.431,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":98.193,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":100.677,\"constructor\":\"Renault\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":99.743,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Lando Norris\",\"fastest\":96.806,\"constructor\":\"McLaren\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":100.948,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":99.586,\"constructor\":\"AlphaTauri\"},{\"driver\":\"George Russell\",\"fastest\":100.814,\"constructor\":\"Williams\"}],\"Bahrain Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":92.864,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":92.014,\"constructor\":\"Red Bull\"},{\"driver\":\"Sergio Pérez\",\"fastest\":93.629,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":92.827,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":94.141,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Carlos Sainz\",\"fastest\":93.411,\"constructor\":\"McLaren\"},{\"driver\":\"Charles Leclerc\",\"fastest\":93.625,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":93.573,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":95.241,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":94.591,\"constructor\":\"Williams\"}],\"Sakhir Grand Prix\":[{\"driver\":\"George Russell\",\"fastest\":55.404,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":57.165,\"constructor\":\"McLaren\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":56.979,\"constructor\":\"Renault\"},{\"driver\":\"Daniil Kvyat\",\"fastest\":57.001,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Sergio Pérez\",\"fastest\":56.789,\"constructor\":\"Racing Point\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":56.905,\"constructor\":\"Ferrari\"},{\"driver\":\"Kevin Magnussen\",\"fastest\":57.516,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Alexander Albon\",\"fastest\":57.056,\"constructor\":\"Red Bull\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":56.887,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Jack Aitken\",\"fastest\":57.392,\"constructor\":\"Williams\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":100.958,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":101.131,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":101.947,\"constructor\":\"McLaren\"},{\"driver\":\"Pierre Gasly\",\"fastest\":102.474,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lance Stroll\",\"fastest\":101.866,\"constructor\":\"Racing Point\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":100.926,\"constructor\":\"Renault\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":101.475,\"constructor\":\"Ferrari\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":101.675,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":102.497,\"constructor\":\"Williams\"},{\"driver\":\"Pietro Fittipaldi\",\"fastest\":101.707,\"constructor\":\"Haas F1 Team\"}]},\"2021\":{\"Bahrain Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":93.228,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":92.09,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":94.509,\"constructor\":\"Ferrari\"},{\"driver\":\"Pierre Gasly\",\"fastest\":94.09,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lando Norris\",\"fastest\":94.396,\"constructor\":\"McLaren\"},{\"driver\":\"Esteban Ocon\",\"fastest\":95.25,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Lance Stroll\",\"fastest\":94.865,\"constructor\":\"Aston Martin\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":95.122,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":95.036,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":96.134,\"constructor\":\"Haas F1 Team\"}],\"Emilia Romagna Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":77.524,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":76.702,\"constructor\":\"Mercedes\"},{\"driver\":\"Charles Leclerc\",\"fastest\":78.379,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":78.259,\"constructor\":\"McLaren\"},{\"driver\":\"Yuki Tsunoda\",\"fastest\":78.353,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lance Stroll\",\"fastest\":78.994,\"constructor\":\"Aston Martin\"},{\"driver\":\"George Russell\",\"fastest\":86.543,\"constructor\":\"Williams\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":79.422,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Fernando Alonso\",\"fastest\":79.396,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Mick Schumacher\",\"fastest\":79.193,\"constructor\":\"Haas F1 Team\"}],\"Portuguese Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":79.865,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":79.849,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":81.496,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":81.696,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":81.032,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":82.014,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lance Stroll\",\"fastest\":81.97,\"constructor\":\"Aston Martin\"},{\"driver\":\"George Russell\",\"fastest\":82.654,\"constructor\":\"Williams\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":82.167,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":82.755,\"constructor\":\"Haas F1 Team\"}],\"Spanish Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":78.149,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":79.43,\"constructor\":\"Mercedes\"},{\"driver\":\"Charles Leclerc\",\"fastest\":80.459,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":81.279,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":81.182,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Lance Stroll\",\"fastest\":82.607,\"constructor\":\"Aston Martin\"},{\"driver\":\"Pierre Gasly\",\"fastest\":81.375,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":82.802,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":82.637,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":82.905,\"constructor\":\"Williams\"}],\"Monaco Grand Prix\":[{\"driver\":\"Sergio Pérez\",\"fastest\":74.552,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":72.909,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":74.621,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":74.578,\"constructor\":\"McLaren\"},{\"driver\":\"Yuki Tsunoda\",\"fastest\":74.037,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lance Stroll\",\"fastest\":74.674,\"constructor\":\"Aston Martin\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":74.971,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Fernando Alonso\",\"fastest\":75.026,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"George Russell\",\"fastest\":75.539,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":76.425,\"constructor\":\"Haas F1 Team\"}],\"Azerbaijan Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":105.382,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":104.769,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":104.481,\"constructor\":\"Red Bull\"},{\"driver\":\"Yuki Tsunoda\",\"fastest\":104.939,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Fernando Alonso\",\"fastest\":105.624,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":104.89,\"constructor\":\"Aston Martin\"},{\"driver\":\"Lando Norris\",\"fastest\":105.326,\"constructor\":\"McLaren\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":105.575,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":105.959,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":107.624,\"constructor\":\"Haas F1 Team\"}],\"French Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":96.96,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":96.404,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":97.681,\"constructor\":\"Ferrari\"},{\"driver\":\"Pierre Gasly\",\"fastest\":98.103,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Fernando Alonso\",\"fastest\":97.646,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Lando Norris\",\"fastest\":97.425,\"constructor\":\"McLaren\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":97.138,\"constructor\":\"Aston Martin\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":97.992,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":98.313,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":98.847,\"constructor\":\"Haas F1 Team\"}],\"Styrian Grand Prix\":[{\"driver\":\"Sergio Pérez\",\"fastest\":67.894,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":67.058,\"constructor\":\"Mercedes\"},{\"driver\":\"Lando Norris\",\"fastest\":68.903,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":69.787,\"constructor\":\"Aston Martin\"},{\"driver\":\"Esteban Ocon\",\"fastest\":69.576,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":70.104,\"constructor\":\"Williams\"},{\"driver\":\"Yuki Tsunoda\",\"fastest\":69.65,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Carlos Sainz\",\"fastest\":68.609,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":69.128,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":70.005,\"constructor\":\"Haas F1 Team\"}],\"Austrian Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":66.2,\"constructor\":\"Red Bull\"},{\"driver\":\"Lando Norris\",\"fastest\":68.471,\"constructor\":\"McLaren\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":68.126,\"constructor\":\"Mercedes\"},{\"driver\":\"Pierre Gasly\",\"fastest\":68.146,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":68.42,\"constructor\":\"Aston Martin\"},{\"driver\":\"Carlos Sainz\",\"fastest\":67.762,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":68.52,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":68.874,\"constructor\":\"Williams\"},{\"driver\":\"Fernando Alonso\",\"fastest\":68.405,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Mick Schumacher\",\"fastest\":69.394,\"constructor\":\"Haas F1 Team\"}],\"British Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":90.569,\"constructor\":\"Ferrari\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":89.699,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":91.284,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":91.992,\"constructor\":\"Aston Martin\"},{\"driver\":\"Fernando Alonso\",\"fastest\":91.698,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":91.895,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Pierre Gasly\",\"fastest\":90.266,\"constructor\":\"AlphaTauri\"},{\"driver\":\"George Russell\",\"fastest\":92.049,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":92.862,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Sergio Pérez\",\"fastest\":88.617,\"constructor\":\"Red Bull\"}],\"Hungarian Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":78.715,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.359,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":81.459,\"constructor\":\"Aston Martin\"},{\"driver\":\"Carlos Sainz\",\"fastest\":81.423,\"constructor\":\"Ferrari\"},{\"driver\":\"Pierre Gasly\",\"fastest\":78.394,\"constructor\":\"AlphaTauri\"},{\"driver\":\"George Russell\",\"fastest\":82.112,\"constructor\":\"Williams\"},{\"driver\":\"Max Verstappen\",\"fastest\":80.945,\"constructor\":\"Red Bull\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":81.518,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":82.711,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":82.802,\"constructor\":\"McLaren\"}],\"Belgian Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":207.071,\"constructor\":\"Red Bull\"},{\"driver\":\"George Russell\",\"fastest\":209.066,\"constructor\":\"Williams\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":209.672,\"constructor\":\"Mercedes\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":211.567,\"constructor\":\"McLaren\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":214.55,\"constructor\":\"Aston Martin\"},{\"driver\":\"Pierre Gasly\",\"fastest\":217.248,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Esteban Ocon\",\"fastest\":218.65,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Charles Leclerc\",\"fastest\":219.679,\"constructor\":\"Ferrari\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":231.234,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":236.578,\"constructor\":\"Haas F1 Team\"}],\"Dutch Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":73.275,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":71.097,\"constructor\":\"Mercedes\"},{\"driver\":\"Pierre Gasly\",\"fastest\":74.818,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Charles Leclerc\",\"fastest\":74.78,\"constructor\":\"Ferrari\"},{\"driver\":\"Fernando Alonso\",\"fastest\":74.323,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Lando Norris\",\"fastest\":74.236,\"constructor\":\"McLaren\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":75.125,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":75.628,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":73.958,\"constructor\":\"Aston Martin\"},{\"driver\":\"Mick Schumacher\",\"fastest\":75.927,\"constructor\":\"Haas F1 Team\"}],\"Italian Grand Prix\":[{\"driver\":\"Daniel Ricciardo\",\"fastest\":84.812,\"constructor\":\"McLaren\"},{\"driver\":\"Sergio Pérez\",\"fastest\":85.156,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":84.827,\"constructor\":\"Mercedes\"},{\"driver\":\"Charles Leclerc\",\"fastest\":85.319,\"constructor\":\"Ferrari\"},{\"driver\":\"Lance Stroll\",\"fastest\":85.853,\"constructor\":\"Aston Martin\"},{\"driver\":\"Fernando Alonso\",\"fastest\":85.472,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"George Russell\",\"fastest\":85.835,\"constructor\":\"Williams\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":85.718,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":86.707,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":89.005,\"constructor\":\"AlphaTauri\"}],\"Russian Grand Prix\":[{\"driver\":\"Charles Leclerc\",\"fastest\":98.994,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":97.423,\"constructor\":\"McLaren\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":100,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":99.251,\"constructor\":\"Aston Martin\"},{\"driver\":\"Fernando Alonso\",\"fastest\":98.686,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":97.575,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":98.396,\"constructor\":\"Red Bull\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":99.058,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":100.276,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":98.279,\"constructor\":\"AlphaTauri\"}],\"Turkish Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":90.432,\"constructor\":\"Mercedes\"},{\"driver\":\"Sergio Pérez\",\"fastest\":92.459,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":91.921,\"constructor\":\"Ferrari\"},{\"driver\":\"Pierre Gasly\",\"fastest\":92.814,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lando Norris\",\"fastest\":92.446,\"constructor\":\"McLaren\"},{\"driver\":\"Lance Stroll\",\"fastest\":92.608,\"constructor\":\"Aston Martin\"},{\"driver\":\"Fernando Alonso\",\"fastest\":93.252,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":92.586,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":93.399,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":94.209,\"constructor\":\"Haas F1 Team\"}],\"United States Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":98.485,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":99.096,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":99.303,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":100.228,\"constructor\":\"McLaren\"},{\"driver\":\"Yuki Tsunoda\",\"fastest\":101.151,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":100.792,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Fernando Alonso\",\"fastest\":100.067,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"George Russell\",\"fastest\":101.12,\"constructor\":\"Williams\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":100.481,\"constructor\":\"Aston Martin\"},{\"driver\":\"Mick Schumacher\",\"fastest\":101.395,\"constructor\":\"Haas F1 Team\"}],\"Mexico City Grand Prix\":[{\"driver\":\"Max Verstappen\",\"fastest\":78.999,\"constructor\":\"Red Bull\"},{\"driver\":\"Valtteri Bottas\",\"fastest\":77.774,\"constructor\":\"Mercedes\"},{\"driver\":\"Pierre Gasly\",\"fastest\":80.51,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Carlos Sainz\",\"fastest\":80.081,\"constructor\":\"Ferrari\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":80.713,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":80.46,\"constructor\":\"Aston Martin\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":81.546,\"constructor\":\"Williams\"},{\"driver\":\"Nikita Mazepin\",\"fastest\":81.402,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"Fernando Alonso\",\"fastest\":80.711,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Lando Norris\",\"fastest\":80.617,\"constructor\":\"McLaren\"}],\"Sao Paulo Grand Prix\":[{\"driver\":\"Sergio Pérez\",\"fastest\":71.01,\"constructor\":\"Red Bull\"},{\"driver\":\"Lewis Hamilton\",\"fastest\":71.982,\"constructor\":\"Mercedes\"},{\"driver\":\"Carlos Sainz\",\"fastest\":72.71,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":73.634,\"constructor\":\"Aston Martin\"},{\"driver\":\"Pierre Gasly\",\"fastest\":73.227,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Lando Norris\",\"fastest\":73.761,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":73.922,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":72.621,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Mick Schumacher\",\"fastest\":73.793,\"constructor\":\"Haas F1 Team\"},{\"driver\":\"George Russell\",\"fastest\":74.355,\"constructor\":\"Williams\"}],\"Qatar Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":85.084,\"constructor\":\"Mercedes\"},{\"driver\":\"Fernando Alonso\",\"fastest\":86.682,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":87.019,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Max Verstappen\",\"fastest\":83.196,\"constructor\":\"Red Bull\"},{\"driver\":\"Lando Norris\",\"fastest\":85.746,\"constructor\":\"McLaren\"},{\"driver\":\"Charles Leclerc\",\"fastest\":86.555,\"constructor\":\"Ferrari\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":86.434,\"constructor\":\"Aston Martin\"},{\"driver\":\"Kimi Räikkönen\",\"fastest\":86.358,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"George Russell\",\"fastest\":85.768,\"constructor\":\"Williams\"},{\"driver\":\"Nikita Mazepin\",\"fastest\":87.34,\"constructor\":\"Haas F1 Team\"}],\"Saudi Arabian Grand Prix\":[{\"driver\":\"Valtteri Bottas\",\"fastest\":1193.967,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":1190.175,\"constructor\":\"Red Bull\"},{\"driver\":\"Charles Leclerc\",\"fastest\":1194.398,\"constructor\":\"Ferrari\"},{\"driver\":\"Daniel Ricciardo\",\"fastest\":1193.15,\"constructor\":\"McLaren\"},{\"driver\":\"Fernando Alonso\",\"fastest\":91.633,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Pierre Gasly\",\"fastest\":1196.151,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":1197.442,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":94.03,\"constructor\":\"Aston Martin\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":1186.542,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":96.043,\"constructor\":\"Haas F1 Team\"}],\"Abu Dhabi Grand Prix\":[{\"driver\":\"Lewis Hamilton\",\"fastest\":86.615,\"constructor\":\"Mercedes\"},{\"driver\":\"Max Verstappen\",\"fastest\":86.103,\"constructor\":\"Red Bull\"},{\"driver\":\"Carlos Sainz\",\"fastest\":87.618,\"constructor\":\"Ferrari\"},{\"driver\":\"Lando Norris\",\"fastest\":86.762,\"constructor\":\"McLaren\"},{\"driver\":\"Pierre Gasly\",\"fastest\":87.342,\"constructor\":\"AlphaTauri\"},{\"driver\":\"Fernando Alonso\",\"fastest\":87.607,\"constructor\":\"Alpine F1 Team\"},{\"driver\":\"Antonio Giovinazzi\",\"fastest\":89.442,\"constructor\":\"Alfa Romeo\"},{\"driver\":\"Sebastian Vettel\",\"fastest\":88.303,\"constructor\":\"Aston Martin\"},{\"driver\":\"Nicholas Latifi\",\"fastest\":89.293,\"constructor\":\"Williams\"},{\"driver\":\"Mick Schumacher\",\"fastest\":89.457,\"constructor\":\"Haas F1 Team\"}]}}");

},{}],"fSYCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ScrollyEvent", ()=>ScrollyEvent
);
parcelHelpers.export(exports, "ScrollManager", ()=>ScrollManager
);
let ScrollyEvent;
(function(ScrollyEvent1) {
    ScrollyEvent1[ScrollyEvent1["Started"] = 0] = "Started";
    ScrollyEvent1[ScrollyEvent1["Finished"] = 1] = "Finished";
})(ScrollyEvent || (ScrollyEvent = {}));
class ScrollManager {
    set progress(progress) {
        if (progress > 100 || progress < 0) throw Error('Invalid progress');
        // if is already finished before update, we are moving backward again
        if (this.scrollyFinished) this.stateCallbacks.forEach((cb)=>cb(ScrollyEvent.Started)
        );
        const forward = progress > this._progress;
        this._progress = progress;
        this.updateProgressElem();
        this.progressCallbacks.forEach((cb)=>cb({
                progress: this.progress,
                forward
            })
        );
        // if finished after update, we are done
        if (this.scrollyFinished) this.stateCallbacks.forEach((cb)=>cb(ScrollyEvent.Finished)
        );
    }
    get progress() {
        return this._progress;
    }
    constructor(d3, onboardingManager){
        this.onboardingManager = onboardingManager;
        this.homepage = true;
        this._progress = 0;
        this.stateCallbacks = [];
        this.progressCallbacks = [];
        this.atCheckpoint = false;
        this.isEnabled = false;
        this.checkpoints = [
            2,
            24,
            60,
            76
        ];
        this.carElem = document.querySelector('#car');
        const width = document.querySelector('.progress-svg').clientWidth;
        d3.select('.svg-checkpoint-marker').selectAll('circle').data(this.checkpoints).enter().append('circle').attr('fill', 'red').attr('r', 15).attr('cx', (d)=>`${width * d / 100 + 15}`
        ).attr('cy', 15);
        window.addEventListener('wheel', (ev)=>this.handleScrollEvent(ev)
        );
        this.onboardingManager.onOnboardingFinished(()=>this.enable()
        );
    }
    enable() {
        this.isEnabled = true;
    }
    onScrollyStateChange(cb) {
        this.stateCallbacks.push(cb);
    }
    onScrollyProgress(cb) {
        this.progressCallbacks.push(cb);
    }
    // Call this method to simulate sticky behaviour
    // Will ignore scrolling events for a second
    reachedCheckpoint() {
        this.atCheckpoint = true;
        setTimeout(()=>this.atCheckpoint = false
        , 1000);
    }
    updateProgressElem() {
        if (this.carElem == null) return;
        this.carElem.setAttribute('x', `${this.progress}%`);
    }
    handleScrollEvent(ev) {
        ev.stopImmediatePropagation();
        if (this.homepage && ev.deltaY > 0) {
            this.homepage = false;
            let onboard = document.querySelector(`#onboarding`);
            // Wait for the little animation to complete
            setTimeout(()=>{
                this.onboardingManager.startOnboarding();
            }, 1000);
            onboard.classList.remove('visible');
            onboard.classList.add('hidden');
            return;
        }
        if (!this.isEnabled) return;
        if (this.progress == 0 && ev.deltaY < 0) {
            if (!this.homepage) {
                this.homepage = true;
                let onboard = document.querySelector(`#onboarding`);
                onboard.classList.remove('hidden');
                onboard.classList.add('visible');
            }
            return;
        }
        if (this.scrollyFinished && ev.deltaY > 0) return;
        if (this.atCheckpoint) return;
        this.progress += ev.deltaY > 0 ? 2 : -2;
    }
    get scrollyFinished() {
        return this.progress == 100;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ioqJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VisibilityTarget", ()=>VisibilityTarget
);
parcelHelpers.export(exports, "VisibilityManager", ()=>VisibilityManager
);
let VisibilityTarget;
(function(VisibilityTarget1) {
    VisibilityTarget1["ScrollyOnly"] = 'scrolly-only';
    VisibilityTarget1["DashboardOnly"] = 'dashboard-only';
    VisibilityTarget1["Onboarding"] = 'onboarding';
})(VisibilityTarget || (VisibilityTarget = {}));
class VisibilityManager {
    // Used to keep initial css display value
    nodes = new Map();
    hide(target) {
        document.querySelectorAll(`.${target}`).forEach((elem)=>{
            if (!this.nodes.has(elem)) this.nodes.set(elem, elem.style.display);
            elem.removeAttribute('entering');
            elem.style.display = 'none';
        });
    }
    show(target) {
        document.querySelectorAll(`.${target}`).forEach((elem)=>{
            const display = this.nodes.get(elem) ?? 'block';
            elem.setAttribute('entering', '');
            elem.style.display = display;
        });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZssj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OnboardingManager", ()=>OnboardingManager
);
const HINTS = [
    {
        msg: "Cette piste de course permet de visualiser la progression du Scrolly-Telling. Les cercles rouges représentent des changements d'époque importante.",
        target: '.progress-svg',
        offset: 230
    },
    {
        msg: "Sur les graphiques, les lignes rouges verticales représentent un changement dans le règlement de la Formule 1. Survolez les pour avoir plus de détails.",
        target: '#graph-2',
        offset: 220
    },
    {
        msg: "Une fois arrivé à la fin, différents contrôles apparaîtront et vous serez libre de sélectionner par vous même un grand prix spécifique, et comparer les temps de course avec les temps en qualification. \n\nBonne découverte!",
        target: '.progress-svg',
        offset: 450
    }, 
];
const ID = 'onboarding-popup';
class OnboardingManager {
    cbs = [];
    currentHint = -1;
    completed = false;
    constructor(){
        this.wrapper = document.createElement('div');
        this.wrapper.setAttribute('id', ID);
        this.textElem = document.createElement('p');
        const button = document.createElement('button');
        button.innerText = "Continuer";
        button.addEventListener('click', ()=>{
            this.removeHint();
            this.nextMessage();
        });
        this.wrapper.append(this.textElem);
        this.wrapper.append(button);
    }
    startOnboarding() {
        if (this.completed) return;
        this.nextMessage();
    }
    onOnboardingFinished(cb) {
        this.cbs.push(cb);
    }
    nextMessage() {
        if (this.currentHint + 1 == HINTS.length) {
            this.completed = true;
            this.cbs.forEach((cb)=>cb()
            );
            return;
        }
        this.currentHint += 1;
        const hint = HINTS[this.currentHint];
        const target = document.querySelector(hint.target);
        const boundingRect = target.getBoundingClientRect();
        const hintLeft = boundingRect.left + boundingRect.width / 2 - 100;
        const hintTop = boundingRect.top - hint.offset;
        this.render(hintLeft, hintTop, hint.msg);
    }
    render(x, y, message) {
        this.textElem.innerText = message;
        this.wrapper.style.left = `${x}px`;
        this.wrapper.style.top = `${y}px`;
        document.body.append(this.wrapper);
    }
    removeHint() {
        document.body.removeChild(this.wrapper);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9XsVr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ContentManager", ()=>ContentManager
);
var _utils = require("./utils");
const PERIODS = [
    {
        range: [
            1994,
            1999
        ],
        tag: _utils.SCROLLYOPTION.FERRARI_VS_WILLIAMS,
        constructors: [
            _utils.CONSTRUCTOR.FERRARI,
            _utils.CONSTRUCTOR.WILLIAMS
        ],
        html: `
    <h4 class="card-title">Les débuts</h4>
    <p>Les années 90 sont marquées par l'interdiction
    des assistances électroniques. Les châssis sont donc nerveux,
    difficiles à piloter.</p>
    <p>À cette époque, Ferrari et Williams dominent la compétition.</p>
    `
    },
    {
        range: [
            2000,
            2009
        ],
        tag: _utils.SCROLLYOPTION.ANNEES_2000,
        constructors: [],
        html: `
    <h5 class="card-title">Années 2000</h5>
    <p>Dans les années 2000, la Formule 1 vise à réduire la vitesse des voitures
    pour des raisons évidentes de sécurité.</p>
    <p>Les moteurs sont désormais obligatoirement des V10, l'aérodynamique des châssis
    commence à être définie très précisément afin de réduire la force d'appui qu'ils
    génèrent, et ainsi réduire les vitesses en virage.</p>
`
    },
    {
        range: [
            2010,
            2013
        ],
        tag: _utils.SCROLLYOPTION.ANNEES_2010,
        constructors: [],
        html: `
    <h5 class="card-title">Années 2010</h5>
    <p>Courant les années 2010, le règlement vise à rendre le sport plus
    spectaculaire. Son but est donc de resserrer l'écart entre les
    écuries</p>
    <p>La principale mesure prise consiste à limiter le budget alloué aux
    écuries. Malheureusement, en comparaison aux années 2000, les écuries
    ayant le moins de moyen sont tout de même affectées par les limitations
    de budget et l'écart a plutôt tendance à augmenter qu'à se réduire.</p>
`
    },
    {
        range: [
            2014,
            2021
        ],
        tag: _utils.SCROLLYOPTION.TURBOHYBRID,
        constructors: [],
        html: `
    <h5 class="card-title">Ère contemporaine de la Formule 1</h5>
    <p>En 2014, le règlement impose de nouveaux moteurs aux équipes : 1.6L compressés,
    boite 8, hybride, et doivent maintenant durer minimum 4000km.</p>
    <p>C'est le début de l'ère turbo-hybride, qui a continué jusqu'à la saison dernière
    (2021).</p>
`
    }
];
const MIN_YEAR = 1994;
const MAX_YEAR = 2021;
class ContentManager {
    currentPeriodIndex = -1;
    periodChanged(progress) {
        const year = this.getCorrespondingYear(progress);
        const periodIndex = this.getPeriodIndex(year);
        if (periodIndex === this.currentPeriodIndex) return false;
        this.currentPeriodIndex = periodIndex;
        return true;
    }
    getContent() {
        return PERIODS[this.currentPeriodIndex];
    }
    getCorrespondingYear(progress) {
        return MIN_YEAR + Math.floor((MAX_YEAR - MIN_YEAR) * progress / 100);
    }
    getPeriodIndex(year) {
        return PERIODS.findIndex((period)=>{
            return year >= period.range[0] && year <= period.range[1];
        });
    }
}

},{"./utils":"isRWn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["8wcER","h7u1C"], "h7u1C", "parcelRequire716c")

//# sourceMappingURL=index.b71e74eb.js.map
