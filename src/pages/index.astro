---
import Layout from '../layouts/Layout.astro';
import Score from '../components/Score.astro';

import { getCollection } from 'astro:content';


const scores = await getCollection('scores');
const thumbnails = import.meta.glob('../thumbnails/*', { as: 'url', eager: true });
const scoreToUrl = Object.entries(thumbnails).reduce((urlMap, [path, url]) => {
	const score = scores.find(s => path.includes(s.data.filename));
	if (score) {
		urlMap[score.data.filename] = url;
	}

	return urlMap;
}, {} as Record<string, string>)
---

<Layout title="Welcome to Astro.">
	<header>
		<h1>Scores</h1>
	</header>
	<main>
		{scores.map(score => (
			<Score score={score} thumbnail={scoreToUrl[score.data.filename]}/>
		))}
	</main>
</Layout>

<style>
	main {
		display: flex;
		justify-content: center;
		padding: 1.5rem;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
